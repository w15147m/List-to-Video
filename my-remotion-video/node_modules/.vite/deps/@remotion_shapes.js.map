{
  "version": 3,
  "sources": ["../../@remotion/shapes/dist/esm/index.mjs"],
  "sourcesContent": ["// src/utils/make-circle.ts\nimport { serializeInstructions } from \"@remotion/paths\";\nvar makeCircle = ({ radius }) => {\n  const instructions = [\n    {\n      type: \"M\",\n      x: radius,\n      y: 0\n    },\n    {\n      type: \"a\",\n      rx: radius,\n      ry: radius,\n      xAxisRotation: 0,\n      largeArcFlag: true,\n      sweepFlag: true,\n      dx: 0,\n      dy: radius * 2\n    },\n    {\n      type: \"a\",\n      rx: radius,\n      ry: radius,\n      xAxisRotation: 0,\n      largeArcFlag: true,\n      sweepFlag: true,\n      dx: 0,\n      dy: -radius * 2\n    },\n    {\n      type: \"Z\"\n    }\n  ];\n  const path = serializeInstructions(instructions);\n  return {\n    height: radius * 2,\n    width: radius * 2,\n    path,\n    instructions,\n    transformOrigin: `${radius} ${radius}`\n  };\n};\n\n// src/components/render-svg.tsx\nimport React, { useMemo } from \"react\";\nimport { version } from \"react-dom\";\n\n// src/utils/does-react-support-canary.ts\nvar doesReactSupportTransformOriginProperty = (version) => {\n  if (version.includes(\"canary\") || version.includes(\"experimental\")) {\n    const last8Chars = parseInt(version.slice(-8), 10);\n    return last8Chars > 20230209;\n  }\n  const [major] = version.split(\".\").map(Number);\n  return major > 18;\n};\n\n// src/components/render-svg.tsx\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar RenderSvg = ({\n  width,\n  height,\n  path,\n  style,\n  pathStyle,\n  transformOrigin,\n  debug,\n  instructions,\n  ...props\n}) => {\n  const actualStyle = useMemo(() => {\n    return {\n      overflow: \"visible\",\n      ...style ?? {}\n    };\n  }, [style]);\n  const actualPathStyle = useMemo(() => {\n    return {\n      transformBox: \"fill-box\",\n      ...pathStyle ?? {}\n    };\n  }, [pathStyle]);\n  const reactSupportsTransformOrigin = doesReactSupportTransformOriginProperty(version);\n  return /* @__PURE__ */ jsxs(\"svg\", {\n    width,\n    height,\n    viewBox: `0 0 ${width} ${height}`,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    style: actualStyle,\n    children: [\n      /* @__PURE__ */ jsx(\"path\", {\n        ...reactSupportsTransformOrigin ? {\n          transformOrigin\n        } : {\n          \"transform-origin\": transformOrigin\n        },\n        d: path,\n        style: actualPathStyle,\n        ...props\n      }),\n      debug ? instructions.map((i, index) => {\n        if (i.type === \"C\") {\n          const prevInstruction = index === 0 ? instructions[instructions.length - 1] : instructions[index - 1];\n          if (prevInstruction.type === \"V\" || prevInstruction.type === \"H\" || prevInstruction.type === \"a\" || prevInstruction.type === \"Z\" || prevInstruction.type === \"t\" || prevInstruction.type === \"q\" || prevInstruction.type === \"l\" || prevInstruction.type === \"c\" || prevInstruction.type === \"m\" || prevInstruction.type === \"h\" || prevInstruction.type === \"s\" || prevInstruction.type === \"v\") {\n            return null;\n          }\n          const prevX = prevInstruction.x;\n          const prevY = prevInstruction.y;\n          return /* @__PURE__ */ jsxs(React.Fragment, {\n            children: [\n              /* @__PURE__ */ jsx(\"path\", {\n                d: `M ${prevX} ${prevY} ${i.cp1x} ${i.cp1y}`,\n                strokeWidth: 2,\n                stroke: \"rgba(0, 0, 0, 0.4)\"\n              }),\n              /* @__PURE__ */ jsx(\"path\", {\n                d: `M ${i.x} ${i.y} ${i.cp2x} ${i.cp2y}`,\n                strokeWidth: 2,\n                stroke: \"rgba(0, 0, 0, 0.4)\"\n              }),\n              /* @__PURE__ */ jsx(\"circle\", {\n                cx: i.cp1x,\n                cy: i.cp1y,\n                r: 3,\n                fill: \"white\",\n                strokeWidth: 2,\n                stroke: \"black\"\n              }),\n              /* @__PURE__ */ jsx(\"circle\", {\n                cx: i.cp2x,\n                cy: i.cp2y,\n                r: 3,\n                strokeWidth: 2,\n                fill: \"white\",\n                stroke: \"black\"\n              })\n            ]\n          }, index);\n        }\n        return null;\n      }) : null\n    ]\n  });\n};\n\n// src/components/circle.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar Circle = ({ radius, ...props }) => {\n  return /* @__PURE__ */ jsx2(RenderSvg, {\n    ...makeCircle({ radius }),\n    ...props\n  });\n};\n// src/utils/make-ellipse.ts\nimport { serializeInstructions as serializeInstructions2 } from \"@remotion/paths\";\nvar makeEllipse = ({ rx, ry }) => {\n  const instructions = [\n    {\n      type: \"M\",\n      x: rx,\n      y: 0\n    },\n    {\n      type: \"a\",\n      rx,\n      ry,\n      xAxisRotation: 0,\n      largeArcFlag: true,\n      sweepFlag: false,\n      dx: 1,\n      dy: 0\n    },\n    {\n      type: \"Z\"\n    }\n  ];\n  const path = serializeInstructions2(instructions);\n  return {\n    width: rx * 2,\n    height: ry * 2,\n    path,\n    instructions,\n    transformOrigin: `${rx} ${ry}`\n  };\n};\n\n// src/components/ellipse.tsx\nimport { jsx as jsx3 } from \"react/jsx-runtime\";\nvar Ellipse = ({ rx, ry, ...props }) => {\n  return /* @__PURE__ */ jsx3(RenderSvg, {\n    ...makeEllipse({ rx, ry }),\n    ...props\n  });\n};\n// src/utils/make-heart.ts\nimport { serializeInstructions as serializeInstructions3 } from \"@remotion/paths\";\nvar makeHeart = ({\n  height,\n  aspectRatio = 1.1,\n  bottomRoundnessAdjustment = 0,\n  depthAdjustment = 0\n}) => {\n  const width = height * aspectRatio;\n  const bottomControlPointX = 23 / 110 * width + bottomRoundnessAdjustment * width;\n  const bottomControlPointY = 69 / 100 * height;\n  const bottomLeftControlPointY = 60 / 100 * height;\n  const topLeftControlPoint = 13 / 100 * height;\n  const topBezierWidth = 29 / 110 * width;\n  const topRightControlPointX = 15 / 110 * width;\n  const innerControlPointX = 5 / 110 * width;\n  const innerControlPointY = 7 / 100 * height;\n  const depth = 17 / 100 * height + depthAdjustment * height;\n  const instructions = [\n    {\n      type: \"M\",\n      x: width / 2,\n      y: height\n    },\n    {\n      type: \"C\",\n      cp1x: width / 2 - bottomControlPointX,\n      cp1y: bottomControlPointY,\n      cp2x: 0,\n      cp2y: bottomLeftControlPointY,\n      x: 0,\n      y: height / 4\n    },\n    {\n      type: \"C\",\n      cp1x: 0,\n      cp1y: topLeftControlPoint,\n      cp2x: width / 4 - topBezierWidth / 2,\n      cp2y: 0,\n      x: width / 4,\n      y: 0\n    },\n    {\n      type: \"C\",\n      cp1x: width / 4 + topBezierWidth / 2,\n      cp1y: 0,\n      cp2x: width / 2 - innerControlPointX,\n      cp2y: innerControlPointY,\n      x: width / 2,\n      y: depth\n    },\n    {\n      type: \"C\",\n      cp1x: width / 2 + innerControlPointX,\n      cp1y: innerControlPointY,\n      cp2x: width / 2 + topRightControlPointX,\n      cp2y: 0,\n      x: width / 4 * 3,\n      y: 0\n    },\n    {\n      type: \"C\",\n      cp1x: width / 4 * 3 + topBezierWidth / 2,\n      cp1y: 0,\n      cp2x: width,\n      cp2y: topLeftControlPoint,\n      x: width,\n      y: height / 4\n    },\n    {\n      type: \"C\",\n      x: width / 2,\n      y: height,\n      cp1x: width,\n      cp1y: bottomLeftControlPointY,\n      cp2x: width / 2 + bottomControlPointX,\n      cp2y: bottomControlPointY\n    },\n    {\n      type: \"Z\"\n    }\n  ];\n  const path = serializeInstructions3(instructions);\n  return {\n    path,\n    width,\n    height,\n    transformOrigin: `${width / 2} ${height / 2}`,\n    instructions\n  };\n};\n\n// src/components/heart.tsx\nimport { jsx as jsx4 } from \"react/jsx-runtime\";\nvar Heart = ({\n  aspectRatio,\n  height,\n  bottomRoundnessAdjustment = 0,\n  depthAdjustment = 0,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx4(RenderSvg, {\n    ...makeHeart({\n      aspectRatio,\n      height,\n      bottomRoundnessAdjustment,\n      depthAdjustment\n    }),\n    ...props\n  });\n};\n// src/utils/make-pie.ts\nimport { serializeInstructions as serializeInstructions4 } from \"@remotion/paths\";\nvar getCoord = ({\n  counterClockwise,\n  actualProgress,\n  rotation,\n  radius,\n  coord\n}) => {\n  const factor = counterClockwise ? -1 : 1;\n  const val = Math[coord === \"x\" ? \"cos\" : \"sin\"](factor * actualProgress * Math.PI * 2 + Math.PI * 1.5 + rotation) * radius + radius;\n  const rounded = Math.round(val * 1e5) / 1e5;\n  return rounded;\n};\nvar makePie = ({\n  progress,\n  radius,\n  closePath = true,\n  counterClockwise = false,\n  rotation = 0\n}) => {\n  const actualProgress = Math.min(Math.max(progress, 0), 1);\n  const endAngleX = getCoord({\n    actualProgress,\n    coord: \"x\",\n    counterClockwise,\n    radius,\n    rotation\n  });\n  const endAngleY = getCoord({\n    actualProgress,\n    coord: \"y\",\n    counterClockwise,\n    radius,\n    rotation\n  });\n  const start = {\n    x: getCoord({\n      actualProgress: 0,\n      coord: \"x\",\n      counterClockwise,\n      radius,\n      rotation\n    }),\n    y: getCoord({\n      actualProgress: 0,\n      coord: \"y\",\n      counterClockwise,\n      radius,\n      rotation\n    })\n  };\n  const end = { x: endAngleX, y: endAngleY };\n  const instructions = [\n    {\n      type: \"M\",\n      ...start\n    },\n    {\n      type: \"A\",\n      rx: radius,\n      ry: radius,\n      xAxisRotation: 0,\n      largeArcFlag: false,\n      sweepFlag: !counterClockwise,\n      x: actualProgress <= 0.5 ? endAngleX : getCoord({\n        actualProgress: 0.5,\n        coord: \"x\",\n        counterClockwise,\n        radius,\n        rotation\n      }),\n      y: actualProgress <= 0.5 ? endAngleY : getCoord({\n        actualProgress: 0.5,\n        coord: \"y\",\n        counterClockwise,\n        radius,\n        rotation\n      })\n    },\n    actualProgress > 0.5 ? {\n      type: \"A\",\n      rx: radius,\n      ry: radius,\n      xAxisRotation: 0,\n      largeArcFlag: false,\n      sweepFlag: !counterClockwise,\n      ...end\n    } : null,\n    actualProgress > 0 && actualProgress < 1 && closePath ? {\n      type: \"L\",\n      x: radius,\n      y: radius\n    } : null,\n    closePath ? {\n      type: \"Z\"\n    } : null\n  ].filter(Boolean);\n  const path = serializeInstructions4(instructions);\n  return {\n    height: radius * 2,\n    width: radius * 2,\n    path,\n    instructions,\n    transformOrigin: `${radius} ${radius}`\n  };\n};\n\n// src/components/pie.tsx\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nvar Pie = ({\n  radius,\n  progress,\n  closePath,\n  counterClockwise,\n  rotation,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx5(RenderSvg, {\n    ...makePie({ radius, progress, closePath, counterClockwise, rotation }),\n    ...props\n  });\n};\n// src/utils/make-polygon.ts\nimport {\n  PathInternals,\n  reduceInstructions,\n  resetPath,\n  serializeInstructions as serializeInstructions5\n} from \"@remotion/paths\";\n\n// src/utils/join-points.ts\nvar shortenVector = (vector, radius) => {\n  const [x, y] = vector;\n  const currentLength = Math.sqrt(x * x + y * y);\n  const scalingFactor = (currentLength - radius) / currentLength;\n  return [x * scalingFactor, y * scalingFactor];\n};\nvar scaleVectorToLength = (vector, length) => {\n  const [x, y] = vector;\n  const currentLength = Math.sqrt(x * x + y * y);\n  const scalingFactor = length / currentLength;\n  return [x * scalingFactor, y * scalingFactor];\n};\nvar joinPoints = (points, {\n  edgeRoundness,\n  cornerRadius,\n  roundCornerStrategy\n}) => {\n  return points.map(([x, y], i) => {\n    const prevPointIndex = i === 0 ? points.length - 2 : i - 1;\n    const prevPoint = points[prevPointIndex];\n    const nextPointIndex = i === points.length - 1 ? 1 : i + 1;\n    const nextPoint = points[nextPointIndex];\n    const middleOfLine = [(x + nextPoint[0]) / 2, (y + nextPoint[1]) / 2];\n    const prevPointMiddleOfLine = [\n      (x + prevPoint[0]) / 2,\n      (y + prevPoint[1]) / 2\n    ];\n    const prevVector = [x - prevPoint[0], y - prevPoint[1]];\n    const nextVector = [nextPoint[0] - x, nextPoint[1] - y];\n    if (i === 0) {\n      if (edgeRoundness !== null) {\n        return [\n          {\n            type: \"M\",\n            x: middleOfLine[0],\n            y: middleOfLine[1]\n          }\n        ];\n      }\n      if (cornerRadius !== 0) {\n        const computeRadius = shortenVector(nextVector, cornerRadius);\n        return [\n          {\n            type: \"M\",\n            x: computeRadius[0] + x,\n            y: computeRadius[1] + y\n          }\n        ];\n      }\n      return [\n        {\n          type: \"M\",\n          x,\n          y\n        }\n      ];\n    }\n    if (cornerRadius && edgeRoundness !== null) {\n      throw new Error(`\"cornerRadius\" and \"edgeRoundness\" cannot be specified at the same time.`);\n    }\n    if (edgeRoundness === null) {\n      if (cornerRadius === 0) {\n        return [\n          {\n            type: \"L\",\n            x,\n            y\n          }\n        ];\n      }\n      const prevVectorMinusRadius = shortenVector(prevVector, cornerRadius);\n      const prevVectorLength = scaleVectorToLength(prevVector, cornerRadius);\n      const nextVectorMinusRadius = scaleVectorToLength(nextVector, cornerRadius);\n      const firstDraw = [\n        prevPoint[0] + prevVectorMinusRadius[0],\n        prevPoint[1] + prevVectorMinusRadius[1]\n      ];\n      return [\n        {\n          type: \"L\",\n          x: firstDraw[0],\n          y: firstDraw[1]\n        },\n        roundCornerStrategy === \"arc\" ? {\n          type: \"a\",\n          rx: cornerRadius,\n          ry: cornerRadius,\n          xAxisRotation: 0,\n          dx: prevVectorLength[0] + nextVectorMinusRadius[0],\n          dy: prevVectorLength[1] + nextVectorMinusRadius[1],\n          largeArcFlag: false,\n          sweepFlag: true\n        } : {\n          type: \"C\",\n          x: firstDraw[0] + prevVectorLength[0] + nextVectorMinusRadius[0],\n          y: firstDraw[1] + prevVectorLength[1] + nextVectorMinusRadius[1],\n          cp1x: x,\n          cp1y: y,\n          cp2x: x,\n          cp2y: y\n        }\n      ];\n    }\n    const controlPoint1 = [\n      prevPointMiddleOfLine[0] + prevVector[0] * edgeRoundness * 0.5,\n      prevPointMiddleOfLine[1] + prevVector[1] * edgeRoundness * 0.5\n    ];\n    const controlPoint2 = [\n      middleOfLine[0] - nextVector[0] * edgeRoundness * 0.5,\n      middleOfLine[1] - nextVector[1] * edgeRoundness * 0.5\n    ];\n    return [\n      {\n        type: \"C\",\n        cp1x: controlPoint1[0],\n        cp1y: controlPoint1[1],\n        cp2x: controlPoint2[0],\n        cp2y: controlPoint2[1],\n        x: middleOfLine[0],\n        y: middleOfLine[1]\n      }\n    ];\n  }).flat(1);\n};\n\n// src/utils/make-polygon.ts\nfunction polygon({\n  points,\n  radius,\n  centerX,\n  centerY,\n  cornerRadius,\n  edgeRoundness\n}) {\n  const degreeIncrement = Math.PI * 2 / points;\n  const d = new Array(points).fill(0).map((_, i) => {\n    const angle = degreeIncrement * i - Math.PI / 2;\n    const point = {\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle)\n    };\n    return [point.x, point.y];\n  });\n  return joinPoints([...d, d[0]], {\n    edgeRoundness,\n    cornerRadius,\n    roundCornerStrategy: cornerRadius > 0 ? \"bezier\" : \"arc\"\n  });\n}\nvar makePolygon = ({\n  points,\n  radius,\n  cornerRadius = 0,\n  edgeRoundness = null\n}) => {\n  if (points < 3) {\n    throw new Error(`\"points\" should be minimum 3, got ${points}`);\n  }\n  const width = 2 * radius;\n  const height = 2 * radius;\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const polygonPathInstructions = polygon({\n    points,\n    radius,\n    centerX,\n    centerY,\n    cornerRadius,\n    edgeRoundness\n  });\n  const reduced = reduceInstructions(polygonPathInstructions);\n  const path = resetPath(serializeInstructions5(reduced));\n  const boundingBox = PathInternals.getBoundingBoxFromInstructions(reduced);\n  return {\n    path,\n    width: boundingBox.width,\n    height: boundingBox.height,\n    transformOrigin: `${centerX} ${centerY}`,\n    instructions: polygonPathInstructions\n  };\n};\n\n// src/components/polygon.tsx\nimport { jsx as jsx6 } from \"react/jsx-runtime\";\nvar Polygon = ({\n  points,\n  radius,\n  cornerRadius,\n  edgeRoundness,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx6(RenderSvg, {\n    ...makePolygon({\n      points,\n      cornerRadius,\n      edgeRoundness,\n      radius\n    }),\n    ...props\n  });\n};\n// src/utils/make-rect.ts\nimport { serializeInstructions as serializeInstructions6 } from \"@remotion/paths\";\nvar makeRect = ({\n  width,\n  height,\n  edgeRoundness = null,\n  cornerRadius = 0\n}) => {\n  const transformOrigin = [width / 2, height / 2];\n  const instructions = [\n    ...joinPoints([\n      [cornerRadius, 0],\n      [width, 0],\n      [width, height],\n      [0, height],\n      [0, 0]\n    ], { edgeRoundness, cornerRadius, roundCornerStrategy: \"arc\" }),\n    {\n      type: \"Z\"\n    }\n  ];\n  const path = serializeInstructions6(instructions);\n  return {\n    width,\n    height,\n    instructions,\n    path,\n    transformOrigin: transformOrigin.join(\" \")\n  };\n};\n\n// src/components/rect.tsx\nimport { jsx as jsx7 } from \"react/jsx-runtime\";\nvar Rect = ({\n  width,\n  edgeRoundness,\n  height,\n  cornerRadius,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx7(RenderSvg, {\n    ...makeRect({ height, width, edgeRoundness, cornerRadius }),\n    ...props\n  });\n};\n// src/utils/make-star.ts\nimport {\n  PathInternals as PathInternals2,\n  reduceInstructions as reduceInstructions2,\n  resetPath as resetPath2,\n  serializeInstructions as serializeInstructions7\n} from \"@remotion/paths\";\nvar star = ({\n  centerX,\n  centerY,\n  points,\n  innerRadius,\n  outerRadius,\n  cornerRadius,\n  edgeRoundness\n}) => {\n  const degreeIncrement = Math.PI * 2 / (points * 2);\n  const d = new Array(points * 2).fill(true).map((_p, i) => {\n    const radius = i % 2 === 0 ? outerRadius : innerRadius;\n    const angle = degreeIncrement * i - Math.PI / 2;\n    const point = {\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle)\n    };\n    return [point.x, point.y];\n  });\n  return [\n    ...joinPoints([...d, d[0]], {\n      edgeRoundness,\n      cornerRadius,\n      roundCornerStrategy: cornerRadius > 0 ? \"bezier\" : \"arc\"\n    }),\n    { type: \"Z\" }\n  ];\n};\nvar makeStar = ({\n  points,\n  innerRadius,\n  outerRadius,\n  cornerRadius = 0,\n  edgeRoundness = null\n}) => {\n  const width = outerRadius * 2;\n  const height = outerRadius * 2;\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const starPathInstructions = star({\n    centerX,\n    centerY,\n    points,\n    innerRadius,\n    outerRadius,\n    cornerRadius,\n    edgeRoundness\n  });\n  const reduced = reduceInstructions2(starPathInstructions);\n  const path = resetPath2(serializeInstructions7(reduced));\n  const boundingBox = PathInternals2.getBoundingBoxFromInstructions(reduced);\n  return {\n    path,\n    width: boundingBox.width,\n    height: boundingBox.height,\n    transformOrigin: `${centerX} ${centerY}`,\n    instructions: starPathInstructions\n  };\n};\n\n// src/components/star.tsx\nimport { jsx as jsx8 } from \"react/jsx-runtime\";\nvar Star = ({\n  innerRadius,\n  outerRadius,\n  points,\n  cornerRadius,\n  edgeRoundness,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx8(RenderSvg, {\n    ...makeStar({\n      innerRadius,\n      outerRadius,\n      points,\n      cornerRadius,\n      edgeRoundness\n    }),\n    ...props\n  });\n};\n// src/utils/make-triangle.ts\nimport { serializeInstructions as serializeInstructions8 } from \"@remotion/paths\";\nvar makeTriangle = ({\n  length,\n  direction = \"right\",\n  edgeRoundness = null,\n  cornerRadius = 0\n}) => {\n  if (typeof length !== \"number\") {\n    throw new Error(`\"length\" of a triangle must be a number, got ${JSON.stringify(length)}`);\n  }\n  const longerDimension = length;\n  const shorterSize = Math.sqrt(length ** 2 * 0.75);\n  const points = {\n    up: [\n      [longerDimension / 2, 0],\n      [0, shorterSize],\n      [longerDimension, shorterSize],\n      [longerDimension / 2, 0]\n    ],\n    right: [\n      [0, 0],\n      [0, longerDimension],\n      [shorterSize, longerDimension / 2],\n      [0, 0]\n    ],\n    down: [\n      [0, 0],\n      [longerDimension, 0],\n      [longerDimension / 2, shorterSize],\n      [0, 0]\n    ],\n    left: [\n      [shorterSize, 0],\n      [shorterSize, longerDimension],\n      [0, longerDimension / 2],\n      [shorterSize, 0]\n    ]\n  };\n  const transformOriginX = {\n    left: shorterSize / 3 * 2,\n    right: shorterSize / 3,\n    up: longerDimension / 2,\n    down: longerDimension / 2\n  }[direction];\n  const transformOriginY = {\n    up: shorterSize / 3 * 2,\n    down: shorterSize / 3,\n    left: longerDimension / 2,\n    right: longerDimension / 2\n  }[direction];\n  const instructions = [\n    ...joinPoints(points[direction], {\n      edgeRoundness,\n      cornerRadius,\n      roundCornerStrategy: \"bezier\"\n    }),\n    {\n      type: \"Z\"\n    }\n  ];\n  const path = serializeInstructions8(instructions);\n  return {\n    path,\n    instructions,\n    width: direction === \"up\" || direction === \"down\" ? length : shorterSize,\n    height: direction === \"up\" || direction === \"down\" ? shorterSize : length,\n    transformOrigin: `${transformOriginX} ${transformOriginY}`\n  };\n};\n\n// src/components/triangle.tsx\nimport { jsx as jsx9 } from \"react/jsx-runtime\";\nvar Triangle = ({\n  length,\n  direction,\n  edgeRoundness,\n  cornerRadius,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx9(RenderSvg, {\n    ...makeTriangle({ length, direction, edgeRoundness, cornerRadius }),\n    ...props\n  });\n};\nexport {\n  makeTriangle,\n  makeStar,\n  makeRect,\n  makePolygon,\n  makePie,\n  makeHeart,\n  makeEllipse,\n  makeCircle,\n  Triangle,\n  Star,\n  Rect,\n  Polygon,\n  Pie,\n  Heart,\n  Ellipse,\n  Circle\n};\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "version", "React", "jsx2", "jsx3", "jsx4", "jsx5", "jsx6", "jsx7", "jsx8", "jsx9"]
}
