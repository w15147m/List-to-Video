import esbuild = require('esbuild');
import webpack = require('webpack');
export declare const BundlerInternals: {
    esbuild: typeof esbuild;
    webpackConfig: ({ entry, userDefinedComponent, outDir, environment, webpackOverride, onProgress, enableCaching, maxTimelineTracks, remotionRoot, keyboardShortcutsEnabled, bufferStateDelayInMilliseconds, poll, }: {
        entry: string;
        userDefinedComponent: string;
        outDir: string | null;
        environment: "development" | "production";
        webpackOverride: import("./webpack-config").WebpackOverrideFn;
        onProgress?: (f: number) => void;
        enableCaching?: boolean;
        maxTimelineTracks: number | null;
        keyboardShortcutsEnabled: boolean;
        bufferStateDelayInMilliseconds: number | null;
        remotionRoot: string;
        poll: number | null;
    }) => Promise<[string, import("./webpack-config").WebpackConfiguration]>;
    indexHtml: ({ publicPath, editorName, inputProps, envVariables, staticHash, remotionRoot, studioServerCommand, renderQueue, numberOfAudioTags, publicFiles, includeFavicon, title, renderDefaults, publicFolderExists, gitSource, projectName, installedDependencies, packageManager, audioLatencyHint, logLevel, mode, }: {
        staticHash: string;
        publicPath: string;
        editorName: string | null;
        inputProps: object | null;
        envVariables?: Record<string, string>;
        remotionRoot: string;
        studioServerCommand: string | null;
        renderQueue: unknown | null;
        numberOfAudioTags: number;
        audioLatencyHint: AudioContextLatencyCategory;
        publicFiles: import("remotion").StaticFile[];
        publicFolderExists: string | null;
        includeFavicon: boolean;
        title: string;
        renderDefaults: import("@remotion/studio-shared").RenderDefaults | undefined;
        gitSource: import("@remotion/studio-shared").GitSource | null;
        projectName: string;
        installedDependencies: string[] | null;
        packageManager: import("@remotion/studio-shared").PackageManager | "unknown";
        logLevel: import("remotion").LogLevel;
        mode: "dev" | "bundle";
    }) => string;
    cacheExists: (remotionRoot: string, environment: "development" | "production", hash: string) => "exists" | "other-exists" | "does-not-exist";
    clearCache: (remotionRoot: string, env: "development" | "production") => Promise<void>;
    getConfig: ({ entryPoint, outDir, resolvedRemotionRoot, onProgress, options, bufferStateDelayInMilliseconds, maxTimelineTracks, }: {
        outDir: string;
        entryPoint: string;
        resolvedRemotionRoot: string;
        bufferStateDelayInMilliseconds: number | null;
        maxTimelineTracks: number | null;
        onProgress?: (progress: number) => void;
        options?: import("./bundle").LegacyBundleOptions;
    }) => Promise<[string, webpack.Configuration]>;
    readRecursively: ({ folder, output, startPath, staticHash, limit, }: {
        folder: string;
        startPath: string;
        output?: import("remotion").StaticFile[];
        staticHash: string;
        limit: number;
    }) => import("remotion").StaticFile[];
    findClosestFolderWithItem: (currentDir: string, file: string) => string | null;
    internalBundle: (actualArgs: {
        entryPoint: string;
    } & {
        entryPoint: string;
        onProgress: (progress: number) => void;
        ignoreRegisterRootWarning: boolean;
        onDirectoryCreated: (dir: string) => void;
        gitSource: import("@remotion/studio-shared").GitSource | null;
        maxTimelineTracks: number | null;
        bufferStateDelayInMilliseconds: number | null;
        audioLatencyHint: AudioContextLatencyCategory | null;
    } & import("./bundle").MandatoryLegacyBundleOptions) => Promise<string>;
};
export type { GitSource } from '@remotion/studio-shared';
export { bundle, BundleOptions, LegacyBundleOptions, MandatoryLegacyBundleOptions, } from './bundle';
export { WebpackConfiguration, WebpackOverrideFn } from './webpack-config';
export { webpack };
