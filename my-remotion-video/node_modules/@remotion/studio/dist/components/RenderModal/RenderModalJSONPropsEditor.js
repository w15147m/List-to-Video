"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderModalJSONPropsEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const no_react_1 = require("remotion/no-react");
const colors_1 = require("../../helpers/colors");
const document_title_1 = require("../../helpers/document-title");
const use_keybinding_1 = require("../../helpers/use-keybinding");
const Button_1 = require("../Button");
const RemTextarea_1 = require("../NewComposition/RemTextarea");
const ValidationMessage_1 = require("../NewComposition/ValidationMessage");
const layout_1 = require("../layout");
const ZodErrorMessages_1 = require("./SchemaEditor/ZodErrorMessages");
const deep_equal_1 = require("./SchemaEditor/deep-equal");
const style = {
    fontFamily: 'monospace',
    flex: 1,
};
const scrollable = {
    padding: '8px 12px',
    display: 'flex',
    flexDirection: 'column',
    flex: 1,
};
const parseJSON = (str, schema) => {
    try {
        const value = no_react_1.NoReactInternals.deserializeJSONWithSpecialTypes(str);
        const zodValidation = schema.safeParse(value);
        return { str, value, validJSON: true, zodValidation };
    }
    catch (e) {
        return { str, validJSON: false, error: e.message };
    }
};
const RenderModalJSONPropsEditor = ({ setValue, value, defaultProps, onSave, showSaveButton, serializedJSON, schema, }) => {
    if (serializedJSON === null) {
        throw new Error('expecting serializedJSON to be defined');
    }
    const keybindings = (0, use_keybinding_1.useKeybinding)();
    const [localValue, setLocalValue] = react_1.default.useState(() => {
        return parseJSON(serializedJSON.serializedString, schema);
    });
    const onPretty = (0, react_1.useCallback)(() => {
        if (!localValue.validJSON) {
            return;
        }
        const parsed = JSON.parse(localValue.str);
        setLocalValue({ ...localValue, str: JSON.stringify(parsed, null, 2) });
    }, [localValue, setLocalValue]);
    const onChange = (0, react_1.useCallback)((e) => {
        const parsed = parseJSON(e.target.value, schema);
        if (parsed.validJSON) {
            const validationResult = schema.safeParse(parsed.value);
            setLocalValue({
                str: e.target.value,
                value: parsed.value,
                validJSON: parsed.validJSON,
                zodValidation: validationResult,
            });
            if (validationResult.success) {
                setValue(parsed.value);
            }
        }
        else {
            setLocalValue({
                str: e.target.value,
                validJSON: parsed.validJSON,
                error: parsed.error,
            });
        }
    }, [schema, setValue]);
    const hasChanged = (0, react_1.useMemo)(() => {
        return !(0, deep_equal_1.deepEqual)(value, defaultProps);
    }, [defaultProps, value]);
    (0, react_1.useEffect)(() => {
        (0, document_title_1.setUnsavedProps)(hasChanged);
    }, [hasChanged]);
    const onQuickSave = (0, react_1.useCallback)(() => {
        if (hasChanged) {
            onSave();
        }
    }, [hasChanged, onSave]);
    // If schema is changed in code
    (0, react_1.useEffect)(() => {
        setLocalValue(parseJSON(localValue.str, schema));
    }, [localValue.str, schema]);
    (0, react_1.useEffect)(() => {
        const save = keybindings.registerKeybinding({
            event: 'keydown',
            key: 's',
            commandCtrlKey: true,
            callback: onQuickSave,
            preventDefault: true,
            triggerIfInputFieldFocused: true,
            keepRegisteredWhenNotHighestContext: false,
        });
        return () => {
            save.unregister();
        };
    }, [keybindings, onQuickSave, onSave]);
    const reset = (0, react_1.useCallback)(() => {
        setValue(defaultProps);
        setLocalValue(parseJSON(JSON.stringify(defaultProps, null, 2), schema));
    }, [defaultProps, schema, setValue]);
    const textAreaStyle = (0, react_1.useMemo)(() => {
        const fail = !localValue.validJSON || !localValue.zodValidation.success;
        if (!fail) {
            return style;
        }
        return {
            ...style,
            borderColor: colors_1.FAIL_COLOR,
        };
    }, [localValue]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: scrollable, children: [(0, jsx_runtime_1.jsx)(RemTextarea_1.RemTextarea, { onChange: onChange, value: localValue.str, status: localValue.validJSON ? 'ok' : 'error', style: textAreaStyle }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { y: 1 }), localValue.validJSON === false ? ((0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-start", message: localValue.error, type: "error" })) : localValue.zodValidation.success === false ? ((0, jsx_runtime_1.jsx)(ZodErrorMessages_1.ZodErrorMessages, { zodValidationResult: localValue.zodValidation, viewTab: "json" })) : null, (0, jsx_runtime_1.jsx)(layout_1.Spacing, { y: 1 }), (0, jsx_runtime_1.jsxs)(layout_1.Row, { children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { disabled: !(hasChanged || !localValue.validJSON), onClick: reset, children: "Reset" }), (0, jsx_runtime_1.jsx)(layout_1.Flex, {}), (0, jsx_runtime_1.jsx)(Button_1.Button, { disabled: !localValue.validJSON, onClick: onPretty, children: "Format" }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), showSaveButton ? ((0, jsx_runtime_1.jsx)(Button_1.Button, { onClick: onSave, disabled: !(localValue.validJSON && localValue.zodValidation.success) ||
                            !localValue.validJSON ||
                            !hasChanged, children: "Save" })) : null] })] }));
};
exports.RenderModalJSONPropsEditor = RenderModalJSONPropsEditor;
