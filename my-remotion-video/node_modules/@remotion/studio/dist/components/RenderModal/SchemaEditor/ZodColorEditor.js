"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodColorEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const color_math_1 = require("../../../helpers/color-math");
const InputDragger_1 = require("../../NewComposition/InputDragger");
const RemInput_1 = require("../../NewComposition/RemInput");
const RemInputTypeColor_1 = require("../../NewComposition/RemInputTypeColor");
const get_zod_if_possible_1 = require("../../get-zod-if-possible");
const layout_1 = require("../../layout");
const Fieldset_1 = require("./Fieldset");
const SchemaLabel_1 = require("./SchemaLabel");
const ZodFieldValidation_1 = require("./ZodFieldValidation");
const local_state_1 = require("./local-state");
const fullWidth = {
    width: '100%',
};
const ZodColorEditor = ({ jsonPath, value, setValue, showSaveButton, defaultValue, schema, onSave, onRemove, saving, saveDisabledByParent, mayPad, }) => {
    const z = (0, get_zod_if_possible_1.useZodIfPossible)();
    if (!z) {
        throw new Error('expected zod');
    }
    const zodTypes = (0, get_zod_if_possible_1.useZodTypesIfPossible)();
    if (!zodTypes) {
        throw new Error('expected zod color');
    }
    const { localValue, onChange: onValueChange, reset, } = (0, local_state_1.useLocalState)({
        schema,
        setValue,
        unsavedValue: value,
        savedValue: defaultValue,
    });
    const { a, b, g, r } = localValue.zodValidation.success
        ? zodTypes.ZodZypesInternals.parseColor(localValue.value)
        : { a: 1, b: 0, g: 0, r: 0 };
    const onChange = (0, react_1.useCallback)((e) => {
        const newColor = (0, color_math_1.colorWithNewOpacity)(e.target.value, Math.round(a), zodTypes);
        onValueChange(() => newColor, false, false);
    }, [a, onValueChange, zodTypes]);
    const onTextChange = (0, react_1.useCallback)((e) => {
        const newValue = e.target.value;
        onValueChange(() => newValue, false, false);
    }, [onValueChange]);
    const save = (0, react_1.useCallback)(() => {
        onSave(() => value, false, false);
    }, [onSave, value]);
    const rgb = `#${r.toString(16).padStart(2, '0')}${g
        .toString(16)
        .padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    const status = localValue.zodValidation.success ? 'ok' : 'error';
    const colorPicker = (0, react_1.useMemo)(() => {
        return {
            height: 39,
            width: 45,
            display: 'inline-block',
        };
    }, []);
    const onOpacityChange = (0, react_1.useCallback)((newValue) => {
        const newColor = (0, color_math_1.colorWithNewOpacity)(localValue.value, Math.round((Number(newValue) / 100) * 255), zodTypes);
        onValueChange(() => newColor, false, false);
    }, [localValue.value, onValueChange, zodTypes]);
    const onOpacityValueChange = (0, react_1.useCallback)((newValue) => {
        const newColor = (0, color_math_1.colorWithNewOpacity)(localValue.value, Math.round((Number(newValue) / 100) * 255), zodTypes);
        onValueChange(() => newColor, false, false);
    }, [localValue.value, onValueChange, zodTypes]);
    return ((0, jsx_runtime_1.jsxs)(Fieldset_1.Fieldset, { shouldPad: mayPad, success: localValue.zodValidation.success, children: [(0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaLabel, { handleClick: null, isDefaultValue: localValue.value === defaultValue, jsonPath: jsonPath, onReset: reset, onSave: save, showSaveButton: showSaveButton, onRemove: onRemove, saving: saving, valid: localValue.zodValidation.success, saveDisabledByParent: saveDisabledByParent, suffix: null }), (0, jsx_runtime_1.jsxs)("div", { style: fullWidth, children: [(0, jsx_runtime_1.jsxs)(layout_1.Row, { align: "center", children: [(0, jsx_runtime_1.jsx)("div", { style: colorPicker, children: (0, jsx_runtime_1.jsx)(RemInputTypeColor_1.RemInputTypeColor, { type: "color", style: {
                                        height: 39,
                                    }, value: rgb, onChange: onChange, className: "__remotion_color_picker", status: status, name: jsonPath.join('.') }) }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1, block: true }), (0, jsx_runtime_1.jsx)(RemInput_1.RemotionInput, { value: localValue.value, status: status, placeholder: jsonPath.join('.'), onChange: onTextChange, rightAlign: false }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)(InputDragger_1.InputDragger, { onTextChange: onOpacityChange, onValueChange: onOpacityValueChange, status: status, value: (a / 255) * 100, min: 0, max: 100, step: 1, formatter: (v) => `${Math.round(Number(v))}%`, rightAlign: false })] }), (0, jsx_runtime_1.jsx)(ZodFieldValidation_1.ZodFieldValidation, { path: jsonPath, localValue: localValue })] })] }));
};
exports.ZodColorEditor = ZodColorEditor;
