"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodMatrixEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const get_zod_if_possible_1 = require("../../get-zod-if-possible");
const Fieldset_1 = require("./Fieldset");
const SchemaLabel_1 = require("./SchemaLabel");
const SchemaSeparationLine_1 = require("./SchemaSeparationLine");
const SchemaVerticalGuide_1 = require("./SchemaVerticalGuide");
const ZodArrayItemEditor_1 = require("./ZodArrayItemEditor");
const ZodFieldValidation_1 = require("./ZodFieldValidation");
const create_zod_values_1 = require("./create-zod-values");
const deep_equal_1 = require("./deep-equal");
const local_state_1 = require("./local-state");
const rowStyle = {
    display: 'flex',
    flexDirection: 'row',
    width: '100%',
};
const ZodMatrixEditor = ({ schema, jsonPath, setValue, defaultValue, value, onSave, showSaveButton, onRemove, saving, saveDisabledByParent, mayPad, }) => {
    const { localValue, onChange, RevisionContextProvider, reset } = (0, local_state_1.useLocalState)({
        unsavedValue: value,
        schema,
        setValue,
        savedValue: defaultValue,
    });
    const [expanded, setExpanded] = (0, react_1.useState)(true);
    const def = schema._def;
    const suffix = (0, react_1.useMemo)(() => {
        return expanded ? ' [' : ' [...] ';
    }, [expanded]);
    const z = (0, get_zod_if_possible_1.useZodIfPossible)();
    if (!z) {
        throw new Error('expected zod');
    }
    const zodTypes = (0, get_zod_if_possible_1.useZodTypesIfPossible)();
    const isDefaultValue = (0, react_1.useMemo)(() => {
        return (0, deep_equal_1.deepEqual)(localValue.value, defaultValue);
    }, [defaultValue, localValue]);
    const dimensions = Math.sqrt(localValue.value.length);
    if (!Number.isInteger(dimensions)) {
        throw new Error('Invalid matrix');
    }
    const chunkedItems = (0, react_1.useMemo)(() => {
        return localValue.value.reduce((acc, item, index) => {
            const chunkIndex = Math.floor(index / dimensions);
            acc[chunkIndex] = acc[chunkIndex] || [];
            acc[chunkIndex].push(item);
            return acc;
        }, []);
    }, [localValue.value, dimensions]);
    return ((0, jsx_runtime_1.jsxs)(Fieldset_1.Fieldset, { shouldPad: mayPad, success: localValue.zodValidation.success, children: [(0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaLabel, { onReset: reset, isDefaultValue: isDefaultValue, jsonPath: jsonPath, onRemove: onRemove, suffix: suffix, onSave: () => {
                    onSave(() => localValue.value, false, false);
                }, saveDisabledByParent: saveDisabledByParent, saving: saving, showSaveButton: showSaveButton, valid: localValue.zodValidation.success, handleClick: () => setExpanded(!expanded) }), expanded ? ((0, jsx_runtime_1.jsx)(RevisionContextProvider, { children: (0, jsx_runtime_1.jsxs)(SchemaVerticalGuide_1.SchemaVerticalGuide, { isRoot: false, children: [chunkedItems.map((row, rowIndex) => {
                            return ((0, jsx_runtime_1.jsx)(react_1.default.Fragment
                            // eslint-disable-next-line react/no-array-index-key
                            , { children: (0, jsx_runtime_1.jsx)("div", { style: rowStyle, children: row.map((item, _index) => {
                                        var _a;
                                        const actualIndex = rowIndex * dimensions + _index;
                                        return ((0, jsx_runtime_1.jsx)("div", { style: { flex: 1 }, children: (0, jsx_runtime_1.jsx)(ZodArrayItemEditor_1.ZodArrayItemEditor, { onChange: onChange, value: item, def: def, index: actualIndex, jsonPath: jsonPath, defaultValue: (_a = defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue[actualIndex]) !== null && _a !== void 0 ? _a : (0, create_zod_values_1.createZodValues)(def.type, z, zodTypes), onSave: onSave, showSaveButton: showSaveButton, saving: saving, saveDisabledByParent: saveDisabledByParent, mayPad: mayPad, mayRemove: false }) }, `${_index}${localValue.keyStabilityRevision}`));
                                    }) }) }, `${rowIndex}${localValue.keyStabilityRevision}`));
                        }), value.length === 0 ? ((0, jsx_runtime_1.jsx)(SchemaSeparationLine_1.SchemaArrayItemSeparationLine, { schema: schema, index: 0, onChange: onChange, isLast: true, showAddButton: true })) : null] }) })) : null, (0, jsx_runtime_1.jsx)(ZodFieldValidation_1.ZodFieldValidation, { path: jsonPath, localValue: localValue })] }));
};
exports.ZodMatrixEditor = ZodMatrixEditor;
