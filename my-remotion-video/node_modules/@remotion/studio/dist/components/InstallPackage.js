"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallPackageModal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const studio_shared_1 = require("@remotion/studio-shared");
const react_1 = __importStar(require("react"));
const remotion_1 = require("remotion");
const install_package_1 = require("../api/install-package");
const restart_studio_1 = require("../api/restart-studio");
const ShortcutHint_1 = require("../error-overlay/remotion-overlay/ShortcutHint");
const client_id_1 = require("../helpers/client-id");
const colors_1 = require("../helpers/colors");
const use_keybinding_1 = require("../helpers/use-keybinding");
const Checkbox_1 = require("./Checkbox");
const InstallablePackage_1 = require("./InstallablePackage");
const is_menu_item_1 = require("./Menu/is-menu-item");
const ModalButton_1 = require("./ModalButton");
const ModalFooter_1 = require("./ModalFooter");
const ModalHeader_1 = require("./ModalHeader");
const DismissableModal_1 = require("./NewComposition/DismissableModal");
const layout_1 = require("./layout");
const container = {
    padding: 20,
    maxHeight: 400,
    overflowY: 'auto',
};
const text = {
    fontSize: 14,
};
const InstallPackageModal = ({ packageManager }) => {
    const [state, setState] = react_1.default.useState({ type: 'idle' });
    const [map, setMap] = react_1.default.useState({});
    const { previewServerState: ctx } = (0, react_1.useContext)(client_id_1.StudioServerConnectionCtx);
    const selectedPackages = Object.keys(map).filter((pkg) => map[pkg]);
    const onClick = (0, react_1.useCallback)(async () => {
        if (state.type === 'done') {
            setState({ type: 'restarting' });
            (0, restart_studio_1.restartStudio)();
            return;
        }
        setState({ type: 'installing' });
        try {
            await (0, install_package_1.installPackages)(selectedPackages);
            setState({ type: 'done' });
        }
        catch (err) {
            setState({ type: 'error', error: err });
        }
    }, [selectedPackages, state.type]);
    const canSelectPackages = state.type === 'idle' && ctx.type === 'connected';
    const disabled = !(canSelectPackages || state.type === 'done') ||
        selectedPackages.length === 0;
    const { registerKeybinding } = (0, use_keybinding_1.useKeybinding)();
    (0, react_1.useEffect)(() => {
        if (disabled) {
            return;
        }
        const enter = registerKeybinding({
            callback() {
                onClick();
            },
            commandCtrlKey: true,
            key: 'Enter',
            event: 'keydown',
            preventDefault: true,
            triggerIfInputFieldFocused: true,
            keepRegisteredWhenNotHighestContext: true,
        });
        return () => {
            enter.unregister();
        };
    }, [disabled, onClick, registerKeybinding]);
    return ((0, jsx_runtime_1.jsxs)(DismissableModal_1.DismissableModal, { children: [(0, jsx_runtime_1.jsx)(ModalHeader_1.ModalHeader, { title: "Install packages" }), (0, jsx_runtime_1.jsx)("div", { style: container, className: is_menu_item_1.VERTICAL_SCROLLBAR_CLASSNAME, children: state.type === 'done' ? ((0, jsx_runtime_1.jsxs)("div", { style: text, children: ["Installed package", selectedPackages.length === 1 ? '' : 's', ' ', "successfully. Restart the server to complete."] })) : state.type === 'restarting' ? ((0, jsx_runtime_1.jsx)("div", { style: text, children: "Restarting the Studio server..." })) : state.type === 'installing' ? ((0, jsx_runtime_1.jsxs)("div", { style: text, children: ["Installing package", selectedPackages.length === 1 ? '' : 's', ". Check your terminal for progress."] })) : ((0, jsx_runtime_1.jsx)("div", { style: text, children: Object.entries(studio_shared_1.installableMap)
                        .filter(([, install]) => install)
                        .map(([pkgShort]) => {
                        var _a, _b;
                        const pkg = pkgShort === 'core' ? 'remotion' : `@remotion/${pkgShort}`;
                        const isInstalled = (_b = (_a = window.remotion_installedPackages) === null || _a === void 0 ? void 0 : _a.includes(pkg)) !== null && _b !== void 0 ? _b : false;
                        const link = studio_shared_1.apiDocs[pkgShort];
                        const description = studio_shared_1.descriptions[pkgShort];
                        if (!link) {
                            throw new Error('No link for ' + pkg);
                        }
                        if (!description) {
                            throw new Error('No description for ' + pkg);
                        }
                        return ((0, jsx_runtime_1.jsxs)(layout_1.Row, { align: "center", children: [(0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: map[pkg], name: pkg, onChange: () => {
                                        setMap((prev) => ({ ...prev, [pkg]: !prev[pkg] }));
                                    }, disabled: !canSelectPackages || isInstalled }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1.5 }), (0, jsx_runtime_1.jsx)(InstallablePackage_1.InstallablePackageComp, { description: description, isInstalled: isInstalled, link: link, pkg: pkg })] }, pkg));
                    }) })) }), (0, jsx_runtime_1.jsx)(ModalFooter_1.ModalFooterContainer, { children: (0, jsx_runtime_1.jsxs)(layout_1.Row, { align: "center", children: [state.type === 'idle' ? ((0, jsx_runtime_1.jsxs)("span", { style: { color: colors_1.LIGHT_TEXT, fontSize: 13, lineHeight: 1.2 }, children: ["This will install ", selectedPackages.length, " package", selectedPackages.length === 1 ? '' : 's', (0, jsx_runtime_1.jsx)("br", {}), "using ", packageManager, ", Remotion v", remotion_1.VERSION] })) : null, (0, jsx_runtime_1.jsx)(layout_1.Flex, {}), (0, jsx_runtime_1.jsxs)(ModalButton_1.ModalButton, { onClick: onClick, disabled: disabled, children: [state.type === 'restarting'
                                    ? 'Restarting...'
                                    : state.type === 'installing'
                                        ? 'Installing...'
                                        : state.type === 'done'
                                            ? 'Restart Server'
                                            : 'Install', disabled ? null : (0, jsx_runtime_1.jsx)(ShortcutHint_1.ShortcutHint, { keyToPress: "\u21B5", cmdOrCtrl: true })] })] }) })] }));
};
exports.InstallPackageModal = InstallPackageModal;
