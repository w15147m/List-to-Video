"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.speculateFunctionName = exports.innerSpeculateFunctionName = void 0;
const constants_1 = require("./constants");
const lambda_version_string_1 = require("./lambda-version-string");
const innerSpeculateFunctionName = ({ diskSizeInMb, memorySizeInMb, timeoutInSeconds, }) => {
    // No validation here, used in find-function-name.ts
    return [
        `${constants_1.RENDER_FN_PREFIX}${lambda_version_string_1.LAMBDA_VERSION_STRING}`,
        `mem${memorySizeInMb}mb`,
        `disk${diskSizeInMb}mb`,
        `${timeoutInSeconds}sec`,
    ].join('-');
};
exports.innerSpeculateFunctionName = innerSpeculateFunctionName;
/*
 * @description Speculate the name of the Lambda function that will be created by `deployFunction()` or its CLI equivalent, based on the function configuration.
 * @see [Documentation](https://remotion.dev/docs/lambda/speculatefunctionname)
 */
const speculateFunctionName = ({ memorySizeInMb, diskSizeInMb, timeoutInSeconds, }) => {
    const memorySize = Number(memorySizeInMb);
    const diskSize = Number(diskSizeInMb);
    const timeout = Number(timeoutInSeconds);
    if (!Number.isInteger(memorySize) || memorySize <= 0) {
        throw new Error(`Memory size must be a positive integer. Received: ${memorySizeInMb}`);
    }
    if (!Number.isInteger(diskSize) || diskSize <= 0) {
        throw new Error(`Disk size must be a positive integer. Received: ${diskSizeInMb}`);
    }
    if (!Number.isInteger(timeout) || timeout <= 0) {
        throw new Error(`Timeout must be a positive integer. Received: ${timeoutInSeconds}`);
    }
    return (0, exports.innerSpeculateFunctionName)({
        diskSizeInMb,
        memorySizeInMb,
        timeoutInSeconds,
    });
};
exports.speculateFunctionName = speculateFunctionName;
