"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRenderProgress = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const aws_provider_1 = require("./aws-provider");
const make_lambda_payload_1 = require("./make-lambda-payload");
const parse_function_name_1 = require("./parse-function-name");
/*
 * @description Gets the current status of a render originally triggered via renderMediaOnLambda().
 * @see [Documentation](https://remotion.dev/docs/lambda/getrenderprogress)
 */
const getRenderProgress = async (input) => {
    var _a, _b;
    if (input.skipLambdaInvocation) {
        const parsed = (0, parse_function_name_1.parseFunctionName)(input.functionName);
        if (!parsed) {
            throw new Error([
                `The function name ${input.functionName} does not adhere to the function name convention (https://www.remotion.dev/docs/lambda/naming-convention).`,
                'Cannot determine memory and disk size from the function name.',
                'You must call getRenderProgress with `skipLambdaInvocation` set to false.',
            ].join('\n'));
        }
        return (0, serverless_client_1.getProgress)({
            bucketName: input.bucketName,
            renderId: input.renderId,
            region: input.region,
            forcePathStyle: (_a = input.forcePathStyle) !== null && _a !== void 0 ? _a : false,
            customCredentials: (_b = input.s3OutputProvider) !== null && _b !== void 0 ? _b : null,
            expectedBucketOwner: null,
            providerSpecifics: aws_provider_1.awsImplementation,
            memorySizeInMb: parsed.memorySizeInMb,
            timeoutInMilliseconds: parsed.timeoutInSeconds * 1000,
            functionName: input.functionName,
            requestHandler: input.requestHandler,
        });
    }
    const result = await aws_provider_1.awsImplementation.callFunctionSync({
        functionName: input.functionName,
        type: serverless_client_1.ServerlessRoutines.status,
        payload: (0, make_lambda_payload_1.getRenderProgressPayload)(input),
        region: input.region,
        timeoutInTest: 120000,
        requestHandler: input.requestHandler,
    });
    return result;
};
exports.getRenderProgress = getRenderProgress;
