"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressWebhook = void 0;
const pages_router_webhook_1 = require("./pages-router-webhook");
const validate_webhook_signature_1 = require("./validate-webhook-signature");
const expressWebhook = (options) => {
    const { testing, extraHeaders, secret, onSuccess, onTimeout, onError } = options;
    return async (req, res) => {
        //  add headers to enable  testing
        if (testing) {
            const testingheaders = {
                'Access-Control-Allow-Origin': 'https://www.remotion.dev',
                'Access-Control-Allow-Headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, X-Remotion-Status, X-Remotion-Signature, X-Remotion-Mode',
                'Access-Control-Allow-Methods': 'OPTIONS,POST',
            };
            (0, pages_router_webhook_1.addHeaders)(res, testingheaders);
        }
        //  add extra headers
        (0, pages_router_webhook_1.addHeaders)(res, extraHeaders || {});
        // dont go forward if just testing
        if (req.method === 'OPTIONS') {
            res.status(200).end();
            return;
        }
        try {
            // validate the webhook signature
            (0, validate_webhook_signature_1.validateWebhookSignature)({
                signatureHeader: req.header('X-Remotion-Signature'),
                body: req.body,
                secret,
            });
            //  custom logic
            const payload = req.body;
            if (payload.type === 'success' && onSuccess) {
                await onSuccess(payload);
            }
            else if (payload.type === 'error' && onError) {
                await onError(payload);
            }
            else if (payload.type === 'timeout' && onTimeout) {
                await onTimeout(payload);
            }
            // send response
            res.status(200).json({ success: true });
        }
        catch (err) {
            res.status(500).json({
                success: false,
                error: err instanceof Error ? err.message : String(err),
            });
        }
    };
};
exports.expressWebhook = expressWebhook;
