"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFunctions = void 0;
const client_lambda_1 = require("@aws-sdk/client-lambda");
const serverless_client_1 = require("@remotion/serverless-client");
const aws_clients_1 = require("./aws-clients");
const constants_1 = require("./constants");
const get_function_version_1 = require("./get-function-version");
const getAllFunctions = async ({ existing, nextMarker, region, requestHandler, }) => {
    const allLambdas = [...existing];
    const lambdas = await (0, aws_clients_1.getLambdaClient)(region, undefined, requestHandler !== null && requestHandler !== void 0 ? requestHandler : null).send(new client_lambda_1.ListFunctionsCommand({
        Marker: nextMarker !== null && nextMarker !== void 0 ? nextMarker : undefined,
    }));
    if (!lambdas.Functions) {
        return allLambdas;
    }
    for (const lambda of lambdas.Functions) {
        allLambdas.push(lambda);
    }
    if (lambdas.NextMarker) {
        return getAllFunctions({
            existing: allLambdas,
            nextMarker: lambdas.NextMarker,
            region,
            requestHandler,
        });
    }
    return allLambdas;
};
/*
 * @description Retrieves a list of functions that Remotion deployed to AWS Lambda in a certain region.
 * @see [Documentation](https://remotion.dev/docs/lambda/getfunctions)
 */
const getFunctions = async (params) => {
    const lambdas = await getAllFunctions({
        existing: [],
        nextMarker: null,
        region: params.region,
        requestHandler: params.requestHandler,
    });
    const remotionLambdas = lambdas.filter((f) => {
        var _a;
        return (_a = f.FunctionName) === null || _a === void 0 ? void 0 : _a.startsWith(constants_1.RENDER_FN_PREFIX);
    });
    const configs = await Promise.all(remotionLambdas.map(async (fn) => {
        var _a;
        try {
            const version = await (0, get_function_version_1.getFunctionVersion)({
                functionName: fn.FunctionName,
                region: params.region,
                logLevel: (_a = params.logLevel) !== null && _a !== void 0 ? _a : 'info',
                requestHandler: params.requestHandler,
            });
            return version;
        }
        catch (_b) {
            return null;
        }
    }));
    const list = remotionLambdas.map((lambda, i) => {
        var _a, _b;
        return {
            functionName: lambda.FunctionName,
            version: configs[i],
            memorySizeInMb: lambda.MemorySize,
            timeoutInSeconds: lambda.Timeout,
            diskSizeInMb: (_b = (_a = lambda.EphemeralStorage) === null || _a === void 0 ? void 0 : _a.Size) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_EPHEMERAL_STORAGE_IN_MB,
        };
    });
    if (!params.compatibleOnly) {
        return list;
    }
    return list.filter((l) => {
        if (!params.compatibleOnly) {
            return true;
        }
        return l.version === serverless_client_1.VERSION;
    });
};
exports.getFunctions = getFunctions;
