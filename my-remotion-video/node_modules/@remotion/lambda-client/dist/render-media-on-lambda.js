"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderVideoOnLambda = exports.renderMediaOnLambda = exports.renderMediaOnLambdaOptionalToRequired = exports.internalRenderMediaOnLambdaRaw = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const aws_provider_1 = require("./aws-provider");
const get_aws_urls_1 = require("./get-aws-urls");
const make_lambda_payload_1 = require("./make-lambda-payload");
const internalRenderMediaOnLambdaRaw = async (input) => {
    var _a;
    const { functionName, region, rendererFunctionName } = input;
    try {
        const res = await aws_provider_1.awsImplementation.callFunctionSync({
            functionName,
            type: serverless_client_1.ServerlessRoutines.start,
            payload: await (0, make_lambda_payload_1.makeLambdaRenderMediaPayload)(input),
            region,
            timeoutInTest: 120000,
            requestHandler: input.requestHandler,
        });
        return {
            renderId: res.renderId,
            bucketName: res.bucketName,
            cloudWatchLogs: (0, get_aws_urls_1.getCloudwatchRendererUrl)({
                functionName,
                region,
                renderId: res.renderId,
                rendererFunctionName: rendererFunctionName !== null && rendererFunctionName !== void 0 ? rendererFunctionName : null,
                chunk: null,
            }),
            cloudWatchMainLogs: (0, get_aws_urls_1.getCloudwatchMethodUrl)({
                renderId: res.renderId,
                functionName,
                method: serverless_client_1.ServerlessRoutines.launch,
                region,
                rendererFunctionName: rendererFunctionName !== null && rendererFunctionName !== void 0 ? rendererFunctionName : null,
            }),
            folderInS3Console: (0, get_aws_urls_1.getS3RenderUrl)({
                bucketName: res.bucketName,
                renderId: res.renderId,
                region,
            }),
            lambdaInsightsLogs: (0, get_aws_urls_1.getLambdaInsightsUrl)({
                functionName,
                region,
            }),
            progressJsonInConsole: (0, get_aws_urls_1.getProgressJsonUrl)({
                bucketName: res.bucketName,
                renderId: res.renderId,
                region,
            }),
        };
    }
    catch (err) {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.includes('UnrecognizedClientException')) {
            throw new Error('UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception');
        }
        throw err;
    }
};
exports.internalRenderMediaOnLambdaRaw = internalRenderMediaOnLambdaRaw;
const renderMediaOnLambdaOptionalToRequired = (options) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19;
    return {
        offthreadVideoThreads: (_a = options.offthreadVideoThreads) !== null && _a !== void 0 ? _a : null,
        audioBitrate: (_b = options.audioBitrate) !== null && _b !== void 0 ? _b : null,
        audioCodec: (_c = options.audioCodec) !== null && _c !== void 0 ? _c : null,
        chromiumOptions: (_d = options.chromiumOptions) !== null && _d !== void 0 ? _d : {},
        codec: options.codec,
        colorSpace: (_e = options.colorSpace) !== null && _e !== void 0 ? _e : null,
        composition: options.composition,
        concurrencyPerLambda: (_f = options.concurrencyPerLambda) !== null && _f !== void 0 ? _f : 1,
        concurrency: (_g = options.concurrency) !== null && _g !== void 0 ? _g : null,
        crf: options.crf,
        downloadBehavior: (_h = options.downloadBehavior) !== null && _h !== void 0 ? _h : { type: 'play-in-browser' },
        envVariables: (_j = options.envVariables) !== null && _j !== void 0 ? _j : {},
        everyNthFrame: (_k = options.everyNthFrame) !== null && _k !== void 0 ? _k : 1,
        forceBucketName: (_l = options.forceBucketName) !== null && _l !== void 0 ? _l : null,
        forceHeight: (_m = options.forceHeight) !== null && _m !== void 0 ? _m : null,
        forceWidth: (_o = options.forceWidth) !== null && _o !== void 0 ? _o : null,
        frameRange: (_p = options.frameRange) !== null && _p !== void 0 ? _p : null,
        framesPerLambda: (_q = options.framesPerLambda) !== null && _q !== void 0 ? _q : null,
        functionName: options.functionName,
        imageFormat: (_r = options.imageFormat) !== null && _r !== void 0 ? _r : 'jpeg',
        inputProps: (_s = options.inputProps) !== null && _s !== void 0 ? _s : {},
        jpegQuality: (_t = options.jpegQuality) !== null && _t !== void 0 ? _t : 80,
        logLevel: (_u = options.logLevel) !== null && _u !== void 0 ? _u : 'info',
        maxRetries: (_v = options.maxRetries) !== null && _v !== void 0 ? _v : 1,
        muted: (_w = options.muted) !== null && _w !== void 0 ? _w : false,
        numberOfGifLoops: (_x = options.numberOfGifLoops) !== null && _x !== void 0 ? _x : null,
        offthreadVideoCacheSizeInBytes: (_y = options.offthreadVideoCacheSizeInBytes) !== null && _y !== void 0 ? _y : null,
        outName: (_z = options.outName) !== null && _z !== void 0 ? _z : null,
        overwrite: (_0 = options.overwrite) !== null && _0 !== void 0 ? _0 : false,
        pixelFormat: (_1 = options.pixelFormat) !== null && _1 !== void 0 ? _1 : undefined,
        privacy: (_2 = options.privacy) !== null && _2 !== void 0 ? _2 : 'public',
        proResProfile: (_3 = options.proResProfile) !== null && _3 !== void 0 ? _3 : undefined,
        region: options.region,
        rendererFunctionName: (_4 = options.rendererFunctionName) !== null && _4 !== void 0 ? _4 : null,
        scale: (_5 = options.scale) !== null && _5 !== void 0 ? _5 : 1,
        serveUrl: options.serveUrl,
        timeoutInMilliseconds: (_6 = options.timeoutInMilliseconds) !== null && _6 !== void 0 ? _6 : 30000,
        videoBitrate: (_7 = options.videoBitrate) !== null && _7 !== void 0 ? _7 : null,
        encodingMaxRate: (_8 = options.encodingMaxRate) !== null && _8 !== void 0 ? _8 : null,
        encodingBufferSize: (_9 = options.encodingBufferSize) !== null && _9 !== void 0 ? _9 : null,
        webhook: (_10 = options.webhook) !== null && _10 !== void 0 ? _10 : null,
        x264Preset: (_11 = options.x264Preset) !== null && _11 !== void 0 ? _11 : null,
        deleteAfter: (_12 = options.deleteAfter) !== null && _12 !== void 0 ? _12 : null,
        preferLossless: (_13 = options.preferLossless) !== null && _13 !== void 0 ? _13 : false,
        forcePathStyle: (_14 = options.forcePathStyle) !== null && _14 !== void 0 ? _14 : false,
        indent: false,
        metadata: (_15 = options.metadata) !== null && _15 !== void 0 ? _15 : null,
        apiKey: (_16 = options.apiKey) !== null && _16 !== void 0 ? _16 : null,
        storageClass: (_17 = options.storageClass) !== null && _17 !== void 0 ? _17 : null,
        requestHandler: (_18 = options.requestHandler) !== null && _18 !== void 0 ? _18 : null,
        mediaCacheSizeInBytes: (_19 = options.mediaCacheSizeInBytes) !== null && _19 !== void 0 ? _19 : null,
    };
};
exports.renderMediaOnLambdaOptionalToRequired = renderMediaOnLambdaOptionalToRequired;
const wrapped = (0, serverless_client_1.wrapWithErrorHandling)(exports.internalRenderMediaOnLambdaRaw);
/*
 * @description Kicks off a render process on Remotion Lambda. The progress can be tracked using getRenderProgress().
 * @see [Documentation](https://remotion.dev/docs/lambda/rendermediaonlambda)
 */
const renderMediaOnLambda = (options) => {
    if (options.quality) {
        throw new Error('quality has been renamed to jpegQuality. Please rename the option.');
    }
    return wrapped((0, exports.renderMediaOnLambdaOptionalToRequired)(options));
};
exports.renderMediaOnLambda = renderMediaOnLambda;
/**
 * @deprecated Renamed to renderMediaOnLambda()
 */
exports.renderVideoOnLambda = exports.renderMediaOnLambda;
