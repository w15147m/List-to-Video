"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteRender = exports.internalDeleteRender = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const aws_provider_1 = require("./aws-provider");
const clean_items_1 = require("./clean-items");
const constants_1 = require("./constants");
const internalDeleteRender = async (input) => {
    var _a;
    const expectedBucketOwner = await input.providerSpecifics.getAccountId({
        region: input.region,
    });
    const progress = await (0, serverless_client_1.getOverallProgressFromStorage)({
        bucketName: input.bucketName,
        expectedBucketOwner,
        region: input.region,
        renderId: input.renderId,
        providerSpecifics: input.providerSpecifics,
        forcePathStyle: input.forcePathStyle,
        requestHandler: input.requestHandler,
    });
    // Render did not start yet
    if (progress.renderMetadata === null) {
        return { freedBytes: 0 };
    }
    const { key, renderBucketName, customCredentials } = (0, serverless_client_1.getExpectedOutName)({
        renderMetadata: progress.renderMetadata,
        bucketName: input.bucketName,
        customCredentials: (_a = input.customCredentials) !== null && _a !== void 0 ? _a : null,
        bucketNamePrefix: constants_1.REMOTION_BUCKET_PREFIX,
    });
    await input.providerSpecifics.deleteFile({
        bucketName: renderBucketName,
        customCredentials,
        key,
        region: input.region,
        forcePathStyle: input.forcePathStyle,
        requestHandler: input.requestHandler,
    });
    let files = await input.providerSpecifics.listObjects({
        bucketName: input.bucketName,
        prefix: (0, serverless_client_1.rendersPrefix)(input.renderId),
        region: input.region,
        expectedBucketOwner,
        forcePathStyle: input.forcePathStyle,
        requestHandler: input.requestHandler,
    });
    let totalSize = 0;
    while (files.length > 0) {
        totalSize += files.reduce((a, b) => {
            var _a;
            return a + ((_a = b.Size) !== null && _a !== void 0 ? _a : 0);
        }, 0);
        await (0, clean_items_1.cleanItems)({
            list: files.map((f) => f.Key),
            bucket: input.bucketName,
            onAfterItemDeleted: () => undefined,
            onBeforeItemDeleted: () => undefined,
            region: input.region,
            providerSpecifics: input.providerSpecifics,
            forcePathStyle: input.forcePathStyle,
            requestHandler: input.requestHandler,
        });
        files = await input.providerSpecifics.listObjects({
            bucketName: input.bucketName,
            prefix: (0, serverless_client_1.rendersPrefix)(input.renderId),
            region: input.region,
            expectedBucketOwner,
            forcePathStyle: input.forcePathStyle,
            requestHandler: input.requestHandler,
        });
    }
    return {
        freedBytes: totalSize,
    };
};
exports.internalDeleteRender = internalDeleteRender;
/*
 * @description Deletes a rendered video, audio or still and its associated metadata.
 * @see [Documentation](https://remotion.dev/docs/lambda/deleterender)
 */
const deleteRender = (input) => {
    var _a;
    return (0, exports.internalDeleteRender)({
        ...input,
        providerSpecifics: aws_provider_1.awsImplementation,
        forcePathStyle: (_a = input.forcePathStyle) !== null && _a !== void 0 ? _a : false,
    });
};
exports.deleteRender = deleteRender;
