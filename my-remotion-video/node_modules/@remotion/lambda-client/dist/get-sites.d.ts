import type { ProviderSpecifics } from '@remotion/serverless-client';
import type { AwsProvider } from './aws-provider';
import type { BucketWithLocation } from './get-buckets';
import type { AwsRegion } from './regions';
import type { RequestHandler } from './types';
type Site = {
    sizeInBytes: number;
    lastModified: number | null;
    bucketName: string;
    id: string;
    serveUrl: string;
};
type MandatoryParameters = {
    region: AwsRegion;
};
type OptionalParameters = {
    forceBucketName: string | null;
    forcePathStyle: boolean;
    requestHandler: RequestHandler | null;
};
type GetSitesInternalInput = MandatoryParameters & OptionalParameters;
export type GetSitesInput = MandatoryParameters & Partial<OptionalParameters>;
export type GetSitesOutput = {
    sites: Site[];
    buckets: BucketWithLocation[];
};
export declare const internalGetSites: ({ region, forceBucketName, providerSpecifics, forcePathStyle, requestHandler, }: GetSitesInternalInput & {
    providerSpecifics: ProviderSpecifics<AwsProvider>;
}) => Promise<GetSitesOutput>;
export declare const getSites: ({ region, forceBucketName, forcePathStyle, requestHandler, }: GetSitesInput) => Promise<GetSitesOutput>;
export {};
