"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.presignUrl = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const serverless_client_1 = require("@remotion/serverless-client");
const constants_1 = require("./constants");
const get_s3_client_1 = require("./get-s3-client");
const validate_presign_expiration_1 = require("./validate-presign-expiration");
const internalPresignUrl = async ({ region, bucketName, objectKey, checkIfObjectExists, expiresInSeconds, forcePathStyle, requestHandler, }) => {
    (0, serverless_client_1.validateBucketName)({
        bucketName,
        bucketNamePrefix: constants_1.REMOTION_BUCKET_PREFIX,
        options: { mustStartWithRemotion: false },
    });
    (0, validate_presign_expiration_1.validatePresignExpiration)(expiresInSeconds);
    const s3Client = (0, get_s3_client_1.getS3Client)({
        region,
        customCredentials: null,
        forcePathStyle,
        requestHandler: requestHandler !== null && requestHandler !== void 0 ? requestHandler : null,
    });
    if (checkIfObjectExists === true) {
        try {
            await s3Client.send(new client_s3_1.HeadObjectCommand({
                Bucket: bucketName,
                Key: objectKey,
            }));
        }
        catch (err) {
            if (err.name === 'NotFound') {
                return null;
            }
            if (err.message === 'UnknownError' ||
                err.$metadata
                    .httpStatusCode === 403) {
                throw new Error(`Unable to access item "${objectKey}" from bucket "${bucketName}". You must have permission for both "s3:GetObject" and "s3:ListBucket" actions.`);
            }
            throw err;
        }
    }
    const objCommand = new client_s3_1.GetObjectCommand({
        Bucket: bucketName,
        Key: objectKey,
    });
    const publicUrl = await (0, s3_request_presigner_1.getSignedUrl)(s3Client, objCommand, {
        expiresIn: expiresInSeconds,
    });
    return publicUrl;
};
/*
 * @description Takes a private S3 object and turns it into a public URL by signing it with your AWS credentials.
 * @see [Documentation](https://remotion.dev/docs/lambda/presignurl)
 */
const presignUrl = ({ region, bucketName, objectKey, checkIfObjectExists, expiresInSeconds, forcePathStyle, requestHandler, }) => {
    return internalPresignUrl({
        region,
        bucketName,
        objectKey,
        checkIfObjectExists: checkIfObjectExists !== null && checkIfObjectExists !== void 0 ? checkIfObjectExists : false,
        expiresInSeconds,
        forcePathStyle: forcePathStyle !== null && forcePathStyle !== void 0 ? forcePathStyle : false,
        requestHandler,
    });
};
exports.presignUrl = presignUrl;
