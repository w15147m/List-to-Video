import type { BrowserSafeApis, ChromiumOptions, DownloadBehavior, StillImageFormat, ToOptions } from '@remotion/serverless-client';
import type { StorageClass } from '@aws-sdk/client-s3';
import type { CostsInfo, OutNameInput, Privacy, ReceivedArtifact } from '@remotion/serverless-client';
import { type AwsProvider } from './aws-provider';
import type { AwsRegion } from './regions';
import type { RequestHandler } from './types';
type MandatoryParameters = {
    region: AwsRegion;
    functionName: string;
    serveUrl: string;
    composition: string;
    inputProps: Record<string, unknown>;
    imageFormat: StillImageFormat;
    privacy: Privacy;
};
type OptionalParameters = {
    maxRetries: number;
    envVariables: Record<string, string>;
    frame: number;
    outName: OutNameInput<AwsProvider> | null;
    chromiumOptions: ChromiumOptions;
    downloadBehavior: DownloadBehavior;
    forceWidth: number | null;
    forceHeight: number | null;
    forceBucketName: string | null;
    onInit: (data: {
        renderId: string;
        cloudWatchLogs: string;
        lambdaInsightsUrl: string;
    }) => void;
    indent: boolean;
    forcePathStyle: boolean;
    storageClass: StorageClass | null;
    requestHandler: RequestHandler | null | undefined;
} & ToOptions<typeof BrowserSafeApis.optionsMap.renderStillOnLambda>;
export type RenderStillOnLambdaNonNullInput = MandatoryParameters & OptionalParameters;
export type RenderStillOnLambdaInput = MandatoryParameters & Partial<OptionalParameters> & {
    requestHandler?: RequestHandler;
};
export type RenderStillOnLambdaOutput = {
    estimatedPrice: CostsInfo;
    url: string;
    outKey: string;
    sizeInBytes: number;
    bucketName: string;
    renderId: string;
    cloudWatchLogs: string;
    artifacts: ReceivedArtifact<AwsProvider>[];
};
export declare const internalRenderStillOnLambda: (input: RenderStillOnLambdaNonNullInput) => Promise<RenderStillOnLambdaOutput>;
export declare const renderStillOnLambda: (input: RenderStillOnLambdaInput & {
    /**
     * @deprecated Renamed to `jpegQuality`
     */
    quality?: never;
    /**
     * @deprecated Renamed to `logLevel`
     */
    dumpBrowserLogs?: boolean;
}) => Promise<RenderStillOnLambdaOutput>;
export {};
