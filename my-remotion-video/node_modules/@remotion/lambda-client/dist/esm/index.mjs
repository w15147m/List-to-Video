import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// ../../node_modules/.bun/@smithy+types@4.2.0/node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    AlgorithmId: () => AlgorithmId,
    EndpointURLScheme: () => EndpointURLScheme,
    FieldPosition: () => FieldPosition,
    HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation,
    HttpAuthLocation: () => HttpAuthLocation,
    IniSectionType: () => IniSectionType,
    RequestHandlerProtocol: () => RequestHandlerProtocol,
    SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY,
    getDefaultClientConfiguration: () => getDefaultClientConfiguration,
    resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
    HttpAuthLocation2["HEADER"] = "header";
    HttpAuthLocation2["QUERY"] = "query";
    return HttpAuthLocation2;
  })(HttpAuthLocation || {});
  var HttpApiKeyAuthLocation = /* @__PURE__ */ ((HttpApiKeyAuthLocation2) => {
    HttpApiKeyAuthLocation2["HEADER"] = "header";
    HttpApiKeyAuthLocation2["QUERY"] = "query";
    return HttpApiKeyAuthLocation2;
  })(HttpApiKeyAuthLocation || {});
  var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
    EndpointURLScheme2["HTTP"] = "http";
    EndpointURLScheme2["HTTPS"] = "https";
    return EndpointURLScheme2;
  })(EndpointURLScheme || {});
  var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
    AlgorithmId2["MD5"] = "md5";
    AlgorithmId2["CRC32"] = "crc32";
    AlgorithmId2["CRC32C"] = "crc32c";
    AlgorithmId2["SHA1"] = "sha1";
    AlgorithmId2["SHA256"] = "sha256";
    return AlgorithmId2;
  })(AlgorithmId || {});
  var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const checksumAlgorithms = [];
    if (runtimeConfig.sha256 !== undefined) {
      checksumAlgorithms.push({
        algorithmId: () => "sha256",
        checksumConstructor: () => runtimeConfig.sha256
      });
    }
    if (runtimeConfig.md5 != null) {
      checksumAlgorithms.push({
        algorithmId: () => "md5",
        checksumConstructor: () => runtimeConfig.md5
      });
    }
    return {
      addChecksumAlgorithm(algo) {
        checksumAlgorithms.push(algo);
      },
      checksumAlgorithms() {
        return checksumAlgorithms;
      }
    };
  }, "getChecksumConfiguration");
  var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
      runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
  }, "resolveChecksumRuntimeConfig");
  var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    return getChecksumConfiguration(runtimeConfig);
  }, "getDefaultClientConfiguration");
  var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return resolveChecksumRuntimeConfig(config);
  }, "resolveDefaultRuntimeConfig");
  var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
    FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
    FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    return FieldPosition2;
  })(FieldPosition || {});
  var SMITHY_CONTEXT_KEY = "__smithy_context";
  var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
    IniSectionType2["PROFILE"] = "profile";
    IniSectionType2["SSO_SESSION"] = "sso-session";
    IniSectionType2["SERVICES"] = "services";
    return IniSectionType2;
  })(IniSectionType || {});
  var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
    RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    return RequestHandlerProtocol2;
  })(RequestHandlerProtocol || {});
});

// ../../node_modules/.bun/@smithy+protocol-http@5.1.0/node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    Field: () => Field,
    Fields: () => Fields,
    HttpRequest: () => HttpRequest,
    HttpResponse: () => HttpResponse,
    IHttpRequest: () => import_types.HttpRequest,
    getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
    isValidHostname: () => isValidHostname,
    resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    return {
      setHttpHandler(handler) {
        runtimeConfig.httpHandler = handler;
      },
      httpHandler() {
        return runtimeConfig.httpHandler;
      },
      updateHttpClientConfig(key, value) {
        runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
      },
      httpHandlerConfigs() {
        return runtimeConfig.httpHandler.httpHandlerConfigs();
      }
    };
  }, "getHttpHandlerExtensionConfiguration");
  var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
    return {
      httpHandler: httpHandlerExtensionConfiguration.httpHandler()
    };
  }, "resolveHttpHandlerRuntimeConfig");
  var import_types = require_dist_cjs();
  var Field = class {
    static {
      __name(this, "Field");
    }
    constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }) {
      this.name = name;
      this.kind = kind;
      this.values = values;
    }
    add(value) {
      this.values.push(value);
    }
    set(values) {
      this.values = values;
    }
    remove(value) {
      this.values = this.values.filter((v) => v !== value);
    }
    toString() {
      return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
      return this.values;
    }
  };
  var Fields = class {
    constructor({ fields = [], encoding = "utf-8" }) {
      this.entries = {};
      fields.forEach(this.setField.bind(this));
      this.encoding = encoding;
    }
    static {
      __name(this, "Fields");
    }
    setField(field) {
      this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
      return this.entries[name.toLowerCase()];
    }
    removeField(name) {
      delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
      return Object.values(this.entries).filter((field) => field.kind === kind);
    }
  };
  var HttpRequest = class _HttpRequest {
    static {
      __name(this, "HttpRequest");
    }
    constructor(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      this.username = options.username;
      this.password = options.password;
      this.fragment = options.fragment;
    }
    static clone(request) {
      const cloned = new _HttpRequest({
        ...request,
        headers: { ...request.headers }
      });
      if (cloned.query) {
        cloned.query = cloneQuery(cloned.query);
      }
      return cloned;
    }
    static isInstance(request) {
      if (!request) {
        return false;
      }
      const req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
      return _HttpRequest.clone(this);
    }
  };
  function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }
  __name(cloneQuery, "cloneQuery");
  var HttpResponse = class {
    static {
      __name(this, "HttpResponse");
    }
    constructor(options) {
      this.statusCode = options.statusCode;
      this.reason = options.reason;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    static isInstance(response) {
      if (!response)
        return false;
      const resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
  };
  function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
  }
  __name(isValidHostname, "isValidHostname");
});

// ../../node_modules/.bun/@aws-sdk+middleware-host-header@3.775.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs3 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    getHostHeaderPlugin: () => getHostHeaderPlugin,
    hostHeaderMiddleware: () => hostHeaderMiddleware,
    hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
    resolveHostHeaderConfig: () => resolveHostHeaderConfig
  });
  module.exports = __toCommonJS(index_exports);
  var import_protocol_http = require_dist_cjs2();
  function resolveHostHeaderConfig(input) {
    return input;
  }
  __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
  var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request))
      return next(args);
    const { request } = args;
    const { handlerProtocol = "" } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
      delete request.headers["host"];
      request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
    } else if (!request.headers["host"]) {
      let host = request.hostname;
      if (request.port != null)
        host += `:${request.port}`;
      request.headers["host"] = host;
    }
    return next(args);
  }, "hostHeaderMiddleware");
  var hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true
  };
  var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }, "applyToStack")
  }), "getHostHeaderPlugin");
});

// ../../node_modules/.bun/@aws-sdk+middleware-logger@3.775.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs4 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    getLoggerPlugin: () => getLoggerPlugin,
    loggerMiddleware: () => loggerMiddleware,
    loggerMiddlewareOptions: () => loggerMiddlewareOptions
  });
  module.exports = __toCommonJS(index_exports);
  var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
    try {
      const response = await next(args);
      const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
      const { $metadata, ...outputWithoutMetadata } = response.output;
      logger?.info?.({
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        output: outputFilterSensitiveLog(outputWithoutMetadata),
        metadata: $metadata
      });
      return response;
    } catch (error) {
      const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      logger?.error?.({
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        error,
        metadata: error.$metadata
      });
      throw error;
    }
  }, "loggerMiddleware");
  var loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true
  };
  var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }, "applyToStack")
  }), "getLoggerPlugin");
});

// ../../node_modules/.bun/@aws-sdk+middleware-recursion-detection@3.775.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs5 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
    getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
    recursionDetectionMiddleware: () => recursionDetectionMiddleware
  });
  module.exports = __toCommonJS(index_exports);
  var import_protocol_http = require_dist_cjs2();
  var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
  var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
  var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
  var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
    const { request } = args;
    if (!import_protocol_http.HttpRequest.isInstance(request) || options.runtime !== "node") {
      return next(args);
    }
    const traceIdHeader = Object.keys(request.headers ?? {}).find((h) => h.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ?? TRACE_ID_HEADER_NAME;
    if (request.headers.hasOwnProperty(traceIdHeader)) {
      return next(args);
    }
    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = process.env[ENV_TRACE_ID];
    const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
      request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
      ...args,
      request
    });
  }, "recursionDetectionMiddleware");
  var addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
  };
  var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    }, "applyToStack")
  }), "getRecursionDetectionPlugin");
});

// ../../node_modules/.bun/@smithy+util-middleware@4.0.2/node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    getSmithyContext: () => getSmithyContext,
    normalizeProvider: () => normalizeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_types = require_dist_cjs();
  var getSmithyContext = /* @__PURE__ */ __name((context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
  var normalizeProvider = /* @__PURE__ */ __name((input) => {
    if (typeof input === "function")
      return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
  }, "normalizeProvider");
});

// ../../node_modules/.bun/@smithy+middleware-serde@4.0.3/node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs7 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    deserializerMiddleware: () => deserializerMiddleware,
    deserializerMiddlewareOption: () => deserializerMiddlewareOption,
    getSerdePlugin: () => getSerdePlugin,
    serializerMiddleware: () => serializerMiddleware,
    serializerMiddlewareOption: () => serializerMiddlewareOption
  });
  module.exports = __toCommonJS(src_exports);
  var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next, context) => async (args) => {
    const { response } = await next(args);
    try {
      const parsed = await deserializer(response, options);
      return {
        response,
        output: parsed
      };
    } catch (error) {
      Object.defineProperty(error, "$response", {
        value: response
      });
      if (!("$metadata" in error)) {
        const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
        try {
          error.message += `
  ` + hint;
        } catch (e) {
          if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
            console.warn(hint);
          } else {
            context.logger?.warn?.(hint);
          }
        }
        if (typeof error.$responseBodyText !== "undefined") {
          if (error.$response) {
            error.$response.body = error.$responseBodyText;
          }
        }
      }
      throw error;
    }
  }, "deserializerMiddleware");
  var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
    const endpoint = context.endpointV2?.url && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
    if (!endpoint) {
      throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, { ...options, endpoint });
    return next({
      ...args,
      request
    });
  }, "serializerMiddleware");
  var deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true
  };
  var serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true
  };
  function getSerdePlugin(config, serializer, deserializer) {
    return {
      applyToStack: (commandStack) => {
        commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
        commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
      }
    };
  }
  __name(getSerdePlugin, "getSerdePlugin");
});

// ../../node_modules/.bun/@smithy+is-array-buffer@4.0.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs8 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    isArrayBuffer: () => isArrayBuffer
  });
  module.exports = __toCommonJS(src_exports);
  var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
});

// ../../node_modules/.bun/@smithy+util-buffer-from@4.0.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs9 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fromArrayBuffer: () => fromArrayBuffer,
    fromString: () => fromString
  });
  module.exports = __toCommonJS(src_exports);
  var import_is_array_buffer = require_dist_cjs8();
  var import_buffer = __require("buffer");
  var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
    if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
      throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return import_buffer.Buffer.from(input, offset, length);
  }, "fromArrayBuffer");
  var fromString = /* @__PURE__ */ __name((input, encoding) => {
    if (typeof input !== "string") {
      throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
  }, "fromString");
});

// ../../node_modules/.bun/@smithy+util-base64@4.0.0/node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromBase64 = undefined;
  var util_buffer_from_1 = require_dist_cjs9();
  var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
  var fromBase642 = (input) => {
    if (input.length * 3 % 4 !== 0) {
      throw new TypeError(`Incorrect padding on base64 string.`);
    }
    if (!BASE64_REGEX.exec(input)) {
      throw new TypeError(`Invalid base64 string.`);
    }
    const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  };
  exports.fromBase64 = fromBase642;
});

// ../../node_modules/.bun/@smithy+util-utf8@4.0.0/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs10 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fromUtf8: () => fromUtf8,
    toUint8Array: () => toUint8Array,
    toUtf8: () => toUtf8
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_buffer_from = require_dist_cjs9();
  var fromUtf8 = /* @__PURE__ */ __name((input) => {
    const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }, "fromUtf8");
  var toUint8Array = /* @__PURE__ */ __name((data) => {
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }, "toUint8Array");
  var toUtf8 = /* @__PURE__ */ __name((input) => {
    if (typeof input === "string") {
      return input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
      throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
    }
    return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
  }, "toUtf8");
});

// ../../node_modules/.bun/@smithy+util-base64@4.0.0/node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toBase64 = undefined;
  var util_buffer_from_1 = require_dist_cjs9();
  var util_utf8_1 = require_dist_cjs10();
  var toBase642 = (_input) => {
    let input;
    if (typeof _input === "string") {
      input = (0, util_utf8_1.fromUtf8)(_input);
    } else {
      input = _input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
      throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
    }
    return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
  };
  exports.toBase64 = toBase642;
});

// ../../node_modules/.bun/@smithy+util-base64@4.0.0/node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs11 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_fromBase64(), module.exports);
  __reExport(src_exports, require_toBase64(), module.exports);
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js
var require_ChecksumStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ChecksumStream = undefined;
  var util_base64_1 = require_dist_cjs11();
  var stream_1 = __require("stream");

  class ChecksumStream2 extends stream_1.Duplex {
    constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
      var _a, _b;
      super();
      if (typeof source.pipe === "function") {
        this.source = source;
      } else {
        throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === undefined ? undefined : source.constructor) === null || _a === undefined ? undefined : _a.name) !== null && _b !== undefined ? _b : source} in ChecksumStream.`);
      }
      this.base64Encoder = base64Encoder !== null && base64Encoder !== undefined ? base64Encoder : util_base64_1.toBase64;
      this.expectedChecksum = expectedChecksum;
      this.checksum = checksum;
      this.checksumSourceLocation = checksumSourceLocation;
      this.source.pipe(this);
    }
    _read(size) {}
    _write(chunk, encoding, callback) {
      try {
        this.checksum.update(chunk);
        this.push(chunk);
      } catch (e) {
        return callback(e);
      }
      return callback();
    }
    async _final(callback) {
      try {
        const digest = await this.checksum.digest();
        const received = this.base64Encoder(digest);
        if (this.expectedChecksum !== received) {
          return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}"` + ` in response header "${this.checksumSourceLocation}".`));
        }
      } catch (e) {
        return callback(e);
      }
      this.push(null);
      return callback();
    }
  }
  exports.ChecksumStream = ChecksumStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js
var require_stream_type_check = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isBlob = exports.isReadableStream = undefined;
  var isReadableStream2 = (stream) => {
    var _a;
    return typeof ReadableStream === "function" && (((_a = stream === null || stream === undefined ? undefined : stream.constructor) === null || _a === undefined ? undefined : _a.name) === ReadableStream.name || stream instanceof ReadableStream);
  };
  exports.isReadableStream = isReadableStream2;
  var isBlob2 = (blob) => {
    var _a;
    return typeof Blob === "function" && (((_a = blob === null || blob === undefined ? undefined : blob.constructor) === null || _a === undefined ? undefined : _a.name) === Blob.name || blob instanceof Blob);
  };
  exports.isBlob = isBlob2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js
var require_ChecksumStream_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ChecksumStream = undefined;
  var ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {};

  class ChecksumStream2 extends ReadableStreamRef {
  }
  exports.ChecksumStream = ChecksumStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js
var require_createChecksumStream_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createChecksumStream = undefined;
  var util_base64_1 = require_dist_cjs11();
  var stream_type_check_1 = require_stream_type_check();
  var ChecksumStream_browser_1 = require_ChecksumStream_browser();
  var createChecksumStream2 = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
    var _a, _b;
    if (!(0, stream_type_check_1.isReadableStream)(source)) {
      throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === undefined ? undefined : source.constructor) === null || _a === undefined ? undefined : _a.name) !== null && _b !== undefined ? _b : source} in ChecksumStream.`);
    }
    const encoder = base64Encoder !== null && base64Encoder !== undefined ? base64Encoder : util_base64_1.toBase64;
    if (typeof TransformStream !== "function") {
      throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
    }
    const transform = new TransformStream({
      start() {},
      async transform(chunk, controller) {
        checksum.update(chunk);
        controller.enqueue(chunk);
      },
      async flush(controller) {
        const digest = await checksum.digest();
        const received = encoder(digest);
        if (expectedChecksum !== received) {
          const error = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}"` + ` in response header "${checksumSourceLocation}".`);
          controller.error(error);
        } else {
          controller.terminate();
        }
      }
    });
    source.pipeThrough(transform);
    const readable = transform.readable;
    Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);
    return readable;
  };
  exports.createChecksumStream = createChecksumStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js
var require_createChecksumStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createChecksumStream = undefined;
  var stream_type_check_1 = require_stream_type_check();
  var ChecksumStream_1 = require_ChecksumStream();
  var createChecksumStream_browser_1 = require_createChecksumStream_browser();
  function createChecksumStream2(init) {
    if (typeof ReadableStream === "function" && (0, stream_type_check_1.isReadableStream)(init.source)) {
      return (0, createChecksumStream_browser_1.createChecksumStream)(init);
    }
    return new ChecksumStream_1.ChecksumStream(init);
  }
  exports.createChecksumStream = createChecksumStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js
var require_ByteArrayCollector = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ByteArrayCollector = undefined;

  class ByteArrayCollector {
    constructor(allocByteArray) {
      this.allocByteArray = allocByteArray;
      this.byteLength = 0;
      this.byteArrays = [];
    }
    push(byteArray) {
      this.byteArrays.push(byteArray);
      this.byteLength += byteArray.byteLength;
    }
    flush() {
      if (this.byteArrays.length === 1) {
        const bytes = this.byteArrays[0];
        this.reset();
        return bytes;
      }
      const aggregation = this.allocByteArray(this.byteLength);
      let cursor = 0;
      for (let i = 0;i < this.byteArrays.length; ++i) {
        const bytes = this.byteArrays[i];
        aggregation.set(bytes, cursor);
        cursor += bytes.byteLength;
      }
      this.reset();
      return aggregation;
    }
    reset() {
      this.byteArrays = [];
      this.byteLength = 0;
    }
  }
  exports.ByteArrayCollector = ByteArrayCollector;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js
var require_createBufferedReadableStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.modeOf = exports.sizeOf = exports.flush = exports.merge = exports.createBufferedReadable = exports.createBufferedReadableStream = undefined;
  var ByteArrayCollector_1 = require_ByteArrayCollector();
  function createBufferedReadableStream(upstream, size, logger) {
    const reader = upstream.getReader();
    let streamBufferingLoggedWarning = false;
    let bytesSeen = 0;
    const buffers = ["", new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2))];
    let mode = -1;
    const pull = async (controller) => {
      const { value, done } = await reader.read();
      const chunk = value;
      if (done) {
        if (mode !== -1) {
          const remainder = flush(buffers, mode);
          if (sizeOf(remainder) > 0) {
            controller.enqueue(remainder);
          }
        }
        controller.close();
      } else {
        const chunkMode = modeOf(chunk, false);
        if (mode !== chunkMode) {
          if (mode >= 0) {
            controller.enqueue(flush(buffers, mode));
          }
          mode = chunkMode;
        }
        if (mode === -1) {
          controller.enqueue(chunk);
          return;
        }
        const chunkSize = sizeOf(chunk);
        bytesSeen += chunkSize;
        const bufferSize = sizeOf(buffers[mode]);
        if (chunkSize >= size && bufferSize === 0) {
          controller.enqueue(chunk);
        } else {
          const newSize = merge(buffers, mode, chunk);
          if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
            streamBufferingLoggedWarning = true;
            logger === null || logger === undefined || logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
          }
          if (newSize >= size) {
            controller.enqueue(flush(buffers, mode));
          } else {
            await pull(controller);
          }
        }
      }
    };
    return new ReadableStream({
      pull
    });
  }
  exports.createBufferedReadableStream = createBufferedReadableStream;
  exports.createBufferedReadable = createBufferedReadableStream;
  function merge(buffers, mode, chunk) {
    switch (mode) {
      case 0:
        buffers[0] += chunk;
        return sizeOf(buffers[0]);
      case 1:
      case 2:
        buffers[mode].push(chunk);
        return sizeOf(buffers[mode]);
    }
  }
  exports.merge = merge;
  function flush(buffers, mode) {
    switch (mode) {
      case 0:
        const s = buffers[0];
        buffers[0] = "";
        return s;
      case 1:
      case 2:
        return buffers[mode].flush();
    }
    throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
  }
  exports.flush = flush;
  function sizeOf(chunk) {
    var _a, _b;
    return (_b = (_a = chunk === null || chunk === undefined ? undefined : chunk.byteLength) !== null && _a !== undefined ? _a : chunk === null || chunk === undefined ? undefined : chunk.length) !== null && _b !== undefined ? _b : 0;
  }
  exports.sizeOf = sizeOf;
  function modeOf(chunk, allowBuffer = true) {
    if (allowBuffer && typeof Buffer !== "undefined" && chunk instanceof Buffer) {
      return 2;
    }
    if (chunk instanceof Uint8Array) {
      return 1;
    }
    if (typeof chunk === "string") {
      return 0;
    }
    return -1;
  }
  exports.modeOf = modeOf;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js
var require_createBufferedReadable = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createBufferedReadable = undefined;
  var node_stream_1 = __require("node:stream");
  var ByteArrayCollector_1 = require_ByteArrayCollector();
  var createBufferedReadableStream_1 = require_createBufferedReadableStream();
  var stream_type_check_1 = require_stream_type_check();
  function createBufferedReadable2(upstream, size, logger) {
    if ((0, stream_type_check_1.isReadableStream)(upstream)) {
      return (0, createBufferedReadableStream_1.createBufferedReadableStream)(upstream, size, logger);
    }
    const downstream = new node_stream_1.Readable({ read() {} });
    let streamBufferingLoggedWarning = false;
    let bytesSeen = 0;
    const buffers = [
      "",
      new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2)),
      new ByteArrayCollector_1.ByteArrayCollector((size2) => Buffer.from(new Uint8Array(size2)))
    ];
    let mode = -1;
    upstream.on("data", (chunk) => {
      const chunkMode = (0, createBufferedReadableStream_1.modeOf)(chunk, true);
      if (mode !== chunkMode) {
        if (mode >= 0) {
          downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
        }
        mode = chunkMode;
      }
      if (mode === -1) {
        downstream.push(chunk);
        return;
      }
      const chunkSize = (0, createBufferedReadableStream_1.sizeOf)(chunk);
      bytesSeen += chunkSize;
      const bufferSize = (0, createBufferedReadableStream_1.sizeOf)(buffers[mode]);
      if (chunkSize >= size && bufferSize === 0) {
        downstream.push(chunk);
      } else {
        const newSize = (0, createBufferedReadableStream_1.merge)(buffers, mode, chunk);
        if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
          streamBufferingLoggedWarning = true;
          logger === null || logger === undefined || logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
        }
        if (newSize >= size) {
          downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
        }
      }
    });
    upstream.on("end", () => {
      if (mode !== -1) {
        const remainder = (0, createBufferedReadableStream_1.flush)(buffers, mode);
        if ((0, createBufferedReadableStream_1.sizeOf)(remainder) > 0) {
          downstream.push(remainder);
        }
      }
      downstream.push(null);
    });
    return downstream;
  }
  exports.createBufferedReadable = createBufferedReadable2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getAwsChunkedEncodingStream = undefined;
  var stream_1 = __require("stream");
  var getAwsChunkedEncodingStream2 = (readableStream, options) => {
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {} });
    readableStream.on("data", (data) => {
      const length = bodyLengthChecker(data) || 0;
      awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
      awsChunkedEncodingStream.push(data);
      awsChunkedEncodingStream.push(`\r
`);
    });
    readableStream.on("end", async () => {
      awsChunkedEncodingStream.push(`0\r
`);
      if (checksumRequired) {
        const checksum = base64Encoder(await digest);
        awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
        awsChunkedEncodingStream.push(`\r
`);
      }
      awsChunkedEncodingStream.push(null);
    });
    return awsChunkedEncodingStream;
  };
  exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js
var require_headStream_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.headStream = undefined;
  async function headStream2(stream, bytes) {
    var _a;
    let byteLengthCounter = 0;
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    while (!isDone) {
      const { done, value } = await reader.read();
      if (value) {
        chunks.push(value);
        byteLengthCounter += (_a = value === null || value === undefined ? undefined : value.byteLength) !== null && _a !== undefined ? _a : 0;
      }
      if (byteLengthCounter >= bytes) {
        break;
      }
      isDone = done;
    }
    reader.releaseLock();
    const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
    let offset = 0;
    for (const chunk of chunks) {
      if (chunk.byteLength > collected.byteLength - offset) {
        collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
        break;
      } else {
        collected.set(chunk, offset);
      }
      offset += chunk.length;
    }
    return collected;
  }
  exports.headStream = headStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/headStream.js
var require_headStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.headStream = undefined;
  var stream_1 = __require("stream");
  var headStream_browser_1 = require_headStream_browser();
  var stream_type_check_1 = require_stream_type_check();
  var headStream2 = (stream, bytes) => {
    if ((0, stream_type_check_1.isReadableStream)(stream)) {
      return (0, headStream_browser_1.headStream)(stream, bytes);
    }
    return new Promise((resolve, reject) => {
      const collector = new Collector;
      collector.limit = bytes;
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
        resolve(bytes2);
      });
    });
  };
  exports.headStream = headStream2;

  class Collector extends stream_1.Writable {
    constructor() {
      super(...arguments);
      this.buffers = [];
      this.limit = Infinity;
      this.bytesBuffered = 0;
    }
    _write(chunk, encoding, callback) {
      var _a;
      this.buffers.push(chunk);
      this.bytesBuffered += (_a = chunk.byteLength) !== null && _a !== undefined ? _a : 0;
      if (this.bytesBuffered >= this.limit) {
        const excess = this.bytesBuffered - this.limit;
        const tailBuffer = this.buffers[this.buffers.length - 1];
        this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
        this.emit("finish");
      }
      callback();
    }
  }
});

// ../../node_modules/.bun/@smithy+util-uri-escape@4.0.0/node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs12 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    escapeUri: () => escapeUri,
    escapeUriPath: () => escapeUriPath
  });
  module.exports = __toCommonJS(src_exports);
  var escapeUri = /* @__PURE__ */ __name((uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), "escapeUri");
  var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
  var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
});

// ../../node_modules/.bun/@smithy+querystring-builder@4.0.2/node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs13 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    buildQueryString: () => buildQueryString
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_uri_escape = require_dist_cjs12();
  function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
      const value = query[key];
      key = (0, import_util_uri_escape.escapeUri)(key);
      if (Array.isArray(value)) {
        for (let i = 0, iLen = value.length;i < iLen; i++) {
          parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
        }
      } else {
        let qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
        }
        parts.push(qsEntry);
      }
    }
    return parts.join("&");
  }
  __name(buildQueryString, "buildQueryString");
});

// ../../node_modules/.bun/@smithy+node-http-handler@4.0.4/node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs14 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
    NodeHttp2Handler: () => NodeHttp2Handler,
    NodeHttpHandler: () => NodeHttpHandler,
    streamCollector: () => streamCollector
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_querystring_builder = require_dist_cjs13();
  var import_http = __require("http");
  var import_https = __require("https");
  var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
    const transformedHeaders = {};
    for (const name of Object.keys(headers)) {
      const headerValues = headers[name];
      transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
  }, "getTransformedHeaders");
  var timing = {
    setTimeout: (cb, ms) => setTimeout(cb, ms),
    clearTimeout: (timeoutId) => clearTimeout(timeoutId)
  };
  var DEFER_EVENT_LISTENER_TIME = 1000;
  var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
    if (!timeoutInMs) {
      return -1;
    }
    const registerTimeout = /* @__PURE__ */ __name((offset) => {
      const timeoutId = timing.setTimeout(() => {
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs - offset);
      const doWithSocket = /* @__PURE__ */ __name((socket) => {
        if (socket?.connecting) {
          socket.on("connect", () => {
            timing.clearTimeout(timeoutId);
          });
        } else {
          timing.clearTimeout(timeoutId);
        }
      }, "doWithSocket");
      if (request.socket) {
        doWithSocket(request.socket);
      } else {
        request.on("socket", doWithSocket);
      }
    }, "registerTimeout");
    if (timeoutInMs < 2000) {
      registerTimeout(0);
      return 0;
    }
    return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
  }, "setConnectionTimeout");
  var DEFER_EVENT_LISTENER_TIME2 = 3000;
  var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
    if (keepAlive !== true) {
      return -1;
    }
    const registerListener = /* @__PURE__ */ __name(() => {
      if (request.socket) {
        request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      } else {
        request.on("socket", (socket) => {
          socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        });
      }
    }, "registerListener");
    if (deferTimeMs === 0) {
      registerListener();
      return 0;
    }
    return timing.setTimeout(registerListener, deferTimeMs);
  }, "setSocketKeepAlive");
  var DEFER_EVENT_LISTENER_TIME3 = 3000;
  var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT) => {
    const registerTimeout = /* @__PURE__ */ __name((offset) => {
      const timeout = timeoutInMs - offset;
      const onTimeout = /* @__PURE__ */ __name(() => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      }, "onTimeout");
      if (request.socket) {
        request.socket.setTimeout(timeout, onTimeout);
        request.on("close", () => request.socket?.removeListener("timeout", onTimeout));
      } else {
        request.setTimeout(timeout, onTimeout);
      }
    }, "registerTimeout");
    if (0 < timeoutInMs && timeoutInMs < 6000) {
      registerTimeout(0);
      return 0;
    }
    return timing.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3), DEFER_EVENT_LISTENER_TIME3);
  }, "setSocketTimeout");
  var import_stream = __require("stream");
  var MIN_WAIT_TIME = 6000;
  async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    const headers = request.headers ?? {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let sendBody = true;
    if (expect === "100-continue") {
      sendBody = await Promise.race([
        new Promise((resolve) => {
          timeoutId = Number(timing.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
        }),
        new Promise((resolve) => {
          httpRequest.on("continue", () => {
            timing.clearTimeout(timeoutId);
            resolve(true);
          });
          httpRequest.on("response", () => {
            timing.clearTimeout(timeoutId);
            resolve(false);
          });
          httpRequest.on("error", () => {
            timing.clearTimeout(timeoutId);
            resolve(false);
          });
        })
      ]);
    }
    if (sendBody) {
      writeBody(httpRequest, request.body);
    }
  }
  __name(writeRequestBody, "writeRequestBody");
  function writeBody(httpRequest, body) {
    if (body instanceof import_stream.Readable) {
      body.pipe(httpRequest);
      return;
    }
    if (body) {
      if (Buffer.isBuffer(body) || typeof body === "string") {
        httpRequest.end(body);
        return;
      }
      const uint8 = body;
      if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
        httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
        return;
      }
      httpRequest.end(Buffer.from(body));
      return;
    }
    httpRequest.end();
  }
  __name(writeBody, "writeBody");
  var DEFAULT_REQUEST_TIMEOUT = 0;
  var NodeHttpHandler = class _NodeHttpHandler {
    constructor(options) {
      this.socketWarningTimestamp = 0;
      this.metadata = { handlerProtocol: "http/1.1" };
      this.configProvider = new Promise((resolve, reject) => {
        if (typeof options === "function") {
          options().then((_options) => {
            resolve(this.resolveDefaultConfig(_options));
          }).catch(reject);
        } else {
          resolve(this.resolveDefaultConfig(options));
        }
      });
    }
    static {
      __name(this, "NodeHttpHandler");
    }
    static create(instanceOrOptions) {
      if (typeof instanceOrOptions?.handle === "function") {
        return instanceOrOptions;
      }
      return new _NodeHttpHandler(instanceOrOptions);
    }
    static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {
      const { sockets, requests, maxSockets } = agent;
      if (typeof maxSockets !== "number" || maxSockets === Infinity) {
        return socketWarningTimestamp;
      }
      const interval = 15000;
      if (Date.now() - interval < socketWarningTimestamp) {
        return socketWarningTimestamp;
      }
      if (sockets && requests) {
        for (const origin in sockets) {
          const socketsInUse = sockets[origin]?.length ?? 0;
          const requestsEnqueued = requests[origin]?.length ?? 0;
          if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
            logger?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);
            return Date.now();
          }
        }
      }
      return socketWarningTimestamp;
    }
    resolveDefaultConfig(options) {
      const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
      const keepAlive = true;
      const maxSockets = 50;
      return {
        connectionTimeout,
        requestTimeout: requestTimeout ?? socketTimeout,
        socketAcquisitionWarningTimeout,
        httpAgent: (() => {
          if (httpAgent instanceof import_http.Agent || typeof httpAgent?.destroy === "function") {
            return httpAgent;
          }
          return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });
        })(),
        httpsAgent: (() => {
          if (httpsAgent instanceof import_https.Agent || typeof httpsAgent?.destroy === "function") {
            return httpsAgent;
          }
          return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });
        })(),
        logger: console
      };
    }
    destroy() {
      this.config?.httpAgent?.destroy();
      this.config?.httpsAgent?.destroy();
    }
    async handle(request, { abortSignal } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
      }
      return new Promise((_resolve, _reject) => {
        let writeRequestBodyPromise = undefined;
        const timeouts = [];
        const resolve = /* @__PURE__ */ __name(async (arg) => {
          await writeRequestBodyPromise;
          timeouts.forEach(timing.clearTimeout);
          _resolve(arg);
        }, "resolve");
        const reject = /* @__PURE__ */ __name(async (arg) => {
          await writeRequestBodyPromise;
          timeouts.forEach(timing.clearTimeout);
          _reject(arg);
        }, "reject");
        if (!this.config) {
          throw new Error("Node HTTP request handler config is not resolved");
        }
        if (abortSignal?.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const isSSL = request.protocol === "https:";
        const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
        timeouts.push(timing.setTimeout(() => {
          this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);
        }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2000) + (this.config.connectionTimeout ?? 1000)));
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        let auth = undefined;
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}`;
        }
        let path = request.path;
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let hostname = request.hostname ?? "";
        if (hostname[0] === "[" && hostname.endsWith("]")) {
          hostname = request.hostname.slice(1, -1);
        } else {
          hostname = request.hostname;
        }
        const nodeHttpsOptions = {
          headers: request.headers,
          host: hostname,
          method: request.method,
          path,
          port: request.port,
          agent,
          auth
        };
        const requestFunc = isSSL ? import_https.request : import_http.request;
        const req = requestFunc(nodeHttpsOptions, (res) => {
          const httpResponse = new import_protocol_http.HttpResponse({
            statusCode: res.statusCode || -1,
            reason: res.statusMessage,
            headers: getTransformedHeaders(res.headers),
            body: res
          });
          resolve({ response: httpResponse });
        });
        req.on("error", (err) => {
          if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
            reject(Object.assign(err, { name: "TimeoutError" }));
          } else {
            reject(err);
          }
        });
        if (abortSignal) {
          const onAbort = /* @__PURE__ */ __name(() => {
            req.destroy();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          }, "onAbort");
          if (typeof abortSignal.addEventListener === "function") {
            const signal = abortSignal;
            signal.addEventListener("abort", onAbort, { once: true });
            req.once("close", () => signal.removeEventListener("abort", onAbort));
          } else {
            abortSignal.onabort = onAbort;
          }
        }
        timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
        timeouts.push(setSocketTimeout(req, reject, this.config.requestTimeout));
        const httpAgent = nodeHttpsOptions.agent;
        if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
          timeouts.push(setSocketKeepAlive(req, {
            keepAlive: httpAgent.keepAlive,
            keepAliveMsecs: httpAgent.keepAliveMsecs
          }));
        }
        writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e) => {
          timeouts.forEach(timing.clearTimeout);
          return _reject(e);
        });
      });
    }
    updateHttpClientConfig(key, value) {
      this.config = undefined;
      this.configProvider = this.configProvider.then((config) => {
        return {
          ...config,
          [key]: value
        };
      });
    }
    httpHandlerConfigs() {
      return this.config ?? {};
    }
  };
  var import_http22 = __require("http2");
  var import_http2 = __toESM2(__require("http2"));
  var NodeHttp2ConnectionPool = class {
    constructor(sessions) {
      this.sessions = [];
      this.sessions = sessions ?? [];
    }
    static {
      __name(this, "NodeHttp2ConnectionPool");
    }
    poll() {
      if (this.sessions.length > 0) {
        return this.sessions.shift();
      }
    }
    offerLast(session) {
      this.sessions.push(session);
    }
    contains(session) {
      return this.sessions.includes(session);
    }
    remove(session) {
      this.sessions = this.sessions.filter((s) => s !== session);
    }
    [Symbol.iterator]() {
      return this.sessions[Symbol.iterator]();
    }
    destroy(connection) {
      for (const session of this.sessions) {
        if (session === connection) {
          if (!session.destroyed) {
            session.destroy();
          }
        }
      }
    }
  };
  var NodeHttp2ConnectionManager = class {
    constructor(config) {
      this.sessionCache = /* @__PURE__ */ new Map;
      this.config = config;
      if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
        throw new RangeError("maxConcurrency must be greater than zero.");
      }
    }
    static {
      __name(this, "NodeHttp2ConnectionManager");
    }
    lease(requestContext, connectionConfiguration) {
      const url = this.getUrlString(requestContext);
      const existingPool = this.sessionCache.get(url);
      if (existingPool) {
        const existingSession = existingPool.poll();
        if (existingSession && !this.config.disableConcurrency) {
          return existingSession;
        }
      }
      const session = import_http2.default.connect(url);
      if (this.config.maxConcurrency) {
        session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
          if (err) {
            throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
          }
        });
      }
      session.unref();
      const destroySessionCb = /* @__PURE__ */ __name(() => {
        session.destroy();
        this.deleteSession(url, session);
      }, "destroySessionCb");
      session.on("goaway", destroySessionCb);
      session.on("error", destroySessionCb);
      session.on("frameError", destroySessionCb);
      session.on("close", () => this.deleteSession(url, session));
      if (connectionConfiguration.requestTimeout) {
        session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
      }
      const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool;
      connectionPool.offerLast(session);
      this.sessionCache.set(url, connectionPool);
      return session;
    }
    deleteSession(authority, session) {
      const existingConnectionPool = this.sessionCache.get(authority);
      if (!existingConnectionPool) {
        return;
      }
      if (!existingConnectionPool.contains(session)) {
        return;
      }
      existingConnectionPool.remove(session);
      this.sessionCache.set(authority, existingConnectionPool);
    }
    release(requestContext, session) {
      const cacheKey = this.getUrlString(requestContext);
      this.sessionCache.get(cacheKey)?.offerLast(session);
    }
    destroy() {
      for (const [key, connectionPool] of this.sessionCache) {
        for (const session of connectionPool) {
          if (!session.destroyed) {
            session.destroy();
          }
          connectionPool.remove(session);
        }
        this.sessionCache.delete(key);
      }
    }
    setMaxConcurrentStreams(maxConcurrentStreams) {
      if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
        throw new RangeError("maxConcurrentStreams must be greater than zero.");
      }
      this.config.maxConcurrency = maxConcurrentStreams;
    }
    setDisableConcurrentStreams(disableConcurrentStreams) {
      this.config.disableConcurrency = disableConcurrentStreams;
    }
    getUrlString(request) {
      return request.destination.toString();
    }
  };
  var NodeHttp2Handler = class _NodeHttp2Handler {
    constructor(options) {
      this.metadata = { handlerProtocol: "h2" };
      this.connectionManager = new NodeHttp2ConnectionManager({});
      this.configProvider = new Promise((resolve, reject) => {
        if (typeof options === "function") {
          options().then((opts) => {
            resolve(opts || {});
          }).catch(reject);
        } else {
          resolve(options || {});
        }
      });
    }
    static {
      __name(this, "NodeHttp2Handler");
    }
    static create(instanceOrOptions) {
      if (typeof instanceOrOptions?.handle === "function") {
        return instanceOrOptions;
      }
      return new _NodeHttp2Handler(instanceOrOptions);
    }
    destroy() {
      this.connectionManager.destroy();
    }
    async handle(request, { abortSignal } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
        this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
        if (this.config.maxConcurrentStreams) {
          this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
        }
      }
      const { requestTimeout, disableConcurrentStreams } = this.config;
      return new Promise((_resolve, _reject) => {
        let fulfilled = false;
        let writeRequestBodyPromise = undefined;
        const resolve = /* @__PURE__ */ __name(async (arg) => {
          await writeRequestBodyPromise;
          _resolve(arg);
        }, "resolve");
        const reject = /* @__PURE__ */ __name(async (arg) => {
          await writeRequestBodyPromise;
          _reject(arg);
        }, "reject");
        if (abortSignal?.aborted) {
          fulfilled = true;
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const { hostname, method, port, protocol, query } = request;
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
        const requestContext = { destination: new URL(authority) };
        const session = this.connectionManager.lease(requestContext, {
          requestTimeout: this.config?.sessionTimeout,
          disableConcurrentStreams: disableConcurrentStreams || false
        });
        const rejectWithDestroy = /* @__PURE__ */ __name((err) => {
          if (disableConcurrentStreams) {
            this.destroySession(session);
          }
          fulfilled = true;
          reject(err);
        }, "rejectWithDestroy");
        const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
        let path = request.path;
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        const req = session.request({
          ...request.headers,
          [import_http22.constants.HTTP2_HEADER_PATH]: path,
          [import_http22.constants.HTTP2_HEADER_METHOD]: method
        });
        session.ref();
        req.on("response", (headers) => {
          const httpResponse = new import_protocol_http.HttpResponse({
            statusCode: headers[":status"] || -1,
            headers: getTransformedHeaders(headers),
            body: req
          });
          fulfilled = true;
          resolve({ response: httpResponse });
          if (disableConcurrentStreams) {
            session.close();
            this.connectionManager.deleteSession(authority, session);
          }
        });
        if (requestTimeout) {
          req.setTimeout(requestTimeout, () => {
            req.close();
            const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
            timeoutError.name = "TimeoutError";
            rejectWithDestroy(timeoutError);
          });
        }
        if (abortSignal) {
          const onAbort = /* @__PURE__ */ __name(() => {
            req.close();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectWithDestroy(abortError);
          }, "onAbort");
          if (typeof abortSignal.addEventListener === "function") {
            const signal = abortSignal;
            signal.addEventListener("abort", onAbort, { once: true });
            req.once("close", () => signal.removeEventListener("abort", onAbort));
          } else {
            abortSignal.onabort = onAbort;
          }
        }
        req.on("frameError", (type, code, id) => {
          rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
        });
        req.on("error", rejectWithDestroy);
        req.on("aborted", () => {
          rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
        });
        req.on("close", () => {
          session.unref();
          if (disableConcurrentStreams) {
            session.destroy();
          }
          if (!fulfilled) {
            rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
          }
        });
        writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
      });
    }
    updateHttpClientConfig(key, value) {
      this.config = undefined;
      this.configProvider = this.configProvider.then((config) => {
        return {
          ...config,
          [key]: value
        };
      });
    }
    httpHandlerConfigs() {
      return this.config ?? {};
    }
    destroySession(session) {
      if (!session.destroyed) {
        session.destroy();
      }
    }
  };
  var Collector = class extends import_stream.Writable {
    constructor() {
      super(...arguments);
      this.bufferedBytes = [];
    }
    static {
      __name(this, "Collector");
    }
    _write(chunk, encoding, callback) {
      this.bufferedBytes.push(chunk);
      callback();
    }
  };
  var streamCollector = /* @__PURE__ */ __name((stream) => {
    if (isReadableStreamInstance(stream)) {
      return collectReadableStream(stream);
    }
    return new Promise((resolve, reject) => {
      const collector = new Collector;
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
  }, "streamCollector");
  var isReadableStreamInstance = /* @__PURE__ */ __name((stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream, "isReadableStreamInstance");
  async function collectReadableStream(stream) {
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    let length = 0;
    while (!isDone) {
      const { done, value } = await reader.read();
      if (value) {
        chunks.push(value);
        length += value.length;
      }
      isDone = done;
    }
    const collected = new Uint8Array(length);
    let offset = 0;
    for (const chunk of chunks) {
      collected.set(chunk, offset);
      offset += chunk.length;
    }
    return collected;
  }
  __name(collectReadableStream, "collectReadableStream");
});

// ../../node_modules/.bun/@smithy+fetch-http-handler@5.0.2/node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs15 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    FetchHttpHandler: () => FetchHttpHandler,
    keepAliveSupport: () => keepAliveSupport,
    streamCollector: () => streamCollector
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_querystring_builder = require_dist_cjs13();
  function createRequest(url, requestOptions) {
    return new Request(url, requestOptions);
  }
  __name(createRequest, "createRequest");
  function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject) => {
      if (timeoutInMs) {
        setTimeout(() => {
          const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
          timeoutError.name = "TimeoutError";
          reject(timeoutError);
        }, timeoutInMs);
      }
    });
  }
  __name(requestTimeout, "requestTimeout");
  var keepAliveSupport = {
    supported: undefined
  };
  var FetchHttpHandler = class _FetchHttpHandler {
    static {
      __name(this, "FetchHttpHandler");
    }
    static create(instanceOrOptions) {
      if (typeof instanceOrOptions?.handle === "function") {
        return instanceOrOptions;
      }
      return new _FetchHttpHandler(instanceOrOptions);
    }
    constructor(options) {
      if (typeof options === "function") {
        this.configProvider = options().then((opts) => opts || {});
      } else {
        this.config = options ?? {};
        this.configProvider = Promise.resolve(this.config);
      }
      if (keepAliveSupport.supported === undefined) {
        keepAliveSupport.supported = Boolean(typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]"));
      }
    }
    destroy() {}
    async handle(request, { abortSignal } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
      }
      const requestTimeoutInMs = this.config.requestTimeout;
      const keepAlive = this.config.keepAlive === true;
      const credentials = this.config.credentials;
      if (abortSignal?.aborted) {
        const abortError = new Error("Request aborted");
        abortError.name = "AbortError";
        return Promise.reject(abortError);
      }
      let path = request.path;
      const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
      if (queryString) {
        path += `?${queryString}`;
      }
      if (request.fragment) {
        path += `#${request.fragment}`;
      }
      let auth = "";
      if (request.username != null || request.password != null) {
        const username = request.username ?? "";
        const password = request.password ?? "";
        auth = `${username}:${password}@`;
      }
      const { port, method } = request;
      const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
      const body = method === "GET" || method === "HEAD" ? undefined : request.body;
      const requestOptions = {
        body,
        headers: new Headers(request.headers),
        method,
        credentials
      };
      if (this.config?.cache) {
        requestOptions.cache = this.config.cache;
      }
      if (body) {
        requestOptions.duplex = "half";
      }
      if (typeof AbortController !== "undefined") {
        requestOptions.signal = abortSignal;
      }
      if (keepAliveSupport.supported) {
        requestOptions.keepalive = keepAlive;
      }
      if (typeof this.config.requestInit === "function") {
        Object.assign(requestOptions, this.config.requestInit(request));
      }
      let removeSignalEventListener = /* @__PURE__ */ __name(() => {}, "removeSignalEventListener");
      const fetchRequest = createRequest(url, requestOptions);
      const raceOfPromises = [
        fetch(fetchRequest).then((response) => {
          const fetchHeaders = response.headers;
          const transformedHeaders = {};
          for (const pair of fetchHeaders.entries()) {
            transformedHeaders[pair[0]] = pair[1];
          }
          const hasReadableStream = response.body != null;
          if (!hasReadableStream) {
            return response.blob().then((body2) => ({
              response: new import_protocol_http.HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: body2
              })
            }));
          }
          return {
            response: new import_protocol_http.HttpResponse({
              headers: transformedHeaders,
              reason: response.statusText,
              statusCode: response.status,
              body: response.body
            })
          };
        }),
        requestTimeout(requestTimeoutInMs)
      ];
      if (abortSignal) {
        raceOfPromises.push(new Promise((resolve, reject) => {
          const onAbort = /* @__PURE__ */ __name(() => {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          }, "onAbort");
          if (typeof abortSignal.addEventListener === "function") {
            const signal = abortSignal;
            signal.addEventListener("abort", onAbort, { once: true });
            removeSignalEventListener = /* @__PURE__ */ __name(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
          } else {
            abortSignal.onabort = onAbort;
          }
        }));
      }
      return Promise.race(raceOfPromises).finally(removeSignalEventListener);
    }
    updateHttpClientConfig(key, value) {
      this.config = undefined;
      this.configProvider = this.configProvider.then((config) => {
        config[key] = value;
        return config;
      });
    }
    httpHandlerConfigs() {
      return this.config ?? {};
    }
  };
  var import_util_base64 = require_dist_cjs11();
  var streamCollector = /* @__PURE__ */ __name(async (stream) => {
    if (typeof Blob === "function" && stream instanceof Blob || stream.constructor?.name === "Blob") {
      if (Blob.prototype.arrayBuffer !== undefined) {
        return new Uint8Array(await stream.arrayBuffer());
      }
      return collectBlob(stream);
    }
    return collectStream(stream);
  }, "streamCollector");
  async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0, import_util_base64.fromBase64)(base64);
    return new Uint8Array(arrayBuffer);
  }
  __name(collectBlob, "collectBlob");
  async function collectStream(stream) {
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    let length = 0;
    while (!isDone) {
      const { done, value } = await reader.read();
      if (value) {
        chunks.push(value);
        length += value.length;
      }
      isDone = done;
    }
    const collected = new Uint8Array(length);
    let offset = 0;
    for (const chunk of chunks) {
      collected.set(chunk, offset);
      offset += chunk.length;
    }
    return collected;
  }
  __name(collectStream, "collectStream");
  function readToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader;
      reader.onloadend = () => {
        if (reader.readyState !== 2) {
          return reject(new Error("Reader aborted too early"));
        }
        const result = reader.result ?? "";
        const commaIndex = result.indexOf(",");
        const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
        resolve(result.substring(dataOffset));
      };
      reader.onabort = () => reject(new Error("Read aborted"));
      reader.onerror = () => reject(reader.error);
      reader.readAsDataURL(blob);
    });
  }
  __name(readToBase64, "readToBase64");
});

// ../../node_modules/.bun/@smithy+util-hex-encoding@4.0.0/node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs16 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fromHex: () => fromHex,
    toHex: () => toHex
  });
  module.exports = __toCommonJS(src_exports);
  var SHORT_TO_HEX = {};
  var HEX_TO_SHORT = {};
  for (let i = 0;i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
      encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
  }
  function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
      throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0;i < encoded.length; i += 2) {
      const encodedByte = encoded.slice(i, i + 2).toLowerCase();
      if (encodedByte in HEX_TO_SHORT) {
        out[i / 2] = HEX_TO_SHORT[encodedByte];
      } else {
        throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
      }
    }
    return out;
  }
  __name(fromHex, "fromHex");
  function toHex(bytes) {
    let out = "";
    for (let i = 0;i < bytes.byteLength; i++) {
      out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
  }
  __name(toHex, "toHex");
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.sdkStreamMixin = undefined;
  var fetch_http_handler_1 = require_dist_cjs15();
  var util_base64_1 = require_dist_cjs11();
  var util_hex_encoding_1 = require_dist_cjs16();
  var util_utf8_1 = require_dist_cjs10();
  var stream_type_check_1 = require_stream_type_check();
  var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
  var sdkStreamMixin2 = (stream) => {
    var _a, _b;
    if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {
      const name = ((_b = (_a = stream === null || stream === undefined ? undefined : stream.__proto__) === null || _a === undefined ? undefined : _a.constructor) === null || _b === undefined ? undefined : _b.name) || stream;
      throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
      if (transformed) {
        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
      }
      transformed = true;
      return await (0, fetch_http_handler_1.streamCollector)(stream);
    };
    const blobToWebStream = (blob) => {
      if (typeof blob.stream !== "function") {
        throw new Error(`Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.
` + "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
      }
      return blob.stream();
    };
    return Object.assign(stream, {
      transformToByteArray,
      transformToString: async (encoding) => {
        const buf = await transformToByteArray();
        if (encoding === "base64") {
          return (0, util_base64_1.toBase64)(buf);
        } else if (encoding === "hex") {
          return (0, util_hex_encoding_1.toHex)(buf);
        } else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
          return (0, util_utf8_1.toUtf8)(buf);
        } else if (typeof TextDecoder === "function") {
          return new TextDecoder(encoding).decode(buf);
        } else {
          throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
        }
      },
      transformToWebStream: () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        if (isBlobInstance(stream)) {
          return blobToWebStream(stream);
        } else if ((0, stream_type_check_1.isReadableStream)(stream)) {
          return stream;
        } else {
          throw new Error(`Cannot transform payload to web stream, got ${stream}`);
        }
      }
    });
  };
  exports.sdkStreamMixin = sdkStreamMixin2;
  var isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.sdkStreamMixin = undefined;
  var node_http_handler_1 = require_dist_cjs14();
  var util_buffer_from_1 = require_dist_cjs9();
  var stream_1 = __require("stream");
  var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
  var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
  var sdkStreamMixin2 = (stream) => {
    var _a, _b;
    if (!(stream instanceof stream_1.Readable)) {
      try {
        return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
      } catch (e) {
        const name = ((_b = (_a = stream === null || stream === undefined ? undefined : stream.__proto__) === null || _a === undefined ? undefined : _a.constructor) === null || _b === undefined ? undefined : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
    }
    let transformed = false;
    const transformToByteArray = async () => {
      if (transformed) {
        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
      }
      transformed = true;
      return await (0, node_http_handler_1.streamCollector)(stream);
    };
    return Object.assign(stream, {
      transformToByteArray,
      transformToString: async (encoding) => {
        const buf = await transformToByteArray();
        if (encoding === undefined || Buffer.isEncoding(encoding)) {
          return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
        } else {
          const decoder = new TextDecoder(encoding);
          return decoder.decode(buf);
        }
      },
      transformToWebStream: () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        if (stream.readableFlowing !== null) {
          throw new Error("The stream has been consumed by other callbacks.");
        }
        if (typeof stream_1.Readable.toWeb !== "function") {
          throw new Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");
        }
        transformed = true;
        return stream_1.Readable.toWeb(stream);
      }
    });
  };
  exports.sdkStreamMixin = sdkStreamMixin2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js
var require_splitStream_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.splitStream = undefined;
  async function splitStream2(stream) {
    if (typeof stream.stream === "function") {
      stream = stream.stream();
    }
    const readableStream = stream;
    return readableStream.tee();
  }
  exports.splitStream = splitStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/splitStream.js
var require_splitStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.splitStream = undefined;
  var stream_1 = __require("stream");
  var splitStream_browser_1 = require_splitStream_browser();
  var stream_type_check_1 = require_stream_type_check();
  async function splitStream2(stream) {
    if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {
      return (0, splitStream_browser_1.splitStream)(stream);
    }
    const stream1 = new stream_1.PassThrough;
    const stream2 = new stream_1.PassThrough;
    stream.pipe(stream1);
    stream.pipe(stream2);
    return [stream1, stream2];
  }
  exports.splitStream = splitStream2;
});

// ../../node_modules/.bun/@smithy+util-stream@4.2.0/node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs17 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_base64 = require_dist_cjs11();
  var import_util_utf8 = require_dist_cjs10();
  function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") {
      return (0, import_util_base64.toBase64)(payload);
    }
    return (0, import_util_utf8.toUtf8)(payload);
  }
  __name(transformToString, "transformToString");
  function transformFromString(str, encoding) {
    if (encoding === "base64") {
      return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));
    }
    return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));
  }
  __name(transformFromString, "transformFromString");
  var Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
    static {
      __name(this, "Uint8ArrayBlobAdapter");
    }
    static fromString(source, encoding = "utf-8") {
      switch (typeof source) {
        case "string":
          return transformFromString(source, encoding);
        default:
          throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
      }
    }
    static mutate(source) {
      Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
      return source;
    }
    transformToString(encoding = "utf-8") {
      return transformToString(this, encoding);
    }
  };
  __reExport(src_exports, require_ChecksumStream(), module.exports);
  __reExport(src_exports, require_createChecksumStream(), module.exports);
  __reExport(src_exports, require_createBufferedReadable(), module.exports);
  __reExport(src_exports, require_getAwsChunkedEncodingStream(), module.exports);
  __reExport(src_exports, require_headStream(), module.exports);
  __reExport(src_exports, require_sdk_stream_mixin(), module.exports);
  __reExport(src_exports, require_splitStream(), module.exports);
  __reExport(src_exports, require_stream_type_check(), module.exports);
});

// ../../node_modules/.bun/@smithy+core@3.2.0/node_modules/@smithy/core/dist-cjs/submodules/protocols/index.js
var require_protocols = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var protocols_exports = {};
  __export(protocols_exports, {
    RequestBuilder: () => RequestBuilder,
    collectBody: () => collectBody2,
    extendedEncodeURIComponent: () => extendedEncodeURIComponent2,
    requestBuilder: () => requestBuilder2,
    resolvedPath: () => resolvedPath2
  });
  module.exports = __toCommonJS(protocols_exports);
  var import_util_stream = require_dist_cjs17();
  var collectBody2 = async (streamBody = new Uint8Array, context) => {
    if (streamBody instanceof Uint8Array) {
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array);
    }
    const fromContext = context.streamCollector(streamBody);
    return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
  };
  function extendedEncodeURIComponent2(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
      return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  var import_protocol_http = require_dist_cjs2();
  var resolvedPath2 = (resolvedPath22, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
      const labelValue = labelValueProvider();
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
      }
      resolvedPath22 = resolvedPath22.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent2(segment)).join("/") : extendedEncodeURIComponent2(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath22;
  };
  function requestBuilder2(input, context) {
    return new RequestBuilder(input, context);
  }
  var RequestBuilder = class {
    constructor(input, context) {
      this.input = input;
      this.context = context;
      this.query = {};
      this.method = "";
      this.headers = {};
      this.path = "";
      this.body = null;
      this.hostname = "";
      this.resolvePathStack = [];
    }
    async build() {
      const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
      this.path = basePath;
      for (const resolvePath of this.resolvePathStack) {
        resolvePath(this.path);
      }
      return new import_protocol_http.HttpRequest({
        protocol,
        hostname: this.hostname || hostname,
        port,
        method: this.method,
        path: this.path,
        query: this.query,
        body: this.body,
        headers: this.headers
      });
    }
    hn(hostname) {
      this.hostname = hostname;
      return this;
    }
    bp(uriLabel) {
      this.resolvePathStack.push((basePath) => {
        this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
      });
      return this;
    }
    p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
      this.resolvePathStack.push((path) => {
        this.path = resolvedPath2(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
      });
      return this;
    }
    h(headers) {
      this.headers = headers;
      return this;
    }
    q(query) {
      this.query = query;
      return this;
    }
    b(body) {
      this.body = body;
      return this;
    }
    m(method) {
      this.method = method;
      return this;
    }
  };
});

// ../../node_modules/.bun/@smithy+core@3.2.0/node_modules/@smithy/core/dist-cjs/index.js
var require_dist_cjs18 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
    EXPIRATION_MS: () => EXPIRATION_MS,
    HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
    HttpBearerAuthSigner: () => HttpBearerAuthSigner,
    NoAuthSigner: () => NoAuthSigner,
    createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
    createPaginator: () => createPaginator,
    doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
    getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
    getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
    getHttpSigningPlugin: () => getHttpSigningPlugin,
    getSmithyContext: () => getSmithyContext,
    httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
    httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
    httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
    httpSigningMiddleware: () => httpSigningMiddleware,
    httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
    isIdentityExpired: () => isIdentityExpired,
    memoizeIdentityProvider: () => memoizeIdentityProvider,
    normalizeProvider: () => normalizeProvider,
    requestBuilder: () => import_protocols.requestBuilder,
    setFeature: () => setFeature
  });
  module.exports = __toCommonJS(src_exports);
  var import_types = require_dist_cjs();
  var getSmithyContext = /* @__PURE__ */ __name((context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
  var import_util_middleware = require_dist_cjs6();
  function convertHttpAuthSchemesToMap(httpAuthSchemes) {
    const map = /* @__PURE__ */ new Map;
    for (const scheme of httpAuthSchemes) {
      map.set(scheme.schemeId, scheme);
    }
    return map;
  }
  __name(convertHttpAuthSchemesToMap, "convertHttpAuthSchemesToMap");
  var httpAuthSchemeMiddleware = /* @__PURE__ */ __name((config, mwOptions) => (next, context) => async (args) => {
    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
    const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
    const failureReasons = [];
    for (const option of options) {
      const scheme = authSchemes.get(option.schemeId);
      if (!scheme) {
        failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
        continue;
      }
      const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
      if (!identityProvider) {
        failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
        continue;
      }
      const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
      option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
      option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
      smithyContext.selectedHttpAuthScheme = {
        httpAuthOption: option,
        identity: await identityProvider(option.identityProperties),
        signer: scheme.signer
      };
      break;
    }
    if (!smithyContext.selectedHttpAuthScheme) {
      throw new Error(failureReasons.join(`
`));
    }
    return next(args);
  }, "httpAuthSchemeMiddleware");
  var httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: "endpointV2Middleware"
  };
  var getHttpAuthSchemeEndpointRuleSetPlugin = /* @__PURE__ */ __name((config, {
    httpAuthSchemeParametersProvider,
    identityProviderConfigProvider
  }) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
        httpAuthSchemeParametersProvider,
        identityProviderConfigProvider
      }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
    }
  }), "getHttpAuthSchemeEndpointRuleSetPlugin");
  var import_middleware_serde = require_dist_cjs7();
  var httpAuthSchemeMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
  };
  var getHttpAuthSchemePlugin = /* @__PURE__ */ __name((config, {
    httpAuthSchemeParametersProvider,
    identityProviderConfigProvider
  }) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
        httpAuthSchemeParametersProvider,
        identityProviderConfigProvider
      }), httpAuthSchemeMiddlewareOptions);
    }
  }), "getHttpAuthSchemePlugin");
  var import_protocol_http = require_dist_cjs2();
  var defaultErrorHandler = /* @__PURE__ */ __name((signingProperties) => (error) => {
    throw error;
  }, "defaultErrorHandler");
  var defaultSuccessHandler = /* @__PURE__ */ __name((httpResponse, signingProperties) => {}, "defaultSuccessHandler");
  var httpSigningMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
      throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const {
      httpAuthOption: { signingProperties = {} },
      identity,
      signer
    } = scheme;
    const output = await next({
      ...args,
      request: await signer.sign(args.request, identity, signingProperties)
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
  }, "httpSigningMiddleware");
  var httpSigningMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["HTTP_SIGNING"],
    name: "httpSigningMiddleware",
    aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
    override: true,
    relation: "after",
    toMiddleware: "retryMiddleware"
  };
  var getHttpSigningPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
    }
  }), "getHttpSigningPlugin");
  var normalizeProvider = /* @__PURE__ */ __name((input) => {
    if (typeof input === "function")
      return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
  }, "normalizeProvider");
  var makePagedClientRequest = /* @__PURE__ */ __name(async (CommandCtor, client, input, withCommand = (_) => _, ...args) => {
    let command = new CommandCtor(input);
    command = withCommand(command) ?? command;
    return await client.send(command, ...args);
  }, "makePagedClientRequest");
  function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
    return /* @__PURE__ */ __name(async function* paginateOperation(config, input, ...additionalArguments) {
      const _input = input;
      let token = config.startingToken ?? _input[inputTokenName];
      let hasNext = true;
      let page;
      while (hasNext) {
        _input[inputTokenName] = token;
        if (pageSizeTokenName) {
          _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config.pageSize;
        }
        if (config.client instanceof ClientCtor) {
          page = await makePagedClientRequest(CommandCtor, config.client, input, config.withCommand, ...additionalArguments);
        } else {
          throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
        }
        yield page;
        const prevToken = token;
        token = get(page, outputTokenName);
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return;
    }, "paginateOperation");
  }
  __name(createPaginator, "createPaginator");
  var get = /* @__PURE__ */ __name((fromObject, path) => {
    let cursor = fromObject;
    const pathComponents = path.split(".");
    for (const step of pathComponents) {
      if (!cursor || typeof cursor !== "object") {
        return;
      }
      cursor = cursor[step];
    }
    return cursor;
  }, "get");
  var import_protocols = require_protocols();
  function setFeature(context, feature, value) {
    if (!context.__smithy_context) {
      context.__smithy_context = {
        features: {}
      };
    } else if (!context.__smithy_context.features) {
      context.__smithy_context.features = {};
    }
    context.__smithy_context.features[feature] = value;
  }
  __name(setFeature, "setFeature");
  var DefaultIdentityProviderConfig = class {
    constructor(config) {
      this.authSchemes = /* @__PURE__ */ new Map;
      for (const [key, value] of Object.entries(config)) {
        if (value !== undefined) {
          this.authSchemes.set(key, value);
        }
      }
    }
    static {
      __name(this, "DefaultIdentityProviderConfig");
    }
    getIdentityProvider(schemeId) {
      return this.authSchemes.get(schemeId);
    }
  };
  var HttpApiKeyAuthSigner = class {
    static {
      __name(this, "HttpApiKeyAuthSigner");
    }
    async sign(httpRequest, identity, signingProperties) {
      if (!signingProperties) {
        throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
      }
      if (!signingProperties.name) {
        throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
      }
      if (!signingProperties.in) {
        throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
      }
      if (!identity.apiKey) {
        throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
      }
      const clonedRequest = import_protocol_http.HttpRequest.clone(httpRequest);
      if (signingProperties.in === import_types.HttpApiKeyAuthLocation.QUERY) {
        clonedRequest.query[signingProperties.name] = identity.apiKey;
      } else if (signingProperties.in === import_types.HttpApiKeyAuthLocation.HEADER) {
        clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
      } else {
        throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
      }
      return clonedRequest;
    }
  };
  var HttpBearerAuthSigner = class {
    static {
      __name(this, "HttpBearerAuthSigner");
    }
    async sign(httpRequest, identity, signingProperties) {
      const clonedRequest = import_protocol_http.HttpRequest.clone(httpRequest);
      if (!identity.token) {
        throw new Error("request could not be signed with `token` since the `token` is not defined");
      }
      clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
      return clonedRequest;
    }
  };
  var NoAuthSigner = class {
    static {
      __name(this, "NoAuthSigner");
    }
    async sign(httpRequest, identity, signingProperties) {
      return httpRequest;
    }
  };
  var createIsIdentityExpiredFunction = /* @__PURE__ */ __name((expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs, "createIsIdentityExpiredFunction");
  var EXPIRATION_MS = 300000;
  var isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
  var doesIdentityRequireRefresh = /* @__PURE__ */ __name((identity) => identity.expiration !== undefined, "doesIdentityRequireRefresh");
  var memoizeIdentityProvider = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
    if (provider === undefined) {
      return;
    }
    const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = /* @__PURE__ */ __name(async (options) => {
      if (!pending) {
        pending = normalizedProvider(options);
      }
      try {
        resolved = await pending;
        hasResult = true;
        isConstant = false;
      } finally {
        pending = undefined;
      }
      return resolved;
    }, "coalesceProvider");
    if (isExpired === undefined) {
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        return resolved;
      };
    }
    return async (options) => {
      if (!hasResult || options?.forceRefresh) {
        resolved = await coalesceProvider(options);
      }
      if (isConstant) {
        return resolved;
      }
      if (!requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        await coalesceProvider(options);
        return resolved;
      }
      return resolved;
    };
  }, "memoizeIdentityProvider");
});

// ../../node_modules/.bun/@smithy+util-endpoints@3.0.2/node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs19 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    EndpointCache: () => EndpointCache,
    EndpointError: () => EndpointError2,
    customEndpointFunctions: () => customEndpointFunctions,
    isIpAddress: () => isIpAddress2,
    isValidHostLabel: () => isValidHostLabel,
    resolveEndpoint: () => resolveEndpoint2
  });
  module.exports = __toCommonJS(src_exports);
  var EndpointCache = class {
    constructor({ size, params }) {
      this.data = /* @__PURE__ */ new Map;
      this.parameters = [];
      this.capacity = size ?? 50;
      if (params) {
        this.parameters = params;
      }
    }
    static {
      __name(this, "EndpointCache");
    }
    get(endpointParams, resolver) {
      const key = this.hash(endpointParams);
      if (key === false) {
        return resolver();
      }
      if (!this.data.has(key)) {
        if (this.data.size > this.capacity + 10) {
          const keys = this.data.keys();
          let i = 0;
          while (true) {
            const { value, done } = keys.next();
            this.data.delete(value);
            if (done || ++i > 10) {
              break;
            }
          }
        }
        this.data.set(key, resolver());
      }
      return this.data.get(key);
    }
    size() {
      return this.data.size;
    }
    hash(endpointParams) {
      let buffer = "";
      const { parameters } = this;
      if (parameters.length === 0) {
        return false;
      }
      for (const param of parameters) {
        const val2 = String(endpointParams[param] ?? "");
        if (val2.includes("|;")) {
          return false;
        }
        buffer += val2 + "|;";
      }
      return buffer;
    }
  };
  var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
  var isIpAddress2 = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
  var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
  var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
    if (!allowSubDomains) {
      return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
      if (!isValidHostLabel(label)) {
        return false;
      }
    }
    return true;
  }, "isValidHostLabel");
  var customEndpointFunctions = {};
  var debugId = "endpoints";
  function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
      return input;
    }
    if ("ref" in input) {
      return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
      return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
  }
  __name(toDebugString, "toDebugString");
  var EndpointError2 = class extends Error {
    static {
      __name(this, "EndpointError");
    }
    constructor(message) {
      super(message);
      this.name = "EndpointError";
    }
  };
  var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
  var getAttrPathList = /* @__PURE__ */ __name((path) => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
      const squareBracketIndex = part.indexOf("[");
      if (squareBracketIndex !== -1) {
        if (part.indexOf("]") !== part.length - 1) {
          throw new EndpointError2(`Path: '${path}' does not end with ']'`);
        }
        const arrayIndex = part.slice(squareBracketIndex + 1, -1);
        if (Number.isNaN(parseInt(arrayIndex))) {
          throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
        }
        if (squareBracketIndex !== 0) {
          pathList.push(part.slice(0, squareBracketIndex));
        }
        pathList.push(arrayIndex);
      } else {
        pathList.push(part);
      }
    }
    return pathList;
  }, "getAttrPathList");
  var getAttr = /* @__PURE__ */ __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
      throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    } else if (Array.isArray(acc)) {
      return acc[parseInt(index)];
    }
    return acc[index];
  }, value), "getAttr");
  var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
  var not = /* @__PURE__ */ __name((value) => !value, "not");
  var import_types3 = require_dist_cjs();
  var DEFAULT_PORTS = {
    [import_types3.EndpointURLScheme.HTTP]: 80,
    [import_types3.EndpointURLScheme.HTTPS]: 443
  };
  var parseURL = /* @__PURE__ */ __name((value) => {
    const whatwgURL = (() => {
      try {
        if (value instanceof URL) {
          return value;
        }
        if (typeof value === "object" && "hostname" in value) {
          const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
          const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
          url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
          return url;
        }
        return new URL(value);
      } catch (error) {
        return null;
      }
    })();
    if (!whatwgURL) {
      console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
      return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
      return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(import_types3.EndpointURLScheme).includes(scheme)) {
      return null;
    }
    const isIp = isIpAddress2(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
      scheme,
      authority,
      path: pathname,
      normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
      isIp
    };
  }, "parseURL");
  var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
  var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
      return null;
    }
    if (!reverse) {
      return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
  }, "substring");
  var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
  var endpointFunctions = {
    booleanEquals,
    getAttr,
    isSet,
    isValidHostLabel,
    not,
    parseURL,
    stringEquals,
    substring,
    uriEncode
  };
  var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
      const openingBraceIndex = template.indexOf("{", currentIndex);
      if (openingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(currentIndex));
        break;
      }
      evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
      const closingBraceIndex = template.indexOf("}", openingBraceIndex);
      if (closingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex));
        break;
      }
      if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
        currentIndex = closingBraceIndex + 2;
      }
      const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
      if (parameterName.includes("#")) {
        const [refName, attrName] = parameterName.split("#");
        evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
      } else {
        evaluatedTemplateArr.push(templateContext[parameterName]);
      }
      currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
  }, "evaluateTemplate");
  var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
    const referenceRecord = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    return referenceRecord[ref];
  }, "getReferenceValue");
  var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
    if (typeof obj === "string") {
      return evaluateTemplate(obj, options);
    } else if (obj["fn"]) {
      return callFunction(obj, options);
    } else if (obj["ref"]) {
      return getReferenceValue(obj, options);
    }
    throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
  }, "evaluateExpression");
  var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
    const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
    const fnSegments = fn.split(".");
    if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
      return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
    }
    return endpointFunctions[fn](...evaluatedArgs);
  }, "callFunction");
  var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
    if (assign && assign in options.referenceRecord) {
      throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
    }
    const value = callFunction(fnArgs, options);
    options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
    return {
      result: value === "" ? true : !!value,
      ...assign != null && { toAssign: { name: assign, value } }
    };
  }, "evaluateCondition");
  var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
      const { result, toAssign } = evaluateCondition(condition, {
        ...options,
        referenceRecord: {
          ...options.referenceRecord,
          ...conditionsReferenceRecord
        }
      });
      if (!result) {
        return { result };
      }
      if (toAssign) {
        conditionsReferenceRecord[toAssign.name] = toAssign.value;
        options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
      }
    }
    return { result: true, referenceRecord: conditionsReferenceRecord };
  }, "evaluateConditions");
  var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map((headerValEntry) => {
      const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
      if (typeof processedExpr !== "string") {
        throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
      }
      return processedExpr;
    })
  }), {}), "getEndpointHeaders");
  var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
    if (Array.isArray(property)) {
      return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
      case "string":
        return evaluateTemplate(property, options);
      case "object":
        if (property === null) {
          throw new EndpointError2(`Unexpected endpoint property: ${property}`);
        }
        return getEndpointProperties(property, options);
      case "boolean":
        return property;
      default:
        throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
    }
  }, "getEndpointProperty");
  var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: getEndpointProperty(propertyVal, options)
  }), {}), "getEndpointProperties");
  var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
    const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
      try {
        return new URL(expression);
      } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
      }
    }
    throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
  }, "getEndpointUrl");
  var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    const endpointRuleOptions = {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    };
    const { url, properties, headers } = endpoint;
    options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
    return {
      ...headers != null && {
        headers: getEndpointHeaders(headers, endpointRuleOptions)
      },
      ...properties != null && {
        properties: getEndpointProperties(properties, endpointRuleOptions)
      },
      url: getEndpointUrl(url, endpointRuleOptions)
    };
  }, "evaluateEndpointRule");
  var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    throw new EndpointError2(evaluateExpression(error, "Error", {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    }));
  }, "evaluateErrorRule");
  var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    return evaluateRules(rules, {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    });
  }, "evaluateTreeRule");
  var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
    for (const rule of rules) {
      if (rule.type === "endpoint") {
        const endpointOrUndefined = evaluateEndpointRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else if (rule.type === "error") {
        evaluateErrorRule(rule, options);
      } else if (rule.type === "tree") {
        const endpointOrUndefined = evaluateTreeRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else {
        throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
      }
    }
    throw new EndpointError2(`Rules evaluation failed`);
  }, "evaluateRules");
  var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
      for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
        endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
      }
    }
    const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
    for (const requiredParam of requiredParams) {
      if (endpointParams[requiredParam] == null) {
        throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
      }
    }
    const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });
    options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
    return endpoint;
  }, "resolveEndpoint");
});

// ../../node_modules/.bun/@aws-sdk+util-endpoints@3.787.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs20 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    ConditionObject: () => import_util_endpoints.ConditionObject,
    DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
    EndpointError: () => import_util_endpoints.EndpointError,
    EndpointObject: () => import_util_endpoints.EndpointObject,
    EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
    EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
    EndpointParams: () => import_util_endpoints.EndpointParams,
    EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
    EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
    ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
    EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
    Expression: () => import_util_endpoints.Expression,
    FunctionArgv: () => import_util_endpoints.FunctionArgv,
    FunctionObject: () => import_util_endpoints.FunctionObject,
    FunctionReturn: () => import_util_endpoints.FunctionReturn,
    ParameterObject: () => import_util_endpoints.ParameterObject,
    ReferenceObject: () => import_util_endpoints.ReferenceObject,
    ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
    RuleSetObject: () => import_util_endpoints.RuleSetObject,
    RuleSetRules: () => import_util_endpoints.RuleSetRules,
    TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
    awsEndpointFunctions: () => awsEndpointFunctions,
    getUserAgentPrefix: () => getUserAgentPrefix,
    isIpAddress: () => import_util_endpoints.isIpAddress,
    partition: () => partition,
    resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
    setPartitionInfo: () => setPartitionInfo,
    useDefaultPartitionInfo: () => useDefaultPartitionInfo
  });
  module.exports = __toCommonJS(index_exports);
  var import_util_endpoints = require_dist_cjs19();
  var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
    if (allowSubDomains) {
      for (const label of value.split(".")) {
        if (!isVirtualHostableS3Bucket(label)) {
          return false;
        }
      }
      return true;
    }
    if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
      return false;
    }
    if (value.length < 3 || value.length > 63) {
      return false;
    }
    if (value !== value.toLowerCase()) {
      return false;
    }
    if ((0, import_util_endpoints.isIpAddress)(value)) {
      return false;
    }
    return true;
  }, "isVirtualHostableS3Bucket");
  var ARN_DELIMITER = ":";
  var RESOURCE_DELIMITER = "/";
  var parseArn = /* @__PURE__ */ __name((value) => {
    const segments = value.split(ARN_DELIMITER);
    if (segments.length < 6)
      return null;
    const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
    if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
      return null;
    const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
    return {
      partition: partition2,
      service,
      region,
      accountId,
      resourceId
    };
  }, "parseArn");
  var partitions_default = {
    partitions: [{
      id: "aws",
      outputs: {
        dnsSuffix: "amazonaws.com",
        dualStackDnsSuffix: "api.aws",
        implicitGlobalRegion: "us-east-1",
        name: "aws",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
      regions: {
        "af-south-1": {
          description: "Africa (Cape Town)"
        },
        "ap-east-1": {
          description: "Asia Pacific (Hong Kong)"
        },
        "ap-northeast-1": {
          description: "Asia Pacific (Tokyo)"
        },
        "ap-northeast-2": {
          description: "Asia Pacific (Seoul)"
        },
        "ap-northeast-3": {
          description: "Asia Pacific (Osaka)"
        },
        "ap-south-1": {
          description: "Asia Pacific (Mumbai)"
        },
        "ap-south-2": {
          description: "Asia Pacific (Hyderabad)"
        },
        "ap-southeast-1": {
          description: "Asia Pacific (Singapore)"
        },
        "ap-southeast-2": {
          description: "Asia Pacific (Sydney)"
        },
        "ap-southeast-3": {
          description: "Asia Pacific (Jakarta)"
        },
        "ap-southeast-4": {
          description: "Asia Pacific (Melbourne)"
        },
        "ap-southeast-5": {
          description: "Asia Pacific (Malaysia)"
        },
        "ap-southeast-7": {
          description: "Asia Pacific (Thailand)"
        },
        "aws-global": {
          description: "AWS Standard global region"
        },
        "ca-central-1": {
          description: "Canada (Central)"
        },
        "ca-west-1": {
          description: "Canada West (Calgary)"
        },
        "eu-central-1": {
          description: "Europe (Frankfurt)"
        },
        "eu-central-2": {
          description: "Europe (Zurich)"
        },
        "eu-north-1": {
          description: "Europe (Stockholm)"
        },
        "eu-south-1": {
          description: "Europe (Milan)"
        },
        "eu-south-2": {
          description: "Europe (Spain)"
        },
        "eu-west-1": {
          description: "Europe (Ireland)"
        },
        "eu-west-2": {
          description: "Europe (London)"
        },
        "eu-west-3": {
          description: "Europe (Paris)"
        },
        "il-central-1": {
          description: "Israel (Tel Aviv)"
        },
        "me-central-1": {
          description: "Middle East (UAE)"
        },
        "me-south-1": {
          description: "Middle East (Bahrain)"
        },
        "mx-central-1": {
          description: "Mexico (Central)"
        },
        "sa-east-1": {
          description: "South America (Sao Paulo)"
        },
        "us-east-1": {
          description: "US East (N. Virginia)"
        },
        "us-east-2": {
          description: "US East (Ohio)"
        },
        "us-west-1": {
          description: "US West (N. California)"
        },
        "us-west-2": {
          description: "US West (Oregon)"
        }
      }
    }, {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn",
        dualStackDnsSuffix: "api.amazonwebservices.com.cn",
        implicitGlobalRegion: "cn-northwest-1",
        name: "aws-cn",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: {
        "aws-cn-global": {
          description: "AWS China global region"
        },
        "cn-north-1": {
          description: "China (Beijing)"
        },
        "cn-northwest-1": {
          description: "China (Ningxia)"
        }
      }
    }, {
      id: "aws-us-gov",
      outputs: {
        dnsSuffix: "amazonaws.com",
        dualStackDnsSuffix: "api.aws",
        implicitGlobalRegion: "us-gov-west-1",
        name: "aws-us-gov",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
      regions: {
        "aws-us-gov-global": {
          description: "AWS GovCloud (US) global region"
        },
        "us-gov-east-1": {
          description: "AWS GovCloud (US-East)"
        },
        "us-gov-west-1": {
          description: "AWS GovCloud (US-West)"
        }
      }
    }, {
      id: "aws-iso",
      outputs: {
        dnsSuffix: "c2s.ic.gov",
        dualStackDnsSuffix: "c2s.ic.gov",
        implicitGlobalRegion: "us-iso-east-1",
        name: "aws-iso",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-global": {
          description: "AWS ISO (US) global region"
        },
        "us-iso-east-1": {
          description: "US ISO East"
        },
        "us-iso-west-1": {
          description: "US ISO WEST"
        }
      }
    }, {
      id: "aws-iso-b",
      outputs: {
        dnsSuffix: "sc2s.sgov.gov",
        dualStackDnsSuffix: "sc2s.sgov.gov",
        implicitGlobalRegion: "us-isob-east-1",
        name: "aws-iso-b",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-b-global": {
          description: "AWS ISOB (US) global region"
        },
        "us-isob-east-1": {
          description: "US ISOB East (Ohio)"
        }
      }
    }, {
      id: "aws-iso-e",
      outputs: {
        dnsSuffix: "cloud.adc-e.uk",
        dualStackDnsSuffix: "cloud.adc-e.uk",
        implicitGlobalRegion: "eu-isoe-west-1",
        name: "aws-iso-e",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-e-global": {
          description: "AWS ISOE (Europe) global region"
        },
        "eu-isoe-west-1": {
          description: "EU ISOE West"
        }
      }
    }, {
      id: "aws-iso-f",
      outputs: {
        dnsSuffix: "csp.hci.ic.gov",
        dualStackDnsSuffix: "csp.hci.ic.gov",
        implicitGlobalRegion: "us-isof-south-1",
        name: "aws-iso-f",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-f-global": {
          description: "AWS ISOF global region"
        },
        "us-isof-east-1": {
          description: "US ISOF EAST"
        },
        "us-isof-south-1": {
          description: "US ISOF SOUTH"
        }
      }
    }, {
      id: "aws-eusc",
      outputs: {
        dnsSuffix: "amazonaws.eu",
        dualStackDnsSuffix: "amazonaws.eu",
        implicitGlobalRegion: "eusc-de-east-1",
        name: "aws-eusc",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
      regions: {
        "eusc-de-east-1": {
          description: "EU (Germany)"
        }
      }
    }],
    version: "1.1"
  };
  var selectedPartitionsInfo = partitions_default;
  var selectedUserAgentPrefix = "";
  var partition = /* @__PURE__ */ __name((value) => {
    const { partitions } = selectedPartitionsInfo;
    for (const partition2 of partitions) {
      const { regions, outputs } = partition2;
      for (const [region, regionData] of Object.entries(regions)) {
        if (region === value) {
          return {
            ...outputs,
            ...regionData
          };
        }
      }
    }
    for (const partition2 of partitions) {
      const { regionRegex, outputs } = partition2;
      if (new RegExp(regionRegex).test(value)) {
        return {
          ...outputs
        };
      }
    }
    const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    if (!DEFAULT_PARTITION) {
      throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
    }
    return {
      ...DEFAULT_PARTITION.outputs
    };
  }, "partition");
  var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
  }, "setPartitionInfo");
  var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
    setPartitionInfo(partitions_default, "");
  }, "useDefaultPartitionInfo");
  var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
  var awsEndpointFunctions = {
    isVirtualHostableS3Bucket,
    parseArn,
    partition
  };
  import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
});

// ../../node_modules/.bun/tslib@2.8.1/node_modules/tslib/tslib.js
var require_tslib = __commonJS((exports, module) => {
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __esDecorate;
  var __runInitializers;
  var __propKey;
  var __setFunctionName;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __spreadArray;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __classPrivateFieldIn;
  var __createBinding;
  var __addDisposableResource;
  var __disposeResources;
  var __rewriteRelativeImportExtension;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      });
    } else if (typeof module === "object" && typeof exports === "object") {
      factory(createExporter(root, createExporter(exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports2, previous) {
      if (exports2 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports2, "__esModule", { value: true });
        } else {
          exports2.__esModule = true;
        }
      }
      return function(id, v) {
        return exports2[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length;i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s);i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1;i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      function accept(f) {
        if (f !== undefined && typeof f !== "function")
          throw new TypeError("Function expected");
        return f;
      }
      var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
      var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
      var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _, done = false;
      for (var i = decorators.length - 1;i >= 0; i--) {
        var context = {};
        for (var p in contextIn)
          context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access)
          context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
          if (done)
            throw new TypeError("Cannot add initializers after decoration has completed");
          extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
          if (result === undefined)
            continue;
          if (result === null || typeof result !== "object")
            throw new TypeError("Object expected");
          if (_ = accept(result.get))
            descriptor.get = _;
          if (_ = accept(result.set))
            descriptor.set = _;
          if (_ = accept(result.init))
            initializers.unshift(_);
        } else if (_ = accept(result)) {
          if (kind === "field")
            initializers.unshift(_);
          else
            descriptor[key] = _;
        }
      }
      if (target)
        Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
    };
    __runInitializers = function(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i = 0;i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
      }
      return useValue ? value : undefined;
    };
    __propKey = function(x) {
      return typeof x === "symbol" ? x : "".concat(x);
    };
    __setFunctionName = function(f, name, prefix) {
      if (typeof name === "symbol")
        name = name.description ? "[".concat(name.description, "]") : "";
      return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
      return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : undefined, done: true };
      }
    };
    __exportStar = function(m, o) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      o[k2] = m[k];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = undefined;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === undefined || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0;i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length;i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0;i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length;j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __spreadArray = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar;i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function awaitReturn(f) {
        return function(v) {
          return Promise.resolve(v).then(f, reject);
        };
      }
      function verb(n, f) {
        if (g[n]) {
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
          if (f)
            i[n] = f(i[n]);
        }
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2)
          if (Object.prototype.hasOwnProperty.call(o2, k))
            ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0;i < k.length; i++)
          if (k[i] !== "default")
            __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : { default: mod };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldIn = function(state, receiver) {
      if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
        throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === "function" ? receiver === state : state.has(receiver);
    };
    __addDisposableResource = function(env, value, async) {
      if (value !== null && value !== undefined) {
        if (typeof value !== "object" && typeof value !== "function")
          throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
          if (!Symbol.asyncDispose)
            throw new TypeError("Symbol.asyncDispose is not defined.");
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === undefined) {
          if (!Symbol.dispose)
            throw new TypeError("Symbol.dispose is not defined.");
          dispose = value[Symbol.dispose];
          if (async)
            inner = dispose;
        }
        if (typeof dispose !== "function")
          throw new TypeError("Object not disposable.");
        if (inner)
          dispose = function() {
            try {
              inner.call(this);
            } catch (e) {
              return Promise.reject(e);
            }
          };
        env.stack.push({ value, dispose, async });
      } else if (async) {
        env.stack.push({ async: true });
      }
      return value;
    };
    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    __disposeResources = function(env) {
      function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
      }
      var r, s = 0;
      function next() {
        while (r = env.stack.pop()) {
          try {
            if (!r.async && s === 1)
              return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
              var result = r.dispose.call(r.value);
              if (r.async)
                return s |= 2, Promise.resolve(result).then(next, function(e) {
                  fail(e);
                  return next();
                });
            } else
              s |= 1;
          } catch (e) {
            fail(e);
          }
        }
        if (s === 1)
          return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError)
          throw env.error;
      }
      return next();
    };
    __rewriteRelativeImportExtension = function(path, preserveJsx) {
      if (typeof path === "string" && /^\.\.?\//.test(path)) {
        return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
        });
      }
      return path;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__esDecorate", __esDecorate);
    exporter("__runInitializers", __runInitializers);
    exporter("__propKey", __propKey);
    exporter("__setFunctionName", __setFunctionName);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    exporter("__addDisposableResource", __addDisposableResource);
    exporter("__disposeResources", __disposeResources);
    exporter("__rewriteRelativeImportExtension", __rewriteRelativeImportExtension);
  });
});

// ../../node_modules/.bun/@aws-sdk+core@3.775.0/node_modules/@aws-sdk/core/dist-cjs/submodules/client/index.js
var require_client = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
    setCredentialFeature: () => setCredentialFeature,
    setFeature: () => setFeature,
    state: () => state
  });
  module.exports = __toCommonJS(index_exports);
  var state = {
    warningEmitted: false
  };
  var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {
    if (version && !state.warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 18) {
      state.warningEmitted = true;
      process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
    }
  }, "emitWarningIfUnsupportedVersion");
  function setCredentialFeature(credentials, feature, value) {
    if (!credentials.$source) {
      credentials.$source = {};
    }
    credentials.$source[feature] = value;
    return credentials;
  }
  __name(setCredentialFeature, "setCredentialFeature");
  function setFeature(context, feature, value) {
    if (!context.__aws_sdk_context) {
      context.__aws_sdk_context = {
        features: {}
      };
    } else if (!context.__aws_sdk_context.features) {
      context.__aws_sdk_context.features = {};
    }
    context.__aws_sdk_context.features[feature] = value;
  }
  __name(setFeature, "setFeature");
});

// ../../node_modules/.bun/@smithy+property-provider@4.0.2/node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs21 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    CredentialsProviderError: () => CredentialsProviderError,
    ProviderError: () => ProviderError,
    TokenProviderError: () => TokenProviderError,
    chain: () => chain,
    fromStatic: () => fromStatic,
    memoize: () => memoize
  });
  module.exports = __toCommonJS(src_exports);
  var ProviderError = class _ProviderError extends Error {
    constructor(message, options = true) {
      let logger;
      let tryNextLink = true;
      if (typeof options === "boolean") {
        logger = undefined;
        tryNextLink = options;
      } else if (options != null && typeof options === "object") {
        logger = options.logger;
        tryNextLink = options.tryNextLink ?? true;
      }
      super(message);
      this.name = "ProviderError";
      this.tryNextLink = tryNextLink;
      Object.setPrototypeOf(this, _ProviderError.prototype);
      logger?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
    }
    static {
      __name(this, "ProviderError");
    }
    static from(error, options = true) {
      return Object.assign(new this(error.message, options), error);
    }
  };
  var CredentialsProviderError = class _CredentialsProviderError extends ProviderError {
    constructor(message, options = true) {
      super(message, options);
      this.name = "CredentialsProviderError";
      Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
    }
    static {
      __name(this, "CredentialsProviderError");
    }
  };
  var TokenProviderError = class _TokenProviderError extends ProviderError {
    constructor(message, options = true) {
      super(message, options);
      this.name = "TokenProviderError";
      Object.setPrototypeOf(this, _TokenProviderError.prototype);
    }
    static {
      __name(this, "TokenProviderError");
    }
  };
  var chain = /* @__PURE__ */ __name((...providers) => async () => {
    if (providers.length === 0) {
      throw new ProviderError("No providers in chain");
    }
    let lastProviderError;
    for (const provider of providers) {
      try {
        const credentials = await provider();
        return credentials;
      } catch (err) {
        lastProviderError = err;
        if (err?.tryNextLink) {
          continue;
        }
        throw err;
      }
    }
    throw lastProviderError;
  }, "chain");
  var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
  var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = /* @__PURE__ */ __name(async () => {
      if (!pending) {
        pending = provider();
      }
      try {
        resolved = await pending;
        hasResult = true;
        isConstant = false;
      } finally {
        pending = undefined;
      }
      return resolved;
    }, "coalesceProvider");
    if (isExpired === undefined) {
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        return resolved;
      };
    }
    return async (options) => {
      if (!hasResult || options?.forceRefresh) {
        resolved = await coalesceProvider();
      }
      if (isConstant) {
        return resolved;
      }
      if (requiresRefresh && !requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        await coalesceProvider();
        return resolved;
      }
      return resolved;
    };
  }, "memoize");
});

// ../../node_modules/.bun/@smithy+signature-v4@5.0.2/node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs22 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    SignatureV4: () => SignatureV4,
    clearCredentialCache: () => clearCredentialCache,
    createScope: () => createScope,
    getCanonicalHeaders: () => getCanonicalHeaders,
    getCanonicalQuery: () => getCanonicalQuery,
    getPayloadHash: () => getPayloadHash,
    getSigningKey: () => getSigningKey,
    moveHeadersToQuery: () => moveHeadersToQuery,
    prepareRequest: () => prepareRequest
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_middleware = require_dist_cjs6();
  var import_util_utf84 = require_dist_cjs10();
  var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
  var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
  var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
  var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
  var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
  var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
  var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
  var AUTH_HEADER = "authorization";
  var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
  var DATE_HEADER = "date";
  var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
  var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
  var SHA256_HEADER = "x-amz-content-sha256";
  var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
  var ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
  };
  var PROXY_HEADER_PATTERN = /^proxy-/;
  var SEC_HEADER_PATTERN = /^sec-/;
  var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
  var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
  var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  var MAX_CACHE_SIZE = 50;
  var KEY_TYPE_IDENTIFIER = "aws4_request";
  var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  var import_util_hex_encoding = require_dist_cjs16();
  var import_util_utf8 = require_dist_cjs10();
  var signingKeyCache = {};
  var cacheQueue = [];
  var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
  var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
      return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > MAX_CACHE_SIZE) {
      delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
      key = await hmac(sha256Constructor, key, signable);
    }
    return signingKeyCache[cacheKey] = key;
  }, "getSigningKey");
  var clearCredentialCache = /* @__PURE__ */ __name(() => {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
      delete signingKeyCache[cacheKey];
    });
  }, "clearCredentialCache");
  var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update((0, import_util_utf8.toUint8Array)(data));
    return hash.digest();
  }, "hmac");
  var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
      if (headers[headerName] == undefined) {
        continue;
      }
      const canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
  }, "getCanonicalHeaders");
  var import_util_uri_escape = require_dist_cjs12();
  var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query)) {
      if (key.toLowerCase() === SIGNATURE_HEADER) {
        continue;
      }
      const encodedKey = (0, import_util_uri_escape.escapeUri)(key);
      keys.push(encodedKey);
      const value = query[key];
      if (typeof value === "string") {
        serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;
      } else if (Array.isArray(value)) {
        serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`]), []).sort().join("&");
      }
    }
    return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
  }, "getCanonicalQuery");
  var import_is_array_buffer = require_dist_cjs8();
  var import_util_utf82 = require_dist_cjs10();
  var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
      if (headerName.toLowerCase() === SHA256_HEADER) {
        return headers[headerName];
      }
    }
    if (body == undefined) {
      return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
      const hashCtor = new hashConstructor;
      hashCtor.update((0, import_util_utf82.toUint8Array)(body));
      return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
    }
    return UNSIGNED_PAYLOAD;
  }, "getPayloadHash");
  var import_util_utf83 = require_dist_cjs10();
  var HeaderFormatter = class {
    static {
      __name(this, "HeaderFormatter");
    }
    format(headers) {
      const chunks = [];
      for (const headerName of Object.keys(headers)) {
        const bytes = (0, import_util_utf83.fromUtf8)(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
      const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
      let position = 0;
      for (const chunk of chunks) {
        out.set(chunk, position);
        position += chunk.byteLength;
      }
      return out;
    }
    formatHeaderValue(header) {
      switch (header.type) {
        case "boolean":
          return Uint8Array.from([header.value ? 0 : 1]);
        case "byte":
          return Uint8Array.from([2, header.value]);
        case "short":
          const shortView = new DataView(new ArrayBuffer(3));
          shortView.setUint8(0, 3);
          shortView.setInt16(1, header.value, false);
          return new Uint8Array(shortView.buffer);
        case "integer":
          const intView = new DataView(new ArrayBuffer(5));
          intView.setUint8(0, 4);
          intView.setInt32(1, header.value, false);
          return new Uint8Array(intView.buffer);
        case "long":
          const longBytes = new Uint8Array(9);
          longBytes[0] = 5;
          longBytes.set(header.value.bytes, 1);
          return longBytes;
        case "binary":
          const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
          binView.setUint8(0, 6);
          binView.setUint16(1, header.value.byteLength, false);
          const binBytes = new Uint8Array(binView.buffer);
          binBytes.set(header.value, 3);
          return binBytes;
        case "string":
          const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);
          const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
          strView.setUint8(0, 7);
          strView.setUint16(1, utf8Bytes.byteLength, false);
          const strBytes = new Uint8Array(strView.buffer);
          strBytes.set(utf8Bytes, 3);
          return strBytes;
        case "timestamp":
          const tsBytes = new Uint8Array(9);
          tsBytes[0] = 8;
          tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
          return tsBytes;
        case "uuid":
          if (!UUID_PATTERN.test(header.value)) {
            throw new Error(`Invalid UUID received: ${header.value}`);
          }
          const uuidBytes = new Uint8Array(17);
          uuidBytes[0] = 9;
          uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
          return uuidBytes;
      }
    }
  };
  var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  var Int64 = class _Int64 {
    constructor(bytes) {
      this.bytes = bytes;
      if (bytes.byteLength !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
    }
    static {
      __name(this, "Int64");
    }
    static fromNumber(number) {
      if (number > 9223372036854776000 || number < -9223372036854776000) {
        throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
      }
      const bytes = new Uint8Array(8);
      for (let i = 7, remaining = Math.abs(Math.round(number));i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new _Int64(bytes);
    }
    valueOf() {
      const bytes = this.bytes.slice(0);
      const negative = bytes[0] & 128;
      if (negative) {
        negate(bytes);
      }
      return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
      return String(this.valueOf());
    }
  };
  function negate(bytes) {
    for (let i = 0;i < 8; i++) {
      bytes[i] ^= 255;
    }
    for (let i = 7;i > -1; i--) {
      bytes[i]++;
      if (bytes[i] !== 0)
        break;
    }
  }
  __name(negate, "negate");
  var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }, "hasHeader");
  var import_protocol_http = require_dist_cjs2();
  var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
    const { headers, query = {} } = import_protocol_http.HttpRequest.clone(request);
    for (const name of Object.keys(headers)) {
      const lname = name.toLowerCase();
      if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname) || options.hoistableHeaders?.has(lname)) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
    return {
      ...request,
      headers,
      query
    };
  }, "moveHeadersToQuery");
  var prepareRequest = /* @__PURE__ */ __name((request) => {
    request = import_protocol_http.HttpRequest.clone(request);
    for (const headerName of Object.keys(request.headers)) {
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
    return request;
  }, "prepareRequest");
  var iso8601 = /* @__PURE__ */ __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
  var toDate = /* @__PURE__ */ __name((time) => {
    if (typeof time === "number") {
      return new Date(time * 1000);
    }
    if (typeof time === "string") {
      if (Number(time)) {
        return new Date(Number(time) * 1000);
      }
      return new Date(time);
    }
    return time;
  }, "toDate");
  var SignatureV4 = class {
    constructor({
      applyChecksum,
      credentials,
      region,
      service,
      sha256,
      uriEscapePath = true
    }) {
      this.headerFormatter = new HeaderFormatter;
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);
      this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);
    }
    static {
      __name(this, "SignatureV4");
    }
    async presign(originalRequest, options = {}) {
      const {
        signingDate = /* @__PURE__ */ new Date,
        expiresIn = 3600,
        unsignableHeaders,
        unhoistableHeaders,
        signableHeaders,
        hoistableHeaders,
        signingRegion,
        signingService
      } = options;
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const { longDate, shortDate } = formatDate(signingDate);
      if (expiresIn > MAX_PRESIGNED_TTL) {
        return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
      }
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
      if (credentials.sessionToken) {
        request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
      }
      request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
      request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
      request.query[AMZ_DATE_QUERY_PARAM] = longDate;
      request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
      request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
      return request;
    }
    async sign(toSign, options) {
      if (typeof toSign === "string") {
        return this.signString(toSign, options);
      } else if (toSign.headers && toSign.payload) {
        return this.signEvent(toSign, options);
      } else if (toSign.message) {
        return this.signMessage(toSign, options);
      } else {
        return this.signRequest(toSign, options);
      }
    }
    async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date, priorSignature, signingRegion, signingService }) {
      const region = signingRegion ?? await this.regionProvider();
      const { shortDate, longDate } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
      const hash = new this.sha256;
      hash.update(headers);
      const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
      const stringToSign = [
        EVENT_ALGORITHM_IDENTIFIER,
        longDate,
        scope,
        priorSignature,
        hashedHeaders,
        hashedPayload
      ].join(`
`);
      return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
    }
    async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date, signingRegion, signingService }) {
      const promise = this.signEvent({
        headers: this.headerFormatter.format(signableMessage.message.headers),
        payload: signableMessage.message.body
      }, {
        signingDate,
        signingRegion,
        signingService,
        priorSignature: signableMessage.priorSignature
      });
      return promise.then((signature) => {
        return { message: signableMessage.message, signature };
      });
    }
    async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date, signingRegion, signingService } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const { shortDate } = formatDate(signingDate);
      const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
      hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
      return (0, import_util_hex_encoding.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, {
      signingDate = /* @__PURE__ */ new Date,
      signableHeaders,
      unsignableHeaders,
      signingRegion,
      signingService
    } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const request = prepareRequest(requestToSign);
      const { longDate, shortDate } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      request.headers[AMZ_DATE_HEADER] = longDate;
      if (credentials.sessionToken) {
        request.headers[TOKEN_HEADER] = credentials.sessionToken;
      }
      const payloadHash = await getPayloadHash(request, this.sha256);
      if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
        request.headers[SHA256_HEADER] = payloadHash;
      }
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
      request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
      return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
      const sortedHeaders = Object.keys(canonicalHeaders).sort();
      return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(`
`)}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
      const hash = new this.sha256;
      hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
      const hashedRequest = await hash.digest();
      return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
      if (this.uriEscapePath) {
        const normalizedPathSegments = [];
        for (const pathSegment of path.split("/")) {
          if (pathSegment?.length === 0)
            continue;
          if (pathSegment === ".")
            continue;
          if (pathSegment === "..") {
            normalizedPathSegments.pop();
          } else {
            normalizedPathSegments.push(pathSegment);
          }
        }
        const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
        const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
        return doubleEncoded.replace(/%2F/g, "/");
      }
      return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
      const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
      const hash = new this.sha256(await keyPromise);
      hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
      return (0, import_util_hex_encoding.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
      return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
      if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
        throw new Error("Resolved credential object is not valid");
      }
    }
  };
  var formatDate = /* @__PURE__ */ __name((now) => {
    const longDate = iso8601(now).replace(/[\-:]/g, "");
    return {
      longDate,
      shortDate: longDate.slice(0, 8)
    };
  }, "formatDate");
  var getCanonicalHeaderList = /* @__PURE__ */ __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
});

// ../../node_modules/.bun/@aws-sdk+core@3.775.0/node_modules/@aws-sdk/core/dist-cjs/submodules/httpAuthSchemes/index.js
var require_httpAuthSchemes = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
    AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner,
    AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
    NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS,
    resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
    resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig,
    resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,
    validateSigningProperties: () => validateSigningProperties
  });
  module.exports = __toCommonJS(index_exports);
  var import_protocol_http2 = require_dist_cjs2();
  var import_protocol_http = require_dist_cjs2();
  var getDateHeader = /* @__PURE__ */ __name((response) => import_protocol_http.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined, "getDateHeader");
  var getSkewCorrectedDate = /* @__PURE__ */ __name((systemClockOffset) => new Date(Date.now() + systemClockOffset), "getSkewCorrectedDate");
  var isClockSkewed = /* @__PURE__ */ __name((clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000, "isClockSkewed");
  var getUpdatedSystemClockOffset = /* @__PURE__ */ __name((clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
      return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
  }, "getUpdatedSystemClockOffset");
  var throwSigningPropertyError = /* @__PURE__ */ __name((name, property) => {
    if (!property) {
      throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
    }
    return property;
  }, "throwSigningPropertyError");
  var validateSigningProperties = /* @__PURE__ */ __name(async (signingProperties) => {
    const context = throwSigningPropertyError("context", signingProperties.context);
    const config = throwSigningPropertyError("config", signingProperties.config);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const signerFunction = throwSigningPropertyError("signer", config.signer);
    const signer = await signerFunction(authScheme);
    const signingRegion = signingProperties?.signingRegion;
    const signingRegionSet = signingProperties?.signingRegionSet;
    const signingName = signingProperties?.signingName;
    return {
      config,
      signer,
      signingRegion,
      signingRegionSet,
      signingName
    };
  }, "validateSigningProperties");
  var AwsSdkSigV4Signer = class {
    static {
      __name(this, "AwsSdkSigV4Signer");
    }
    async sign(httpRequest, identity, signingProperties) {
      if (!import_protocol_http2.HttpRequest.isInstance(httpRequest)) {
        throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
      }
      const validatedProps = await validateSigningProperties(signingProperties);
      const { config, signer } = validatedProps;
      let { signingRegion, signingName } = validatedProps;
      const handlerExecutionContext = signingProperties.context;
      if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
        const [first, second] = handlerExecutionContext.authSchemes;
        if (first?.name === "sigv4a" && second?.name === "sigv4") {
          signingRegion = second?.signingRegion ?? signingRegion;
          signingName = second?.signingName ?? signingName;
        }
      }
      const signedRequest = await signer.sign(httpRequest, {
        signingDate: getSkewCorrectedDate(config.systemClockOffset),
        signingRegion,
        signingService: signingName
      });
      return signedRequest;
    }
    errorHandler(signingProperties) {
      return (error) => {
        const serverTime = error.ServerTime ?? getDateHeader(error.$response);
        if (serverTime) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          const initialSystemClockOffset = config.systemClockOffset;
          config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
          const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
          if (clockSkewCorrected && error.$metadata) {
            error.$metadata.clockSkewCorrected = true;
          }
        }
        throw error;
      };
    }
    successHandler(httpResponse, signingProperties) {
      const dateHeader = getDateHeader(httpResponse);
      if (dateHeader) {
        const config = throwSigningPropertyError("config", signingProperties.config);
        config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
      }
    }
  };
  var AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  var import_protocol_http3 = require_dist_cjs2();
  var AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
    static {
      __name(this, "AwsSdkSigV4ASigner");
    }
    async sign(httpRequest, identity, signingProperties) {
      if (!import_protocol_http3.HttpRequest.isInstance(httpRequest)) {
        throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
      }
      const { config, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
      const configResolvedSigningRegionSet = await config.sigv4aSigningRegionSet?.();
      const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
      const signedRequest = await signer.sign(httpRequest, {
        signingDate: getSkewCorrectedDate(config.systemClockOffset),
        signingRegion: multiRegionOverride,
        signingService: signingName
      });
      return signedRequest;
    }
  };
  var import_core = require_dist_cjs18();
  var import_property_provider = require_dist_cjs21();
  var resolveAwsSdkSigV4AConfig = /* @__PURE__ */ __name((config) => {
    config.sigv4aSigningRegionSet = (0, import_core.normalizeProvider)(config.sigv4aSigningRegionSet);
    return config;
  }, "resolveAwsSdkSigV4AConfig");
  var NODE_SIGV4A_CONFIG_OPTIONS = {
    environmentVariableSelector(env) {
      if (env.AWS_SIGV4A_SIGNING_REGION_SET) {
        return env.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_) => _.trim());
      }
      throw new import_property_provider.ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
        tryNextLink: true
      });
    },
    configFileSelector(profile) {
      if (profile.sigv4a_signing_region_set) {
        return (profile.sigv4a_signing_region_set ?? "").split(",").map((_) => _.trim());
      }
      throw new import_property_provider.ProviderError("sigv4a_signing_region_set not set in profile.", {
        tryNextLink: true
      });
    },
    default: undefined
  };
  var import_client = require_client();
  var import_core2 = require_dist_cjs18();
  var import_signature_v4 = require_dist_cjs22();
  var resolveAwsSdkSigV4Config = /* @__PURE__ */ __name((config) => {
    let inputCredentials = config.credentials;
    let isUserSupplied = !!config.credentials;
    let resolvedCredentials = undefined;
    Object.defineProperty(config, "credentials", {
      set(credentials) {
        if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
          isUserSupplied = true;
        }
        inputCredentials = credentials;
        const memoizedProvider = normalizeCredentialProvider(config, {
          credentials: inputCredentials,
          credentialDefaultProvider: config.credentialDefaultProvider
        });
        const boundProvider = bindCallerConfig(config, memoizedProvider);
        if (isUserSupplied && !boundProvider.attributed) {
          resolvedCredentials = /* @__PURE__ */ __name(async (options) => boundProvider(options).then((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_CODE", "e")), "resolvedCredentials");
          resolvedCredentials.memoized = boundProvider.memoized;
          resolvedCredentials.configBound = boundProvider.configBound;
          resolvedCredentials.attributed = true;
        } else {
          resolvedCredentials = boundProvider;
        }
      },
      get() {
        return resolvedCredentials;
      },
      enumerable: true,
      configurable: true
    });
    config.credentials = inputCredentials;
    const {
      signingEscapePath = true,
      systemClockOffset = config.systemClockOffset || 0,
      sha256
    } = config;
    let signer;
    if (config.signer) {
      signer = (0, import_core2.normalizeProvider)(config.signer);
    } else if (config.regionInfoProvider) {
      signer = /* @__PURE__ */ __name(() => (0, import_core2.normalizeProvider)(config.region)().then(async (region) => [
        await config.regionInfoProvider(region, {
          useFipsEndpoint: await config.useFipsEndpoint(),
          useDualstackEndpoint: await config.useDualstackEndpoint()
        }) || {},
        region
      ]).then(([regionInfo, region]) => {
        const { signingRegion, signingService } = regionInfo;
        config.signingRegion = config.signingRegion || signingRegion || region;
        config.signingName = config.signingName || signingService || config.serviceId;
        const params = {
          ...config,
          credentials: config.credentials,
          region: config.signingRegion,
          service: config.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }), "signer");
    } else {
      signer = /* @__PURE__ */ __name(async (authScheme) => {
        authScheme = Object.assign({}, {
          name: "sigv4",
          signingName: config.signingName || config.defaultSigningName,
          signingRegion: await (0, import_core2.normalizeProvider)(config.region)(),
          properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        config.signingRegion = config.signingRegion || signingRegion;
        config.signingName = config.signingName || signingService || config.serviceId;
        const params = {
          ...config,
          credentials: config.credentials,
          region: config.signingRegion,
          service: config.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }, "signer");
    }
    const resolvedConfig = Object.assign(config, {
      systemClockOffset,
      signingEscapePath,
      signer
    });
    return resolvedConfig;
  }, "resolveAwsSdkSigV4Config");
  var resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  function normalizeCredentialProvider(config, {
    credentials,
    credentialDefaultProvider
  }) {
    let credentialsProvider;
    if (credentials) {
      if (!credentials?.memoized) {
        credentialsProvider = (0, import_core2.memoizeIdentityProvider)(credentials, import_core2.isIdentityExpired, import_core2.doesIdentityRequireRefresh);
      } else {
        credentialsProvider = credentials;
      }
    } else {
      if (credentialDefaultProvider) {
        credentialsProvider = (0, import_core2.normalizeProvider)(credentialDefaultProvider(Object.assign({}, config, {
          parentClientConfig: config
        })));
      } else {
        credentialsProvider = /* @__PURE__ */ __name(async () => {
          throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
        }, "credentialsProvider");
      }
    }
    credentialsProvider.memoized = true;
    return credentialsProvider;
  }
  __name(normalizeCredentialProvider, "normalizeCredentialProvider");
  function bindCallerConfig(config, credentialsProvider) {
    if (credentialsProvider.configBound) {
      return credentialsProvider;
    }
    const fn = /* @__PURE__ */ __name(async (options) => credentialsProvider({ ...options, callerClientConfig: config }), "fn");
    fn.memoized = credentialsProvider.memoized;
    fn.configBound = true;
    return fn;
  }
  __name(bindCallerConfig, "bindCallerConfig");
});

// ../../node_modules/.bun/@smithy+middleware-stack@4.0.2/node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs23 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    constructStack: () => constructStack
  });
  module.exports = __toCommonJS(src_exports);
  var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
    const _aliases = [];
    if (name) {
      _aliases.push(name);
    }
    if (aliases) {
      for (const alias of aliases) {
        _aliases.push(alias);
      }
    }
    return _aliases;
  }, "getAllAliases");
  var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
    return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
  }, "getMiddlewareNameWithAliases");
  var constructStack = /* @__PURE__ */ __name(() => {
    let absoluteEntries = [];
    let relativeEntries = [];
    let identifyOnResolve = false;
    const entriesNameSet = /* @__PURE__ */ new Set;
    const sort = /* @__PURE__ */ __name((entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]), "sort");
    const removeByName = /* @__PURE__ */ __name((toRemove) => {
      let isRemoved = false;
      const filterCb = /* @__PURE__ */ __name((entry) => {
        const aliases = getAllAliases(entry.name, entry.aliases);
        if (aliases.includes(toRemove)) {
          isRemoved = true;
          for (const alias of aliases) {
            entriesNameSet.delete(alias);
          }
          return false;
        }
        return true;
      }, "filterCb");
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    }, "removeByName");
    const removeByReference = /* @__PURE__ */ __name((toRemove) => {
      let isRemoved = false;
      const filterCb = /* @__PURE__ */ __name((entry) => {
        if (entry.middleware === toRemove) {
          isRemoved = true;
          for (const alias of getAllAliases(entry.name, entry.aliases)) {
            entriesNameSet.delete(alias);
          }
          return false;
        }
        return true;
      }, "filterCb");
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    }, "removeByReference");
    const cloneTo = /* @__PURE__ */ __name((toStack) => {
      absoluteEntries.forEach((entry) => {
        toStack.add(entry.middleware, { ...entry });
      });
      relativeEntries.forEach((entry) => {
        toStack.addRelativeTo(entry.middleware, { ...entry });
      });
      toStack.identifyOnResolve?.(stack.identifyOnResolve());
      return toStack;
    }, "cloneTo");
    const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
      const expandedMiddlewareList = [];
      from.before.forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      expandedMiddlewareList.push(from);
      from.after.reverse().forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      return expandedMiddlewareList;
    }, "expandRelativeMiddlewareList");
    const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
      const normalizedAbsoluteEntries = [];
      const normalizedRelativeEntries = [];
      const normalizedEntriesNameMap = {};
      absoluteEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
          normalizedEntriesNameMap[alias] = normalizedEntry;
        }
        normalizedAbsoluteEntries.push(normalizedEntry);
      });
      relativeEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
          normalizedEntriesNameMap[alias] = normalizedEntry;
        }
        normalizedRelativeEntries.push(normalizedEntry);
      });
      normalizedRelativeEntries.forEach((entry) => {
        if (entry.toMiddleware) {
          const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
          if (toMiddleware === undefined) {
            if (debug) {
              return;
            }
            throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
          }
          if (entry.relation === "after") {
            toMiddleware.after.push(entry);
          }
          if (entry.relation === "before") {
            toMiddleware.before.push(entry);
          }
        }
      });
      const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
        wholeList.push(...expandedMiddlewareList);
        return wholeList;
      }, []);
      return mainChain;
    }, "getMiddlewareList");
    const stack = {
      add: (middleware, options = {}) => {
        const { name, override, aliases: _aliases } = options;
        const entry = {
          step: "initialize",
          priority: "normal",
          middleware,
          ...options
        };
        const aliases = getAllAliases(name, _aliases);
        if (aliases.length > 0) {
          if (aliases.some((alias) => entriesNameSet.has(alias))) {
            if (!override)
              throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
            for (const alias of aliases) {
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a) => a === alias));
              if (toOverrideIndex === -1) {
                continue;
              }
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
          }
          for (const alias of aliases) {
            entriesNameSet.add(alias);
          }
        }
        absoluteEntries.push(entry);
      },
      addRelativeTo: (middleware, options) => {
        const { name, override, aliases: _aliases } = options;
        const entry = {
          middleware,
          ...options
        };
        const aliases = getAllAliases(name, _aliases);
        if (aliases.length > 0) {
          if (aliases.some((alias) => entriesNameSet.has(alias))) {
            if (!override)
              throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
            for (const alias of aliases) {
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a) => a === alias));
              if (toOverrideIndex === -1) {
                continue;
              }
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
          }
          for (const alias of aliases) {
            entriesNameSet.add(alias);
          }
        }
        relativeEntries.push(entry);
      },
      clone: () => cloneTo(constructStack()),
      use: (plugin) => {
        plugin.applyToStack(stack);
      },
      remove: (toRemove) => {
        if (typeof toRemove === "string")
          return removeByName(toRemove);
        else
          return removeByReference(toRemove);
      },
      removeByTag: (toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const { tags, name, aliases: _aliases } = entry;
          if (tags && tags.includes(toRemove)) {
            const aliases = getAllAliases(name, _aliases);
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            isRemoved = true;
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      },
      concat: (from) => {
        const cloned = cloneTo(constructStack());
        cloned.use(from);
        cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
        return cloned;
      },
      applyToStack: cloneTo,
      identify: () => {
        return getMiddlewareList(true).map((mw) => {
          const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
          return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
        });
      },
      identifyOnResolve(toggle) {
        if (typeof toggle === "boolean")
          identifyOnResolve = toggle;
        return identifyOnResolve;
      },
      resolve: (handler, context) => {
        for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
          handler = middleware(handler, context);
        }
        if (identifyOnResolve) {
          console.log(stack.identify());
        }
        return handler;
      }
    };
    return stack;
  }, "constructStack");
  var stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
  };
  var priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
  };
});

// ../../node_modules/.bun/@smithy+smithy-client@4.2.0/node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs24 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    Client: () => Client,
    Command: () => Command,
    LazyJsonString: () => LazyJsonString,
    NoOpLogger: () => NoOpLogger,
    SENSITIVE_STRING: () => SENSITIVE_STRING,
    ServiceException: () => ServiceException,
    _json: () => _json,
    collectBody: () => import_protocols.collectBody,
    convertMap: () => convertMap,
    createAggregatedClient: () => createAggregatedClient,
    dateToUtcString: () => dateToUtcString,
    decorateServiceException: () => decorateServiceException,
    emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
    expectBoolean: () => expectBoolean,
    expectByte: () => expectByte,
    expectFloat32: () => expectFloat32,
    expectInt: () => expectInt,
    expectInt32: () => expectInt32,
    expectLong: () => expectLong,
    expectNonNull: () => expectNonNull,
    expectNumber: () => expectNumber,
    expectObject: () => expectObject,
    expectShort: () => expectShort,
    expectString: () => expectString,
    expectUnion: () => expectUnion,
    extendedEncodeURIComponent: () => import_protocols.extendedEncodeURIComponent,
    getArrayIfSingleItem: () => getArrayIfSingleItem,
    getDefaultClientConfiguration: () => getDefaultClientConfiguration,
    getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
    getValueFromTextNode: () => getValueFromTextNode,
    handleFloat: () => handleFloat,
    isSerializableHeaderValue: () => isSerializableHeaderValue,
    limitedParseDouble: () => limitedParseDouble,
    limitedParseFloat: () => limitedParseFloat,
    limitedParseFloat32: () => limitedParseFloat32,
    loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
    logger: () => logger,
    map: () => map,
    parseBoolean: () => parseBoolean,
    parseEpochTimestamp: () => parseEpochTimestamp,
    parseRfc3339DateTime: () => parseRfc3339DateTime,
    parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
    parseRfc7231DateTime: () => parseRfc7231DateTime,
    quoteHeader: () => quoteHeader,
    resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
    resolvedPath: () => import_protocols.resolvedPath,
    serializeDateTime: () => serializeDateTime,
    serializeFloat: () => serializeFloat,
    splitEvery: () => splitEvery,
    splitHeader: () => splitHeader,
    strictParseByte: () => strictParseByte,
    strictParseDouble: () => strictParseDouble,
    strictParseFloat: () => strictParseFloat,
    strictParseFloat32: () => strictParseFloat32,
    strictParseInt: () => strictParseInt,
    strictParseInt32: () => strictParseInt32,
    strictParseLong: () => strictParseLong,
    strictParseShort: () => strictParseShort,
    take: () => take,
    throwDefaultError: () => throwDefaultError,
    withBaseException: () => withBaseException
  });
  module.exports = __toCommonJS(src_exports);
  var import_middleware_stack = require_dist_cjs23();
  var Client = class {
    constructor(config) {
      this.config = config;
      this.middlewareStack = (0, import_middleware_stack.constructStack)();
    }
    static {
      __name(this, "Client");
    }
    send(command, optionsOrCb, cb) {
      const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
      const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      const useHandlerCache = options === undefined && this.config.cacheMiddleware === true;
      let handler;
      if (useHandlerCache) {
        if (!this.handlers) {
          this.handlers = /* @__PURE__ */ new WeakMap;
        }
        const handlers = this.handlers;
        if (handlers.has(command.constructor)) {
          handler = handlers.get(command.constructor);
        } else {
          handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
          handlers.set(command.constructor, handler);
        }
      } else {
        delete this.handlers;
        handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      }
      if (callback) {
        handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {});
      } else {
        return handler(command).then((result) => result.output);
      }
    }
    destroy() {
      this.config?.requestHandler?.destroy?.();
      delete this.handlers;
    }
  };
  var import_protocols = require_protocols();
  var import_types = require_dist_cjs();
  var Command = class {
    constructor() {
      this.middlewareStack = (0, import_middleware_stack.constructStack)();
    }
    static {
      __name(this, "Command");
    }
    static classBuilder() {
      return new ClassBuilder;
    }
    resolveMiddlewareWithContext(clientStack, configuration, options, {
      middlewareFn,
      clientName,
      commandName,
      inputFilterSensitiveLog,
      outputFilterSensitiveLog,
      smithyContext,
      additionalContext,
      CommandCtor
    }) {
      for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
        this.middlewareStack.use(mw);
      }
      const stack = clientStack.concat(this.middlewareStack);
      const { logger: logger2 } = configuration;
      const handlerExecutionContext = {
        logger: logger2,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        [import_types.SMITHY_CONTEXT_KEY]: {
          commandInstance: this,
          ...smithyContext
        },
        ...additionalContext
      };
      const { requestHandler } = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
  };
  var ClassBuilder = class {
    constructor() {
      this._init = () => {};
      this._ep = {};
      this._middlewareFn = () => [];
      this._commandName = "";
      this._clientName = "";
      this._additionalContext = {};
      this._smithyContext = {};
      this._inputFilterSensitiveLog = (_) => _;
      this._outputFilterSensitiveLog = (_) => _;
      this._serializer = null;
      this._deserializer = null;
    }
    static {
      __name(this, "ClassBuilder");
    }
    init(cb) {
      this._init = cb;
    }
    ep(endpointParameterInstructions) {
      this._ep = endpointParameterInstructions;
      return this;
    }
    m(middlewareSupplier) {
      this._middlewareFn = middlewareSupplier;
      return this;
    }
    s(service, operation, smithyContext = {}) {
      this._smithyContext = {
        service,
        operation,
        ...smithyContext
      };
      return this;
    }
    c(additionalContext = {}) {
      this._additionalContext = additionalContext;
      return this;
    }
    n(clientName, commandName) {
      this._clientName = clientName;
      this._commandName = commandName;
      return this;
    }
    f(inputFilter = (_) => _, outputFilter = (_) => _) {
      this._inputFilterSensitiveLog = inputFilter;
      this._outputFilterSensitiveLog = outputFilter;
      return this;
    }
    ser(serializer) {
      this._serializer = serializer;
      return this;
    }
    de(deserializer) {
      this._deserializer = deserializer;
      return this;
    }
    build() {
      const closure = this;
      let CommandRef;
      return CommandRef = class extends Command {
        constructor(...[input]) {
          super();
          this.serialize = closure._serializer;
          this.deserialize = closure._deserializer;
          this.input = input ?? {};
          closure._init(this);
        }
        static {
          __name(this, "CommandRef");
        }
        static getEndpointParameterInstructions() {
          return closure._ep;
        }
        resolveMiddleware(stack, configuration, options) {
          return this.resolveMiddlewareWithContext(stack, configuration, options, {
            CommandCtor: CommandRef,
            middlewareFn: closure._middlewareFn,
            clientName: closure._clientName,
            commandName: closure._commandName,
            inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
            outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
            smithyContext: closure._smithyContext,
            additionalContext: closure._additionalContext
          });
        }
      };
    }
  };
  var SENSITIVE_STRING = "***SensitiveInformation***";
  var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {
    for (const command of Object.keys(commands)) {
      const CommandCtor = commands[command];
      const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {
        const command2 = new CommandCtor(args);
        if (typeof optionsOrCb === "function") {
          this.send(command2, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
          this.send(command2, optionsOrCb || {}, cb);
        } else {
          return this.send(command2, optionsOrCb);
        }
      }, "methodImpl");
      const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
      Client2.prototype[methodName] = methodImpl;
    }
  }, "createAggregatedClient");
  var parseBoolean = /* @__PURE__ */ __name((value) => {
    switch (value) {
      case "true":
        return true;
      case "false":
        return false;
      default:
        throw new Error(`Unable to parse boolean value "${value}"`);
    }
  }, "parseBoolean");
  var expectBoolean = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "number") {
      if (value === 0 || value === 1) {
        logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
      }
      if (value === 0) {
        return false;
      }
      if (value === 1) {
        return true;
      }
    }
    if (typeof value === "string") {
      const lower = value.toLowerCase();
      if (lower === "false" || lower === "true") {
        logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
      }
      if (lower === "false") {
        return false;
      }
      if (lower === "true") {
        return true;
      }
    }
    if (typeof value === "boolean") {
      return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
  }, "expectBoolean");
  var expectNumber = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "string") {
      const parsed = parseFloat(value);
      if (!Number.isNaN(parsed)) {
        if (String(parsed) !== String(value)) {
          logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
        }
        return parsed;
      }
    }
    if (typeof value === "number") {
      return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
  }, "expectNumber");
  var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
  var expectFloat32 = /* @__PURE__ */ __name((value) => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
      if (Math.abs(expected) > MAX_FLOAT) {
        throw new TypeError(`Expected 32-bit float, got ${value}`);
      }
    }
    return expected;
  }, "expectFloat32");
  var expectLong = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
      return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
  }, "expectLong");
  var expectInt = expectLong;
  var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
  var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
  var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
  var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
      throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
  }, "expectSizedInt");
  var castInt = /* @__PURE__ */ __name((value, size) => {
    switch (size) {
      case 32:
        return Int32Array.of(value)[0];
      case 16:
        return Int16Array.of(value)[0];
      case 8:
        return Int8Array.of(value)[0];
    }
  }, "castInt");
  var expectNonNull = /* @__PURE__ */ __name((value, location) => {
    if (value === null || value === undefined) {
      if (location) {
        throw new TypeError(`Expected a non-null value for ${location}`);
      }
      throw new TypeError("Expected a non-null value");
    }
    return value;
  }, "expectNonNull");
  var expectObject = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
      return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
  }, "expectObject");
  var expectString = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "string") {
      return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
      logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
      return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
  }, "expectString");
  var expectUnion = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
    if (setKeys.length === 0) {
      throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
      throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
  }, "expectUnion");
  var strictParseDouble = /* @__PURE__ */ __name((value) => {
    if (typeof value == "string") {
      return expectNumber(parseNumber(value));
    }
    return expectNumber(value);
  }, "strictParseDouble");
  var strictParseFloat = strictParseDouble;
  var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
    if (typeof value == "string") {
      return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
  }, "strictParseFloat32");
  var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
  var parseNumber = /* @__PURE__ */ __name((value) => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
      throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
  }, "parseNumber");
  var limitedParseDouble = /* @__PURE__ */ __name((value) => {
    if (typeof value == "string") {
      return parseFloatString(value);
    }
    return expectNumber(value);
  }, "limitedParseDouble");
  var handleFloat = limitedParseDouble;
  var limitedParseFloat = limitedParseDouble;
  var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
    if (typeof value == "string") {
      return parseFloatString(value);
    }
    return expectFloat32(value);
  }, "limitedParseFloat32");
  var parseFloatString = /* @__PURE__ */ __name((value) => {
    switch (value) {
      case "NaN":
        return NaN;
      case "Infinity":
        return Infinity;
      case "-Infinity":
        return -Infinity;
      default:
        throw new Error(`Unable to parse float value: ${value}`);
    }
  }, "parseFloatString");
  var strictParseLong = /* @__PURE__ */ __name((value) => {
    if (typeof value === "string") {
      return expectLong(parseNumber(value));
    }
    return expectLong(value);
  }, "strictParseLong");
  var strictParseInt = strictParseLong;
  var strictParseInt32 = /* @__PURE__ */ __name((value) => {
    if (typeof value === "string") {
      return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
  }, "strictParseInt32");
  var strictParseShort = /* @__PURE__ */ __name((value) => {
    if (typeof value === "string") {
      return expectShort(parseNumber(value));
    }
    return expectShort(value);
  }, "strictParseShort");
  var strictParseByte = /* @__PURE__ */ __name((value) => {
    if (typeof value === "string") {
      return expectByte(parseNumber(value));
    }
    return expectByte(value);
  }, "strictParseByte");
  var stackTraceWarning = /* @__PURE__ */ __name((message) => {
    return String(new TypeError(message).stack || message).split(`
`).slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join(`
`);
  }, "stackTraceWarning");
  var logger = {
    warn: console.warn
  };
  var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
  }
  __name(dateToUtcString, "dateToUtcString");
  var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
  var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
      throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
  }, "parseRfc3339DateTime");
  var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
  var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
      throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    if (offsetStr.toUpperCase() != "Z") {
      date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
  }, "parseRfc3339DateTimeWithOffset");
  var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
  var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
      }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
      const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
  }, "parseRfc7231DateTime");
  var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    let valueAsDouble;
    if (typeof value === "number") {
      valueAsDouble = value;
    } else if (typeof value === "string") {
      valueAsDouble = strictParseDouble(value);
    } else if (typeof value === "object" && value.tag === 1) {
      valueAsDouble = value.value;
    } else {
      throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
      throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
  }, "parseEpochTimestamp");
  var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
  }, "buildDate");
  var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
    const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
      return valueInThisCentury + 100;
    }
    return valueInThisCentury;
  }, "parseTwoDigitYear");
  var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
  var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
    if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
      return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
  }, "adjustRfc850Year");
  var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
      throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
  }, "parseMonthByShortName");
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
      maxDays = 29;
    }
    if (day > maxDays) {
      throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
  }, "validateDayOfMonth");
  var isLeapYear = /* @__PURE__ */ __name((year) => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }, "isLeapYear");
  var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
    const dateVal = strictParseByte(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
      throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
  }, "parseDateValue");
  var parseMilliseconds = /* @__PURE__ */ __name((value) => {
    if (value === null || value === undefined) {
      return 0;
    }
    return strictParseFloat32("0." + value) * 1000;
  }, "parseMilliseconds");
  var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
      direction = 1;
    } else if (directionStr == "-") {
      direction = -1;
    } else {
      throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
  }, "parseOffsetToMilliseconds");
  var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
      idx++;
    }
    if (idx === 0) {
      return value;
    }
    return value.slice(idx);
  }, "stripLeadingZeroes");
  var ServiceException = class _ServiceException extends Error {
    static {
      __name(this, "ServiceException");
    }
    constructor(options) {
      super(options.message);
      Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
      this.name = options.name;
      this.$fault = options.$fault;
      this.$metadata = options.$metadata;
    }
    static isInstance(value) {
      if (!value)
        return false;
      const candidate = value;
      return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
    }
    static [Symbol.hasInstance](instance) {
      if (!instance)
        return false;
      const candidate = instance;
      if (this === _ServiceException) {
        return _ServiceException.isInstance(instance);
      }
      if (_ServiceException.isInstance(instance)) {
        if (candidate.name && this.name) {
          return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
        }
        return this.prototype.isPrototypeOf(instance);
      }
      return false;
    }
  };
  var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
    Object.entries(additions).filter(([, v]) => v !== undefined).forEach(([k, v]) => {
      if (exception[k] == undefined || exception[k] === "") {
        exception[k] = v;
      }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
  }, "decorateServiceException");
  var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
      name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
      $fault: "client",
      $metadata
    });
    throw decorateServiceException(response, parsedBody);
  }, "throwDefaultError");
  var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {
    return ({ output, parsedBody, errorCode }) => {
      throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
    };
  }, "withBaseException");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
    switch (mode) {
      case "standard":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "in-region":
        return {
          retryMode: "standard",
          connectionTimeout: 1100
        };
      case "cross-region":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "mobile":
        return {
          retryMode: "standard",
          connectionTimeout: 30000
        };
      default:
        return {};
    }
  }, "loadConfigsForDefaultMode");
  var warningEmitted = false;
  var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 16) {
      warningEmitted = true;
    }
  }, "emitWarningIfUnsupportedVersion");
  var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const checksumAlgorithms = [];
    for (const id in import_types.AlgorithmId) {
      const algorithmId = import_types.AlgorithmId[id];
      if (runtimeConfig[algorithmId] === undefined) {
        continue;
      }
      checksumAlgorithms.push({
        algorithmId: () => algorithmId,
        checksumConstructor: () => runtimeConfig[algorithmId]
      });
    }
    return {
      addChecksumAlgorithm(algo) {
        checksumAlgorithms.push(algo);
      },
      checksumAlgorithms() {
        return checksumAlgorithms;
      }
    };
  }, "getChecksumConfiguration");
  var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
      runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
  }, "resolveChecksumRuntimeConfig");
  var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    return {
      setRetryStrategy(retryStrategy) {
        runtimeConfig.retryStrategy = retryStrategy;
      },
      retryStrategy() {
        return runtimeConfig.retryStrategy;
      }
    };
  }, "getRetryConfiguration");
  var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
    const runtimeConfig = {};
    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
    return runtimeConfig;
  }, "resolveRetryRuntimeConfig");
  var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
  }, "getDefaultExtensionConfiguration");
  var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
  var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return Object.assign(resolveChecksumRuntimeConfig(config), resolveRetryRuntimeConfig(config));
  }, "resolveDefaultRuntimeConfig");
  var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
  var getValueFromTextNode = /* @__PURE__ */ __name((obj) => {
    const textNodeName = "#text";
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
        obj[key] = obj[key][textNodeName];
      } else if (typeof obj[key] === "object" && obj[key] !== null) {
        obj[key] = getValueFromTextNode(obj[key]);
      }
    }
    return obj;
  }, "getValueFromTextNode");
  var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => {
    return value != null;
  }, "isSerializableHeaderValue");
  var LazyJsonString = /* @__PURE__ */ __name(function LazyJsonString2(val2) {
    const str = Object.assign(new String(val2), {
      deserializeJSON() {
        return JSON.parse(String(val2));
      },
      toString() {
        return String(val2);
      },
      toJSON() {
        return String(val2);
      }
    });
    return str;
  }, "LazyJsonString");
  LazyJsonString.from = (object) => {
    if (object && typeof object === "object" && (object instanceof LazyJsonString || ("deserializeJSON" in object))) {
      return object;
    } else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
      return LazyJsonString(String(object));
    }
    return LazyJsonString(JSON.stringify(object));
  };
  LazyJsonString.fromObject = LazyJsonString.from;
  var NoOpLogger = class {
    static {
      __name(this, "NoOpLogger");
    }
    trace() {}
    debug() {}
    info() {}
    warn() {}
    error() {}
  };
  function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
      target = {};
      instructions = arg0;
    } else {
      target = arg0;
      if (typeof arg1 === "function") {
        filter = arg1;
        instructions = arg2;
        return mapWithFilter(target, filter, instructions);
      } else {
        instructions = arg1;
      }
    }
    for (const key of Object.keys(instructions)) {
      if (!Array.isArray(instructions[key])) {
        target[key] = instructions[key];
        continue;
      }
      applyInstruction(target, null, instructions, key);
    }
    return target;
  }
  __name(map, "map");
  var convertMap = /* @__PURE__ */ __name((target) => {
    const output = {};
    for (const [k, v] of Object.entries(target || {})) {
      output[k] = [, v];
    }
    return output;
  }, "convertMap");
  var take = /* @__PURE__ */ __name((source, instructions) => {
    const out = {};
    for (const key in instructions) {
      applyInstruction(out, source, instructions, key);
    }
    return out;
  }, "take");
  var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
      if (Array.isArray(value)) {
        _instructions[key] = value;
      } else {
        if (typeof value === "function") {
          _instructions[key] = [filter, value()];
        } else {
          _instructions[key] = [filter, value];
        }
      }
      return _instructions;
    }, {}));
  }, "mapWithFilter");
  var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
    if (source !== null) {
      let instruction = instructions[targetKey];
      if (typeof instruction === "function") {
        instruction = [, instruction];
      }
      const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
      if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
        target[targetKey] = valueFn(source[sourceKey]);
      }
      return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
      let _value;
      const defaultFilterPassed = filter === undefined && (_value = value()) != null;
      const customFilterPassed = typeof filter === "function" && !!filter(undefined) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed) {
        target[targetKey] = _value;
      } else if (customFilterPassed) {
        target[targetKey] = value();
      }
    } else {
      const defaultFilterPassed = filter === undefined && value != null;
      const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed || customFilterPassed) {
        target[targetKey] = value;
      }
    }
  }, "applyInstruction");
  var nonNullish = /* @__PURE__ */ __name((_) => _ != null, "nonNullish");
  var pass = /* @__PURE__ */ __name((_) => _, "pass");
  function quoteHeader(part) {
    if (part.includes(",") || part.includes('"')) {
      part = `"${part.replace(/"/g, "\\\"")}"`;
    }
    return part;
  }
  __name(quoteHeader, "quoteHeader");
  var serializeFloat = /* @__PURE__ */ __name((value) => {
    if (value !== value) {
      return "NaN";
    }
    switch (value) {
      case Infinity:
        return "Infinity";
      case -Infinity:
        return "-Infinity";
      default:
        return value;
    }
  }, "serializeFloat");
  var serializeDateTime = /* @__PURE__ */ __name((date) => date.toISOString().replace(".000Z", "Z"), "serializeDateTime");
  var _json = /* @__PURE__ */ __name((obj) => {
    if (obj == null) {
      return {};
    }
    if (Array.isArray(obj)) {
      return obj.filter((_) => _ != null).map(_json);
    }
    if (typeof obj === "object") {
      const target = {};
      for (const key of Object.keys(obj)) {
        if (obj[key] == null) {
          continue;
        }
        target[key] = _json(obj[key]);
      }
      return target;
    }
    return obj;
  }, "_json");
  function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
      throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
      return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for (let i = 0;i < segments.length; i++) {
      if (currentSegment === "") {
        currentSegment = segments[i];
      } else {
        currentSegment += delimiter + segments[i];
      }
      if ((i + 1) % numDelimiters === 0) {
        compoundSegments.push(currentSegment);
        currentSegment = "";
      }
    }
    if (currentSegment !== "") {
      compoundSegments.push(currentSegment);
    }
    return compoundSegments;
  }
  __name(splitEvery, "splitEvery");
  var splitHeader = /* @__PURE__ */ __name((value) => {
    const z = value.length;
    const values = [];
    let withinQuotes = false;
    let prevChar = undefined;
    let anchor = 0;
    for (let i = 0;i < z; ++i) {
      const char = value[i];
      switch (char) {
        case `"`:
          if (prevChar !== "\\") {
            withinQuotes = !withinQuotes;
          }
          break;
        case ",":
          if (!withinQuotes) {
            values.push(value.slice(anchor, i));
            anchor = i + 1;
          }
          break;
        default:
      }
      prevChar = char;
    }
    values.push(value.slice(anchor));
    return values.map((v) => {
      v = v.trim();
      const z2 = v.length;
      if (z2 < 2) {
        return v;
      }
      if (v[0] === `"` && v[z2 - 1] === `"`) {
        v = v.slice(1, z2 - 1);
      }
      return v.replace(/\\"/g, '"');
    });
  }, "splitHeader");
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS((exports) => {
  var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
  var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
  var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
  var regexName = new RegExp("^" + nameRegexp + "$");
  var getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while (match) {
      const allmatches = [];
      allmatches.startIndex = regex.lastIndex - match[0].length;
      const len = match.length;
      for (let index = 0;index < len; index++) {
        allmatches.push(match[index]);
      }
      matches.push(allmatches);
      match = regex.exec(string);
    }
    return matches;
  };
  var isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === "undefined");
  };
  exports.isExist = function(v) {
    return typeof v !== "undefined";
  };
  exports.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
  };
  exports.merge = function(target, a, arrayMode) {
    if (a) {
      const keys = Object.keys(a);
      const len = keys.length;
      for (let i = 0;i < len; i++) {
        if (arrayMode === "strict") {
          target[keys[i]] = [a[keys[i]]];
        } else {
          target[keys[i]] = a[keys[i]];
        }
      }
    }
  };
  exports.getValue = function(v) {
    if (exports.isExist(v)) {
      return v;
    } else {
      return "";
    }
  };
  exports.isName = isName;
  exports.getAllMatches = getAllMatches;
  exports.nameRegexp = nameRegexp;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS((exports) => {
  var util = require_util();
  var defaultOptions = {
    allowBooleanAttributes: false,
    unpairedTags: []
  };
  exports.validate = function(xmlData, options) {
    options = Object.assign({}, defaultOptions, options);
    const tags = [];
    let tagFound = false;
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") {
      xmlData = xmlData.substr(1);
    }
    for (let i = 0;i < xmlData.length; i++) {
      if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
        i += 2;
        i = readPI(xmlData, i);
        if (i.err)
          return i;
      } else if (xmlData[i] === "<") {
        let tagStartPos = i;
        i++;
        if (xmlData[i] === "!") {
          i = readCommentAndCDATA(xmlData, i);
          continue;
        } else {
          let closingTag = false;
          if (xmlData[i] === "/") {
            closingTag = true;
            i++;
          }
          let tagName = "";
          for (;i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "\t" && xmlData[i] !== `
` && xmlData[i] !== "\r"; i++) {
            tagName += xmlData[i];
          }
          tagName = tagName.trim();
          if (tagName[tagName.length - 1] === "/") {
            tagName = tagName.substring(0, tagName.length - 1);
            i--;
          }
          if (!validateTagName(tagName)) {
            let msg;
            if (tagName.trim().length === 0) {
              msg = "Invalid space after '<'.";
            } else {
              msg = "Tag '" + tagName + "' is an invalid name.";
            }
            return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
          }
          const result = readAttributeStr(xmlData, i);
          if (result === false) {
            return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
          }
          let attrStr = result.value;
          i = result.index;
          if (attrStr[attrStr.length - 1] === "/") {
            const attrStrStart = i - attrStr.length;
            attrStr = attrStr.substring(0, attrStr.length - 1);
            const isValid = validateAttributeString(attrStr, options);
            if (isValid === true) {
              tagFound = true;
            } else {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
            }
          } else if (closingTag) {
            if (!result.tagClosed) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
            } else if (attrStr.trim().length > 0) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
            } else if (tags.length === 0) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
            } else {
              const otg = tags.pop();
              if (tagName !== otg.tagName) {
                let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
              }
              if (tags.length == 0) {
                reachedRoot = true;
              }
            }
          } else {
            const isValid = validateAttributeString(attrStr, options);
            if (isValid !== true) {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
            }
            if (reachedRoot === true) {
              return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
            } else if (options.unpairedTags.indexOf(tagName) !== -1) {} else {
              tags.push({ tagName, tagStartPos });
            }
            tagFound = true;
          }
          for (i++;i < xmlData.length; i++) {
            if (xmlData[i] === "<") {
              if (xmlData[i + 1] === "!") {
                i++;
                i = readCommentAndCDATA(xmlData, i);
                continue;
              } else if (xmlData[i + 1] === "?") {
                i = readPI(xmlData, ++i);
                if (i.err)
                  return i;
              } else {
                break;
              }
            } else if (xmlData[i] === "&") {
              const afterAmp = validateAmpersand(xmlData, i);
              if (afterAmp == -1)
                return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
              i = afterAmp;
            } else {
              if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
              }
            }
          }
          if (xmlData[i] === "<") {
            i--;
          }
        }
      } else {
        if (isWhiteSpace(xmlData[i])) {
          continue;
        }
        return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
      }
    }
    if (!tagFound) {
      return getErrorObject("InvalidXml", "Start tag expected.", 1);
    } else if (tags.length == 1) {
      return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    } else if (tags.length > 0) {
      return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
    }
    return true;
  };
  function isWhiteSpace(char) {
    return char === " " || char === "\t" || char === `
` || char === "\r";
  }
  function readPI(xmlData, i) {
    const start = i;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] == "?" || xmlData[i] == " ") {
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === "xml") {
          return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
        } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
          i++;
          break;
        } else {
          continue;
        }
      }
    }
    return i;
  }
  function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
      for (i += 3;i < xmlData.length; i++) {
        if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
      let angleBracketsCount = 1;
      for (i += 8;i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          angleBracketsCount++;
        } else if (xmlData[i] === ">") {
          angleBracketsCount--;
          if (angleBracketsCount === 0) {
            break;
          }
        }
      }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
      for (i += 8;i < xmlData.length; i++) {
        if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    }
    return i;
  }
  var doubleQuote = '"';
  var singleQuote = "'";
  function readAttributeStr(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
        if (startChar === "") {
          startChar = xmlData[i];
        } else if (startChar !== xmlData[i]) {} else {
          startChar = "";
        }
      } else if (xmlData[i] === ">") {
        if (startChar === "") {
          tagClosed = true;
          break;
        }
      }
      attrStr += xmlData[i];
    }
    if (startChar !== "") {
      return false;
    }
    return {
      value: attrStr,
      index: i,
      tagClosed
    };
  }
  var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
  function validateAttributeString(attrStr, options) {
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for (let i = 0;i < matches.length; i++) {
      if (matches[i][1].length === 0) {
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
        return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
      }
      const attrName = matches[i][2];
      if (!validateAttrName(attrName)) {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
      }
      if (!attrNames.hasOwnProperty(attrName)) {
        attrNames[attrName] = 1;
      } else {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
      }
    }
    return true;
  }
  function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
      i++;
      re = /[\da-fA-F]/;
    }
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === ";")
        return i;
      if (!xmlData[i].match(re))
        break;
    }
    return -1;
  }
  function validateAmpersand(xmlData, i) {
    i++;
    if (xmlData[i] === ";")
      return -1;
    if (xmlData[i] === "#") {
      i++;
      return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for (;i < xmlData.length; i++, count++) {
      if (xmlData[i].match(/\w/) && count < 20)
        continue;
      if (xmlData[i] === ";")
        break;
      return -1;
    }
    return i;
  }
  function getErrorObject(code, message, lineNumber) {
    return {
      err: {
        code,
        msg: message,
        line: lineNumber.line || lineNumber,
        col: lineNumber.col
      }
    };
  }
  function validateAttrName(attrName) {
    return util.isName(attrName);
  }
  function validateTagName(tagname) {
    return util.isName(tagname);
  }
  function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
      line: lines.length,
      col: lines[lines.length - 1].length + 1
    };
  }
  function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
  }
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS((exports) => {
  var defaultOptions = {
    preserveOrder: false,
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    removeNSPrefix: false,
    allowBooleanAttributes: false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true,
    cdataPropName: false,
    numberParseOptions: {
      hex: true,
      leadingZeros: true,
      eNotation: true
    },
    tagValueProcessor: function(tagName, val2) {
      return val2;
    },
    attributeValueProcessor: function(attrName, val2) {
      return val2;
    },
    stopNodes: [],
    alwaysCreateTextNode: false,
    isArray: () => false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
    transformAttributeName: false,
    updateTag: function(tagName, jPath, attrs) {
      return tagName;
    }
  };
  var buildOptions = function(options) {
    return Object.assign({}, defaultOptions, options);
  };
  exports.buildOptions = buildOptions;
  exports.defaultOptions = defaultOptions;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS((exports, module) => {
  class XmlNode {
    constructor(tagname) {
      this.tagname = tagname;
      this.child = [];
      this[":@"] = {};
    }
    add(key, val2) {
      if (key === "__proto__")
        key = "#__proto__";
      this.child.push({ [key]: val2 });
    }
    addChild(node) {
      if (node.tagname === "__proto__")
        node.tagname = "#__proto__";
      if (node[":@"] && Object.keys(node[":@"]).length > 0) {
        this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
      } else {
        this.child.push({ [node.tagname]: node.child });
      }
    }
  }
  module.exports = XmlNode;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS((exports, module) => {
  var util = require_util();
  function readDocType(xmlData, i) {
    const entities = {};
    if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
      i = i + 9;
      let angleBracketsCount = 1;
      let hasBody = false, comment = false;
      let exp = "";
      for (;i < xmlData.length; i++) {
        if (xmlData[i] === "<" && !comment) {
          if (hasBody && isEntity(xmlData, i)) {
            i += 7;
            [entityName, val, i] = readEntityExp(xmlData, i + 1);
            if (val.indexOf("&") === -1)
              entities[validateEntityName(entityName)] = {
                regx: RegExp(`&${entityName};`, "g"),
                val
              };
          } else if (hasBody && isElement(xmlData, i))
            i += 8;
          else if (hasBody && isAttlist(xmlData, i))
            i += 8;
          else if (hasBody && isNotation(xmlData, i))
            i += 9;
          else if (isComment)
            comment = true;
          else
            throw new Error("Invalid DOCTYPE");
          angleBracketsCount++;
          exp = "";
        } else if (xmlData[i] === ">") {
          if (comment) {
            if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
              comment = false;
              angleBracketsCount--;
            }
          } else {
            angleBracketsCount--;
          }
          if (angleBracketsCount === 0) {
            break;
          }
        } else if (xmlData[i] === "[") {
          hasBody = true;
        } else {
          exp += xmlData[i];
        }
      }
      if (angleBracketsCount !== 0) {
        throw new Error(`Unclosed DOCTYPE`);
      }
    } else {
      throw new Error(`Invalid Tag instead of DOCTYPE`);
    }
    return { entities, i };
  }
  function readEntityExp(xmlData, i) {
    let entityName2 = "";
    for (;i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
      entityName2 += xmlData[i];
    }
    entityName2 = entityName2.trim();
    if (entityName2.indexOf(" ") !== -1)
      throw new Error("External entites are not supported");
    const startChar = xmlData[i++];
    let val2 = "";
    for (;i < xmlData.length && xmlData[i] !== startChar; i++) {
      val2 += xmlData[i];
    }
    return [entityName2, val2, i];
  }
  function isComment(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
      return true;
    return false;
  }
  function isEntity(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
      return true;
    return false;
  }
  function isElement(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
      return true;
    return false;
  }
  function isAttlist(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
      return true;
    return false;
  }
  function isNotation(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
      return true;
    return false;
  }
  function validateEntityName(name) {
    if (util.isName(name))
      return name;
    else
      throw new Error(`Invalid entity name ${name}`);
  }
  module.exports = readDocType;
});

// ../../node_modules/.bun/strnum@1.0.5/node_modules/strnum/strnum.js
var require_strnum = __commonJS((exports, module) => {
  var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
  var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
  if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
  }
  if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
  }
  var consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: ".",
    eNotation: true
  };
  function toNumber(str, options = {}) {
    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string")
      return str;
    let trimmedStr = str.trim();
    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr))
      return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
      return Number.parseInt(trimmedStr, 16);
    } else {
      const match = numRegex.exec(trimmedStr);
      if (match) {
        const sign = match[1];
        const leadingZeros = match[2];
        let numTrimmedByZeros = trimZeros(match[3]);
        const eNotation = match[4] || match[6];
        if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
          return str;
        else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
          return str;
        else {
          const num = Number(trimmedStr);
          const numStr = "" + num;
          if (numStr.search(/[eE]/) !== -1) {
            if (options.eNotation)
              return num;
            else
              return str;
          } else if (eNotation) {
            if (options.eNotation)
              return num;
            else
              return str;
          } else if (trimmedStr.indexOf(".") !== -1) {
            if (numStr === "0" && numTrimmedByZeros === "")
              return num;
            else if (numStr === numTrimmedByZeros)
              return num;
            else if (sign && numStr === "-" + numTrimmedByZeros)
              return num;
            else
              return str;
          }
          if (leadingZeros) {
            if (numTrimmedByZeros === numStr)
              return num;
            else if (sign + numTrimmedByZeros === numStr)
              return num;
            else
              return str;
          }
          if (trimmedStr === numStr)
            return num;
          else if (trimmedStr === sign + numStr)
            return num;
          return str;
        }
      } else {
        return str;
      }
    }
  }
  function trimZeros(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
      numStr = numStr.replace(/0+$/, "");
      if (numStr === ".")
        numStr = "0";
      else if (numStr[0] === ".")
        numStr = "0" + numStr;
      else if (numStr[numStr.length - 1] === ".")
        numStr = numStr.substr(0, numStr.length - 1);
      return numStr;
    }
    return numStr;
  }
  module.exports = toNumber;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS((exports, module) => {
  var util = require_util();
  var xmlNode = require_xmlNode();
  var readDocType = require_DocTypeReader();
  var toNumber = require_strnum();

  class OrderedObjParser {
    constructor(options) {
      this.options = options;
      this.currentNode = null;
      this.tagsNodeStack = [];
      this.docTypeEntities = {};
      this.lastEntities = {
        apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
        gt: { regex: /&(gt|#62|#x3E);/g, val: ">" },
        lt: { regex: /&(lt|#60|#x3C);/g, val: "<" },
        quot: { regex: /&(quot|#34|#x22);/g, val: '"' }
      };
      this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
      this.htmlEntities = {
        space: { regex: /&(nbsp|#160);/g, val: " " },
        cent: { regex: /&(cent|#162);/g, val: "¢" },
        pound: { regex: /&(pound|#163);/g, val: "£" },
        yen: { regex: /&(yen|#165);/g, val: "¥" },
        euro: { regex: /&(euro|#8364);/g, val: "€" },
        copyright: { regex: /&(copy|#169);/g, val: "©" },
        reg: { regex: /&(reg|#174);/g, val: "®" },
        inr: { regex: /&(inr|#8377);/g, val: "₹" },
        num_dec: { regex: /&#([0-9]{1,7});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },
        num_hex: { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 16)) }
      };
      this.addExternalEntities = addExternalEntities;
      this.parseXml = parseXml;
      this.parseTextData = parseTextData;
      this.resolveNameSpace = resolveNameSpace;
      this.buildAttributesMap = buildAttributesMap;
      this.isItStopNode = isItStopNode;
      this.replaceEntitiesValue = replaceEntitiesValue;
      this.readStopNodeData = readStopNodeData;
      this.saveTextToParentTag = saveTextToParentTag;
      this.addChild = addChild;
    }
  }
  function addExternalEntities(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for (let i = 0;i < entKeys.length; i++) {
      const ent = entKeys[i];
      this.lastEntities[ent] = {
        regex: new RegExp("&" + ent + ";", "g"),
        val: externalEntities[ent]
      };
    }
  }
  function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (val2 !== undefined) {
      if (this.options.trimValues && !dontTrim) {
        val2 = val2.trim();
      }
      if (val2.length > 0) {
        if (!escapeEntities)
          val2 = this.replaceEntitiesValue(val2);
        const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
        if (newval === null || newval === undefined) {
          return val2;
        } else if (typeof newval !== typeof val2 || newval !== val2) {
          return newval;
        } else if (this.options.trimValues) {
          return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          const trimmedVal = val2.trim();
          if (trimmedVal === val2) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            return val2;
          }
        }
      }
    }
  }
  function resolveNameSpace(tagname) {
    if (this.options.removeNSPrefix) {
      const tags = tagname.split(":");
      const prefix = tagname.charAt(0) === "/" ? "/" : "";
      if (tags[0] === "xmlns") {
        return "";
      }
      if (tags.length === 2) {
        tagname = prefix + tags[1];
      }
    }
    return tagname;
  }
  var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
  function buildAttributesMap(attrStr, jPath, tagName) {
    if (!this.options.ignoreAttributes && typeof attrStr === "string") {
      const matches = util.getAllMatches(attrStr, attrsRegx);
      const len = matches.length;
      const attrs = {};
      for (let i = 0;i < len; i++) {
        const attrName = this.resolveNameSpace(matches[i][1]);
        let oldVal = matches[i][4];
        let aName = this.options.attributeNamePrefix + attrName;
        if (attrName.length) {
          if (this.options.transformAttributeName) {
            aName = this.options.transformAttributeName(aName);
          }
          if (aName === "__proto__")
            aName = "#__proto__";
          if (oldVal !== undefined) {
            if (this.options.trimValues) {
              oldVal = oldVal.trim();
            }
            oldVal = this.replaceEntitiesValue(oldVal);
            const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
            if (newVal === null || newVal === undefined) {
              attrs[aName] = oldVal;
            } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
              attrs[aName] = newVal;
            } else {
              attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
            }
          } else if (this.options.allowBooleanAttributes) {
            attrs[aName] = true;
          }
        }
      }
      if (!Object.keys(attrs).length) {
        return;
      }
      if (this.options.attributesGroupName) {
        const attrCollection = {};
        attrCollection[this.options.attributesGroupName] = attrs;
        return attrCollection;
      }
      return attrs;
    }
  }
  var parseXml = function(xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, `
`);
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    let jPath = "";
    for (let i = 0;i < xmlData.length; i++) {
      const ch = xmlData[i];
      if (ch === "<") {
        if (xmlData[i + 1] === "/") {
          const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
          let tagName = xmlData.substring(i + 2, closeIndex).trim();
          if (this.options.removeNSPrefix) {
            const colonIndex = tagName.indexOf(":");
            if (colonIndex !== -1) {
              tagName = tagName.substr(colonIndex + 1);
            }
          }
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }
          if (currentNode) {
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
          }
          const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
          if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
            throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
          }
          let propIndex = 0;
          if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
            propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
            this.tagsNodeStack.pop();
          } else {
            propIndex = jPath.lastIndexOf(".");
          }
          jPath = jPath.substring(0, propIndex);
          currentNode = this.tagsNodeStack.pop();
          textData = "";
          i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
          let tagData = readTagExp(xmlData, i, false, "?>");
          if (!tagData)
            throw new Error("Pi Tag is not closed.");
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
          if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {} else {
            const childNode = new xmlNode(tagData.tagName);
            childNode.add(this.options.textNodeName, "");
            if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
            }
            this.addChild(currentNode, childNode, jPath);
          }
          i = tagData.closeIndex + 1;
        } else if (xmlData.substr(i + 1, 3) === "!--") {
          const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
          if (this.options.commentPropName) {
            const comment = xmlData.substring(i + 4, endIndex - 2);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
          }
          i = endIndex;
        } else if (xmlData.substr(i + 1, 2) === "!D") {
          const result = readDocType(xmlData, i);
          this.docTypeEntities = result.entities;
          i = result.i;
        } else if (xmlData.substr(i + 1, 2) === "![") {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
          const tagExp = xmlData.substring(i + 9, closeIndex);
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
          let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
          if (val2 == undefined)
            val2 = "";
          if (this.options.cdataPropName) {
            currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
          } else {
            currentNode.add(this.options.textNodeName, val2);
          }
          i = closeIndex + 2;
        } else {
          let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
          let tagName = result.tagName;
          const rawTagName = result.rawTagName;
          let tagExp = result.tagExp;
          let attrExpPresent = result.attrExpPresent;
          let closeIndex = result.closeIndex;
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }
          if (currentNode && textData) {
            if (currentNode.tagname !== "!xml") {
              textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
            }
          }
          const lastTag = currentNode;
          if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
            currentNode = this.tagsNodeStack.pop();
            jPath = jPath.substring(0, jPath.lastIndexOf("."));
          }
          if (tagName !== xmlObj.tagname) {
            jPath += jPath ? "." + tagName : tagName;
          }
          if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
            let tagContent = "";
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                jPath = jPath.substr(0, jPath.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              i = result.closeIndex;
            } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
              i = result.closeIndex;
            } else {
              const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
              if (!result2)
                throw new Error(`Unexpected end of ${rawTagName}`);
              i = result2.i;
              tagContent = result2.tagContent;
            }
            const childNode = new xmlNode(tagName);
            if (tagName !== tagExp && attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
            }
            if (tagContent) {
              tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            childNode.add(this.options.textNodeName, tagContent);
            this.addChild(currentNode, childNode, jPath);
          } else {
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                jPath = jPath.substr(0, jPath.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              if (this.options.transformTagName) {
                tagName = this.options.transformTagName(tagName);
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
            } else {
              const childNode = new xmlNode(tagName);
              this.tagsNodeStack.push(currentNode);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        }
      } else {
        textData += xmlData[i];
      }
    }
    return xmlObj.child;
  };
  function addChild(currentNode, childNode, jPath) {
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    if (result === false) {} else if (typeof result === "string") {
      childNode.tagname = result;
      currentNode.addChild(childNode);
    } else {
      currentNode.addChild(childNode);
    }
  }
  var replaceEntitiesValue = function(val2) {
    if (this.options.processEntities) {
      for (let entityName2 in this.docTypeEntities) {
        const entity = this.docTypeEntities[entityName2];
        val2 = val2.replace(entity.regx, entity.val);
      }
      for (let entityName2 in this.lastEntities) {
        const entity = this.lastEntities[entityName2];
        val2 = val2.replace(entity.regex, entity.val);
      }
      if (this.options.htmlEntities) {
        for (let entityName2 in this.htmlEntities) {
          const entity = this.htmlEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
      }
      val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val2;
  };
  function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
    if (textData) {
      if (isLeafNode === undefined)
        isLeafNode = Object.keys(currentNode.child).length === 0;
      textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
      if (textData !== undefined && textData !== "")
        currentNode.add(this.options.textNodeName, textData);
      textData = "";
    }
    return textData;
  }
  function isItStopNode(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for (const stopNodePath in stopNodes) {
      const stopNodeExp = stopNodes[stopNodePath];
      if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
        return true;
    }
    return false;
  }
  function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
    let attrBoundary;
    let tagExp = "";
    for (let index = i;index < xmlData.length; index++) {
      let ch = xmlData[index];
      if (attrBoundary) {
        if (ch === attrBoundary)
          attrBoundary = "";
      } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
      } else if (ch === closingChar[0]) {
        if (closingChar[1]) {
          if (xmlData[index + 1] === closingChar[1]) {
            return {
              data: tagExp,
              index
            };
          }
        } else {
          return {
            data: tagExp,
            index
          };
        }
      } else if (ch === "\t") {
        ch = " ";
      }
      tagExp += ch;
    }
  }
  function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) {
      throw new Error(errMsg);
    } else {
      return closingIndex + str.length - 1;
    }
  }
  function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
    if (!result)
      return;
    let tagExp = result.data;
    const closeIndex = result.index;
    const separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp;
    let attrExpPresent = true;
    if (separatorIndex !== -1) {
      tagName = tagExp.substring(0, separatorIndex);
      tagExp = tagExp.substring(separatorIndex + 1).trimStart();
    }
    const rawTagName = tagName;
    if (removeNSPrefix) {
      const colonIndex = tagName.indexOf(":");
      if (colonIndex !== -1) {
        tagName = tagName.substr(colonIndex + 1);
        attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
      }
    }
    return {
      tagName,
      tagExp,
      closeIndex,
      attrExpPresent,
      rawTagName
    };
  }
  function readStopNodeData(xmlData, tagName, i) {
    const startIndex = i;
    let openTagCount = 1;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === "<") {
        if (xmlData[i + 1] === "/") {
          const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
          let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
          if (closeTagName === tagName) {
            openTagCount--;
            if (openTagCount === 0) {
              return {
                tagContent: xmlData.substring(startIndex, i),
                i: closeIndex
              };
            }
          }
          i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
          const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 3) === "!--") {
          const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 2) === "![") {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
          i = closeIndex;
        } else {
          const tagData = readTagExp(xmlData, i, ">");
          if (tagData) {
            const openTagName = tagData && tagData.tagName;
            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
              openTagCount++;
            }
            i = tagData.closeIndex;
          }
        }
      }
    }
  }
  function parseValue(val2, shouldParse, options) {
    if (shouldParse && typeof val2 === "string") {
      const newval = val2.trim();
      if (newval === "true")
        return true;
      else if (newval === "false")
        return false;
      else
        return toNumber(val2, options);
    } else {
      if (util.isExist(val2)) {
        return val2;
      } else {
        return "";
      }
    }
  }
  module.exports = OrderedObjParser;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS((exports) => {
  function prettify(node, options) {
    return compress(node, options);
  }
  function compress(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for (let i = 0;i < arr.length; i++) {
      const tagObj = arr[i];
      const property = propName(tagObj);
      let newJpath = "";
      if (jPath === undefined)
        newJpath = property;
      else
        newJpath = jPath + "." + property;
      if (property === options.textNodeName) {
        if (text === undefined)
          text = tagObj[property];
        else
          text += "" + tagObj[property];
      } else if (property === undefined) {
        continue;
      } else if (tagObj[property]) {
        let val2 = compress(tagObj[property], options, newJpath);
        const isLeaf = isLeafTag(val2, options);
        if (tagObj[":@"]) {
          assignAttributes(val2, tagObj[":@"], newJpath, options);
        } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {
          val2 = val2[options.textNodeName];
        } else if (Object.keys(val2).length === 0) {
          if (options.alwaysCreateTextNode)
            val2[options.textNodeName] = "";
          else
            val2 = "";
        }
        if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
          if (!Array.isArray(compressedObj[property])) {
            compressedObj[property] = [compressedObj[property]];
          }
          compressedObj[property].push(val2);
        } else {
          if (options.isArray(property, newJpath, isLeaf)) {
            compressedObj[property] = [val2];
          } else {
            compressedObj[property] = val2;
          }
        }
      }
    }
    if (typeof text === "string") {
      if (text.length > 0)
        compressedObj[options.textNodeName] = text;
    } else if (text !== undefined)
      compressedObj[options.textNodeName] = text;
    return compressedObj;
  }
  function propName(obj) {
    const keys = Object.keys(obj);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      if (key !== ":@")
        return key;
    }
  }
  function assignAttributes(obj, attrMap, jpath, options) {
    if (attrMap) {
      const keys = Object.keys(attrMap);
      const len = keys.length;
      for (let i = 0;i < len; i++) {
        const atrrName = keys[i];
        if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
          obj[atrrName] = [attrMap[atrrName]];
        } else {
          obj[atrrName] = attrMap[atrrName];
        }
      }
    }
  }
  function isLeafTag(obj, options) {
    const { textNodeName } = options;
    const propCount = Object.keys(obj).length;
    if (propCount === 0) {
      return true;
    }
    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
      return true;
    }
    return false;
  }
  exports.prettify = prettify;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS((exports, module) => {
  var { buildOptions } = require_OptionsBuilder();
  var OrderedObjParser = require_OrderedObjParser();
  var { prettify } = require_node2json();
  var validator = require_validator();

  class XMLParser {
    constructor(options) {
      this.externalEntities = {};
      this.options = buildOptions(options);
    }
    parse(xmlData, validationOption) {
      if (typeof xmlData === "string") {} else if (xmlData.toString) {
        xmlData = xmlData.toString();
      } else {
        throw new Error("XML data is accepted in String or Bytes[] form.");
      }
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
        }
      }
      const orderedObjParser = new OrderedObjParser(this.options);
      orderedObjParser.addExternalEntities(this.externalEntities);
      const orderedResult = orderedObjParser.parseXml(xmlData);
      if (this.options.preserveOrder || orderedResult === undefined)
        return orderedResult;
      else
        return prettify(orderedResult, this.options);
    }
    addEntity(key, value) {
      if (value.indexOf("&") !== -1) {
        throw new Error("Entity value can't have '&'");
      } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
        throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
      } else if (value === "&") {
        throw new Error("An entity with value '&' is not permitted");
      } else {
        this.externalEntities[key] = value;
      }
    }
  }
  module.exports = XMLParser;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS((exports, module) => {
  var EOL = `
`;
  function toXml(jArray, options) {
    let indentation = "";
    if (options.format && options.indentBy.length > 0) {
      indentation = EOL;
    }
    return arrToStr(jArray, options, "", indentation);
  }
  function arrToStr(arr, options, jPath, indentation) {
    let xmlStr = "";
    let isPreviousElementTag = false;
    for (let i = 0;i < arr.length; i++) {
      const tagObj = arr[i];
      const tagName = propName(tagObj);
      if (tagName === undefined)
        continue;
      let newJPath = "";
      if (jPath.length === 0)
        newJPath = tagName;
      else
        newJPath = `${jPath}.${tagName}`;
      if (tagName === options.textNodeName) {
        let tagText = tagObj[tagName];
        if (!isStopNode(newJPath, options)) {
          tagText = options.tagValueProcessor(tagName, tagText);
          tagText = replaceEntitiesValue(tagText, options);
        }
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += tagText;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.cdataPropName) {
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.commentPropName) {
        xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
        isPreviousElementTag = true;
        continue;
      } else if (tagName[0] === "?") {
        const attStr2 = attr_to_str(tagObj[":@"], options);
        const tempInd = tagName === "?xml" ? "" : indentation;
        let piTextNodeName = tagObj[tagName][0][options.textNodeName];
        piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
        xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
        isPreviousElementTag = true;
        continue;
      }
      let newIdentation = indentation;
      if (newIdentation !== "") {
        newIdentation += options.indentBy;
      }
      const attStr = attr_to_str(tagObj[":@"], options);
      const tagStart = indentation + `<${tagName}${attStr}`;
      const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
      if (options.unpairedTags.indexOf(tagName) !== -1) {
        if (options.suppressUnpairedNode)
          xmlStr += tagStart + ">";
        else
          xmlStr += tagStart + "/>";
      } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
        xmlStr += tagStart + "/>";
      } else if (tagValue && tagValue.endsWith(">")) {
        xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
      } else {
        xmlStr += tagStart + ">";
        if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
          xmlStr += indentation + options.indentBy + tagValue + indentation;
        } else {
          xmlStr += tagValue;
        }
        xmlStr += `</${tagName}>`;
      }
      isPreviousElementTag = true;
    }
    return xmlStr;
  }
  function propName(obj) {
    const keys = Object.keys(obj);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      if (!obj.hasOwnProperty(key))
        continue;
      if (key !== ":@")
        return key;
    }
  }
  function attr_to_str(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) {
      for (let attr in attrMap) {
        if (!attrMap.hasOwnProperty(attr))
          continue;
        let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
        attrVal = replaceEntitiesValue(attrVal, options);
        if (attrVal === true && options.suppressBooleanAttributes) {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
        } else {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
        }
      }
    }
    return attrStr;
  }
  function isStopNode(jPath, options) {
    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for (let index in options.stopNodes) {
      if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
        return true;
    }
    return false;
  }
  function replaceEntitiesValue(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) {
      for (let i = 0;i < options.entities.length; i++) {
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  }
  module.exports = toXml;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS((exports, module) => {
  var buildFromOrderedJs = require_orderedJs2Xml();
  var defaultOptions = {
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataPropName: false,
    format: false,
    indentBy: "  ",
    suppressEmptyNode: false,
    suppressUnpairedNode: true,
    suppressBooleanAttributes: true,
    tagValueProcessor: function(key, a) {
      return a;
    },
    attributeValueProcessor: function(attrName, a) {
      return a;
    },
    preserveOrder: false,
    commentPropName: false,
    unpairedTags: [],
    entities: [
      { regex: new RegExp("&", "g"), val: "&amp;" },
      { regex: new RegExp(">", "g"), val: "&gt;" },
      { regex: new RegExp("<", "g"), val: "&lt;" },
      { regex: new RegExp("'", "g"), val: "&apos;" },
      { regex: new RegExp('"', "g"), val: "&quot;" }
    ],
    processEntities: true,
    stopNodes: [],
    oneListGroup: false
  };
  function Builder(options) {
    this.options = Object.assign({}, defaultOptions, options);
    if (this.options.ignoreAttributes || this.options.attributesGroupName) {
      this.isAttribute = function() {
        return false;
      };
    } else {
      this.attrPrefixLen = this.options.attributeNamePrefix.length;
      this.isAttribute = isAttribute;
    }
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
      this.indentate = indentate;
      this.tagEndChar = `>
`;
      this.newLine = `
`;
    } else {
      this.indentate = function() {
        return "";
      };
      this.tagEndChar = ">";
      this.newLine = "";
    }
  }
  Builder.prototype.build = function(jObj) {
    if (this.options.preserveOrder) {
      return buildFromOrderedJs(jObj, this.options);
    } else {
      if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
        jObj = {
          [this.options.arrayNodeName]: jObj
        };
      }
      return this.j2x(jObj, 0).val;
    }
  };
  Builder.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val2 = "";
    for (let key in jObj) {
      if (!Object.prototype.hasOwnProperty.call(jObj, key))
        continue;
      if (typeof jObj[key] === "undefined") {
        if (this.isAttribute(key)) {
          val2 += "";
        }
      } else if (jObj[key] === null) {
        if (this.isAttribute(key)) {
          val2 += "";
        } else if (key[0] === "?") {
          val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
        } else {
          val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        }
      } else if (jObj[key] instanceof Date) {
        val2 += this.buildTextValNode(jObj[key], key, "", level);
      } else if (typeof jObj[key] !== "object") {
        const attr = this.isAttribute(key);
        if (attr) {
          attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
        } else {
          if (key === this.options.textNodeName) {
            let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
            val2 += this.replaceEntitiesValue(newval);
          } else {
            val2 += this.buildTextValNode(jObj[key], key, "", level);
          }
        }
      } else if (Array.isArray(jObj[key])) {
        const arrLen = jObj[key].length;
        let listTagVal = "";
        let listTagAttr = "";
        for (let j = 0;j < arrLen; j++) {
          const item = jObj[key][j];
          if (typeof item === "undefined") {} else if (item === null) {
            if (key[0] === "?")
              val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
            else
              val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          } else if (typeof item === "object") {
            if (this.options.oneListGroup) {
              const result = this.j2x(item, level + 1);
              listTagVal += result.val;
              if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                listTagAttr += result.attrStr;
              }
            } else {
              listTagVal += this.processTextOrObjNode(item, key, level);
            }
          } else {
            if (this.options.oneListGroup) {
              let textValue = this.options.tagValueProcessor(key, item);
              textValue = this.replaceEntitiesValue(textValue);
              listTagVal += textValue;
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
        }
        if (this.options.oneListGroup) {
          listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
        }
        val2 += listTagVal;
      } else {
        if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
          const Ks = Object.keys(jObj[key]);
          const L = Ks.length;
          for (let j = 0;j < L; j++) {
            attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
          }
        } else {
          val2 += this.processTextOrObjNode(jObj[key], key, level);
        }
      }
    }
    return { attrStr, val: val2 };
  };
  Builder.prototype.buildAttrPairStr = function(attrName, val2) {
    val2 = this.options.attributeValueProcessor(attrName, "" + val2);
    val2 = this.replaceEntitiesValue(val2);
    if (this.options.suppressBooleanAttributes && val2 === "true") {
      return " " + attrName;
    } else
      return " " + attrName + '="' + val2 + '"';
  };
  function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
      return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
    } else {
      return this.buildObjectNode(result.val, key, result.attrStr, level);
    }
  }
  Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
    if (val2 === "") {
      if (key[0] === "?")
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      else {
        return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
      }
    } else {
      let tagEndExp = "</" + key + this.tagEndChar;
      let piClosingChar = "";
      if (key[0] === "?") {
        piClosingChar = "?";
        tagEndExp = "";
      }
      if ((attrStr || attrStr === "") && val2.indexOf("<") === -1) {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
      }
    }
  };
  Builder.prototype.closeTag = function(key) {
    let closeTag = "";
    if (this.options.unpairedTags.indexOf(key) !== -1) {
      if (!this.options.suppressUnpairedNode)
        closeTag = "/";
    } else if (this.options.suppressEmptyNode) {
      closeTag = "/";
    } else {
      closeTag = `></${key}`;
    }
    return closeTag;
  };
  Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
      return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
    } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
      return this.indentate(level) + `<!--${val2}-->` + this.newLine;
    } else if (key[0] === "?") {
      return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
    } else {
      let textValue = this.options.tagValueProcessor(key, val2);
      textValue = this.replaceEntitiesValue(textValue);
      if (textValue === "") {
        return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
      }
    }
  };
  Builder.prototype.replaceEntitiesValue = function(textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) {
      for (let i = 0;i < this.options.entities.length; i++) {
        const entity = this.options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  };
  function indentate(level) {
    return this.options.indentBy.repeat(level);
  }
  function isAttribute(name) {
    if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {
      return name.substr(this.attrPrefixLen);
    } else {
      return false;
    }
  }
  module.exports = Builder;
});

// ../../node_modules/.bun/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS((exports, module) => {
  var validator = require_validator();
  var XMLParser = require_XMLParser();
  var XMLBuilder = require_json2xml();
  module.exports = {
    XMLParser,
    XMLValidator: validator,
    XMLBuilder
  };
});

// ../../node_modules/.bun/@aws-sdk+core@3.775.0/node_modules/@aws-sdk/core/dist-cjs/submodules/protocols/index.js
var require_protocols2 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    _toBool: () => _toBool,
    _toNum: () => _toNum,
    _toStr: () => _toStr,
    awsExpectUnion: () => awsExpectUnion,
    loadRestJsonErrorCode: () => loadRestJsonErrorCode,
    loadRestXmlErrorCode: () => loadRestXmlErrorCode,
    parseJsonBody: () => parseJsonBody,
    parseJsonErrorBody: () => parseJsonErrorBody,
    parseXmlBody: () => parseXmlBody,
    parseXmlErrorBody: () => parseXmlErrorBody
  });
  module.exports = __toCommonJS(index_exports);
  var _toStr = /* @__PURE__ */ __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "number" || typeof val2 === "bigint") {
      const warning = new Error(`Received number ${val2} where a string was expected.`);
      warning.name = "Warning";
      console.warn(warning);
      return String(val2);
    }
    if (typeof val2 === "boolean") {
      const warning = new Error(`Received boolean ${val2} where a string was expected.`);
      warning.name = "Warning";
      console.warn(warning);
      return String(val2);
    }
    return val2;
  }, "_toStr");
  var _toBool = /* @__PURE__ */ __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "number") {}
    if (typeof val2 === "string") {
      const lowercase = val2.toLowerCase();
      if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
        const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
        warning.name = "Warning";
        console.warn(warning);
      }
      return val2 !== "" && lowercase !== "false";
    }
    return val2;
  }, "_toBool");
  var _toNum = /* @__PURE__ */ __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "boolean") {}
    if (typeof val2 === "string") {
      const num = Number(val2);
      if (num.toString() !== val2) {
        const warning = new Error(`Received string "${val2}" where a number was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return val2;
      }
      return num;
    }
    return val2;
  }, "_toNum");
  var import_smithy_client = require_dist_cjs24();
  var awsExpectUnion = /* @__PURE__ */ __name((value) => {
    if (value == null) {
      return;
    }
    if (typeof value === "object" && "__type" in value) {
      delete value.__type;
    }
    return (0, import_smithy_client.expectUnion)(value);
  }, "awsExpectUnion");
  var import_smithy_client2 = require_dist_cjs24();
  var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client2.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
  var parseJsonBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      try {
        return JSON.parse(encoded);
      } catch (e) {
        if (e?.name === "SyntaxError") {
          Object.defineProperty(e, "$responseBodyText", {
            value: encoded
          });
        }
        throw e;
      }
    }
    return {};
  }), "parseJsonBody");
  var parseJsonErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
    const value = await parseJsonBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
  }, "parseJsonErrorBody");
  var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
    const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
    const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
      let cleanValue = rawValue;
      if (typeof cleanValue === "number") {
        cleanValue = cleanValue.toString();
      }
      if (cleanValue.indexOf(",") >= 0) {
        cleanValue = cleanValue.split(",")[0];
      }
      if (cleanValue.indexOf(":") >= 0) {
        cleanValue = cleanValue.split(":")[0];
      }
      if (cleanValue.indexOf("#") >= 0) {
        cleanValue = cleanValue.split("#")[1];
      }
      return cleanValue;
    }, "sanitizeErrorCode");
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
      return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
      return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
      return sanitizeErrorCode(data["__type"]);
    }
  }, "loadRestJsonErrorCode");
  var import_smithy_client3 = require_dist_cjs24();
  var import_fast_xml_parser = require_fxp();
  var parseXmlBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parser = new import_fast_xml_parser.XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: /* @__PURE__ */ __name((_, val2) => val2.trim() === "" && val2.includes(`
`) ? "" : undefined, "tagValueProcessor")
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", `
`);
      let parsedObj;
      try {
        parsedObj = parser.parse(encoded, true);
      } catch (e) {
        if (e && typeof e === "object") {
          Object.defineProperty(e, "$responseBodyText", {
            value: encoded
          });
        }
        throw e;
      }
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
  }), "parseXmlBody");
  var parseXmlErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
    const value = await parseXmlBody(errorBody, context);
    if (value.Error) {
      value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
  }, "parseXmlErrorBody");
  var loadRestXmlErrorCode = /* @__PURE__ */ __name((output, data) => {
    if (data?.Error?.Code !== undefined) {
      return data.Error.Code;
    }
    if (data?.Code !== undefined) {
      return data.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  }, "loadRestXmlErrorCode");
});

// ../../node_modules/.bun/@aws-sdk+core@3.775.0/node_modules/@aws-sdk/core/dist-cjs/index.js
var require_dist_cjs25 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var tslib_1 = require_tslib();
  tslib_1.__exportStar(require_client(), exports);
  tslib_1.__exportStar(require_httpAuthSchemes(), exports);
  tslib_1.__exportStar(require_protocols2(), exports);
});

// ../../node_modules/.bun/@aws-sdk+middleware-user-agent@3.787.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs26 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
    getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
    getUserAgentPlugin: () => getUserAgentPlugin,
    resolveUserAgentConfig: () => resolveUserAgentConfig,
    userAgentMiddleware: () => userAgentMiddleware
  });
  module.exports = __toCommonJS(index_exports);
  var import_core = require_dist_cjs18();
  var DEFAULT_UA_APP_ID = undefined;
  function isValidUserAgentAppId(appId) {
    if (appId === undefined) {
      return true;
    }
    return typeof appId === "string" && appId.length <= 50;
  }
  __name(isValidUserAgentAppId, "isValidUserAgentAppId");
  function resolveUserAgentConfig(input) {
    const normalizedAppIdProvider = (0, import_core.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
    const { customUserAgent } = input;
    return Object.assign(input, {
      customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
      userAgentAppId: /* @__PURE__ */ __name(async () => {
        const appId = await normalizedAppIdProvider();
        if (!isValidUserAgentAppId(appId)) {
          const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
          if (typeof appId !== "string") {
            logger?.warn("userAgentAppId must be a string or undefined.");
          } else if (appId.length > 50) {
            logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
          }
        }
        return appId;
      }, "userAgentAppId")
    });
  }
  __name(resolveUserAgentConfig, "resolveUserAgentConfig");
  var import_util_endpoints = require_dist_cjs20();
  var import_protocol_http = require_dist_cjs2();
  var import_core2 = require_dist_cjs25();
  var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
  async function checkFeatures(context, config, args) {
    const request = args.request;
    if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
      (0, import_core2.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
    }
    if (typeof config.retryStrategy === "function") {
      const retryStrategy = await config.retryStrategy();
      if (typeof retryStrategy.acquireInitialRetryToken === "function") {
        if (retryStrategy.constructor?.name?.includes("Adaptive")) {
          (0, import_core2.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
        } else {
          (0, import_core2.setFeature)(context, "RETRY_MODE_STANDARD", "E");
        }
      } else {
        (0, import_core2.setFeature)(context, "RETRY_MODE_LEGACY", "D");
      }
    }
    if (typeof config.accountIdEndpointMode === "function") {
      const endpointV2 = context.endpointV2;
      if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
        (0, import_core2.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
      }
      switch (await config.accountIdEndpointMode?.()) {
        case "disabled":
          (0, import_core2.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
          break;
        case "preferred":
          (0, import_core2.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
          break;
        case "required":
          (0, import_core2.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
          break;
      }
    }
    const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
    if (identity?.$source) {
      const credentials = identity;
      if (credentials.accountId) {
        (0, import_core2.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
      }
      for (const [key, value] of Object.entries(credentials.$source ?? {})) {
        (0, import_core2.setFeature)(context, key, value);
      }
    }
  }
  __name(checkFeatures, "checkFeatures");
  var USER_AGENT = "user-agent";
  var X_AMZ_USER_AGENT = "x-amz-user-agent";
  var SPACE = " ";
  var UA_NAME_SEPARATOR = "/";
  var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
  var UA_ESCAPE_CHAR = "-";
  var BYTE_LIMIT = 1024;
  function encodeFeatures(features) {
    let buffer = "";
    for (const key in features) {
      const val2 = features[key];
      if (buffer.length + val2.length + 1 <= BYTE_LIMIT) {
        if (buffer.length) {
          buffer += "," + val2;
        } else {
          buffer += val2;
        }
        continue;
      }
      break;
    }
    return buffer;
  }
  __name(encodeFeatures, "encodeFeatures");
  var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
    const { request } = args;
    if (!import_protocol_http.HttpRequest.isInstance(request)) {
      return next(args);
    }
    const { headers } = request;
    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    await checkFeatures(context, options, args);
    const awsContext = context;
    defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
    const appId = await options.userAgentAppId();
    if (appId) {
      defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
    }
    const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
    const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
    const normalUAValue = [
      ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
      ...customUserAgent
    ].join(SPACE);
    if (options.runtime !== "browser") {
      if (normalUAValue) {
        headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
      }
      headers[USER_AGENT] = sdkUserAgentValue;
    } else {
      headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
      ...args,
      request
    });
  }, "userAgentMiddleware");
  var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
    const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
      uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
      switch (index) {
        case 0:
          return item;
        case 1:
          return `${acc}/${item}`;
        default:
          return `${acc}#${item}`;
      }
    }, "");
  }, "escapeUserAgent");
  var getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true
  };
  var getUserAgentPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }, "applyToStack")
  }), "getUserAgentPlugin");
});

// ../../node_modules/.bun/@smithy+util-config-provider@4.0.0/node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs27 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    SelectorType: () => SelectorType,
    booleanSelector: () => booleanSelector,
    numberSelector: () => numberSelector
  });
  module.exports = __toCommonJS(src_exports);
  var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
    if (!(key in obj))
      return;
    if (obj[key] === "true")
      return true;
    if (obj[key] === "false")
      return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
  }, "booleanSelector");
  var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
    if (!(key in obj))
      return;
    const numberValue = parseInt(obj[key], 10);
    if (Number.isNaN(numberValue)) {
      throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
    }
    return numberValue;
  }, "numberSelector");
  var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
    SelectorType2["ENV"] = "env";
    SelectorType2["CONFIG"] = "shared config entry";
    return SelectorType2;
  })(SelectorType || {});
});

// ../../node_modules/.bun/@smithy+config-resolver@4.1.0/node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs28 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
    CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
    DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
    DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
    ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
    ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
    NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
    NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
    REGION_ENV_NAME: () => REGION_ENV_NAME,
    REGION_INI_NAME: () => REGION_INI_NAME,
    getRegionInfo: () => getRegionInfo,
    resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
    resolveEndpointsConfig: () => resolveEndpointsConfig,
    resolveRegionConfig: () => resolveRegionConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_config_provider = require_dist_cjs27();
  var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
  var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
  var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
  var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
  var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
  var DEFAULT_USE_FIPS_ENDPOINT = false;
  var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var import_util_middleware = require_dist_cjs6();
  var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
    const { tls, endpoint, urlParser, useDualstackEndpoint } = input;
    return Object.assign(input, {
      tls: tls ?? true,
      endpoint: (0, import_util_middleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
      isCustomEndpoint: true,
      useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(useDualstackEndpoint ?? false)
    });
  }, "resolveCustomEndpointsConfig");
  var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
    const { tls = true } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
      throw new Error("Invalid region in client config");
    }
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
    if (!hostname) {
      throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
  }, "getEndpointFromRegion");
  var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
    const useDualstackEndpoint = (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false);
    const { endpoint, useFipsEndpoint, urlParser, tls } = input;
    return Object.assign(input, {
      tls: tls ?? true,
      endpoint: endpoint ? (0, import_util_middleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
      isCustomEndpoint: !!endpoint,
      useDualstackEndpoint
    });
  }, "resolveEndpointsConfig");
  var REGION_ENV_NAME = "AWS_REGION";
  var REGION_INI_NAME = "region";
  var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
      throw new Error("Region is missing");
    }
  };
  var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
  };
  var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
  var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
  var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
      throw new Error("Region is missing");
    }
    return Object.assign(input, {
      region: async () => {
        if (typeof region === "string") {
          return getRealRegion(region);
        }
        const providedRegion = await region();
        return getRealRegion(providedRegion);
      },
      useFipsEndpoint: async () => {
        const providedRegion = typeof region === "string" ? region : await region();
        if (isFipsRegion(providedRegion)) {
          return true;
        }
        return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
      }
    });
  }, "resolveRegionConfig");
  var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))?.hostname, "getHostnameFromVariants");
  var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : undefined, "getResolvedHostname");
  var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
  var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
    if (signingRegion) {
      return signingRegion;
    } else if (useFipsEndpoint) {
      const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
      const regionRegexmatchArray = hostname.match(regionRegexJs);
      if (regionRegexmatchArray) {
        return regionRegexmatchArray[0].slice(1, -1);
      }
    }
  }, "getResolvedSigningRegion");
  var getRegionInfo = /* @__PURE__ */ __name((region, {
    useFipsEndpoint = false,
    useDualstackEndpoint = false,
    signingService,
    regionHash,
    partitionHash
  }) => {
    const partition = getResolvedPartition(region, { partitionHash });
    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);
    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);
    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
    if (hostname === undefined) {
      throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
    }
    const signingRegion = getResolvedSigningRegion(hostname, {
      signingRegion: regionHash[resolvedRegion]?.signingRegion,
      regionRegex: partitionHash[partition].regionRegex,
      useFipsEndpoint
    });
    return {
      partition,
      signingService,
      hostname,
      ...signingRegion && { signingRegion },
      ...regionHash[resolvedRegion]?.signingService && {
        signingService: regionHash[resolvedRegion].signingService
      }
    };
  }, "getRegionInfo");
});

// ../../node_modules/.bun/@smithy+eventstream-serde-config-resolver@4.1.0/node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js
var require_dist_cjs29 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    resolveEventStreamSerdeConfig: () => resolveEventStreamSerdeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var resolveEventStreamSerdeConfig = /* @__PURE__ */ __name((input) => Object.assign(input, {
    eventStreamMarshaller: input.eventStreamSerdeProvider(input)
  }), "resolveEventStreamSerdeConfig");
});

// ../../node_modules/.bun/@smithy+middleware-content-length@4.0.2/node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs30 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    contentLengthMiddleware: () => contentLengthMiddleware,
    contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
    getContentLengthPlugin: () => getContentLengthPlugin
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var CONTENT_LENGTH_HEADER = "content-length";
  function contentLengthMiddleware(bodyLengthChecker) {
    return (next) => async (args) => {
      const request = args.request;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        const { body, headers } = request;
        if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
          try {
            const length = bodyLengthChecker(body);
            request.headers = {
              ...request.headers,
              [CONTENT_LENGTH_HEADER]: String(length)
            };
          } catch (error) {}
        }
      }
      return next({
        ...args,
        request
      });
    };
  }
  __name(contentLengthMiddleware, "contentLengthMiddleware");
  var contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true
  };
  var getContentLengthPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  }), "getContentLengthPlugin");
});

// ../../node_modules/.bun/@smithy+shared-ini-file-loader@4.0.2/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getHomeDir = undefined;
  var os_1 = __require("os");
  var path_1 = __require("path");
  var homeDirCache = {};
  var getHomeDirCacheKey = () => {
    if (process && process.geteuid) {
      return `${process.geteuid()}`;
    }
    return "DEFAULT";
  };
  var getHomeDir2 = () => {
    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
    if (HOME)
      return HOME;
    if (USERPROFILE)
      return USERPROFILE;
    if (HOMEPATH)
      return `${HOMEDRIVE}${HOMEPATH}`;
    const homeDirCacheKey = getHomeDirCacheKey();
    if (!homeDirCache[homeDirCacheKey])
      homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
    return homeDirCache[homeDirCacheKey];
  };
  exports.getHomeDir = getHomeDir2;
});

// ../../node_modules/.bun/@smithy+shared-ini-file-loader@4.0.2/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSSOTokenFilepath = undefined;
  var crypto_1 = __require("crypto");
  var path_1 = __require("path");
  var getHomeDir_1 = require_getHomeDir();
  var getSSOTokenFilepath2 = (id) => {
    const hasher = (0, crypto_1.createHash)("sha1");
    const cacheName = hasher.update(id).digest("hex");
    return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
  };
  exports.getSSOTokenFilepath = getSSOTokenFilepath2;
});

// ../../node_modules/.bun/@smithy+shared-ini-file-loader@4.0.2/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSSOTokenFromFile = undefined;
  var fs_1 = __require("fs");
  var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
  var { readFile } = fs_1.promises;
  var getSSOTokenFromFile2 = async (id) => {
    const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
    const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
    return JSON.parse(ssoTokenText);
  };
  exports.getSSOTokenFromFile = getSSOTokenFromFile2;
});

// ../../node_modules/.bun/@smithy+shared-ini-file-loader@4.0.2/node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.slurpFile = undefined;
  var fs_1 = __require("fs");
  var { readFile } = fs_1.promises;
  var filePromisesHash = {};
  var slurpFile = (path, options) => {
    if (!filePromisesHash[path] || (options === null || options === undefined ? undefined : options.ignoreCache)) {
      filePromisesHash[path] = readFile(path, "utf8");
    }
    return filePromisesHash[path];
  };
  exports.slurpFile = slurpFile;
});

// ../../node_modules/.bun/@smithy+shared-ini-file-loader@4.0.2/node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs31 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
    DEFAULT_PROFILE: () => DEFAULT_PROFILE,
    ENV_PROFILE: () => ENV_PROFILE,
    getProfileName: () => getProfileName,
    loadSharedConfigFiles: () => loadSharedConfigFiles,
    loadSsoSessionData: () => loadSsoSessionData,
    parseKnownFiles: () => parseKnownFiles
  });
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_getHomeDir(), module.exports);
  var ENV_PROFILE = "AWS_PROFILE";
  var DEFAULT_PROFILE = "default";
  var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
  __reExport(src_exports, require_getSSOTokenFilepath(), module.exports);
  __reExport(src_exports, require_getSSOTokenFromFile(), module.exports);
  var import_types = require_dist_cjs();
  var getConfigData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    if (indexOfSeparator === -1) {
      return false;
    }
    return Object.values(import_types.IniSectionType).includes(key.substring(0, indexOfSeparator));
  }).reduce((acc, [key, value]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    const updatedKey = key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
    acc[updatedKey] = value;
    return acc;
  }, {
    ...data.default && { default: data.default }
  }), "getConfigData");
  var import_path = __require("path");
  var import_getHomeDir = require_getHomeDir();
  var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
  var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
  var import_getHomeDir2 = require_getHomeDir();
  var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
  var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
  var import_getHomeDir3 = require_getHomeDir();
  var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
  var profileNameBlockList = ["__proto__", "profile __proto__"];
  var parseIni = /* @__PURE__ */ __name((iniData) => {
    const map = {};
    let currentSection;
    let currentSubSection;
    for (const iniLine of iniData.split(/\r?\n/)) {
      const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
      const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
      if (isSection) {
        currentSection = undefined;
        currentSubSection = undefined;
        const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
        const matches = prefixKeyRegex.exec(sectionName);
        if (matches) {
          const [, prefix, , name] = matches;
          if (Object.values(import_types.IniSectionType).includes(prefix)) {
            currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
          }
        } else {
          currentSection = sectionName;
        }
        if (profileNameBlockList.includes(sectionName)) {
          throw new Error(`Found invalid profile name "${sectionName}"`);
        }
      } else if (currentSection) {
        const indexOfEqualsSign = trimmedLine.indexOf("=");
        if (![0, -1].includes(indexOfEqualsSign)) {
          const [name, value] = [
            trimmedLine.substring(0, indexOfEqualsSign).trim(),
            trimmedLine.substring(indexOfEqualsSign + 1).trim()
          ];
          if (value === "") {
            currentSubSection = name;
          } else {
            if (currentSubSection && iniLine.trimStart() === iniLine) {
              currentSubSection = undefined;
            }
            map[currentSection] = map[currentSection] || {};
            const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
            map[currentSection][key] = value;
          }
        }
      }
    }
    return map;
  }, "parseIni");
  var import_slurpFile = require_slurpFile();
  var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
  var CONFIG_PREFIX_SEPARATOR = ".";
  var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
    const homeDir = (0, import_getHomeDir3.getHomeDir)();
    const relativeHomeDirPrefix = "~/";
    let resolvedFilepath = filepath;
    if (filepath.startsWith(relativeHomeDirPrefix)) {
      resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
    }
    let resolvedConfigFilepath = configFilepath;
    if (configFilepath.startsWith(relativeHomeDirPrefix)) {
      resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
    }
    const parsedFiles = await Promise.all([
      (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
        ignoreCache: init.ignoreCache
      }).then(parseIni).then(getConfigData).catch(swallowError),
      (0, import_slurpFile.slurpFile)(resolvedFilepath, {
        ignoreCache: init.ignoreCache
      }).then(parseIni).catch(swallowError)
    ]);
    return {
      configFile: parsedFiles[0],
      credentialsFile: parsedFiles[1]
    };
  }, "loadSharedConfigFiles");
  var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {}), "getSsoSessionData");
  var import_slurpFile2 = require_slurpFile();
  var swallowError2 = /* @__PURE__ */ __name(() => ({}), "swallowError");
  var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
  var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
    const merged = {};
    for (const file of files) {
      for (const [key, values] of Object.entries(file)) {
        if (merged[key] !== undefined) {
          Object.assign(merged[key], values);
        } else {
          merged[key] = values;
        }
      }
    }
    return merged;
  }, "mergeConfigFiles");
  var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
    const parsedFiles = await loadSharedConfigFiles(init);
    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
  }, "parseKnownFiles");
});

// ../../node_modules/.bun/@smithy+node-config-provider@4.0.2/node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs32 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    loadConfig: () => loadConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_property_provider = require_dist_cjs21();
  function getSelectorName(functionString) {
    try {
      const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
      constants.delete("CONFIG");
      constants.delete("CONFIG_PREFIX_SEPARATOR");
      constants.delete("ENV");
      return [...constants].join(", ");
    } catch (e) {
      return functionString;
    }
  }
  __name(getSelectorName, "getSelectorName");
  var fromEnv = /* @__PURE__ */ __name((envVarSelector, logger) => async () => {
    try {
      const config = envVarSelector(process.env);
      if (config === undefined) {
        throw new Error;
      }
      return config;
    } catch (e) {
      throw new import_property_provider.CredentialsProviderError(e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger });
    }
  }, "fromEnv");
  var import_shared_ini_file_loader = require_dist_cjs31();
  var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
    const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
    const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
    try {
      const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
      const configValue = configSelector(mergedProfile, cfgFile);
      if (configValue === undefined) {
        throw new Error;
      }
      return configValue;
    } catch (e) {
      throw new import_property_provider.CredentialsProviderError(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
    }
  }, "fromSharedConfigFiles");
  var isFunction = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
  var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, import_property_provider.fromStatic)(defaultValue), "fromStatic");
  var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue))), "loadConfig");
});

// ../../node_modules/.bun/@smithy+middleware-endpoint@4.1.0/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getEndpointUrlConfig = undefined;
  var shared_ini_file_loader_1 = require_dist_cjs31();
  var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
  var CONFIG_ENDPOINT_URL = "endpoint_url";
  var getEndpointUrlConfig = (serviceId) => ({
    environmentVariableSelector: (env) => {
      const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
      const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
      if (serviceEndpointUrl)
        return serviceEndpointUrl;
      const endpointUrl = env[ENV_ENDPOINT_URL];
      if (endpointUrl)
        return endpointUrl;
      return;
    },
    configFileSelector: (profile, config) => {
      if (config && profile.services) {
        const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
        if (servicesSection) {
          const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
          const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (endpointUrl2)
            return endpointUrl2;
        }
      }
      const endpointUrl = profile[CONFIG_ENDPOINT_URL];
      if (endpointUrl)
        return endpointUrl;
      return;
    },
    default: undefined
  });
  exports.getEndpointUrlConfig = getEndpointUrlConfig;
});

// ../../node_modules/.bun/@smithy+middleware-endpoint@4.1.0/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getEndpointFromConfig = undefined;
  var node_config_provider_1 = require_dist_cjs32();
  var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
  var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== undefined ? serviceId : ""))();
  exports.getEndpointFromConfig = getEndpointFromConfig;
});

// ../../node_modules/.bun/@smithy+querystring-parser@4.0.2/node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs33 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    parseQueryString: () => parseQueryString
  });
  module.exports = __toCommonJS(src_exports);
  function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
      for (const pair of querystring.split("&")) {
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    }
    return query;
  }
  __name(parseQueryString, "parseQueryString");
});

// ../../node_modules/.bun/@smithy+url-parser@4.0.2/node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs34 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    parseUrl: () => parseUrl
  });
  module.exports = __toCommonJS(src_exports);
  var import_querystring_parser = require_dist_cjs33();
  var parseUrl = /* @__PURE__ */ __name((url) => {
    if (typeof url === "string") {
      return parseUrl(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
      query = (0, import_querystring_parser.parseQueryString)(search);
    }
    return {
      hostname,
      port: port ? parseInt(port) : undefined,
      protocol,
      path: pathname,
      query
    };
  }, "parseUrl");
});

// ../../node_modules/.bun/@smithy+middleware-endpoint@4.1.0/node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs35 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    endpointMiddleware: () => endpointMiddleware,
    endpointMiddlewareOptions: () => endpointMiddlewareOptions,
    getEndpointFromInstructions: () => getEndpointFromInstructions,
    getEndpointPlugin: () => getEndpointPlugin,
    resolveEndpointConfig: () => resolveEndpointConfig,
    resolveParams: () => resolveParams,
    toEndpointV1: () => toEndpointV1
  });
  module.exports = __toCommonJS(src_exports);
  var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") {
      endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
      if (endpointParams.ForcePathStyle === true) {
        throw new Error("Path-style addressing cannot be used with ARN buckets");
      }
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
      endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
      endpointParams.disableMultiRegionAccessPoints = true;
      endpointParams.DisableMRAP = true;
    }
    return endpointParams;
  }, "resolveParamsForS3");
  var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  var DOTS_PATTERN = /\.\./;
  var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
  var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
    const [arn, partition, service, , , bucket] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = Boolean(isArn && partition && service && bucket);
    if (isArn && !isValidArn) {
      throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return isValidArn;
  }, "isArnBucketName");
  var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
    const configProvider = /* @__PURE__ */ __name(async () => {
      const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
      if (typeof configValue === "function") {
        return configValue();
      }
      return configValue;
    }, "configProvider");
    if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
      return async () => {
        const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
        const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
        return configValue;
      };
    }
    if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
      return async () => {
        const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
        const configValue = credentials?.accountId ?? credentials?.AccountId;
        return configValue;
      };
    }
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
      return async () => {
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
          if ("url" in endpoint) {
            return endpoint.url.href;
          }
          if ("hostname" in endpoint) {
            const { protocol, hostname, port, path } = endpoint;
            return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
          }
        }
        return endpoint;
      };
    }
    return configProvider;
  }, "createConfigValueProvider");
  var import_getEndpointFromConfig = require_getEndpointFromConfig();
  var import_url_parser = require_dist_cjs34();
  var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
    if (typeof endpoint === "object") {
      if ("url" in endpoint) {
        return (0, import_url_parser.parseUrl)(endpoint.url);
      }
      return endpoint;
    }
    return (0, import_url_parser.parseUrl)(endpoint);
  }, "toEndpointV1");
  var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
    if (!clientConfig.endpoint) {
      let endpointFromConfig;
      if (clientConfig.serviceConfiguredEndpoint) {
        endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
      } else {
        endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId);
      }
      if (endpointFromConfig) {
        clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
      }
    }
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
      throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
  }, "getEndpointFromInstructions");
  var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions)) {
      switch (instruction.type) {
        case "staticContextParams":
          endpointParams[name] = instruction.value;
          break;
        case "contextParams":
          endpointParams[name] = commandInput[instruction.name];
          break;
        case "clientContextParams":
        case "builtInParams":
          endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
          break;
        case "operationContextParams":
          endpointParams[name] = instruction.get(commandInput);
          break;
        default:
          throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
      }
    }
    if (Object.keys(instructions).length === 0) {
      Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
      await resolveParamsForS3(endpointParams);
    }
    return endpointParams;
  }, "resolveParams");
  var import_core = require_dist_cjs18();
  var import_util_middleware = require_dist_cjs6();
  var endpointMiddleware = /* @__PURE__ */ __name(({
    config,
    instructions
  }) => {
    return (next, context) => async (args) => {
      if (config.endpoint) {
        (0, import_core.setFeature)(context, "ENDPOINT_OVERRIDE", "N");
      }
      const endpoint = await getEndpointFromInstructions(args.input, {
        getEndpointParameterInstructions() {
          return instructions;
        }
      }, { ...config }, context);
      context.endpointV2 = endpoint;
      context.authSchemes = endpoint.properties?.authSchemes;
      const authScheme = context.authSchemes?.[0];
      if (authScheme) {
        context["signing_region"] = authScheme.signingRegion;
        context["signing_service"] = authScheme.signingName;
        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
        const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
        if (httpAuthOption) {
          httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
            signing_region: authScheme.signingRegion,
            signingRegion: authScheme.signingRegion,
            signing_service: authScheme.signingName,
            signingName: authScheme.signingName,
            signingRegionSet: authScheme.signingRegionSet
          }, authScheme.properties);
        }
      }
      return next({
        ...args
      });
    };
  }, "endpointMiddleware");
  var import_middleware_serde = require_dist_cjs7();
  var endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
  };
  var getEndpointPlugin = /* @__PURE__ */ __name((config, instructions) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(endpointMiddleware({
        config,
        instructions
      }), endpointMiddlewareOptions);
    }
  }), "getEndpointPlugin");
  var import_getEndpointFromConfig2 = require_getEndpointFromConfig();
  var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
    const tls = input.tls ?? true;
    const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    const resolvedConfig = Object.assign(input, {
      endpoint: customEndpointProvider,
      tls,
      isCustomEndpoint,
      useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(useDualstackEndpoint ?? false),
      useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(useFipsEndpoint ?? false)
    });
    let configuredEndpointPromise = undefined;
    resolvedConfig.serviceConfiguredEndpoint = async () => {
      if (input.serviceId && !configuredEndpointPromise) {
        configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);
      }
      return configuredEndpointPromise;
    };
    return resolvedConfig;
  }, "resolveEndpointConfig");
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/rng.js
var require_rng = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rng;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var rnds8Pool = new Uint8Array(256);
  var poolPtr = rnds8Pool.length;
  function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
      _crypto.default.randomFillSync(rnds8Pool);
      poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
  }
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/regex.js
var require_regex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/validate.js
var require_validate = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _regex = _interopRequireDefault(require_regex());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function validate(uuid) {
    return typeof uuid === "string" && _regex.default.test(uuid);
  }
  var _default = validate;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.unsafeStringify = unsafeStringify;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var byteToHex = [];
  for (let i = 0;i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
  }
  function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var _default = stringify;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/v1.js
var require_v1 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      const seedBytes = options.random || (options.rng || _rng.default)();
      if (node == null) {
        node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    let msecs = options.msecs !== undefined ? options.msecs : Date.now();
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    const tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    b[i++] = tmh >>> 24 & 15 | 16;
    b[i++] = tmh >>> 16 & 255;
    b[i++] = clockseq >>> 8 | 128;
    b[i++] = clockseq & 255;
    for (let n = 0;n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf || (0, _stringify.unsafeStringify)(b);
  }
  var _default = v1;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/parse.js
var require_parse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function parse(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16);
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 255;
    arr[2] = v >>> 8 & 255;
    arr[3] = v & 255;
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 255;
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 255;
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 255;
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
    arr[11] = v / 4294967296 & 255;
    arr[12] = v >>> 24 & 255;
    arr[13] = v >>> 16 & 255;
    arr[14] = v >>> 8 & 255;
    arr[15] = v & 255;
    return arr;
  }
  var _default = parse;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/v35.js
var require_v35 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URL = exports.DNS = undefined;
  exports.default = v35;
  var _stringify = require_stringify();
  var _parse = _interopRequireDefault(require_parse());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = [];
    for (let i = 0;i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }
    return bytes;
  }
  var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
  exports.DNS = DNS;
  var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  exports.URL = URL2;
  function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      var _namespace;
      if (typeof value === "string") {
        value = stringToBytes(value);
      }
      if (typeof namespace === "string") {
        namespace = (0, _parse.default)(namespace);
      }
      if (((_namespace = namespace) === null || _namespace === undefined ? undefined : _namespace.length) !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 15 | version;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0;i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(bytes);
    }
    try {
      generateUUID.name = name;
    } catch (err) {}
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  }
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/md5.js
var require_md5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function md5(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("md5").update(bytes).digest();
  }
  var _default = md5;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/v3.js
var require_v3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _md = _interopRequireDefault(require_md5());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var v3 = (0, _v.default)("v3", 48, _md.default);
  var _default = v3;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/native.js
var require_native = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _default = {
    randomUUID: _crypto.default.randomUUID
  };
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/v4.js
var require_v4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _native = _interopRequireDefault(require_native());
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function v4(options, buf, offset) {
    if (_native.default.randomUUID && !buf && !options) {
      return _native.default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || _rng.default)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0;i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(rnds);
  }
  var _default = v4;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function sha1(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("sha1").update(bytes).digest();
  }
  var _default = sha1;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/v5.js
var require_v5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _sha = _interopRequireDefault(require_sha1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var v5 = (0, _v.default)("v5", 80, _sha.default);
  var _default = v5;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/nil.js
var require_nil = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = "00000000-0000-0000-0000-000000000000";
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/version.js
var require_version = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function version(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.slice(14, 15), 16);
  }
  var _default = version;
  exports.default = _default;
});

// ../../node_modules/.bun/uuid@9.0.1/node_modules/uuid/dist/index.js
var require_dist = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "NIL", {
    enumerable: true,
    get: function() {
      return _nil.default;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function() {
      return _parse.default;
    }
  });
  Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
      return _stringify.default;
    }
  });
  Object.defineProperty(exports, "v1", {
    enumerable: true,
    get: function() {
      return _v.default;
    }
  });
  Object.defineProperty(exports, "v3", {
    enumerable: true,
    get: function() {
      return _v2.default;
    }
  });
  Object.defineProperty(exports, "v4", {
    enumerable: true,
    get: function() {
      return _v3.default;
    }
  });
  Object.defineProperty(exports, "v5", {
    enumerable: true,
    get: function() {
      return _v4.default;
    }
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function() {
      return _validate.default;
    }
  });
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function() {
      return _version.default;
    }
  });
  var _v = _interopRequireDefault(require_v1());
  var _v2 = _interopRequireDefault(require_v3());
  var _v3 = _interopRequireDefault(require_v4());
  var _v4 = _interopRequireDefault(require_v5());
  var _nil = _interopRequireDefault(require_nil());
  var _version = _interopRequireDefault(require_version());
  var _validate = _interopRequireDefault(require_validate());
  var _stringify = _interopRequireDefault(require_stringify());
  var _parse = _interopRequireDefault(require_parse());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// ../../node_modules/.bun/@smithy+service-error-classification@4.0.2/node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs36 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    isClockSkewCorrectedError: () => isClockSkewCorrectedError,
    isClockSkewError: () => isClockSkewError,
    isRetryableByTrait: () => isRetryableByTrait,
    isServerError: () => isServerError,
    isThrottlingError: () => isThrottlingError,
    isTransientError: () => isTransientError
  });
  module.exports = __toCommonJS(src_exports);
  var CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
  ];
  var THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
  ];
  var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
  var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== undefined, "isRetryableByTrait");
  var isClockSkewError = /* @__PURE__ */ __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
  var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => error.$metadata?.clockSkewCorrected, "isClockSkewCorrectedError");
  var isThrottlingError = /* @__PURE__ */ __name((error) => error.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error.name) || error.$retryable?.throttling == true, "isThrottlingError");
  var isTransientError = /* @__PURE__ */ __name((error, depth = 0) => isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0) || error.cause !== undefined && depth <= 10 && isTransientError(error.cause, depth + 1), "isTransientError");
  var isServerError = /* @__PURE__ */ __name((error) => {
    if (error.$metadata?.httpStatusCode !== undefined) {
      const statusCode = error.$metadata.httpStatusCode;
      if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
        return true;
      }
      return false;
    }
    return false;
  }, "isServerError");
});

// ../../node_modules/.bun/@smithy+util-retry@4.0.2/node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs37 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
    ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
    DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
    DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
    DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
    DefaultRateLimiter: () => DefaultRateLimiter,
    INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
    INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
    MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
    NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
    REQUEST_HEADER: () => REQUEST_HEADER,
    RETRY_COST: () => RETRY_COST,
    RETRY_MODES: () => RETRY_MODES,
    StandardRetryStrategy: () => StandardRetryStrategy,
    THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
    TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
  });
  module.exports = __toCommonJS(src_exports);
  var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
    RETRY_MODES2["STANDARD"] = "standard";
    RETRY_MODES2["ADAPTIVE"] = "adaptive";
    return RETRY_MODES2;
  })(RETRY_MODES || {});
  var DEFAULT_MAX_ATTEMPTS = 3;
  var DEFAULT_RETRY_MODE = "standard";
  var import_service_error_classification = require_dist_cjs36();
  var DefaultRateLimiter = class _DefaultRateLimiter {
    constructor(options) {
      this.currentCapacity = 0;
      this.enabled = false;
      this.lastMaxRate = 0;
      this.measuredTxRate = 0;
      this.requestCount = 0;
      this.lastTimestamp = 0;
      this.timeWindow = 0;
      this.beta = options?.beta ?? 0.7;
      this.minCapacity = options?.minCapacity ?? 1;
      this.minFillRate = options?.minFillRate ?? 0.5;
      this.scaleConstant = options?.scaleConstant ?? 0.4;
      this.smooth = options?.smooth ?? 0.8;
      const currentTimeInSeconds = this.getCurrentTimeInSeconds();
      this.lastThrottleTime = currentTimeInSeconds;
      this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
      this.fillRate = this.minFillRate;
      this.maxCapacity = this.minCapacity;
    }
    static {
      __name(this, "DefaultRateLimiter");
    }
    static {
      this.setTimeoutFn = setTimeout;
    }
    getCurrentTimeInSeconds() {
      return Date.now() / 1000;
    }
    async getSendToken() {
      return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
      if (!this.enabled) {
        return;
      }
      this.refillTokenBucket();
      if (amount > this.currentCapacity) {
        const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
        await new Promise((resolve) => _DefaultRateLimiter.setTimeoutFn(resolve, delay));
      }
      this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
      const timestamp = this.getCurrentTimeInSeconds();
      if (!this.lastTimestamp) {
        this.lastTimestamp = timestamp;
        return;
      }
      const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
      this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
      this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
      let calculatedRate;
      this.updateMeasuredRate();
      if ((0, import_service_error_classification.isThrottlingError)(response)) {
        const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
        this.lastMaxRate = rateToUse;
        this.calculateTimeWindow();
        this.lastThrottleTime = this.getCurrentTimeInSeconds();
        calculatedRate = this.cubicThrottle(rateToUse);
        this.enableTokenBucket();
      } else {
        this.calculateTimeWindow();
        calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
      }
      const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
      this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
      this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
      return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
      return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
      this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
      this.refillTokenBucket();
      this.fillRate = Math.max(newRate, this.minFillRate);
      this.maxCapacity = Math.max(newRate, this.minCapacity);
      this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
      const t = this.getCurrentTimeInSeconds();
      const timeBucket = Math.floor(t * 2) / 2;
      this.requestCount++;
      if (timeBucket > this.lastTxRateBucket) {
        const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
        this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
        this.requestCount = 0;
        this.lastTxRateBucket = timeBucket;
      }
    }
    getPrecise(num) {
      return parseFloat(num.toFixed(8));
    }
  };
  var DEFAULT_RETRY_DELAY_BASE = 100;
  var MAXIMUM_RETRY_DELAY = 20 * 1000;
  var THROTTLING_RETRY_DELAY_BASE = 500;
  var INITIAL_RETRY_TOKENS = 500;
  var RETRY_COST = 5;
  var TIMEOUT_RETRY_COST = 10;
  var NO_RETRY_INCREMENT = 1;
  var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
  var REQUEST_HEADER = "amz-sdk-request";
  var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
    let delayBase = DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
      return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    }, "computeNextBackoffDelay");
    const setDelayBase = /* @__PURE__ */ __name((delay) => {
      delayBase = delay;
    }, "setDelayBase");
    return {
      computeNextBackoffDelay,
      setDelayBase
    };
  }, "getDefaultRetryBackoffStrategy");
  var createDefaultRetryToken = /* @__PURE__ */ __name(({
    retryDelay,
    retryCount,
    retryCost
  }) => {
    const getRetryCount = /* @__PURE__ */ __name(() => retryCount, "getRetryCount");
    const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
    const getRetryCost = /* @__PURE__ */ __name(() => retryCost, "getRetryCost");
    return {
      getRetryCount,
      getRetryDelay,
      getRetryCost
    };
  }, "createDefaultRetryToken");
  var StandardRetryStrategy = class {
    constructor(maxAttempts) {
      this.maxAttempts = maxAttempts;
      this.mode = "standard";
      this.capacity = INITIAL_RETRY_TOKENS;
      this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
      this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
    }
    static {
      __name(this, "StandardRetryStrategy");
    }
    async acquireInitialRetryToken(retryTokenScope) {
      return createDefaultRetryToken({
        retryDelay: DEFAULT_RETRY_DELAY_BASE,
        retryCount: 0
      });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
      const maxAttempts = await this.getMaxAttempts();
      if (this.shouldRetry(token, errorInfo, maxAttempts)) {
        const errorType = errorInfo.errorType;
        this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
        const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
        const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
        const capacityCost = this.getCapacityCost(errorType);
        this.capacity -= capacityCost;
        return createDefaultRetryToken({
          retryDelay,
          retryCount: token.getRetryCount() + 1,
          retryCost: capacityCost
        });
      }
      throw new Error("No retry token available");
    }
    recordSuccess(token) {
      this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
    }
    getCapacity() {
      return this.capacity;
    }
    async getMaxAttempts() {
      try {
        return await this.maxAttemptsProvider();
      } catch (error) {
        console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
        return DEFAULT_MAX_ATTEMPTS;
      }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
      const attempts = tokenToRenew.getRetryCount() + 1;
      return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
      return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
    }
    isRetryableError(errorType) {
      return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
  };
  var AdaptiveRetryStrategy = class {
    constructor(maxAttemptsProvider, options) {
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = "adaptive";
      const { rateLimiter } = options ?? {};
      this.rateLimiter = rateLimiter ?? new DefaultRateLimiter;
      this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
    }
    static {
      __name(this, "AdaptiveRetryStrategy");
    }
    async acquireInitialRetryToken(retryTokenScope) {
      await this.rateLimiter.getSendToken();
      return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
      this.rateLimiter.updateClientSendingRate(errorInfo);
      return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
      this.rateLimiter.updateClientSendingRate({});
      this.standardRetryStrategy.recordSuccess(token);
    }
  };
  var ConfiguredRetryStrategy = class extends StandardRetryStrategy {
    static {
      __name(this, "ConfiguredRetryStrategy");
    }
    constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
      super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
      if (typeof computeNextBackoffDelay === "number") {
        this.computeNextBackoffDelay = () => computeNextBackoffDelay;
      } else {
        this.computeNextBackoffDelay = computeNextBackoffDelay;
      }
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
      const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
      return token;
    }
  };
});

// ../../node_modules/.bun/@smithy+middleware-retry@4.1.0/node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isStreamingPayload = undefined;
  var stream_1 = __require("stream");
  var isStreamingPayload = (request) => (request === null || request === undefined ? undefined : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === undefined ? undefined : request.body) instanceof ReadableStream;
  exports.isStreamingPayload = isStreamingPayload;
});

// ../../node_modules/.bun/@smithy+middleware-retry@4.1.0/node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs38 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
    CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
    CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
    ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
    ENV_RETRY_MODE: () => ENV_RETRY_MODE,
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
    NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
    StandardRetryStrategy: () => StandardRetryStrategy,
    defaultDelayDecider: () => defaultDelayDecider,
    defaultRetryDecider: () => defaultRetryDecider,
    getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
    getRetryAfterHint: () => getRetryAfterHint,
    getRetryPlugin: () => getRetryPlugin,
    omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
    omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
    resolveRetryConfig: () => resolveRetryConfig,
    retryMiddleware: () => retryMiddleware,
    retryMiddlewareOptions: () => retryMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_uuid = require_dist();
  var import_util_retry = require_dist_cjs37();
  var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? import_util_retry.NO_RETRY_INCREMENT;
    const retryCost = options?.retryCost ?? import_util_retry.RETRY_COST;
    const timeoutRetryCost = options?.timeoutRetryCost ?? import_util_retry.TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
    const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
    const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
      if (!hasRetryTokens(error)) {
        throw new Error("No retry token available");
      }
      const capacityAmount = getCapacityAmount(error);
      availableCapacity -= capacityAmount;
      return capacityAmount;
    }, "retrieveRetryTokens");
    const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
      availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
      availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    }, "releaseRetryTokens");
    return Object.freeze({
      hasRetryTokens,
      retrieveRetryTokens,
      releaseRetryTokens
    });
  }, "getDefaultRetryQuota");
  var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
  var import_service_error_classification = require_dist_cjs36();
  var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
    if (!error) {
      return false;
    }
    return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
  }, "defaultRetryDecider");
  var asSdkError = /* @__PURE__ */ __name((error) => {
    if (error instanceof Error)
      return error;
    if (error instanceof Object)
      return Object.assign(new Error, error);
    if (typeof error === "string")
      return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
  }, "asSdkError");
  var StandardRetryStrategy = class {
    constructor(maxAttemptsProvider, options) {
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = import_util_retry.RETRY_MODES.STANDARD;
      this.retryDecider = options?.retryDecider ?? defaultRetryDecider;
      this.delayDecider = options?.delayDecider ?? defaultDelayDecider;
      this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
    }
    static {
      __name(this, "StandardRetryStrategy");
    }
    shouldRetry(error, attempts, maxAttempts) {
      return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
      let maxAttempts;
      try {
        maxAttempts = await this.maxAttemptsProvider();
      } catch (error) {
        maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
      }
      return maxAttempts;
    }
    async retry(next, args, options) {
      let retryTokenAmount;
      let attempts = 0;
      let totalDelay = 0;
      const maxAttempts = await this.getMaxAttempts();
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
      }
      while (true) {
        try {
          if (import_protocol_http.HttpRequest.isInstance(request)) {
            request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          if (options?.beforeRequest) {
            await options.beforeRequest();
          }
          const { response, output } = await next(args);
          if (options?.afterRequest) {
            options.afterRequest(response);
          }
          this.retryQuota.releaseRetryTokens(retryTokenAmount);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalDelay;
          return { response, output };
        } catch (e) {
          const err = asSdkError(e);
          attempts++;
          if (this.shouldRetry(err, attempts, maxAttempts)) {
            retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
            const delayFromDecider = this.delayDecider((0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE, attempts);
            const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
            const delay = Math.max(delayFromResponse || 0, delayFromDecider);
            totalDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
            continue;
          }
          if (!err.$metadata) {
            err.$metadata = {};
          }
          err.$metadata.attempts = attempts;
          err.$metadata.totalRetryDelay = totalDelay;
          throw err;
        }
      }
    }
  };
  var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
    if (!import_protocol_http.HttpResponse.isInstance(response))
      return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
      return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
      return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
  }, "getDelayFromRetryAfterHeader");
  var AdaptiveRetryStrategy = class extends StandardRetryStrategy {
    static {
      __name(this, "AdaptiveRetryStrategy");
    }
    constructor(maxAttemptsProvider, options) {
      const { rateLimiter, ...superOptions } = options ?? {};
      super(maxAttemptsProvider, superOptions);
      this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter;
      this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
      return super.retry(next, args, {
        beforeRequest: async () => {
          return this.rateLimiter.getSendToken();
        },
        afterRequest: (response) => {
          this.rateLimiter.updateClientSendingRate(response);
        }
      });
    }
  };
  var import_util_middleware = require_dist_cjs6();
  var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
  var CONFIG_MAX_ATTEMPTS = "max_attempts";
  var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      const value = env[ENV_MAX_ATTEMPTS];
      if (!value)
        return;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    configFileSelector: (profile) => {
      const value = profile[CONFIG_MAX_ATTEMPTS];
      if (!value)
        return;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    default: import_util_retry.DEFAULT_MAX_ATTEMPTS
  };
  var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
    const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
    const maxAttempts = (0, import_util_middleware.normalizeProvider)(_maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);
    return Object.assign(input, {
      maxAttempts,
      retryStrategy: async () => {
        if (retryStrategy) {
          return retryStrategy;
        }
        const retryMode = await (0, import_util_middleware.normalizeProvider)(_retryMode)();
        if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
          return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
        }
        return new import_util_retry.StandardRetryStrategy(maxAttempts);
      }
    });
  }, "resolveRetryConfig");
  var ENV_RETRY_MODE = "AWS_RETRY_MODE";
  var CONFIG_RETRY_MODE = "retry_mode";
  var NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
    default: import_util_retry.DEFAULT_RETRY_MODE
  };
  var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
    const { request } = args;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
      delete request.headers[import_util_retry.REQUEST_HEADER];
    }
    return next(args);
  }, "omitRetryHeadersMiddleware");
  var omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
  };
  var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
    }
  }), "getOmitRetryHeadersPlugin");
  var import_smithy_client = require_dist_cjs24();
  var import_isStreamingPayload = require_isStreamingPayload();
  var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
    let retryStrategy = await options.retryStrategy();
    const maxAttempts = await options.maxAttempts();
    if (isRetryStrategyV2(retryStrategy)) {
      retryStrategy = retryStrategy;
      let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
      let lastError = new Error;
      let attempts = 0;
      let totalRetryDelay = 0;
      const { request } = args;
      const isRequest = import_protocol_http.HttpRequest.isInstance(request);
      if (isRequest) {
        request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
      }
      while (true) {
        try {
          if (isRequest) {
            request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          const { response, output } = await next(args);
          retryStrategy.recordSuccess(retryToken);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalRetryDelay;
          return { response, output };
        } catch (e) {
          const retryErrorInfo = getRetryErrorInfo(e);
          lastError = asSdkError(e);
          if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
            (context.logger instanceof import_smithy_client.NoOpLogger ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
            throw lastError;
          }
          try {
            retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
          } catch (refreshError) {
            if (!lastError.$metadata) {
              lastError.$metadata = {};
            }
            lastError.$metadata.attempts = attempts + 1;
            lastError.$metadata.totalRetryDelay = totalRetryDelay;
            throw lastError;
          }
          attempts = retryToken.getRetryCount();
          const delay = retryToken.getRetryDelay();
          totalRetryDelay += delay;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
      }
    } else {
      retryStrategy = retryStrategy;
      if (retryStrategy?.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    }
  }, "retryMiddleware");
  var isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
  var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
    const errorInfo = {
      error,
      errorType: getRetryErrorType(error)
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) {
      errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
  }, "getRetryErrorInfo");
  var getRetryErrorType = /* @__PURE__ */ __name((error) => {
    if ((0, import_service_error_classification.isThrottlingError)(error))
      return "THROTTLING";
    if ((0, import_service_error_classification.isTransientError)(error))
      return "TRANSIENT";
    if ((0, import_service_error_classification.isServerError)(error))
      return "SERVER_ERROR";
    return "CLIENT_ERROR";
  }, "getRetryErrorType");
  var retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true
  };
  var getRetryPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  }), "getRetryPlugin");
  var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
    if (!import_protocol_http.HttpResponse.isInstance(response))
      return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
      return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
      return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
  }, "getRetryAfterHint");
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultCloudWatchLogsHttpAuthSchemeProvider = exports.defaultCloudWatchLogsHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultCloudWatchLogsHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultCloudWatchLogsHttpAuthSchemeParametersProvider = defaultCloudWatchLogsHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "logs",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  var defaultCloudWatchLogsHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultCloudWatchLogsHttpAuthSchemeProvider = defaultCloudWatchLogsHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-cloudwatch-logs",
    description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-cloudwatch-logs",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo cloudwatch-logs"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/eventstream-serde-browser": "^4.0.2",
      "@smithy/eventstream-serde-config-resolver": "^4.1.0",
      "@smithy/eventstream-serde-node": "^4.0.2",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      "@types/uuid": "^9.0.1",
      tslib: "^2.6.2",
      uuid: "^9.0.1"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-cloudwatch-logs"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-env@3.775.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs39 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
    ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
    ENV_EXPIRATION: () => ENV_EXPIRATION,
    ENV_KEY: () => ENV_KEY,
    ENV_SECRET: () => ENV_SECRET,
    ENV_SESSION: () => ENV_SESSION,
    fromEnv: () => fromEnv
  });
  module.exports = __toCommonJS(index_exports);
  var import_client = require_client();
  var import_property_provider = require_dist_cjs21();
  var ENV_KEY = "AWS_ACCESS_KEY_ID";
  var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
  var ENV_SESSION = "AWS_SESSION_TOKEN";
  var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
  var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
  var ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
  var fromEnv = /* @__PURE__ */ __name((init) => async () => {
    init?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");
    const accessKeyId = process.env[ENV_KEY];
    const secretAccessKey = process.env[ENV_SECRET];
    const sessionToken = process.env[ENV_SESSION];
    const expiry = process.env[ENV_EXPIRATION];
    const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
    const accountId = process.env[ENV_ACCOUNT_ID];
    if (accessKeyId && secretAccessKey) {
      const credentials = {
        accessKeyId,
        secretAccessKey,
        ...sessionToken && { sessionToken },
        ...expiry && { expiration: new Date(expiry) },
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
      return credentials;
    }
    throw new import_property_provider.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init?.logger });
  }, "fromEnv");
});

// ../../node_modules/.bun/@smithy+credential-provider-imds@4.0.2/node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs40 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
    DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
    ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
    ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
    ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
    Endpoint: () => Endpoint,
    fromContainerMetadata: () => fromContainerMetadata,
    fromInstanceMetadata: () => fromInstanceMetadata,
    getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
    httpRequest: () => httpRequest,
    providerConfigFromInit: () => providerConfigFromInit
  });
  module.exports = __toCommonJS(src_exports);
  var import_url = __require("url");
  var import_property_provider = require_dist_cjs21();
  var import_buffer = __require("buffer");
  var import_http = __require("http");
  function httpRequest(options) {
    return new Promise((resolve, reject) => {
      const req = (0, import_http.request)({
        method: "GET",
        ...options,
        hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
      });
      req.on("error", (err) => {
        reject(Object.assign(new import_property_provider.ProviderError("Unable to connect to instance metadata service"), err));
        req.destroy();
      });
      req.on("timeout", () => {
        reject(new import_property_provider.ProviderError("TimeoutError from instance metadata service"));
        req.destroy();
      });
      req.on("response", (res) => {
        const { statusCode = 400 } = res;
        if (statusCode < 200 || 300 <= statusCode) {
          reject(Object.assign(new import_property_provider.ProviderError("Error response received from instance metadata service"), { statusCode }));
          req.destroy();
        }
        const chunks = [];
        res.on("data", (chunk) => {
          chunks.push(chunk);
        });
        res.on("end", () => {
          resolve(import_buffer.Buffer.concat(chunks));
          req.destroy();
        });
      });
      req.end();
    });
  }
  __name(httpRequest, "httpRequest");
  var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
  var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
    accessKeyId: creds.AccessKeyId,
    secretAccessKey: creds.SecretAccessKey,
    sessionToken: creds.Token,
    expiration: new Date(creds.Expiration),
    ...creds.AccountId && { accountId: creds.AccountId }
  }), "fromImdsCredentials");
  var DEFAULT_TIMEOUT = 1000;
  var DEFAULT_MAX_RETRIES = 0;
  var providerConfigFromInit = /* @__PURE__ */ __name(({
    maxRetries = DEFAULT_MAX_RETRIES,
    timeout = DEFAULT_TIMEOUT
  }) => ({ maxRetries, timeout }), "providerConfigFromInit");
  var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
    let promise = toRetry();
    for (let i = 0;i < maxRetries; i++) {
      promise = promise.catch(toRetry);
    }
    return promise;
  }, "retry");
  var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
  var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
  var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
  var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
    const { timeout, maxRetries } = providerConfigFromInit(init);
    return () => retry(async () => {
      const requestOptions = await getCmdsUri({ logger: init.logger });
      const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
      if (!isImdsCredentials(credsResponse)) {
        throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credsResponse);
    }, maxRetries);
  }, "fromContainerMetadata");
  var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
    if (process.env[ENV_CMDS_AUTH_TOKEN]) {
      options.headers = {
        ...options.headers,
        Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
      };
    }
    const buffer = await httpRequest({
      ...options,
      timeout
    });
    return buffer.toString();
  }, "requestFromEcsImds");
  var CMDS_IP = "169.254.170.2";
  var GREENGRASS_HOSTS = {
    localhost: true,
    "127.0.0.1": true
  };
  var GREENGRASS_PROTOCOLS = {
    "http:": true,
    "https:": true
  };
  var getCmdsUri = /* @__PURE__ */ __name(async ({ logger }) => {
    if (process.env[ENV_CMDS_RELATIVE_URI]) {
      return {
        hostname: CMDS_IP,
        path: process.env[ENV_CMDS_RELATIVE_URI]
      };
    }
    if (process.env[ENV_CMDS_FULL_URI]) {
      const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
      if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
        throw new import_property_provider.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
          tryNextLink: false,
          logger
        });
      }
      if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
        throw new import_property_provider.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
          tryNextLink: false,
          logger
        });
      }
      return {
        ...parsed,
        port: parsed.port ? parseInt(parsed.port, 10) : undefined
      };
    }
    throw new import_property_provider.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, {
      tryNextLink: false,
      logger
    });
  }, "getCmdsUri");
  var InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError extends import_property_provider.CredentialsProviderError {
    constructor(message, tryNextLink = true) {
      super(message, tryNextLink);
      this.tryNextLink = tryNextLink;
      this.name = "InstanceMetadataV1FallbackError";
      Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);
    }
    static {
      __name(this, "InstanceMetadataV1FallbackError");
    }
  };
  var import_node_config_provider = require_dist_cjs32();
  var import_url_parser = require_dist_cjs34();
  var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
    Endpoint2["IPv4"] = "http://169.254.169.254";
    Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    return Endpoint2;
  })(Endpoint || {});
  var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
  var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
  var ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],
    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
    default: undefined
  };
  var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
    EndpointMode2["IPv4"] = "IPv4";
    EndpointMode2["IPv6"] = "IPv6";
    return EndpointMode2;
  })(EndpointMode || {});
  var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
  var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
  var ENDPOINT_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],
    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
    default: "IPv4"
  };
  var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
  var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
  var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
    const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch (endpointMode) {
      case "IPv4":
        return "http://169.254.169.254";
      case "IPv6":
        return "http://[fd00:ec2::254]";
      default:
        throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
    }
  }, "getFromEndpointModeConfig");
  var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
  var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
  var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
  var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger) => {
    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
    const newExpiration = new Date(Date.now() + refreshInterval * 1000);
    logger.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL);
    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
    return {
      ...credentials,
      ...originalExpiration ? { originalExpiration } : {},
      expiration: newExpiration
    };
  }, "getExtendedInstanceMetadataCredentials");
  var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
    const logger = options?.logger || console;
    let pastCredentials;
    return async () => {
      let credentials;
      try {
        credentials = await provider();
        if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
          credentials = getExtendedInstanceMetadataCredentials(credentials, logger);
        }
      } catch (e) {
        if (pastCredentials) {
          logger.warn("Credential renew failed: ", e);
          credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);
        } else {
          throw e;
        }
      }
      pastCredentials = credentials;
      return credentials;
    };
  }, "staticStabilityProvider");
  var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
  var IMDS_TOKEN_PATH = "/latest/api/token";
  var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
  var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
  var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
  var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }), "fromInstanceMetadata");
  var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
    let disableFetchToken = false;
    const { logger, profile } = init;
    const { timeout, maxRetries } = providerConfigFromInit(init);
    const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
      const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;
      if (isImdsV1Fallback) {
        let fallbackBlockedFromProfile = false;
        let fallbackBlockedFromProcessEnv = false;
        const configValue = await (0, import_node_config_provider.loadConfig)({
          environmentVariableSelector: (env) => {
            const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
            fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
            if (envValue === undefined) {
              throw new import_property_provider.CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });
            }
            return fallbackBlockedFromProcessEnv;
          },
          configFileSelector: (profile2) => {
            const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
            fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
            return fallbackBlockedFromProfile;
          },
          default: false
        }, {
          profile
        })();
        if (init.ec2MetadataV1Disabled || configValue) {
          const causes = [];
          if (init.ec2MetadataV1Disabled)
            causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
          if (fallbackBlockedFromProfile)
            causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
          if (fallbackBlockedFromProcessEnv)
            causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
          throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
        }
      }
      const imdsProfile = (await retry(async () => {
        let profile2;
        try {
          profile2 = await getProfile(options);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return profile2;
      }, maxRetries2)).trim();
      return retry(async () => {
        let creds;
        try {
          creds = await getCredentialsFromProfile(imdsProfile, options, init);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return creds;
      }, maxRetries2);
    }, "getCredentials");
    return async () => {
      const endpoint = await getInstanceMetadataEndpoint();
      if (disableFetchToken) {
        logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
        return getCredentials(maxRetries, { ...endpoint, timeout });
      } else {
        let token;
        try {
          token = (await getMetadataToken({ ...endpoint, timeout })).toString();
        } catch (error) {
          if (error?.statusCode === 400) {
            throw Object.assign(error, {
              message: "EC2 Metadata token request returned error"
            });
          } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
            disableFetchToken = true;
          }
          logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        }
        return getCredentials(maxRetries, {
          ...endpoint,
          headers: {
            [X_AWS_EC2_METADATA_TOKEN]: token
          },
          timeout
        });
      }
    };
  }, "getInstanceMetadataProvider");
  var getMetadataToken = /* @__PURE__ */ __name(async (options) => httpRequest({
    ...options,
    path: IMDS_TOKEN_PATH,
    method: "PUT",
    headers: {
      "x-aws-ec2-metadata-token-ttl-seconds": "21600"
    }
  }), "getMetadataToken");
  var getProfile = /* @__PURE__ */ __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
  var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
    const credentialsResponse = JSON.parse((await httpRequest({
      ...options,
      path: IMDS_PATH + profile
    })).toString());
    if (!isImdsCredentials(credentialsResponse)) {
      throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.", {
        logger: init.logger
      });
    }
    return fromImdsCredentials(credentialsResponse);
  }, "getCredentialsFromProfile");
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-http@3.775.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js
var require_checkUrl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkUrl = undefined;
  var property_provider_1 = require_dist_cjs21();
  var ECS_CONTAINER_HOST = "169.254.170.2";
  var EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
  var EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
  var checkUrl = (url, logger) => {
    if (url.protocol === "https:") {
      return;
    }
    if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
      return;
    }
    if (url.hostname.includes("[")) {
      if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
        return;
      }
    } else {
      if (url.hostname === "localhost") {
        return;
      }
      const ipComponents = url.hostname.split(".");
      const inRange = (component) => {
        const num = parseInt(component, 10);
        return 0 <= num && num <= 255;
      };
      if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
        return;
      }
    }
    throw new property_provider_1.CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });
  };
  exports.checkUrl = checkUrl;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-http@3.775.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js
var require_requestHelpers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCredentials = exports.createGetRequest = undefined;
  var property_provider_1 = require_dist_cjs21();
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_1 = require_dist_cjs24();
  var util_stream_1 = require_dist_cjs17();
  function createGetRequest(url) {
    return new protocol_http_1.HttpRequest({
      protocol: url.protocol,
      hostname: url.hostname,
      port: Number(url.port),
      path: url.pathname,
      query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {
        acc[k] = v;
        return acc;
      }, {}),
      fragment: url.hash
    });
  }
  exports.createGetRequest = createGetRequest;
  async function getCredentials(response, logger) {
    const stream = (0, util_stream_1.sdkStreamMixin)(response.body);
    const str = await stream.transformToString();
    if (response.statusCode === 200) {
      const parsed = JSON.parse(str);
      if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
        throw new property_provider_1.CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: " + "{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger });
      }
      return {
        accessKeyId: parsed.AccessKeyId,
        secretAccessKey: parsed.SecretAccessKey,
        sessionToken: parsed.Token,
        expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration)
      };
    }
    if (response.statusCode >= 400 && response.statusCode < 500) {
      let parsedBody = {};
      try {
        parsedBody = JSON.parse(str);
      } catch (e) {}
      throw Object.assign(new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {
        Code: parsedBody.Code,
        Message: parsedBody.Message
      });
    }
    throw new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });
  }
  exports.getCredentials = getCredentials;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-http@3.775.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js
var require_retry_wrapper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.retryWrapper = undefined;
  var retryWrapper = (toRetry, maxRetries, delayMs) => {
    return async () => {
      for (let i = 0;i < maxRetries; ++i) {
        try {
          return await toRetry();
        } catch (e) {
          await new Promise((resolve) => setTimeout(resolve, delayMs));
        }
      }
      return await toRetry();
    };
  };
  exports.retryWrapper = retryWrapper;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-http@3.775.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js
var require_fromHttp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromHttp = undefined;
  var tslib_1 = require_tslib();
  var client_1 = require_client();
  var node_http_handler_1 = require_dist_cjs14();
  var property_provider_1 = require_dist_cjs21();
  var promises_1 = tslib_1.__importDefault(__require("fs/promises"));
  var checkUrl_1 = require_checkUrl();
  var requestHelpers_1 = require_requestHelpers();
  var retry_wrapper_1 = require_retry_wrapper();
  var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
  var DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
  var AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
  var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
  var AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
  var fromHttp = (options = {}) => {
    options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
    let host;
    const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
    const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
    const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
    const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
    const warn = options.logger?.constructor?.name === "NoOpLogger" || !options.logger ? console.warn : options.logger.warn;
    if (relative && full) {
      warn("@aws-sdk/credential-provider-http: " + "you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
      warn("awsContainerCredentialsFullUri will take precedence.");
    }
    if (token && tokenFile) {
      warn("@aws-sdk/credential-provider-http: " + "you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
      warn("awsContainerAuthorizationToken will take precedence.");
    }
    if (full) {
      host = full;
    } else if (relative) {
      host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
    } else {
      throw new property_provider_1.CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
    }
    const url = new URL(host);
    (0, checkUrl_1.checkUrl)(url, options.logger);
    const requestHandler = new node_http_handler_1.NodeHttpHandler({
      requestTimeout: options.timeout ?? 1000,
      connectionTimeout: options.timeout ?? 1000
    });
    return (0, retry_wrapper_1.retryWrapper)(async () => {
      const request = (0, requestHelpers_1.createGetRequest)(url);
      if (token) {
        request.headers.Authorization = token;
      } else if (tokenFile) {
        request.headers.Authorization = (await promises_1.default.readFile(tokenFile)).toString();
      }
      try {
        const result = await requestHandler.handle(request);
        return (0, requestHelpers_1.getCredentials)(result.response).then((creds) => (0, client_1.setCredentialFeature)(creds, "CREDENTIALS_HTTP", "z"));
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(String(e), { logger: options.logger });
      }
    }, options.maxRetries ?? 3, options.timeout ?? 1000);
  };
  exports.fromHttp = fromHttp;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-http@3.775.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js
var require_dist_cjs41 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromHttp = undefined;
  var fromHttp_1 = require_fromHttp();
  Object.defineProperty(exports, "fromHttp", { enumerable: true, get: function() {
    return fromHttp_1.fromHttp;
  } });
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultSSOHttpAuthSchemeProvider = exports.defaultSSOHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "awsssoportal",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
      schemeId: "smithy.api#noAuth"
    };
  }
  var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      case "GetRoleCredentials": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      case "ListAccountRoles": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      case "ListAccounts": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      case "Logout": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-sso",
    description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-sso",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-sso"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+util-user-agent-node@3.787.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs42 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS,
    UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
    UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
    createDefaultUserAgentProvider: () => createDefaultUserAgentProvider,
    crtAvailability: () => crtAvailability,
    defaultUserAgent: () => defaultUserAgent
  });
  module.exports = __toCommonJS(index_exports);
  var import_os = __require("os");
  var import_process = __require("process");
  var crtAvailability = {
    isCrtAvailable: false
  };
  var isCrtAvailable = /* @__PURE__ */ __name(() => {
    if (crtAvailability.isCrtAvailable) {
      return ["md/crt-avail"];
    }
    return null;
  }, "isCrtAvailable");
  var createDefaultUserAgentProvider = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
    return async (config) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.1"],
        [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
        ["lang/js"],
        ["md/nodejs", `${import_process.versions.node}`]
      ];
      const crtAvailable = isCrtAvailable();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (import_process.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
      }
      const appId = await config?.userAgentAppId?.();
      const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
      return resolvedUserAgent;
    };
  }, "createDefaultUserAgentProvider");
  var defaultUserAgent = createDefaultUserAgentProvider;
  var import_middleware_user_agent = require_dist_cjs26();
  var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
  var UA_APP_ID_INI_NAME = "sdk_ua_app_id";
  var UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
  var NODE_APP_ID_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env2) => env2[UA_APP_ID_ENV_NAME], "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED], "configFileSelector"),
    default: import_middleware_user_agent.DEFAULT_UA_APP_ID
  };
});

// ../../node_modules/.bun/@smithy+hash-node@4.0.2/node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    Hash: () => Hash
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_buffer_from = require_dist_cjs9();
  var import_util_utf8 = require_dist_cjs10();
  var import_buffer = __require("buffer");
  var import_crypto = __require("crypto");
  var Hash = class {
    static {
      __name(this, "Hash");
    }
    constructor(algorithmIdentifier, secret) {
      this.algorithmIdentifier = algorithmIdentifier;
      this.secret = secret;
      this.reset();
    }
    update(toHash, encoding) {
      this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
    }
    digest() {
      return Promise.resolve(this.hash.digest());
    }
    reset() {
      this.hash = this.secret ? (0, import_crypto.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto.createHash)(this.algorithmIdentifier);
    }
  };
  function castSourceData(toCast, encoding) {
    if (import_buffer.Buffer.isBuffer(toCast)) {
      return toCast;
    }
    if (typeof toCast === "string") {
      return (0, import_util_buffer_from.fromString)(toCast, encoding);
    }
    if (ArrayBuffer.isView(toCast)) {
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    }
    return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
  }
  __name(castSourceData, "castSourceData");
});

// ../../node_modules/.bun/@smithy+util-body-length-node@4.0.0/node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    calculateBodyLength: () => calculateBodyLength
  });
  module.exports = __toCommonJS(src_exports);
  var import_fs = __require("fs");
  var calculateBodyLength = /* @__PURE__ */ __name((body) => {
    if (!body) {
      return 0;
    }
    if (typeof body === "string") {
      return Buffer.byteLength(body);
    } else if (typeof body.byteLength === "number") {
      return body.byteLength;
    } else if (typeof body.size === "number") {
      return body.size;
    } else if (typeof body.start === "number" && typeof body.end === "number") {
      return body.end + 1 - body.start;
    } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
      return (0, import_fs.lstatSync)(body.path).size;
    } else if (typeof body.fd === "number") {
      return (0, import_fs.fstatSync)(body.fd).size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
  }, "calculateBodyLength");
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var u = "required";
  var v = "fn";
  var w = "argv";
  var x = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "getAttr";
  var i = { [u]: false, type: "String" };
  var j = { [u]: true, default: false, type: "Boolean" };
  var k = { [x]: "Endpoint" };
  var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
  var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
  var n = {};
  var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
  var p = { [x]: g };
  var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
  var r = [l];
  var s = [m];
  var t = [{ [x]: "Region" }];
  var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var core_2 = require_dist_cjs18();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
  var endpointResolver_1 = require_endpointResolver();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@smithy+util-defaults-mode-node@4.0.8/node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs45 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    resolveDefaultsModeConfig: () => resolveDefaultsModeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_config_resolver = require_dist_cjs28();
  var import_node_config_provider = require_dist_cjs32();
  var import_property_provider = require_dist_cjs21();
  var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
  var AWS_REGION_ENV = "AWS_REGION";
  var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
  var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
  var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
  var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
  var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
  var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      return env[AWS_DEFAULTS_MODE_ENV];
    },
    configFileSelector: (profile) => {
      return profile[AWS_DEFAULTS_MODE_CONFIG];
    },
    default: "legacy"
  };
  var resolveDefaultsModeConfig = /* @__PURE__ */ __name(({
    region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
    defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
  } = {}) => (0, import_property_provider.memoize)(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode?.toLowerCase()) {
      case "auto":
        return resolveNodeDefaultsModeAuto(region);
      case "in-region":
      case "cross-region":
      case "mobile":
      case "standard":
      case "legacy":
        return Promise.resolve(mode?.toLocaleLowerCase());
      case undefined:
        return Promise.resolve("legacy");
      default:
        throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
  }), "resolveDefaultsModeConfig");
  var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
    if (clientRegion) {
      const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
      const inferredRegion = await inferPhysicalRegion();
      if (!inferredRegion) {
        return "standard";
      }
      if (resolvedRegion === inferredRegion) {
        return "in-region";
      } else {
        return "cross-region";
      }
    }
    return "standard";
  }, "resolveNodeDefaultsModeAuto");
  var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
      return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
    }
    if (!process.env[ENV_IMDS_DISABLED]) {
      try {
        const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
        const endpoint = await getInstanceMetadataEndpoint();
        return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
      } catch (e) {}
    }
  }, "inferPhysicalRegion");
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package2());
  var core_1 = require_dist_cjs25();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+region-config-resolver@3.775.0/node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs46 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
    NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
    REGION_ENV_NAME: () => REGION_ENV_NAME,
    REGION_INI_NAME: () => REGION_INI_NAME,
    getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
    resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
    resolveRegionConfig: () => resolveRegionConfig
  });
  module.exports = __toCommonJS(index_exports);
  var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    return {
      setRegion(region) {
        runtimeConfig.region = region;
      },
      region() {
        return runtimeConfig.region;
      }
    };
  }, "getAwsRegionExtensionConfiguration");
  var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
    return {
      region: awsRegionExtensionConfiguration.region()
    };
  }, "resolveAwsRegionExtensionConfiguration");
  var REGION_ENV_NAME = "AWS_REGION";
  var REGION_INI_NAME = "region";
  var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => env[REGION_ENV_NAME], "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => profile[REGION_INI_NAME], "configFileSelector"),
    default: /* @__PURE__ */ __name(() => {
      throw new Error("Region is missing");
    }, "default")
  };
  var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
  };
  var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
  var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
  var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
      throw new Error("Region is missing");
    }
    return Object.assign(input, {
      region: /* @__PURE__ */ __name(async () => {
        if (typeof region === "string") {
          return getRealRegion(region);
        }
        const providedRegion = await region();
        return getRealRegion(providedRegion);
      }, "region"),
      useFipsEndpoint: /* @__PURE__ */ __name(async () => {
        const providedRegion = typeof region === "string" ? region : await region();
        if (isFipsRegion(providedRegion)) {
          return true;
        }
        return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
      }, "useFipsEndpoint")
    });
  }, "resolveRegionConfig");
});

// ../../node_modules/.bun/@aws-sdk+client-sso@3.787.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs47 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
    GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
    GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
    InvalidRequestException: () => InvalidRequestException,
    ListAccountRolesCommand: () => ListAccountRolesCommand,
    ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
    ListAccountsCommand: () => ListAccountsCommand,
    ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
    LogoutCommand: () => LogoutCommand,
    LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
    ResourceNotFoundException: () => ResourceNotFoundException,
    RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
    SSO: () => SSO,
    SSOClient: () => SSOClient,
    SSOServiceException: () => SSOServiceException,
    TooManyRequestsException: () => TooManyRequestsException,
    UnauthorizedException: () => UnauthorizedException,
    __Client: () => import_smithy_client.Client,
    paginateListAccountRoles: () => paginateListAccountRoles,
    paginateListAccounts: () => paginateListAccounts
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "awsssoportal"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var SSOClient = class extends import_smithy_client.Client {
    static {
      __name(this, "SSOClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_serde = require_dist_cjs7();
  var SSOServiceException = class _SSOServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "SSOServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _SSOServiceException.prototype);
    }
  };
  var InvalidRequestException = class _InvalidRequestException extends SSOServiceException {
    static {
      __name(this, "InvalidRequestException");
    }
    name = "InvalidRequestException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidRequestException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidRequestException.prototype);
    }
  };
  var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException {
    static {
      __name(this, "ResourceNotFoundException");
    }
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ResourceNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    }
  };
  var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException {
    static {
      __name(this, "TooManyRequestsException");
    }
    name = "TooManyRequestsException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "TooManyRequestsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    }
  };
  var UnauthorizedException = class _UnauthorizedException extends SSOServiceException {
    static {
      __name(this, "UnauthorizedException");
    }
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "UnauthorizedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnauthorizedException.prototype);
    }
  };
  var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "GetRoleCredentialsRequestFilterSensitiveLog");
  var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.secretAccessKey && { secretAccessKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.sessionToken && { sessionToken: import_smithy_client.SENSITIVE_STRING }
  }), "RoleCredentialsFilterSensitiveLog");
  var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
  }), "GetRoleCredentialsResponseFilterSensitiveLog");
  var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "ListAccountRolesRequestFilterSensitiveLog");
  var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "ListAccountsRequestFilterSensitiveLog");
  var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "LogoutRequestFilterSensitiveLog");
  var import_core2 = require_dist_cjs25();
  var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/federation/credentials");
    const query = (0, import_smithy_client.map)({
      [_rn]: [, (0, import_smithy_client.expectNonNull)(input[_rN], `roleName`)],
      [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetRoleCredentialsCommand");
  var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/assignment/roles");
    const query = (0, import_smithy_client.map)({
      [_nt]: [, input[_nT]],
      [_mr]: [() => input.maxResults !== undefined, () => input[_mR].toString()],
      [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListAccountRolesCommand");
  var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/assignment/accounts");
    const query = (0, import_smithy_client.map)({
      [_nt]: [, input[_nT]],
      [_mr]: [() => input.maxResults !== undefined, () => input[_mR].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListAccountsCommand");
  var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/logout");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_LogoutCommand");
  var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      roleCredentials: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetRoleCredentialsCommand");
  var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      nextToken: import_smithy_client.expectString,
      roleList: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListAccountRolesCommand");
  var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      accountList: import_smithy_client._json,
      nextToken: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListAccountsCommand");
  var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_LogoutCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidRequestException":
      case "com.amazonaws.sso#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.sso#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.sso#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "UnauthorizedException":
      case "com.amazonaws.sso#UnauthorizedException":
        throw await de_UnauthorizedExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(SSOServiceException);
  var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRequestExceptionRes");
  var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceNotFoundExceptionRes");
  var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_TooManyRequestsExceptionRes");
  var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_UnauthorizedExceptionRes");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var _aI = "accountId";
  var _aT = "accessToken";
  var _ai = "account_id";
  var _mR = "maxResults";
  var _mr = "max_result";
  var _nT = "nextToken";
  var _nt = "next_token";
  var _rN = "roleName";
  var _rn = "role_name";
  var _xasbt = "x-amz-sso_bearer_token";
  var GetRoleCredentialsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    static {
      __name(this, "GetRoleCredentialsCommand");
    }
  };
  var ListAccountRolesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, undefined).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    static {
      __name(this, "ListAccountRolesCommand");
    }
  };
  var ListAccountsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, undefined).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    static {
      __name(this, "ListAccountsCommand");
    }
  };
  var LogoutCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, undefined).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    static {
      __name(this, "LogoutCommand");
    }
  };
  var commands = {
    GetRoleCredentialsCommand,
    ListAccountRolesCommand,
    ListAccountsCommand,
    LogoutCommand
  };
  var SSO = class extends SSOClient {
    static {
      __name(this, "SSO");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, SSO);
  var paginateListAccountRoles = (0, import_core.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
  var paginateListAccounts = (0, import_core.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultSSOOIDCHttpAuthSchemeProvider = exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "sso-oauth",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
      schemeId: "smithy.api#noAuth"
    };
  }
  var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      case "CreateToken": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/package.json
var require_package3 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/nested-clients",
    version: "3.787.0",
    description: "Nested clients for AWS SDK packages.",
    main: "./dist-cjs/index.js",
    module: "./dist-es/index.js",
    types: "./dist-types/index.d.ts",
    scripts: {
      build: "yarn lint && concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline nested-clients",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      lint: "node ../../scripts/validation/submodules-linter.js --pkg nested-clients",
      test: "yarn g:vitest run",
      "test:watch": "yarn g:vitest watch"
    },
    engines: {
      node: ">=18.0.0"
    },
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      tslib: "^2.6.2"
    },
    devDependencies: {
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "./sso-oidc.d.ts",
      "./sso-oidc.js",
      "./sts.d.ts",
      "./sts.js",
      "dist-*/**"
    ],
    browser: {
      "./dist-es/submodules/sso-oidc/runtimeConfig": "./dist-es/submodules/sso-oidc/runtimeConfig.browser",
      "./dist-es/submodules/sts/runtimeConfig": "./dist-es/submodules/sts/runtimeConfig.browser"
    },
    "react-native": {},
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/packages/nested-clients",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "packages/nested-clients"
    },
    exports: {
      "./sso-oidc": {
        types: "./dist-types/submodules/sso-oidc/index.d.ts",
        module: "./dist-es/submodules/sso-oidc/index.js",
        node: "./dist-cjs/submodules/sso-oidc/index.js",
        import: "./dist-es/submodules/sso-oidc/index.js",
        require: "./dist-cjs/submodules/sso-oidc/index.js"
      },
      "./sts": {
        types: "./dist-types/submodules/sts/index.d.ts",
        module: "./dist-es/submodules/sts/index.js",
        node: "./dist-cjs/submodules/sts/index.js",
        import: "./dist-es/submodules/sts/index.js",
        require: "./dist-cjs/submodules/sts/index.js"
      }
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/ruleset.js
var require_ruleset2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var u = "required";
  var v = "fn";
  var w = "argv";
  var x = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "getAttr";
  var i = { [u]: false, type: "String" };
  var j = { [u]: true, default: false, type: "Boolean" };
  var k = { [x]: "Endpoint" };
  var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
  var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
  var n = {};
  var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
  var p = { [x]: g };
  var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
  var r = [l];
  var s = [m];
  var t = [{ [x]: "Region" }];
  var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset2();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var core_2 = require_dist_cjs18();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
  var endpointResolver_1 = require_endpointResolver2();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.js
var require_runtimeConfig2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package3());
  var core_1 = require_dist_cjs25();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/index.js
var require_sso_oidc = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    $Command: () => import_smithy_client6.Command,
    AccessDeniedException: () => AccessDeniedException,
    AuthorizationPendingException: () => AuthorizationPendingException,
    CreateTokenCommand: () => CreateTokenCommand,
    CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
    CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
    ExpiredTokenException: () => ExpiredTokenException,
    InternalServerException: () => InternalServerException,
    InvalidClientException: () => InvalidClientException,
    InvalidGrantException: () => InvalidGrantException,
    InvalidRequestException: () => InvalidRequestException,
    InvalidScopeException: () => InvalidScopeException,
    SSOOIDC: () => SSOOIDC,
    SSOOIDCClient: () => SSOOIDCClient,
    SSOOIDCServiceException: () => SSOOIDCServiceException,
    SlowDownException: () => SlowDownException,
    UnauthorizedClientException: () => UnauthorizedClientException,
    UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
    __Client: () => import_smithy_client2.Client
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_smithy_client2 = require_dist_cjs24();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider3();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "sso-oauth"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig2();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var SSOOIDCClient = class extends import_smithy_client2.Client {
    static {
      __name(this, "SSOOIDCClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_smithy_client7 = require_dist_cjs24();
  var import_middleware_endpoint2 = require_dist_cjs35();
  var import_middleware_serde = require_dist_cjs7();
  var import_smithy_client6 = require_dist_cjs24();
  var import_smithy_client4 = require_dist_cjs24();
  var import_smithy_client3 = require_dist_cjs24();
  var SSOOIDCServiceException = class _SSOOIDCServiceException extends import_smithy_client3.ServiceException {
    static {
      __name(this, "SSOOIDCServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
    }
  };
  var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
    static {
      __name(this, "AccessDeniedException");
    }
    name = "AccessDeniedException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "AccessDeniedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AccessDeniedException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
    static {
      __name(this, "AuthorizationPendingException");
    }
    name = "AuthorizationPendingException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "AuthorizationPendingException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.clientSecret && { clientSecret: import_smithy_client4.SENSITIVE_STRING },
    ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
    ...obj.codeVerifier && { codeVerifier: import_smithy_client4.SENSITIVE_STRING }
  }), "CreateTokenRequestFilterSensitiveLog");
  var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING },
    ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
    ...obj.idToken && { idToken: import_smithy_client4.SENSITIVE_STRING }
  }), "CreateTokenResponseFilterSensitiveLog");
  var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
    static {
      __name(this, "ExpiredTokenException");
    }
    name = "ExpiredTokenException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "ExpiredTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
    static {
      __name(this, "InternalServerException");
    }
    name = "InternalServerException";
    $fault = "server";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "InternalServerException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _InternalServerException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
    static {
      __name(this, "InvalidClientException");
    }
    name = "InvalidClientException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "InvalidClientException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidClientException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
    static {
      __name(this, "InvalidGrantException");
    }
    name = "InvalidGrantException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "InvalidGrantException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidGrantException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
    static {
      __name(this, "InvalidRequestException");
    }
    name = "InvalidRequestException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "InvalidRequestException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
    static {
      __name(this, "InvalidScopeException");
    }
    name = "InvalidScopeException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "InvalidScopeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidScopeException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
    static {
      __name(this, "SlowDownException");
    }
    name = "SlowDownException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "SlowDownException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SlowDownException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
    static {
      __name(this, "UnauthorizedClientException");
    }
    name = "UnauthorizedClientException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "UnauthorizedClientException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
    static {
      __name(this, "UnsupportedGrantTypeException");
    }
    name = "UnsupportedGrantTypeException";
    $fault = "client";
    error;
    error_description;
    constructor(opts) {
      super({
        name: "UnsupportedGrantTypeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var import_core2 = require_dist_cjs25();
  var import_core3 = require_dist_cjs18();
  var import_smithy_client5 = require_dist_cjs24();
  var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core3.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/token");
    let body;
    body = JSON.stringify((0, import_smithy_client5.take)(input, {
      clientId: [],
      clientSecret: [],
      code: [],
      codeVerifier: [],
      deviceCode: [],
      grantType: [],
      redirectUri: [],
      refreshToken: [],
      scope: /* @__PURE__ */ __name((_) => (0, import_smithy_client5._json)(_), "scope")
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_CreateTokenCommand");
  var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client5.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client5.expectNonNull)((0, import_smithy_client5.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client5.take)(data, {
      accessToken: import_smithy_client5.expectString,
      expiresIn: import_smithy_client5.expectInt32,
      idToken: import_smithy_client5.expectString,
      refreshToken: import_smithy_client5.expectString,
      tokenType: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateTokenCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "AccessDeniedException":
      case "com.amazonaws.ssooidc#AccessDeniedException":
        throw await de_AccessDeniedExceptionRes(parsedOutput, context);
      case "AuthorizationPendingException":
      case "com.amazonaws.ssooidc#AuthorizationPendingException":
        throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
      case "ExpiredTokenException":
      case "com.amazonaws.ssooidc#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "InternalServerException":
      case "com.amazonaws.ssooidc#InternalServerException":
        throw await de_InternalServerExceptionRes(parsedOutput, context);
      case "InvalidClientException":
      case "com.amazonaws.ssooidc#InvalidClientException":
        throw await de_InvalidClientExceptionRes(parsedOutput, context);
      case "InvalidGrantException":
      case "com.amazonaws.ssooidc#InvalidGrantException":
        throw await de_InvalidGrantExceptionRes(parsedOutput, context);
      case "InvalidRequestException":
      case "com.amazonaws.ssooidc#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "InvalidScopeException":
      case "com.amazonaws.ssooidc#InvalidScopeException":
        throw await de_InvalidScopeExceptionRes(parsedOutput, context);
      case "SlowDownException":
      case "com.amazonaws.ssooidc#SlowDownException":
        throw await de_SlowDownExceptionRes(parsedOutput, context);
      case "UnauthorizedClientException":
      case "com.amazonaws.ssooidc#UnauthorizedClientException":
        throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
      case "UnsupportedGrantTypeException":
      case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
        throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var throwDefaultError = (0, import_smithy_client5.withBaseException)(SSOOIDCServiceException);
  var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_AccessDeniedExceptionRes");
  var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new AuthorizationPendingException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_AuthorizationPendingExceptionRes");
  var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new ExpiredTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ExpiredTokenExceptionRes");
  var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InternalServerExceptionRes");
  var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidClientExceptionRes");
  var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidGrantException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidGrantExceptionRes");
  var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRequestExceptionRes");
  var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidScopeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidScopeExceptionRes");
  var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new SlowDownException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_SlowDownExceptionRes");
  var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedClientException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_UnauthorizedClientExceptionRes");
  var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client5.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client5.take)(data, {
      error: import_smithy_client5.expectString,
      error_description: import_smithy_client5.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedGrantTypeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
  }, "de_UnsupportedGrantTypeExceptionRes");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var CreateTokenCommand = class extends import_smithy_client6.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    static {
      __name(this, "CreateTokenCommand");
    }
  };
  var commands = {
    CreateTokenCommand
  };
  var SSOOIDC = class extends SSOOIDCClient {
    static {
      __name(this, "SSOOIDC");
    }
  };
  (0, import_smithy_client7.createAggregatedClient)(commands, SSOOIDC);
});

// ../../node_modules/.bun/@aws-sdk+token-providers@3.787.0/node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs48 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    fromSso: () => fromSso,
    fromStatic: () => fromStatic,
    nodeProvider: () => nodeProvider
  });
  module.exports = __toCommonJS(index_exports);
  var EXPIRE_WINDOW_MS = 5 * 60 * 1000;
  var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
    const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM2(require_sso_oidc()));
    const ssoOidcClient = new SSOOIDCClient(Object.assign({}, init.clientConfig ?? {}, {
      region: ssoRegion ?? init.clientConfig?.region,
      logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger
    }));
    return ssoOidcClient;
  }, "getSsoOidcClient");
  var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
    const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM2(require_sso_oidc()));
    const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
    return ssoOidcClient.send(new CreateTokenCommand({
      clientId: ssoToken.clientId,
      clientSecret: ssoToken.clientSecret,
      refreshToken: ssoToken.refreshToken,
      grantType: "refresh_token"
    }));
  }, "getNewSsoOidcToken");
  var import_property_provider = require_dist_cjs21();
  var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
    if (token.expiration && token.expiration.getTime() < Date.now()) {
      throw new import_property_provider.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
    }
  }, "validateTokenExpiry");
  var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
    if (typeof value === "undefined") {
      throw new import_property_provider.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);
    }
  }, "validateTokenKey");
  var import_shared_ini_file_loader = require_dist_cjs31();
  var import_fs = __require("fs");
  var { writeFile } = import_fs.promises;
  var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
    const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
    const tokenString = JSON.stringify(ssoToken, null, 2);
    return writeFile(tokenFilepath, tokenString);
  }, "writeSSOTokenToFile");
  var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
  var fromSso = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
    const init = {
      ..._init,
      parentClientConfig: {
        ...callerClientConfig,
        ..._init.parentClientConfig
      }
    };
    init.logger?.debug("@aws-sdk/token-providers - fromSso");
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    const profileName = (0, import_shared_ini_file_loader.getProfileName)({
      profile: init.profile ?? callerClientConfig?.profile
    });
    const profile = profiles[profileName];
    if (!profile) {
      throw new import_property_provider.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
    } else if (!profile["sso_session"]) {
      throw new import_property_provider.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
    }
    const ssoSessionName = profile["sso_session"];
    const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
    const ssoSession = ssoSessions[ssoSessionName];
    if (!ssoSession) {
      throw new import_property_provider.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
    }
    for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
      if (!ssoSession[ssoSessionRequiredKey]) {
        throw new import_property_provider.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
      }
    }
    const ssoStartUrl = ssoSession["sso_start_url"];
    const ssoRegion = ssoSession["sso_region"];
    let ssoToken;
    try {
      ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
    } catch (e) {
      throw new import_property_provider.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);
    }
    validateTokenKey("accessToken", ssoToken.accessToken);
    validateTokenKey("expiresAt", ssoToken.expiresAt);
    const { accessToken, expiresAt } = ssoToken;
    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
      return existingToken;
    }
    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {
      validateTokenExpiry(existingToken);
      return existingToken;
    }
    validateTokenKey("clientId", ssoToken.clientId, true);
    validateTokenKey("clientSecret", ssoToken.clientSecret, true);
    validateTokenKey("refreshToken", ssoToken.refreshToken, true);
    try {
      lastRefreshAttemptTime.setTime(Date.now());
      const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
      validateTokenKey("accessToken", newSsoOidcToken.accessToken);
      validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
      const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);
      try {
        await writeSSOTokenToFile(ssoSessionName, {
          ...ssoToken,
          accessToken: newSsoOidcToken.accessToken,
          expiresAt: newTokenExpiration.toISOString(),
          refreshToken: newSsoOidcToken.refreshToken
        });
      } catch (error) {}
      return {
        token: newSsoOidcToken.accessToken,
        expiration: newTokenExpiration
      };
    } catch (error) {
      validateTokenExpiry(existingToken);
      return existingToken;
    }
  }, "fromSso");
  var fromStatic = /* @__PURE__ */ __name(({ token, logger }) => async () => {
    logger?.debug("@aws-sdk/token-providers - fromStatic");
    if (!token || !token.token) {
      throw new import_property_provider.TokenProviderError(`Please pass a valid token to fromStatic`, false);
    }
    return token;
  }, "fromStatic");
  var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(fromSso(init), async () => {
    throw new import_property_provider.TokenProviderError("Could not load token from any providers", false);
  }), (token) => token.expiration !== undefined && token.expiration.getTime() - Date.now() < 300000, (token) => token.expiration !== undefined), "nodeProvider");
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-sso@3.787.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs49 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var loadSso_exports = {};
  __export(loadSso_exports, {
    GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
    SSOClient: () => import_client_sso.SSOClient
  });
  var import_client_sso;
  var init_loadSso = __esm({
    "src/loadSso.ts"() {
      import_client_sso = require_dist_cjs47();
    }
  });
  var index_exports = {};
  __export(index_exports, {
    fromSSO: () => fromSSO,
    isSsoProfile: () => isSsoProfile,
    validateSsoProfile: () => validateSsoProfile
  });
  module.exports = __toCommonJS(index_exports);
  var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
  var import_client = require_client();
  var import_token_providers = require_dist_cjs48();
  var import_property_provider = require_dist_cjs21();
  var import_shared_ini_file_loader = require_dist_cjs31();
  var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
  var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
    ssoStartUrl,
    ssoSession,
    ssoAccountId,
    ssoRegion,
    ssoRoleName,
    ssoClient,
    clientConfig,
    parentClientConfig,
    profile,
    logger
  }) => {
    let token;
    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
    if (ssoSession) {
      try {
        const _token = await (0, import_token_providers.fromSso)({ profile })();
        token = {
          accessToken: _token.token,
          expiresAt: new Date(_token.expiration).toISOString()
        };
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(e.message, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
    } else {
      try {
        token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
    }
    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
      throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
        tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
        logger
      });
    }
    const { accessToken } = token;
    const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
    const sso = ssoClient || new SSOClient2(Object.assign({}, clientConfig ?? {}, {
      logger: clientConfig?.logger ?? parentClientConfig?.logger,
      region: clientConfig?.region ?? ssoRegion
    }));
    let ssoResp;
    try {
      ssoResp = await sso.send(new GetRoleCredentialsCommand2({
        accountId: ssoAccountId,
        roleName: ssoRoleName,
        accessToken
      }));
    } catch (e) {
      throw new import_property_provider.CredentialsProviderError(e, {
        tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
        logger
      });
    }
    const {
      roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}
    } = ssoResp;
    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
      throw new import_property_provider.CredentialsProviderError("SSO returns an invalid temporary credential.", {
        tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
        logger
      });
    }
    const credentials = {
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expiration: new Date(expiration),
      ...credentialScope && { credentialScope },
      ...accountId && { accountId }
    };
    if (ssoSession) {
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_SSO", "s");
    } else {
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_SSO_LEGACY", "u");
    }
    return credentials;
  }, "resolveSSOCredentials");
  var validateSsoProfile = /* @__PURE__ */ __name((profile, logger) => {
    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
      throw new import_property_provider.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });
    }
    return profile;
  }, "validateSsoProfile");
  var fromSSO = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
    init.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");
    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
    const { ssoClient } = init;
    const profileName = (0, import_shared_ini_file_loader.getProfileName)({
      profile: init.profile ?? callerClientConfig?.profile
    });
    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
      }
      if (!isSsoProfile(profile)) {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
          logger: init.logger
        });
      }
      if (profile?.sso_session) {
        const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
        const session = ssoSessions[profile.sso_session];
        const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
        if (ssoRegion && ssoRegion !== session.sso_region) {
          throw new import_property_provider.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
            tryNextLink: false,
            logger: init.logger
          });
        }
        if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
          throw new import_property_provider.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
            tryNextLink: false,
            logger: init.logger
          });
        }
        profile.sso_region = session.sso_region;
        profile.sso_start_url = session.sso_start_url;
      }
      const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);
      return resolveSSOCredentials({
        ssoStartUrl: sso_start_url,
        ssoSession: sso_session,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
        ssoClient,
        clientConfig: init.clientConfig,
        parentClientConfig: init.parentClientConfig,
        profile: profileName
      });
    } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
      throw new import_property_provider.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"', { tryNextLink: false, logger: init.logger });
    } else {
      return resolveSSOCredentials({
        ssoStartUrl,
        ssoSession,
        ssoAccountId,
        ssoRegion,
        ssoRoleName,
        ssoClient,
        clientConfig: init.clientConfig,
        parentClientConfig: init.parentClientConfig,
        profile: profileName
      });
    }
  }, "fromSSO");
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.resolveStsAuthConfig = exports.defaultSTSHttpAuthSchemeProvider = exports.defaultSTSHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var STSClient_1 = require_STSClient();
  var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "sts",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
      schemeId: "smithy.api#noAuth"
    };
  }
  var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      case "AssumeRoleWithWebIdentity": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
  var resolveStsAuthConfig = (input) => Object.assign(input, {
    stsClientCtor: STSClient_1.STSClient
  });
  exports.resolveStsAuthConfig = resolveStsAuthConfig;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, exports.resolveStsAuthConfig)(config);
    const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
    return Object.assign(config_1, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.commonParams = exports.resolveClientEndpointParameters = undefined;
  var resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      defaultSigningName: "sts"
    });
  };
  exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  exports.commonParams = {
    UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/ruleset.js
var require_ruleset3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var F = "required";
  var G = "type";
  var H = "fn";
  var I = "argv";
  var J = "ref";
  var a = false;
  var b = true;
  var c = "booleanEquals";
  var d = "stringEquals";
  var e = "sigv4";
  var f = "sts";
  var g = "us-east-1";
  var h = "endpoint";
  var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
  var j = "tree";
  var k = "error";
  var l = "getAttr";
  var m = { [F]: false, [G]: "String" };
  var n = { [F]: true, default: false, [G]: "Boolean" };
  var o = { [J]: "Endpoint" };
  var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
  var q = { [J]: "Region" };
  var r = { [H]: "aws.partition", [I]: [q], assign: "PartitionResult" };
  var s = { [J]: "UseFIPS" };
  var t = { [J]: "UseDualStack" };
  var u = { url: "https://sts.amazonaws.com", properties: { authSchemes: [{ name: e, signingName: f, signingRegion: g }] }, headers: {} };
  var v = {};
  var w = { conditions: [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
  var x = { [H]: c, [I]: [s, true] };
  var y = { [H]: c, [I]: [t, true] };
  var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
  var A = { [J]: "PartitionResult" };
  var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
  var C = [{ [H]: "isSet", [I]: [o] }];
  var D = [x];
  var E = [y];
  var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset3();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var core_2 = require_dist_cjs18();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
  var endpointResolver_1 = require_endpointResolver3();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.js
var require_runtimeConfig3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package3());
  var core_1 = require_dist_cjs25();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var core_2 = require_dist_cjs18();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await config.credentialDefaultProvider(idProps?.__config || {})()),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = undefined;
  var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  };
  exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
  var resolveHttpAuthRuntimeConfig = (config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  };
  exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeExtensions.js
var require_runtimeExtensions = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveRuntimeExtensions = undefined;
  var region_config_resolver_1 = require_dist_cjs46();
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_1 = require_dist_cjs24();
  var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
  var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig), (0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig), (0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), (0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration));
  };
  exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/STSClient.js
var require_STSClient = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.STSClient = exports.__Client = undefined;
  var middleware_host_header_1 = require_dist_cjs3();
  var middleware_logger_1 = require_dist_cjs4();
  var middleware_recursion_detection_1 = require_dist_cjs5();
  var middleware_user_agent_1 = require_dist_cjs26();
  var config_resolver_1 = require_dist_cjs28();
  var core_1 = require_dist_cjs18();
  var middleware_content_length_1 = require_dist_cjs30();
  var middleware_endpoint_1 = require_dist_cjs35();
  var middleware_retry_1 = require_dist_cjs38();
  var smithy_client_1 = require_dist_cjs24();
  Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
    return smithy_client_1.Client;
  } });
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
  var EndpointParameters_1 = require_EndpointParameters();
  var runtimeConfig_1 = require_runtimeConfig3();
  var runtimeExtensions_1 = require_runtimeExtensions();

  class STSClient2 extends smithy_client_1.Client {
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
      const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
      const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
      const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new core_1.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      }));
      this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  }
  exports.STSClient = STSClient2;
});

// ../../node_modules/.bun/@aws-sdk+nested-clients@3.787.0/node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/index.js
var require_sts = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AssumeRoleCommand: () => AssumeRoleCommand,
    AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
    AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
    ClientInputEndpointParameters: () => import_EndpointParameters3.ClientInputEndpointParameters,
    CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
    ExpiredTokenException: () => ExpiredTokenException,
    IDPCommunicationErrorException: () => IDPCommunicationErrorException,
    IDPRejectedClaimException: () => IDPRejectedClaimException,
    InvalidIdentityTokenException: () => InvalidIdentityTokenException,
    MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
    PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
    RegionDisabledException: () => RegionDisabledException,
    STS: () => STS,
    STSServiceException: () => STSServiceException,
    decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
    getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
    getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
  });
  module.exports = __toCommonJS(index_exports);
  __reExport(index_exports, require_STSClient(), module.exports);
  var import_smithy_client6 = require_dist_cjs24();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_serde = require_dist_cjs7();
  var import_smithy_client4 = require_dist_cjs24();
  var import_EndpointParameters = require_EndpointParameters();
  var import_smithy_client2 = require_dist_cjs24();
  var import_smithy_client = require_dist_cjs24();
  var STSServiceException = class _STSServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "STSServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _STSServiceException.prototype);
    }
  };
  var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client2.SENSITIVE_STRING }
  }), "CredentialsFilterSensitiveLog");
  var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRoleResponseFilterSensitiveLog");
  var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException {
    static {
      __name(this, "ExpiredTokenException");
    }
    name = "ExpiredTokenException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ExpiredTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
    }
  };
  var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
    static {
      __name(this, "MalformedPolicyDocumentException");
    }
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "MalformedPolicyDocumentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
    }
  };
  var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
    static {
      __name(this, "PackedPolicyTooLargeException");
    }
    name = "PackedPolicyTooLargeException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "PackedPolicyTooLargeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
    }
  };
  var RegionDisabledException = class _RegionDisabledException extends STSServiceException {
    static {
      __name(this, "RegionDisabledException");
    }
    name = "RegionDisabledException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "RegionDisabledException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _RegionDisabledException.prototype);
    }
  };
  var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
    static {
      __name(this, "IDPRejectedClaimException");
    }
    name = "IDPRejectedClaimException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "IDPRejectedClaimException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
    }
  };
  var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
    static {
      __name(this, "InvalidIdentityTokenException");
    }
    name = "InvalidIdentityTokenException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidIdentityTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
    }
  };
  var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client2.SENSITIVE_STRING }
  }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
  var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
  var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
    static {
      __name(this, "IDPCommunicationErrorException");
    }
    name = "IDPCommunicationErrorException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "IDPCommunicationErrorException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
    }
  };
  var import_core = require_dist_cjs25();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client3 = require_dist_cjs24();
  var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleRequest(input, context),
      [_A]: _AR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRoleCommand");
  var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleWithWebIdentityRequest(input, context),
      [_A]: _ARWWI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRoleWithWebIdentityCommand");
  var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRoleCommand");
  var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRoleWithWebIdentityCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core.parseXmlErrorBody)(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ExpiredTokenException":
      case "com.amazonaws.sts#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      case "IDPCommunicationError":
      case "com.amazonaws.sts#IDPCommunicationErrorException":
        throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
      case "IDPRejectedClaim":
      case "com.amazonaws.sts#IDPRejectedClaimException":
        throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
      case "InvalidIdentityToken":
      case "com.amazonaws.sts#InvalidIdentityTokenException":
        throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  }, "de_CommandError");
  var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ExpiredTokenException(body.Error, context);
    const exception = new ExpiredTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_ExpiredTokenExceptionRes");
  var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPCommunicationErrorException(body.Error, context);
    const exception = new IDPCommunicationErrorException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_IDPCommunicationErrorExceptionRes");
  var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPRejectedClaimException(body.Error, context);
    const exception = new IDPRejectedClaimException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_IDPRejectedClaimExceptionRes");
  var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidIdentityTokenException(body.Error, context);
    const exception = new InvalidIdentityTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_InvalidIdentityTokenExceptionRes");
  var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new MalformedPolicyDocumentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_MalformedPolicyDocumentExceptionRes");
  var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
    const exception = new PackedPolicyTooLargeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_PackedPolicyTooLargeExceptionRes");
  var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_RegionDisabledException(body.Error, context);
    const exception = new RegionDisabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client3.decorateServiceException)(exception, body);
  }, "de_RegionDisabledExceptionRes");
  var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_TTK] != null) {
      const memberEntries = se_tagKeyListType(input[_TTK], context);
      if (input[_TTK]?.length === 0) {
        entries.TransitiveTagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TransitiveTagKeys.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_EI] != null) {
      entries[_EI] = input[_EI];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
      entries[_TC] = input[_TC];
    }
    if (input[_SI] != null) {
      entries[_SI] = input[_SI];
    }
    if (input[_PC] != null) {
      const memberEntries = se_ProvidedContextsListType(input[_PC], context);
      if (input[_PC]?.length === 0) {
        entries.ProvidedContexts = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ProvidedContexts.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_AssumeRoleRequest");
  var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_WIT] != null) {
      entries[_WIT] = input[_WIT];
    }
    if (input[_PI] != null) {
      entries[_PI] = input[_PI];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  }, "se_AssumeRoleWithWebIdentityRequest");
  var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_PolicyDescriptorType(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_policyDescriptorListType");
  var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_a] != null) {
      entries[_a] = input[_a];
    }
    return entries;
  }, "se_PolicyDescriptorType");
  var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PAr] != null) {
      entries[_PAr] = input[_PAr];
    }
    if (input[_CA] != null) {
      entries[_CA] = input[_CA];
    }
    return entries;
  }, "se_ProvidedContext");
  var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_ProvidedContext(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_ProvidedContextsListType");
  var se_Tag = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_K] != null) {
      entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
      entries[_Va] = input[_Va];
    }
    return entries;
  }, "se_Tag");
  var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_tagKeyListType");
  var se_tagListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_Tag(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_tagListType");
  var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ARI] != null) {
      contents[_ARI] = (0, import_smithy_client3.expectString)(output[_ARI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client3.expectString)(output[_Ar]);
    }
    return contents;
  }, "de_AssumedRoleUser");
  var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client3.strictParseInt32)(output[_PPS]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client3.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRoleResponse");
  var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_SFWIT] != null) {
      contents[_SFWIT] = (0, import_smithy_client3.expectString)(output[_SFWIT]);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client3.strictParseInt32)(output[_PPS]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client3.expectString)(output[_Pr]);
    }
    if (output[_Au] != null) {
      contents[_Au] = (0, import_smithy_client3.expectString)(output[_Au]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client3.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRoleWithWebIdentityResponse");
  var de_Credentials = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client3.expectString)(output[_AKI]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, import_smithy_client3.expectString)(output[_SAK]);
    }
    if (output[_ST] != null) {
      contents[_ST] = (0, import_smithy_client3.expectString)(output[_ST]);
    }
    if (output[_E] != null) {
      contents[_E] = (0, import_smithy_client3.expectNonNull)((0, import_smithy_client3.parseRfc3339DateTimeWithOffset)(output[_E]));
    }
    return contents;
  }, "de_Credentials");
  var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_ExpiredTokenException");
  var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_IDPCommunicationErrorException");
  var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_IDPRejectedClaimException");
  var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidIdentityTokenException");
  var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_MalformedPolicyDocumentException");
  var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_PackedPolicyTooLargeException");
  var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
    }
    return contents;
  }, "de_RegionDisabledException");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var throwDefaultError = (0, import_smithy_client3.withBaseException)(STSServiceException);
  var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new import_protocol_http.HttpRequest(contents);
  }, "buildHttpRpcRequest");
  var SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
  };
  var _ = "2011-06-15";
  var _A = "Action";
  var _AKI = "AccessKeyId";
  var _AR = "AssumeRole";
  var _ARI = "AssumedRoleId";
  var _ARU = "AssumedRoleUser";
  var _ARWWI = "AssumeRoleWithWebIdentity";
  var _Ar = "Arn";
  var _Au = "Audience";
  var _C = "Credentials";
  var _CA = "ContextAssertion";
  var _DS = "DurationSeconds";
  var _E = "Expiration";
  var _EI = "ExternalId";
  var _K = "Key";
  var _P = "Policy";
  var _PA = "PolicyArns";
  var _PAr = "ProviderArn";
  var _PC = "ProvidedContexts";
  var _PI = "ProviderId";
  var _PPS = "PackedPolicySize";
  var _Pr = "Provider";
  var _RA = "RoleArn";
  var _RSN = "RoleSessionName";
  var _SAK = "SecretAccessKey";
  var _SFWIT = "SubjectFromWebIdentityToken";
  var _SI = "SourceIdentity";
  var _SN = "SerialNumber";
  var _ST = "SessionToken";
  var _T = "Tags";
  var _TC = "TokenCode";
  var _TTK = "TransitiveTagKeys";
  var _V = "Version";
  var _Va = "Value";
  var _WIT = "WebIdentityToken";
  var _a = "arn";
  var _m = "message";
  var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client3.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client3.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
  var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
    if (data.Error?.Code !== undefined) {
      return data.Error.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  }, "loadQueryErrorCode");
  var AssumeRoleCommand = class extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(undefined, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    static {
      __name(this, "AssumeRoleCommand");
    }
  };
  var import_middleware_endpoint2 = require_dist_cjs35();
  var import_middleware_serde2 = require_dist_cjs7();
  var import_smithy_client5 = require_dist_cjs24();
  var import_EndpointParameters2 = require_EndpointParameters();
  var AssumeRoleWithWebIdentityCommand = class extends import_smithy_client5.Command.classBuilder().ep(import_EndpointParameters2.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    static {
      __name(this, "AssumeRoleWithWebIdentityCommand");
    }
  };
  var import_STSClient = require_STSClient();
  var commands = {
    AssumeRoleCommand,
    AssumeRoleWithWebIdentityCommand
  };
  var STS = class extends import_STSClient.STSClient {
    static {
      __name(this, "STS");
    }
  };
  (0, import_smithy_client6.createAggregatedClient)(commands, STS);
  var import_EndpointParameters3 = require_EndpointParameters();
  var import_client = require_client();
  var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
  var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
    if (typeof assumedRoleUser?.Arn === "string") {
      const arnComponents = assumedRoleUser.Arn.split(":");
      if (arnComponents.length > 4 && arnComponents[4] !== "") {
        return arnComponents[4];
      }
    }
    return;
  }, "getAccountIdFromAssumedRoleUser");
  var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
    const region = typeof _region === "function" ? await _region() : _region;
    const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
    credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion", "accepting first of:", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);
    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
  }, "resolveRegion");
  var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
    let stsClient;
    let closureSourceCreds;
    return async (sourceCreds, params) => {
      closureSourceCreds = sourceCreds;
      if (!stsClient) {
        const {
          logger = stsOptions?.parentClientConfig?.logger,
          region,
          requestHandler = stsOptions?.parentClientConfig?.requestHandler,
          credentialProviderLogger
        } = stsOptions;
        const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
        const isCompatibleRequestHandler = !isH2(requestHandler);
        stsClient = new STSClient3({
          profile: stsOptions?.parentClientConfig?.profile,
          credentialDefaultProvider: /* @__PURE__ */ __name(() => async () => closureSourceCreds, "credentialDefaultProvider"),
          region: resolvedRegion,
          requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,
          logger
        });
      }
      const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleCommand(params));
      if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
      }
      const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
      const credentials = {
        accessKeyId: Credentials2.AccessKeyId,
        secretAccessKey: Credentials2.SecretAccessKey,
        sessionToken: Credentials2.SessionToken,
        expiration: Credentials2.Expiration,
        ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
      return credentials;
    };
  }, "getDefaultRoleAssumer");
  var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
    let stsClient;
    return async (params) => {
      if (!stsClient) {
        const {
          logger = stsOptions?.parentClientConfig?.logger,
          region,
          requestHandler = stsOptions?.parentClientConfig?.requestHandler,
          credentialProviderLogger
        } = stsOptions;
        const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
        const isCompatibleRequestHandler = !isH2(requestHandler);
        stsClient = new STSClient3({
          profile: stsOptions?.parentClientConfig?.profile,
          region: resolvedRegion,
          requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,
          logger
        });
      }
      const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
      if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
      }
      const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
      const credentials = {
        accessKeyId: Credentials2.AccessKeyId,
        secretAccessKey: Credentials2.SecretAccessKey,
        sessionToken: Credentials2.SessionToken,
        expiration: Credentials2.Expiration,
        ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
        ...accountId && { accountId }
      };
      if (accountId) {
        (0, import_client.setCredentialFeature)(credentials, "RESOLVED_ACCOUNT_ID", "T");
      }
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
      return credentials;
    };
  }, "getDefaultRoleAssumerWithWebIdentity");
  var isH2 = /* @__PURE__ */ __name((requestHandler) => {
    return requestHandler?.metadata?.handlerProtocol === "h2";
  }, "isH2");
  var import_STSClient2 = require_STSClient();
  var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
    if (!customizations)
      return baseCtor;
    else
      return class CustomizableSTSClient extends baseCtor {
        static {
          __name(this, "CustomizableSTSClient");
        }
        constructor(config) {
          super(config);
          for (const customization of customizations) {
            this.middlewareStack.use(customization);
          }
        }
      };
  }, "getCustomizableStsClientCtor");
  var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
  var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
  var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
    roleAssumer: getDefaultRoleAssumer2(input),
    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
    ...input
  }), "decorateDefaultCredentialProvider");
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-process@3.775.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs50 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    fromProcess: () => fromProcess
  });
  module.exports = __toCommonJS(index_exports);
  var import_shared_ini_file_loader = require_dist_cjs31();
  var import_property_provider = require_dist_cjs21();
  var import_child_process = __require("child_process");
  var import_util = __require("util");
  var import_client = require_client();
  var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
    if (data.Version !== 1) {
      throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
    }
    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {
      throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
    }
    if (data.Expiration) {
      const currentTime = /* @__PURE__ */ new Date;
      const expireTime = new Date(data.Expiration);
      if (expireTime < currentTime) {
        throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
      }
    }
    let accountId = data.AccountId;
    if (!accountId && profiles?.[profileName]?.aws_account_id) {
      accountId = profiles[profileName].aws_account_id;
    }
    const credentials = {
      accessKeyId: data.AccessKeyId,
      secretAccessKey: data.SecretAccessKey,
      ...data.SessionToken && { sessionToken: data.SessionToken },
      ...data.Expiration && { expiration: new Date(data.Expiration) },
      ...data.CredentialScope && { credentialScope: data.CredentialScope },
      ...accountId && { accountId }
    };
    (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_PROCESS", "w");
    return credentials;
  }, "getValidatedProcessCredentials");
  var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger) => {
    const profile = profiles[profileName];
    if (profiles[profileName]) {
      const credentialProcess = profile["credential_process"];
      if (credentialProcess !== undefined) {
        const execPromise = (0, import_util.promisify)(import_child_process.exec);
        try {
          const { stdout } = await execPromise(credentialProcess);
          let data;
          try {
            data = JSON.parse(stdout.trim());
          } catch {
            throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
          }
          return getValidatedProcessCredentials(profileName, data, profiles);
        } catch (error) {
          throw new import_property_provider.CredentialsProviderError(error.message, { logger });
        }
      } else {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });
      }
    } else {
      throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
        logger
      });
    }
  }, "resolveProcessCredentials");
  var fromProcess = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
    init.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    return resolveProcessCredentials((0, import_shared_ini_file_loader.getProfileName)({
      profile: init.profile ?? callerClientConfig?.profile
    }), profiles, init.logger);
  }, "fromProcess");
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-web-identity@3.787.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromWebToken = undefined;
  var fromWebToken2 = (init) => async (awsIdentityProperties) => {
    init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
    let { roleAssumerWithWebIdentity } = init;
    if (!roleAssumerWithWebIdentity) {
      const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() => __importStar(require_sts()));
      roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({
        ...init.clientConfig,
        credentialProviderLogger: init.logger,
        parentClientConfig: {
          ...awsIdentityProperties?.callerClientConfig,
          ...init.parentClientConfig
        }
      }, init.clientPlugins);
    }
    return roleAssumerWithWebIdentity({
      RoleArn: roleArn,
      RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
      WebIdentityToken: webIdentityToken,
      ProviderId: providerId,
      PolicyArns: policyArns,
      Policy: policy,
      DurationSeconds: durationSeconds
    });
  };
  exports.fromWebToken = fromWebToken2;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-web-identity@3.787.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromTokenFile = undefined;
  var client_1 = require_client();
  var property_provider_1 = require_dist_cjs21();
  var fs_1 = __require("fs");
  var fromWebToken_1 = require_fromWebToken();
  var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
  var ENV_ROLE_ARN = "AWS_ROLE_ARN";
  var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
  var fromTokenFile2 = (init = {}) => async () => {
    init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
    if (!webIdentityTokenFile || !roleArn) {
      throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
        logger: init.logger
      });
    }
    const credentials = await (0, fromWebToken_1.fromWebToken)({
      ...init,
      webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
      roleArn,
      roleSessionName
    })();
    if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
      (0, client_1.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
    }
    return credentials;
  };
  exports.fromTokenFile = fromTokenFile2;
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-web-identity@3.787.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs51 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  module.exports = __toCommonJS(index_exports);
  __reExport(index_exports, require_fromTokenFile(), module.exports);
  __reExport(index_exports, require_fromWebToken(), module.exports);
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-ini@3.787.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs52 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    fromIni: () => fromIni
  });
  module.exports = __toCommonJS(index_exports);
  var import_shared_ini_file_loader = require_dist_cjs31();
  var import_client = require_client();
  var import_property_provider = require_dist_cjs21();
  var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger) => {
    const sourceProvidersMap = {
      EcsContainer: /* @__PURE__ */ __name(async (options) => {
        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs41()));
        const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
        logger?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
        return async () => (0, import_property_provider.chain)(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);
      }, "EcsContainer"),
      Ec2InstanceMetadata: /* @__PURE__ */ __name(async (options) => {
        logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
        const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
        return async () => fromInstanceMetadata(options)().then(setNamedProvider);
      }, "Ec2InstanceMetadata"),
      Environment: /* @__PURE__ */ __name(async (options) => {
        logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
        const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));
        return async () => fromEnv(options)().then(setNamedProvider);
      }, "Environment")
    };
    if (credentialSource in sourceProvidersMap) {
      return sourceProvidersMap[credentialSource];
    } else {
      throw new import_property_provider.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });
    }
  }, "resolveCredentialSource");
  var setNamedProvider = /* @__PURE__ */ __name((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p"), "setNamedProvider");
  var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger } = {}) => {
    return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger }));
  }, "isAssumeRoleProfile");
  var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
    const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    if (withSourceProfile) {
      logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
    }
    return withSourceProfile;
  }, "isAssumeRoleWithSourceProfile");
  var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
    const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    if (withProviderProfile) {
      logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
    }
    return withProviderProfile;
  }, "isCredentialSourceProfile");
  var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
    options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
    const profileData = profiles[profileName];
    const { source_profile, region } = profileData;
    if (!options.roleAssumer) {
      const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM2(require_sts()));
      options.roleAssumer = getDefaultRoleAssumer({
        ...options.clientConfig,
        credentialProviderLogger: options.logger,
        parentClientConfig: {
          ...options?.parentClientConfig,
          region: region ?? options?.parentClientConfig?.region
        }
      }, options.clientPlugins);
    }
    if (source_profile && source_profile in visitedProfiles) {
      throw new import_property_provider.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), { logger: options.logger });
    }
    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);
    const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, profiles, options, {
      ...visitedProfiles,
      [source_profile]: true
    }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})) : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();
    if (isCredentialSourceWithoutRoleArn(profileData)) {
      return sourceCredsProvider.then((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
    } else {
      const params = {
        RoleArn: profileData.role_arn,
        RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: profileData.external_id,
        DurationSeconds: parseInt(profileData.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = profileData;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params).then((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
    }
  }, "resolveAssumeRoleCredentials");
  var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
    return !section.role_arn && !!section.credential_source;
  }, "isCredentialSourceWithoutRoleArn");
  var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
  var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM2(require_dist_cjs50())).then(({ fromProcess }) => fromProcess({
    ...options,
    profile
  })().then((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_PROCESS", "v"))), "resolveProcessCredentials");
  var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
    const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs49()));
    return fromSSO({
      profile,
      logger: options.logger,
      parentClientConfig: options.parentClientConfig,
      clientConfig: options.clientConfig
    })().then((creds) => {
      if (profileData.sso_session) {
        return (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO", "r");
      } else {
        return (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
      }
    });
  }, "resolveSsoCredentials");
  var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
  var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1, "isStaticCredsProfile");
  var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
    options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
    const credentials = {
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token,
      ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
      ...profile.aws_account_id && { accountId: profile.aws_account_id }
    };
    return (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_PROFILE", "n");
  }, "resolveStaticCredentials");
  var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
  var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM2(require_dist_cjs51())).then(({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
    webIdentityTokenFile: profile.web_identity_token_file,
    roleArn: profile.role_arn,
    roleSessionName: profile.role_session_name,
    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
    logger: options.logger,
    parentClientConfig: options.parentClientConfig
  })().then((creds) => (0, import_client.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q"))), "resolveWebIdentityCredentials");
  var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data, options);
    }
    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
      return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
    }
    if (isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data, options);
    }
    if (isWebIdentityProfile(data)) {
      return resolveWebIdentityCredentials(data, options);
    }
    if (isProcessProfile(data)) {
      return resolveProcessCredentials(options, profileName);
    }
    if (isSsoProfile(data)) {
      return await resolveSsoCredentials(profileName, data, options);
    }
    throw new import_property_provider.CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });
  }, "resolveProfileData");
  var fromIni = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
    const init = {
      ..._init,
      parentClientConfig: {
        ...callerClientConfig,
        ..._init.parentClientConfig
      }
    };
    init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    return resolveProfileData((0, import_shared_ini_file_loader.getProfileName)({
      profile: _init.profile ?? callerClientConfig?.profile
    }), profiles, init);
  }, "fromIni");
});

// ../../node_modules/.bun/@aws-sdk+credential-provider-node@3.787.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs53 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
    credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
    defaultProvider: () => defaultProvider
  });
  module.exports = __toCommonJS(index_exports);
  var import_credential_provider_env = require_dist_cjs39();
  var import_shared_ini_file_loader = require_dist_cjs31();
  var import_property_provider = require_dist_cjs21();
  var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
  var remoteProvider = /* @__PURE__ */ __name(async (init) => {
    const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
      init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
      const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs41()));
      return (0, import_property_provider.chain)(fromHttp(init), fromContainerMetadata(init));
    }
    if (process.env[ENV_IMDS_DISABLED] && process.env[ENV_IMDS_DISABLED] !== "false") {
      return async () => {
        throw new import_property_provider.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
      };
    }
    init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
    return fromInstanceMetadata(init);
  }, "remoteProvider");
  var multipleCredentialSourceWarningEmitted = false;
  var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(async () => {
    const profile = init.profile ?? process.env[import_shared_ini_file_loader.ENV_PROFILE];
    if (profile) {
      const envStaticCredentialsAreSet = process.env[import_credential_provider_env.ENV_KEY] && process.env[import_credential_provider_env.ENV_SECRET];
      if (envStaticCredentialsAreSet) {
        if (!multipleCredentialSourceWarningEmitted) {
          const warnFn = init.logger?.warn && init.logger?.constructor?.name !== "NoOpLogger" ? init.logger.warn : console.warn;
          warnFn(`@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`);
          multipleCredentialSourceWarningEmitted = true;
        }
      }
      throw new import_property_provider.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
        logger: init.logger,
        tryNextLink: true
      });
    }
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
    return (0, import_credential_provider_env.fromEnv)(init)();
  }, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
      throw new import_property_provider.CredentialsProviderError("Skipping SSO provider in default chain (inputs do not include SSO fields).", { logger: init.logger });
    }
    const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs49()));
    return fromSSO(init)();
  }, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
    const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs52()));
    return fromIni(init)();
  }, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
    const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs50()));
    return fromProcess(init)();
  }, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
    const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM2(require_dist_cjs51()));
    return fromTokenFile2(init)();
  }, async () => {
    init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
    return (await remoteProvider(init))();
  }, async () => {
    throw new import_property_provider.CredentialsProviderError("Could not load credentials from any providers", {
      tryNextLink: false,
      logger: init.logger
    });
  }), credentialsTreatedAsExpired, credentialsWillNeedRefresh), "defaultProvider");
  var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => credentials?.expiration !== undefined, "credentialsWillNeedRefresh");
  var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => credentials?.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, "credentialsTreatedAsExpired");
});

// ../../node_modules/.bun/@smithy+is-array-buffer@2.2.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs54 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    isArrayBuffer: () => isArrayBuffer
  });
  module.exports = __toCommonJS(src_exports);
  var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
});

// ../../node_modules/.bun/@smithy+util-buffer-from@2.2.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs55 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fromArrayBuffer: () => fromArrayBuffer,
    fromString: () => fromString
  });
  module.exports = __toCommonJS(src_exports);
  var import_is_array_buffer = require_dist_cjs54();
  var import_buffer = __require("buffer");
  var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
    if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
      throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return import_buffer.Buffer.from(input, offset, length);
  }, "fromArrayBuffer");
  var fromString = /* @__PURE__ */ __name((input, encoding) => {
    if (typeof input !== "string") {
      throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
  }, "fromString");
});

// ../../node_modules/.bun/@smithy+util-utf8@2.3.0/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs56 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fromUtf8: () => fromUtf8,
    toUint8Array: () => toUint8Array,
    toUtf8: () => toUtf8
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_buffer_from = require_dist_cjs55();
  var fromUtf8 = /* @__PURE__ */ __name((input) => {
    const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }, "fromUtf8");
  var toUint8Array = /* @__PURE__ */ __name((data) => {
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }, "toUint8Array");
  var toUtf8 = /* @__PURE__ */ __name((input) => {
    if (typeof input === "string") {
      return input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
      throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
    }
    return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
  }, "toUtf8");
});

// ../../node_modules/.bun/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/convertToBuffer.js
var require_convertToBuffer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.convertToBuffer = undefined;
  var util_utf8_1 = require_dist_cjs56();
  var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
  } : util_utf8_1.fromUtf8;
  function convertToBuffer(data) {
    if (data instanceof Uint8Array)
      return data;
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }
  exports.convertToBuffer = convertToBuffer;
});

// ../../node_modules/.bun/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/isEmptyData.js
var require_isEmptyData = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEmptyData = undefined;
  function isEmptyData(data) {
    if (typeof data === "string") {
      return data.length === 0;
    }
    return data.byteLength === 0;
  }
  exports.isEmptyData = isEmptyData;
});

// ../../node_modules/.bun/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/numToUint8.js
var require_numToUint8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.numToUint8 = undefined;
  function numToUint8(num) {
    return new Uint8Array([
      (num & 4278190080) >> 24,
      (num & 16711680) >> 16,
      (num & 65280) >> 8,
      num & 255
    ]);
  }
  exports.numToUint8 = numToUint8;
});

// ../../node_modules/.bun/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.uint32ArrayFrom = undefined;
  function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
      var return_array = new Uint32Array(a_lookUpTable.length);
      var a_index = 0;
      while (a_index < a_lookUpTable.length) {
        return_array[a_index] = a_lookUpTable[a_index];
        a_index += 1;
      }
      return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
  }
  exports.uint32ArrayFrom = uint32ArrayFrom;
});

// ../../node_modules/.bun/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/index.js
var require_main = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = undefined;
  var convertToBuffer_1 = require_convertToBuffer();
  Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
    return convertToBuffer_1.convertToBuffer;
  } });
  var isEmptyData_1 = require_isEmptyData();
  Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
    return isEmptyData_1.isEmptyData;
  } });
  var numToUint8_1 = require_numToUint8();
  Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
    return numToUint8_1.numToUint8;
  } });
  var uint32ArrayFrom_1 = require_uint32ArrayFrom();
  Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
    return uint32ArrayFrom_1.uint32ArrayFrom;
  } });
});

// ../../node_modules/.bun/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/aws_crc32.js
var require_aws_crc32 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32 = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_main();
  var index_1 = require_main2();
  var AwsCrc32 = function() {
    function AwsCrc322() {
      this.crc32 = new index_1.Crc32;
    }
    AwsCrc322.prototype.update = function(toHash) {
      if ((0, util_1.isEmptyData)(toHash))
        return;
      this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc322.prototype.digest = function() {
      return tslib_1.__awaiter(this, undefined, undefined, function() {
        return tslib_1.__generator(this, function(_a) {
          return [2, (0, util_1.numToUint8)(this.crc32.digest())];
        });
      });
    };
    AwsCrc322.prototype.reset = function() {
      this.crc32 = new index_1.Crc32;
    };
    return AwsCrc322;
  }();
  exports.AwsCrc32 = AwsCrc32;
});

// ../../node_modules/.bun/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/index.js
var require_main2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32 = exports.Crc32 = exports.crc32 = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_main();
  function crc32(data) {
    return new Crc32().update(data).digest();
  }
  exports.crc32 = crc32;
  var Crc32 = function() {
    function Crc322() {
      this.checksum = 4294967295;
    }
    Crc322.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next();!data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc322.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc322;
  }();
  exports.Crc32 = Crc32;
  var a_lookUpTable = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918000,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
  var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
  var aws_crc32_1 = require_aws_crc32();
  Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
    return aws_crc32_1.AwsCrc32;
  } });
});

// ../../node_modules/.bun/@smithy+eventstream-codec@4.0.2/node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs57 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    EventStreamCodec: () => EventStreamCodec,
    HeaderMarshaller: () => HeaderMarshaller,
    Int64: () => Int64,
    MessageDecoderStream: () => MessageDecoderStream,
    MessageEncoderStream: () => MessageEncoderStream,
    SmithyMessageDecoderStream: () => SmithyMessageDecoderStream,
    SmithyMessageEncoderStream: () => SmithyMessageEncoderStream
  });
  module.exports = __toCommonJS(src_exports);
  var import_crc322 = require_main2();
  var import_util_hex_encoding = require_dist_cjs16();
  var Int64 = class _Int64 {
    constructor(bytes) {
      this.bytes = bytes;
      if (bytes.byteLength !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
    }
    static {
      __name(this, "Int64");
    }
    static fromNumber(number) {
      if (number > 9223372036854776000 || number < -9223372036854776000) {
        throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
      }
      const bytes = new Uint8Array(8);
      for (let i = 7, remaining = Math.abs(Math.round(number));i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new _Int64(bytes);
    }
    valueOf() {
      const bytes = this.bytes.slice(0);
      const negative = bytes[0] & 128;
      if (negative) {
        negate(bytes);
      }
      return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
      return String(this.valueOf());
    }
  };
  function negate(bytes) {
    for (let i = 0;i < 8; i++) {
      bytes[i] ^= 255;
    }
    for (let i = 7;i > -1; i--) {
      bytes[i]++;
      if (bytes[i] !== 0)
        break;
    }
  }
  __name(negate, "negate");
  var HeaderMarshaller = class {
    constructor(toUtf8, fromUtf8) {
      this.toUtf8 = toUtf8;
      this.fromUtf8 = fromUtf8;
    }
    static {
      __name(this, "HeaderMarshaller");
    }
    format(headers) {
      const chunks = [];
      for (const headerName of Object.keys(headers)) {
        const bytes = this.fromUtf8(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
      const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
      let position = 0;
      for (const chunk of chunks) {
        out.set(chunk, position);
        position += chunk.byteLength;
      }
      return out;
    }
    formatHeaderValue(header) {
      switch (header.type) {
        case "boolean":
          return Uint8Array.from([header.value ? 0 : 1]);
        case "byte":
          return Uint8Array.from([2, header.value]);
        case "short":
          const shortView = new DataView(new ArrayBuffer(3));
          shortView.setUint8(0, 3);
          shortView.setInt16(1, header.value, false);
          return new Uint8Array(shortView.buffer);
        case "integer":
          const intView = new DataView(new ArrayBuffer(5));
          intView.setUint8(0, 4);
          intView.setInt32(1, header.value, false);
          return new Uint8Array(intView.buffer);
        case "long":
          const longBytes = new Uint8Array(9);
          longBytes[0] = 5;
          longBytes.set(header.value.bytes, 1);
          return longBytes;
        case "binary":
          const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
          binView.setUint8(0, 6);
          binView.setUint16(1, header.value.byteLength, false);
          const binBytes = new Uint8Array(binView.buffer);
          binBytes.set(header.value, 3);
          return binBytes;
        case "string":
          const utf8Bytes = this.fromUtf8(header.value);
          const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
          strView.setUint8(0, 7);
          strView.setUint16(1, utf8Bytes.byteLength, false);
          const strBytes = new Uint8Array(strView.buffer);
          strBytes.set(utf8Bytes, 3);
          return strBytes;
        case "timestamp":
          const tsBytes = new Uint8Array(9);
          tsBytes[0] = 8;
          tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
          return tsBytes;
        case "uuid":
          if (!UUID_PATTERN.test(header.value)) {
            throw new Error(`Invalid UUID received: ${header.value}`);
          }
          const uuidBytes = new Uint8Array(17);
          uuidBytes[0] = 9;
          uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
          return uuidBytes;
      }
    }
    parse(headers) {
      const out = {};
      let position = 0;
      while (position < headers.byteLength) {
        const nameLength = headers.getUint8(position++);
        const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
        position += nameLength;
        switch (headers.getUint8(position++)) {
          case 0:
            out[name] = {
              type: BOOLEAN_TAG,
              value: true
            };
            break;
          case 1:
            out[name] = {
              type: BOOLEAN_TAG,
              value: false
            };
            break;
          case 2:
            out[name] = {
              type: BYTE_TAG,
              value: headers.getInt8(position++)
            };
            break;
          case 3:
            out[name] = {
              type: SHORT_TAG,
              value: headers.getInt16(position, false)
            };
            position += 2;
            break;
          case 4:
            out[name] = {
              type: INT_TAG,
              value: headers.getInt32(position, false)
            };
            position += 4;
            break;
          case 5:
            out[name] = {
              type: LONG_TAG,
              value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
            };
            position += 8;
            break;
          case 6:
            const binaryLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: BINARY_TAG,
              value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
            };
            position += binaryLength;
            break;
          case 7:
            const stringLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: STRING_TAG,
              value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
            };
            position += stringLength;
            break;
          case 8:
            out[name] = {
              type: TIMESTAMP_TAG,
              value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
            };
            position += 8;
            break;
          case 9:
            const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
            position += 16;
            out[name] = {
              type: UUID_TAG,
              value: `${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(0, 4))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(6, 8))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(8, 10))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(10))}`
            };
            break;
          default:
            throw new Error(`Unrecognized header type tag`);
        }
      }
      return out;
    }
  };
  var BOOLEAN_TAG = "boolean";
  var BYTE_TAG = "byte";
  var SHORT_TAG = "short";
  var INT_TAG = "integer";
  var LONG_TAG = "long";
  var BINARY_TAG = "binary";
  var STRING_TAG = "string";
  var TIMESTAMP_TAG = "timestamp";
  var UUID_TAG = "uuid";
  var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  var import_crc32 = require_main2();
  var PRELUDE_MEMBER_LENGTH = 4;
  var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
  var CHECKSUM_LENGTH = 4;
  var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  function splitMessage({ byteLength, byteOffset, buffer }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
      throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
      throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
      throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
      throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
      headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
      body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
  }
  __name(splitMessage, "splitMessage");
  var EventStreamCodec = class {
    static {
      __name(this, "EventStreamCodec");
    }
    constructor(toUtf8, fromUtf8) {
      this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
      this.messageBuffer = [];
      this.isEndOfStream = false;
    }
    feed(message) {
      this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
      this.isEndOfStream = true;
    }
    getMessage() {
      const message = this.messageBuffer.pop();
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessage() {
          return message;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    getAvailableMessages() {
      const messages = this.messageBuffer;
      this.messageBuffer = [];
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessages() {
          return messages;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    encode({ headers: rawHeaders, body }) {
      const headers = this.headerMarshaller.format(rawHeaders);
      const length = headers.byteLength + body.byteLength + 16;
      const out = new Uint8Array(length);
      const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      const checksum = new import_crc322.Crc32;
      view.setUint32(0, length, false);
      view.setUint32(4, headers.byteLength, false);
      view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
      out.set(headers, 12);
      out.set(body, headers.byteLength + 12);
      view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
      return out;
    }
    decode(message) {
      const { headers, body } = splitMessage(message);
      return { headers: this.headerMarshaller.parse(headers), body };
    }
    formatHeaders(rawHeaders) {
      return this.headerMarshaller.format(rawHeaders);
    }
  };
  var MessageDecoderStream = class {
    constructor(options) {
      this.options = options;
    }
    static {
      __name(this, "MessageDecoderStream");
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const bytes of this.options.inputStream) {
        const decoded = this.options.decoder.decode(bytes);
        yield decoded;
      }
    }
  };
  var MessageEncoderStream = class {
    constructor(options) {
      this.options = options;
    }
    static {
      __name(this, "MessageEncoderStream");
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const msg of this.options.messageStream) {
        const encoded = this.options.encoder.encode(msg);
        yield encoded;
      }
      if (this.options.includeEndFrame) {
        yield new Uint8Array(0);
      }
    }
  };
  var SmithyMessageDecoderStream = class {
    constructor(options) {
      this.options = options;
    }
    static {
      __name(this, "SmithyMessageDecoderStream");
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const message of this.options.messageStream) {
        const deserialized = await this.options.deserializer(message);
        if (deserialized === undefined)
          continue;
        yield deserialized;
      }
    }
  };
  var SmithyMessageEncoderStream = class {
    constructor(options) {
      this.options = options;
    }
    static {
      __name(this, "SmithyMessageEncoderStream");
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const chunk of this.options.inputStream) {
        const payloadBuf = this.options.serializer(chunk);
        yield payloadBuf;
      }
    }
  };
});

// ../../node_modules/.bun/@smithy+eventstream-serde-universal@4.0.2/node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js
var require_dist_cjs58 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    EventStreamMarshaller: () => EventStreamMarshaller,
    eventStreamSerdeProvider: () => eventStreamSerdeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_eventstream_codec = require_dist_cjs57();
  function getChunkedStream(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = /* @__PURE__ */ __name((size) => {
      if (typeof size !== "number") {
        throw new Error("Attempted to allocate an event message where size was not a number: " + size);
      }
      currentMessageTotalLength = size;
      currentMessagePendingLength = 4;
      currentMessage = new Uint8Array(size);
      const currentMessageView = new DataView(currentMessage.buffer);
      currentMessageView.setUint32(0, size, false);
    }, "allocateMessage");
    const iterator = /* @__PURE__ */ __name(async function* () {
      const sourceIterator = source[Symbol.asyncIterator]();
      while (true) {
        const { value, done } = await sourceIterator.next();
        if (done) {
          if (!currentMessageTotalLength) {
            return;
          } else if (currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
          } else {
            throw new Error("Truncated event message received.");
          }
          return;
        }
        const chunkLength = value.length;
        let currentOffset = 0;
        while (currentOffset < chunkLength) {
          if (!currentMessage) {
            const bytesRemaining = chunkLength - currentOffset;
            if (!messageLengthBuffer) {
              messageLengthBuffer = new Uint8Array(4);
            }
            const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
            currentMessagePendingLength += numBytesForTotal;
            currentOffset += numBytesForTotal;
            if (currentMessagePendingLength < 4) {
              break;
            }
            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
            messageLengthBuffer = null;
          }
          const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
          currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
          currentMessagePendingLength += numBytesToWrite;
          currentOffset += numBytesToWrite;
          if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
          }
        }
      }
    }, "iterator");
    return {
      [Symbol.asyncIterator]: iterator
    };
  }
  __name(getChunkedStream, "getChunkedStream");
  function getMessageUnmarshaller(deserializer, toUtf8) {
    return async function(message) {
      const { value: messageType } = message.headers[":message-type"];
      if (messageType === "error") {
        const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
        unmodeledError.name = message.headers[":error-code"].value;
        throw unmodeledError;
      } else if (messageType === "exception") {
        const code = message.headers[":exception-type"].value;
        const exception = { [code]: message };
        const deserializedException = await deserializer(exception);
        if (deserializedException.$unknown) {
          const error = new Error(toUtf8(message.body));
          error.name = code;
          throw error;
        }
        throw deserializedException[code];
      } else if (messageType === "event") {
        const event = {
          [message.headers[":event-type"].value]: message
        };
        const deserialized = await deserializer(event);
        if (deserialized.$unknown)
          return;
        return deserialized;
      } else {
        throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
      }
    };
  }
  __name(getMessageUnmarshaller, "getMessageUnmarshaller");
  var EventStreamMarshaller = class {
    static {
      __name(this, "EventStreamMarshaller");
    }
    constructor({ utf8Encoder, utf8Decoder }) {
      this.eventStreamCodec = new import_eventstream_codec.EventStreamCodec(utf8Encoder, utf8Decoder);
      this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
      const inputStream = getChunkedStream(body);
      return new import_eventstream_codec.SmithyMessageDecoderStream({
        messageStream: new import_eventstream_codec.MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
        deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
      });
    }
    serialize(inputStream, serializer) {
      return new import_eventstream_codec.MessageEncoderStream({
        messageStream: new import_eventstream_codec.SmithyMessageEncoderStream({ inputStream, serializer }),
        encoder: this.eventStreamCodec,
        includeEndFrame: true
      });
    }
  };
  var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
});

// ../../node_modules/.bun/@smithy+eventstream-serde-node@4.0.2/node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js
var require_dist_cjs59 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    EventStreamMarshaller: () => EventStreamMarshaller,
    eventStreamSerdeProvider: () => eventStreamSerdeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_eventstream_serde_universal = require_dist_cjs58();
  var import_stream = __require("stream");
  async function* readabletoIterable(readStream) {
    let streamEnded = false;
    let generationEnded = false;
    const records = new Array;
    readStream.on("error", (err) => {
      if (!streamEnded) {
        streamEnded = true;
      }
      if (err) {
        throw err;
      }
    });
    readStream.on("data", (data) => {
      records.push(data);
    });
    readStream.on("end", () => {
      streamEnded = true;
    });
    while (!generationEnded) {
      const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
      if (value) {
        yield value;
      }
      generationEnded = streamEnded && records.length === 0;
    }
  }
  __name(readabletoIterable, "readabletoIterable");
  var EventStreamMarshaller = class {
    static {
      __name(this, "EventStreamMarshaller");
    }
    constructor({ utf8Encoder, utf8Decoder }) {
      this.universalMarshaller = new import_eventstream_serde_universal.EventStreamMarshaller({
        utf8Decoder,
        utf8Encoder
      });
    }
    deserialize(body, deserializer) {
      const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
      return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
      return import_stream.Readable.from(this.universalMarshaller.serialize(input, serializer));
    }
  };
  var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var u = "required";
  var v = "fn";
  var w = "argv";
  var x = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "stringEquals";
  var i = { [u]: false, type: "String" };
  var j = { [u]: true, default: false, type: "Boolean" };
  var k = { [x]: "Endpoint" };
  var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
  var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
  var n = {};
  var o = { [x]: "Region" };
  var p = { [v]: "getAttr", [w]: [{ [x]: g }, "supportsFIPS"] };
  var q = { [v]: c, [w]: [true, { [v]: "getAttr", [w]: [{ [x]: g }, "supportsDualStack"] }] };
  var r = [l];
  var s = [m];
  var t = [o];
  var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, p] }, q], rules: [{ endpoint: { url: "https://logs-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [p, a] }], rules: [{ conditions: [{ [v]: h, [w]: [o, "us-gov-east-1"] }], endpoint: { url: "https://logs.us-gov-east-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [v]: h, [w]: [o, "us-gov-west-1"] }], endpoint: { url: "https://logs.us-gov-west-1.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://logs-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://logs.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://logs.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset4();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
  var endpointResolver_1 = require_endpointResolver4();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2014-03-28",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultCloudWatchLogsHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "CloudWatch Logs",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var eventstream_serde_node_1 = require_dist_cjs59();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-cloudwatch-logs@3.787.0/node_modules/@aws-sdk/client-cloudwatch-logs/dist-cjs/index.js
var require_dist_cjs60 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AccessDeniedException: () => AccessDeniedException,
    AnomalyDetectorStatus: () => AnomalyDetectorStatus,
    AssociateKmsKeyCommand: () => AssociateKmsKeyCommand,
    CancelExportTaskCommand: () => CancelExportTaskCommand,
    CloudWatchLogs: () => CloudWatchLogs,
    CloudWatchLogsClient: () => CloudWatchLogsClient,
    CloudWatchLogsServiceException: () => CloudWatchLogsServiceException,
    ConflictException: () => ConflictException,
    CreateDeliveryCommand: () => CreateDeliveryCommand,
    CreateExportTaskCommand: () => CreateExportTaskCommand,
    CreateLogAnomalyDetectorCommand: () => CreateLogAnomalyDetectorCommand,
    CreateLogGroupCommand: () => CreateLogGroupCommand,
    CreateLogStreamCommand: () => CreateLogStreamCommand,
    DataAlreadyAcceptedException: () => DataAlreadyAcceptedException,
    DataProtectionStatus: () => DataProtectionStatus,
    DeleteAccountPolicyCommand: () => DeleteAccountPolicyCommand,
    DeleteDataProtectionPolicyCommand: () => DeleteDataProtectionPolicyCommand,
    DeleteDeliveryCommand: () => DeleteDeliveryCommand,
    DeleteDeliveryDestinationCommand: () => DeleteDeliveryDestinationCommand,
    DeleteDeliveryDestinationPolicyCommand: () => DeleteDeliveryDestinationPolicyCommand,
    DeleteDeliverySourceCommand: () => DeleteDeliverySourceCommand,
    DeleteDestinationCommand: () => DeleteDestinationCommand,
    DeleteIndexPolicyCommand: () => DeleteIndexPolicyCommand,
    DeleteIntegrationCommand: () => DeleteIntegrationCommand,
    DeleteLogAnomalyDetectorCommand: () => DeleteLogAnomalyDetectorCommand,
    DeleteLogGroupCommand: () => DeleteLogGroupCommand,
    DeleteLogStreamCommand: () => DeleteLogStreamCommand,
    DeleteMetricFilterCommand: () => DeleteMetricFilterCommand,
    DeleteQueryDefinitionCommand: () => DeleteQueryDefinitionCommand,
    DeleteResourcePolicyCommand: () => DeleteResourcePolicyCommand,
    DeleteRetentionPolicyCommand: () => DeleteRetentionPolicyCommand,
    DeleteSubscriptionFilterCommand: () => DeleteSubscriptionFilterCommand,
    DeleteTransformerCommand: () => DeleteTransformerCommand,
    DeliveryDestinationType: () => DeliveryDestinationType,
    DescribeAccountPoliciesCommand: () => DescribeAccountPoliciesCommand,
    DescribeConfigurationTemplatesCommand: () => DescribeConfigurationTemplatesCommand,
    DescribeDeliveriesCommand: () => DescribeDeliveriesCommand,
    DescribeDeliveryDestinationsCommand: () => DescribeDeliveryDestinationsCommand,
    DescribeDeliverySourcesCommand: () => DescribeDeliverySourcesCommand,
    DescribeDestinationsCommand: () => DescribeDestinationsCommand,
    DescribeExportTasksCommand: () => DescribeExportTasksCommand,
    DescribeFieldIndexesCommand: () => DescribeFieldIndexesCommand,
    DescribeIndexPoliciesCommand: () => DescribeIndexPoliciesCommand,
    DescribeLogGroupsCommand: () => DescribeLogGroupsCommand,
    DescribeLogStreamsCommand: () => DescribeLogStreamsCommand,
    DescribeMetricFiltersCommand: () => DescribeMetricFiltersCommand,
    DescribeQueriesCommand: () => DescribeQueriesCommand,
    DescribeQueryDefinitionsCommand: () => DescribeQueryDefinitionsCommand,
    DescribeResourcePoliciesCommand: () => DescribeResourcePoliciesCommand,
    DescribeSubscriptionFiltersCommand: () => DescribeSubscriptionFiltersCommand,
    DisassociateKmsKeyCommand: () => DisassociateKmsKeyCommand,
    Distribution: () => Distribution,
    EntityRejectionErrorType: () => EntityRejectionErrorType,
    EvaluationFrequency: () => EvaluationFrequency,
    ExportTaskStatusCode: () => ExportTaskStatusCode,
    FilterLogEventsCommand: () => FilterLogEventsCommand,
    FlattenedElement: () => FlattenedElement,
    GetDataProtectionPolicyCommand: () => GetDataProtectionPolicyCommand,
    GetDeliveryCommand: () => GetDeliveryCommand,
    GetDeliveryDestinationCommand: () => GetDeliveryDestinationCommand,
    GetDeliveryDestinationPolicyCommand: () => GetDeliveryDestinationPolicyCommand,
    GetDeliverySourceCommand: () => GetDeliverySourceCommand,
    GetIntegrationCommand: () => GetIntegrationCommand,
    GetLogAnomalyDetectorCommand: () => GetLogAnomalyDetectorCommand,
    GetLogEventsCommand: () => GetLogEventsCommand,
    GetLogGroupFieldsCommand: () => GetLogGroupFieldsCommand,
    GetLogRecordCommand: () => GetLogRecordCommand,
    GetQueryResultsCommand: () => GetQueryResultsCommand,
    GetTransformerCommand: () => GetTransformerCommand,
    IndexSource: () => IndexSource,
    InheritedProperty: () => InheritedProperty,
    IntegrationDetails: () => IntegrationDetails,
    IntegrationStatus: () => IntegrationStatus,
    IntegrationType: () => IntegrationType,
    InvalidOperationException: () => InvalidOperationException,
    InvalidParameterException: () => InvalidParameterException,
    InvalidSequenceTokenException: () => InvalidSequenceTokenException,
    LimitExceededException: () => LimitExceededException,
    ListAnomaliesCommand: () => ListAnomaliesCommand,
    ListIntegrationsCommand: () => ListIntegrationsCommand,
    ListLogAnomalyDetectorsCommand: () => ListLogAnomalyDetectorsCommand,
    ListLogGroupsForQueryCommand: () => ListLogGroupsForQueryCommand,
    ListTagsForResourceCommand: () => ListTagsForResourceCommand,
    ListTagsLogGroupCommand: () => ListTagsLogGroupCommand,
    LogGroupClass: () => LogGroupClass,
    MalformedQueryException: () => MalformedQueryException,
    OpenSearchResourceStatusType: () => OpenSearchResourceStatusType,
    OperationAbortedException: () => OperationAbortedException,
    OrderBy: () => OrderBy,
    OutputFormat: () => OutputFormat,
    PolicyType: () => PolicyType,
    PutAccountPolicyCommand: () => PutAccountPolicyCommand,
    PutDataProtectionPolicyCommand: () => PutDataProtectionPolicyCommand,
    PutDeliveryDestinationCommand: () => PutDeliveryDestinationCommand,
    PutDeliveryDestinationPolicyCommand: () => PutDeliveryDestinationPolicyCommand,
    PutDeliverySourceCommand: () => PutDeliverySourceCommand,
    PutDestinationCommand: () => PutDestinationCommand,
    PutDestinationPolicyCommand: () => PutDestinationPolicyCommand,
    PutIndexPolicyCommand: () => PutIndexPolicyCommand,
    PutIntegrationCommand: () => PutIntegrationCommand,
    PutLogEventsCommand: () => PutLogEventsCommand,
    PutMetricFilterCommand: () => PutMetricFilterCommand,
    PutQueryDefinitionCommand: () => PutQueryDefinitionCommand,
    PutResourcePolicyCommand: () => PutResourcePolicyCommand,
    PutRetentionPolicyCommand: () => PutRetentionPolicyCommand,
    PutSubscriptionFilterCommand: () => PutSubscriptionFilterCommand,
    PutTransformerCommand: () => PutTransformerCommand,
    QueryLanguage: () => QueryLanguage,
    QueryStatus: () => QueryStatus,
    ResourceAlreadyExistsException: () => ResourceAlreadyExistsException,
    ResourceConfig: () => ResourceConfig,
    ResourceNotFoundException: () => ResourceNotFoundException,
    Scope: () => Scope,
    ServiceQuotaExceededException: () => ServiceQuotaExceededException,
    ServiceUnavailableException: () => ServiceUnavailableException,
    SessionStreamingException: () => SessionStreamingException,
    SessionTimeoutException: () => SessionTimeoutException,
    StandardUnit: () => StandardUnit,
    StartLiveTailCommand: () => StartLiveTailCommand,
    StartLiveTailResponseFilterSensitiveLog: () => StartLiveTailResponseFilterSensitiveLog,
    StartLiveTailResponseStream: () => StartLiveTailResponseStream,
    StartLiveTailResponseStreamFilterSensitiveLog: () => StartLiveTailResponseStreamFilterSensitiveLog,
    StartQueryCommand: () => StartQueryCommand,
    State: () => State,
    StopQueryCommand: () => StopQueryCommand,
    SuppressionState: () => SuppressionState,
    SuppressionType: () => SuppressionType,
    SuppressionUnit: () => SuppressionUnit,
    TagLogGroupCommand: () => TagLogGroupCommand,
    TagResourceCommand: () => TagResourceCommand,
    TestMetricFilterCommand: () => TestMetricFilterCommand,
    TestTransformerCommand: () => TestTransformerCommand,
    ThrottlingException: () => ThrottlingException,
    TooManyTagsException: () => TooManyTagsException,
    Type: () => Type,
    UnrecognizedClientException: () => UnrecognizedClientException,
    UntagLogGroupCommand: () => UntagLogGroupCommand,
    UntagResourceCommand: () => UntagResourceCommand,
    UpdateAnomalyCommand: () => UpdateAnomalyCommand,
    UpdateDeliveryConfigurationCommand: () => UpdateDeliveryConfigurationCommand,
    UpdateLogAnomalyDetectorCommand: () => UpdateLogAnomalyDetectorCommand,
    ValidationException: () => ValidationException,
    __Client: () => import_smithy_client.Client,
    paginateDescribeConfigurationTemplates: () => paginateDescribeConfigurationTemplates,
    paginateDescribeDeliveries: () => paginateDescribeDeliveries,
    paginateDescribeDeliveryDestinations: () => paginateDescribeDeliveryDestinations,
    paginateDescribeDeliverySources: () => paginateDescribeDeliverySources,
    paginateDescribeDestinations: () => paginateDescribeDestinations,
    paginateDescribeLogGroups: () => paginateDescribeLogGroups,
    paginateDescribeLogStreams: () => paginateDescribeLogStreams,
    paginateDescribeMetricFilters: () => paginateDescribeMetricFilters,
    paginateDescribeSubscriptionFilters: () => paginateDescribeSubscriptionFilters,
    paginateFilterLogEvents: () => paginateFilterLogEvents,
    paginateGetLogEvents: () => paginateGetLogEvents,
    paginateListAnomalies: () => paginateListAnomalies,
    paginateListLogAnomalyDetectors: () => paginateListLogAnomalyDetectors,
    paginateListLogGroupsForQuery: () => paginateListLogGroupsForQuery
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_eventstream_serde_config_resolver = require_dist_cjs29();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "logs"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig4();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var CloudWatchLogsClient = class extends import_smithy_client.Client {
    static {
      __name(this, "CloudWatchLogsClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
      const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
      const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
      this.config = _config_9;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultCloudWatchLogsHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_serde = require_dist_cjs7();
  var import_core2 = require_dist_cjs25();
  var import_uuid = require_dist();
  var CloudWatchLogsServiceException = class _CloudWatchLogsServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "CloudWatchLogsServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _CloudWatchLogsServiceException.prototype);
    }
  };
  var AccessDeniedException = class _AccessDeniedException extends CloudWatchLogsServiceException {
    static {
      __name(this, "AccessDeniedException");
    }
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "AccessDeniedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    }
  };
  var PolicyType = {
    DATA_PROTECTION_POLICY: "DATA_PROTECTION_POLICY",
    FIELD_INDEX_POLICY: "FIELD_INDEX_POLICY",
    SUBSCRIPTION_FILTER_POLICY: "SUBSCRIPTION_FILTER_POLICY",
    TRANSFORMER_POLICY: "TRANSFORMER_POLICY"
  };
  var Scope = {
    ALL: "ALL"
  };
  var State = {
    Active: "Active",
    Baseline: "Baseline",
    Suppressed: "Suppressed"
  };
  var AnomalyDetectorStatus = {
    ANALYZING: "ANALYZING",
    DELETED: "DELETED",
    FAILED: "FAILED",
    INITIALIZING: "INITIALIZING",
    PAUSED: "PAUSED",
    TRAINING: "TRAINING"
  };
  var EvaluationFrequency = {
    FIFTEEN_MIN: "FIFTEEN_MIN",
    FIVE_MIN: "FIVE_MIN",
    ONE_HOUR: "ONE_HOUR",
    ONE_MIN: "ONE_MIN",
    TEN_MIN: "TEN_MIN",
    THIRTY_MIN: "THIRTY_MIN"
  };
  var InvalidParameterException = class _InvalidParameterException extends CloudWatchLogsServiceException {
    static {
      __name(this, "InvalidParameterException");
    }
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidParameterException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidParameterException.prototype);
    }
  };
  var OperationAbortedException = class _OperationAbortedException extends CloudWatchLogsServiceException {
    static {
      __name(this, "OperationAbortedException");
    }
    name = "OperationAbortedException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "OperationAbortedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _OperationAbortedException.prototype);
    }
  };
  var ResourceNotFoundException = class _ResourceNotFoundException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ResourceNotFoundException");
    }
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ResourceNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    }
  };
  var ServiceUnavailableException = class _ServiceUnavailableException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ServiceUnavailableException");
    }
    name = "ServiceUnavailableException";
    $fault = "server";
    constructor(opts) {
      super({
        name: "ServiceUnavailableException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
    }
  };
  var InvalidOperationException = class _InvalidOperationException extends CloudWatchLogsServiceException {
    static {
      __name(this, "InvalidOperationException");
    }
    name = "InvalidOperationException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidOperationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidOperationException.prototype);
    }
  };
  var OutputFormat = {
    JSON: "json",
    PARQUET: "parquet",
    PLAIN: "plain",
    RAW: "raw",
    W3C: "w3c"
  };
  var DeliveryDestinationType = {
    CWL: "CWL",
    FH: "FH",
    S3: "S3"
  };
  var ConflictException = class _ConflictException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ConflictException");
    }
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ConflictException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ConflictException.prototype);
    }
  };
  var ServiceQuotaExceededException = class _ServiceQuotaExceededException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ServiceQuotaExceededException");
    }
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ServiceQuotaExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
    }
  };
  var ThrottlingException = class _ThrottlingException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ThrottlingException");
    }
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ThrottlingException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ThrottlingException.prototype);
    }
  };
  var ValidationException = class _ValidationException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ValidationException");
    }
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ValidationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ValidationException.prototype);
    }
  };
  var LimitExceededException = class _LimitExceededException extends CloudWatchLogsServiceException {
    static {
      __name(this, "LimitExceededException");
    }
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "LimitExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _LimitExceededException.prototype);
    }
  };
  var ResourceAlreadyExistsException = class _ResourceAlreadyExistsException extends CloudWatchLogsServiceException {
    static {
      __name(this, "ResourceAlreadyExistsException");
    }
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ResourceAlreadyExistsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceAlreadyExistsException.prototype);
    }
  };
  var LogGroupClass = {
    INFREQUENT_ACCESS: "INFREQUENT_ACCESS",
    STANDARD: "STANDARD"
  };
  var DataAlreadyAcceptedException = class _DataAlreadyAcceptedException extends CloudWatchLogsServiceException {
    static {
      __name(this, "DataAlreadyAcceptedException");
    }
    name = "DataAlreadyAcceptedException";
    $fault = "client";
    expectedSequenceToken;
    constructor(opts) {
      super({
        name: "DataAlreadyAcceptedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _DataAlreadyAcceptedException.prototype);
      this.expectedSequenceToken = opts.expectedSequenceToken;
    }
  };
  var DataProtectionStatus = {
    ACTIVATED: "ACTIVATED",
    ARCHIVED: "ARCHIVED",
    DELETED: "DELETED",
    DISABLED: "DISABLED"
  };
  var ExportTaskStatusCode = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PENDING_CANCEL: "PENDING_CANCEL",
    RUNNING: "RUNNING"
  };
  var IndexSource = {
    ACCOUNT: "ACCOUNT",
    LOG_GROUP: "LOG_GROUP"
  };
  var InheritedProperty = {
    ACCOUNT_DATA_PROTECTION: "ACCOUNT_DATA_PROTECTION"
  };
  var OrderBy = {
    LastEventTime: "LastEventTime",
    LogStreamName: "LogStreamName"
  };
  var StandardUnit = {
    Bits: "Bits",
    BitsSecond: "Bits/Second",
    Bytes: "Bytes",
    BytesSecond: "Bytes/Second",
    Count: "Count",
    CountSecond: "Count/Second",
    Gigabits: "Gigabits",
    GigabitsSecond: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    GigabytesSecond: "Gigabytes/Second",
    Kilobits: "Kilobits",
    KilobitsSecond: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    KilobytesSecond: "Kilobytes/Second",
    Megabits: "Megabits",
    MegabitsSecond: "Megabits/Second",
    Megabytes: "Megabytes",
    MegabytesSecond: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    TerabitsSecond: "Terabits/Second",
    Terabytes: "Terabytes",
    TerabytesSecond: "Terabytes/Second"
  };
  var QueryLanguage = {
    CWLI: "CWLI",
    PPL: "PPL",
    SQL: "SQL"
  };
  var QueryStatus = {
    Cancelled: "Cancelled",
    Complete: "Complete",
    Failed: "Failed",
    Running: "Running",
    Scheduled: "Scheduled",
    Timeout: "Timeout",
    Unknown: "Unknown"
  };
  var Distribution = {
    ByLogStream: "ByLogStream",
    Random: "Random"
  };
  var EntityRejectionErrorType = {
    ENTITY_SIZE_TOO_LARGE: "EntitySizeTooLarge",
    INVALID_ATTRIBUTES: "InvalidAttributes",
    INVALID_ENTITY: "InvalidEntity",
    INVALID_KEY_ATTRIBUTE: "InvalidKeyAttributes",
    INVALID_TYPE_VALUE: "InvalidTypeValue",
    MISSING_REQUIRED_FIELDS: "MissingRequiredFields",
    UNSUPPORTED_LOG_GROUP_TYPE: "UnsupportedLogGroupType"
  };
  var FlattenedElement = {
    FIRST: "first",
    LAST: "last"
  };
  var OpenSearchResourceStatusType = {
    ACTIVE: "ACTIVE",
    ERROR: "ERROR",
    NOT_FOUND: "NOT_FOUND"
  };
  var IntegrationDetails;
  ((IntegrationDetails2) => {
    IntegrationDetails2.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.openSearchIntegrationDetails !== undefined)
        return visitor.openSearchIntegrationDetails(value.openSearchIntegrationDetails);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(IntegrationDetails || (IntegrationDetails = {}));
  var IntegrationStatus = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    PROVISIONING: "PROVISIONING"
  };
  var IntegrationType = {
    OPENSEARCH: "OPENSEARCH"
  };
  var Type = {
    BOOLEAN: "boolean",
    DOUBLE: "double",
    INTEGER: "integer",
    STRING: "string"
  };
  var InvalidSequenceTokenException = class _InvalidSequenceTokenException extends CloudWatchLogsServiceException {
    static {
      __name(this, "InvalidSequenceTokenException");
    }
    name = "InvalidSequenceTokenException";
    $fault = "client";
    expectedSequenceToken;
    constructor(opts) {
      super({
        name: "InvalidSequenceTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidSequenceTokenException.prototype);
      this.expectedSequenceToken = opts.expectedSequenceToken;
    }
  };
  var SuppressionState = {
    SUPPRESSED: "SUPPRESSED",
    UNSUPPRESSED: "UNSUPPRESSED"
  };
  var ResourceConfig;
  ((ResourceConfig3) => {
    ResourceConfig3.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.openSearchResourceConfig !== undefined)
        return visitor.openSearchResourceConfig(value.openSearchResourceConfig);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(ResourceConfig || (ResourceConfig = {}));
  var UnrecognizedClientException = class _UnrecognizedClientException extends CloudWatchLogsServiceException {
    static {
      __name(this, "UnrecognizedClientException");
    }
    name = "UnrecognizedClientException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "UnrecognizedClientException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnrecognizedClientException.prototype);
    }
  };
  var SessionStreamingException = class _SessionStreamingException extends CloudWatchLogsServiceException {
    static {
      __name(this, "SessionStreamingException");
    }
    name = "SessionStreamingException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "SessionStreamingException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SessionStreamingException.prototype);
    }
  };
  var SessionTimeoutException = class _SessionTimeoutException extends CloudWatchLogsServiceException {
    static {
      __name(this, "SessionTimeoutException");
    }
    name = "SessionTimeoutException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "SessionTimeoutException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SessionTimeoutException.prototype);
    }
  };
  var StartLiveTailResponseStream;
  ((StartLiveTailResponseStream3) => {
    StartLiveTailResponseStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.sessionStart !== undefined)
        return visitor.sessionStart(value.sessionStart);
      if (value.sessionUpdate !== undefined)
        return visitor.sessionUpdate(value.sessionUpdate);
      if (value.SessionTimeoutException !== undefined)
        return visitor.SessionTimeoutException(value.SessionTimeoutException);
      if (value.SessionStreamingException !== undefined)
        return visitor.SessionStreamingException(value.SessionStreamingException);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(StartLiveTailResponseStream || (StartLiveTailResponseStream = {}));
  var MalformedQueryException = class _MalformedQueryException extends CloudWatchLogsServiceException {
    static {
      __name(this, "MalformedQueryException");
    }
    name = "MalformedQueryException";
    $fault = "client";
    queryCompileError;
    constructor(opts) {
      super({
        name: "MalformedQueryException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _MalformedQueryException.prototype);
      this.queryCompileError = opts.queryCompileError;
    }
  };
  var TooManyTagsException = class _TooManyTagsException extends CloudWatchLogsServiceException {
    static {
      __name(this, "TooManyTagsException");
    }
    name = "TooManyTagsException";
    $fault = "client";
    resourceName;
    constructor(opts) {
      super({
        name: "TooManyTagsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyTagsException.prototype);
      this.resourceName = opts.resourceName;
    }
  };
  var SuppressionUnit = {
    HOURS: "HOURS",
    MINUTES: "MINUTES",
    SECONDS: "SECONDS"
  };
  var SuppressionType = {
    INFINITE: "INFINITE",
    LIMITED: "LIMITED"
  };
  var StartLiveTailResponseStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
    if (obj.sessionStart !== undefined)
      return { sessionStart: obj.sessionStart };
    if (obj.sessionUpdate !== undefined)
      return { sessionUpdate: obj.sessionUpdate };
    if (obj.SessionTimeoutException !== undefined)
      return { SessionTimeoutException: obj.SessionTimeoutException };
    if (obj.SessionStreamingException !== undefined)
      return { SessionStreamingException: obj.SessionStreamingException };
    if (obj.$unknown !== undefined)
      return { [obj.$unknown[0]]: "UNKNOWN" };
  }, "StartLiveTailResponseStreamFilterSensitiveLog");
  var StartLiveTailResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.responseStream && { responseStream: "STREAMING_CONTENT" }
  }), "StartLiveTailResponseFilterSensitiveLog");
  var se_AssociateKmsKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("AssociateKmsKey");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssociateKmsKeyCommand");
  var se_CancelExportTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CancelExportTask");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CancelExportTaskCommand");
  var se_CreateDeliveryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CreateDelivery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateDeliveryCommand");
  var se_CreateExportTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CreateExportTask");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateExportTaskCommand");
  var se_CreateLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CreateLogAnomalyDetector");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateLogAnomalyDetectorCommand");
  var se_CreateLogGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CreateLogGroup");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateLogGroupCommand");
  var se_CreateLogStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("CreateLogStream");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateLogStreamCommand");
  var se_DeleteAccountPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteAccountPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteAccountPolicyCommand");
  var se_DeleteDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDataProtectionPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDataProtectionPolicyCommand");
  var se_DeleteDeliveryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDelivery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDeliveryCommand");
  var se_DeleteDeliveryDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryDestination");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDeliveryDestinationCommand");
  var se_DeleteDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDeliveryDestinationPolicyCommand");
  var se_DeleteDeliverySourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDeliverySource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDeliverySourceCommand");
  var se_DeleteDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteDestination");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteDestinationCommand");
  var se_DeleteIndexPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteIndexPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteIndexPolicyCommand");
  var se_DeleteIntegrationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteIntegration");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteIntegrationCommand");
  var se_DeleteLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteLogAnomalyDetector");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteLogAnomalyDetectorCommand");
  var se_DeleteLogGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteLogGroup");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteLogGroupCommand");
  var se_DeleteLogStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteLogStream");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteLogStreamCommand");
  var se_DeleteMetricFilterCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteMetricFilter");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteMetricFilterCommand");
  var se_DeleteQueryDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteQueryDefinition");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteQueryDefinitionCommand");
  var se_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteResourcePolicyCommand");
  var se_DeleteRetentionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteRetentionPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteRetentionPolicyCommand");
  var se_DeleteSubscriptionFilterCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteSubscriptionFilter");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteSubscriptionFilterCommand");
  var se_DeleteTransformerCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteTransformer");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteTransformerCommand");
  var se_DescribeAccountPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeAccountPolicies");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeAccountPoliciesCommand");
  var se_DescribeConfigurationTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationTemplates");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeConfigurationTemplatesCommand");
  var se_DescribeDeliveriesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveries");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeDeliveriesCommand");
  var se_DescribeDeliveryDestinationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryDestinations");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeDeliveryDestinationsCommand");
  var se_DescribeDeliverySourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeDeliverySources");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeDeliverySourcesCommand");
  var se_DescribeDestinationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeDestinations");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeDestinationsCommand");
  var se_DescribeExportTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeExportTasks");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeExportTasksCommand");
  var se_DescribeFieldIndexesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeFieldIndexes");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeFieldIndexesCommand");
  var se_DescribeIndexPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeIndexPolicies");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeIndexPoliciesCommand");
  var se_DescribeLogGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeLogGroups");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeLogGroupsCommand");
  var se_DescribeLogStreamsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeLogStreams");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeLogStreamsCommand");
  var se_DescribeMetricFiltersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeMetricFilters");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeMetricFiltersCommand");
  var se_DescribeQueriesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeQueries");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeQueriesCommand");
  var se_DescribeQueryDefinitionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeQueryDefinitions");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeQueryDefinitionsCommand");
  var se_DescribeResourcePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicies");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeResourcePoliciesCommand");
  var se_DescribeSubscriptionFiltersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DescribeSubscriptionFilters");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DescribeSubscriptionFiltersCommand");
  var se_DisassociateKmsKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DisassociateKmsKey");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DisassociateKmsKeyCommand");
  var se_FilterLogEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("FilterLogEvents");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_FilterLogEventsCommand");
  var se_GetDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetDataProtectionPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetDataProtectionPolicyCommand");
  var se_GetDeliveryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetDelivery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetDeliveryCommand");
  var se_GetDeliveryDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetDeliveryDestination");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetDeliveryDestinationCommand");
  var se_GetDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetDeliveryDestinationPolicyCommand");
  var se_GetDeliverySourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetDeliverySource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetDeliverySourceCommand");
  var se_GetIntegrationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetIntegration");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetIntegrationCommand");
  var se_GetLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetLogAnomalyDetector");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetLogAnomalyDetectorCommand");
  var se_GetLogEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetLogEvents");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetLogEventsCommand");
  var se_GetLogGroupFieldsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetLogGroupFields");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetLogGroupFieldsCommand");
  var se_GetLogRecordCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetLogRecord");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetLogRecordCommand");
  var se_GetQueryResultsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetQueryResults");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetQueryResultsCommand");
  var se_GetTransformerCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetTransformer");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetTransformerCommand");
  var se_ListAnomaliesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListAnomalies");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAnomaliesCommand");
  var se_ListIntegrationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListIntegrations");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListIntegrationsCommand");
  var se_ListLogAnomalyDetectorsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListLogAnomalyDetectors");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListLogAnomalyDetectorsCommand");
  var se_ListLogGroupsForQueryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListLogGroupsForQuery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListLogGroupsForQueryCommand");
  var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListTagsForResourceCommand");
  var se_ListTagsLogGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListTagsLogGroup");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListTagsLogGroupCommand");
  var se_PutAccountPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutAccountPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutAccountPolicyCommand");
  var se_PutDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDataProtectionPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDataProtectionPolicyCommand");
  var se_PutDeliveryDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDeliveryDestination");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDeliveryDestinationCommand");
  var se_PutDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDeliveryDestinationPolicyCommand");
  var se_PutDeliverySourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDeliverySource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDeliverySourceCommand");
  var se_PutDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDestination");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDestinationCommand");
  var se_PutDestinationPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutDestinationPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutDestinationPolicyCommand");
  var se_PutIndexPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutIndexPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutIndexPolicyCommand");
  var se_PutIntegrationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutIntegration");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutIntegrationCommand");
  var se_PutLogEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutLogEvents");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutLogEventsCommand");
  var se_PutMetricFilterCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutMetricFilter");
    let body;
    body = JSON.stringify(se_PutMetricFilterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutMetricFilterCommand");
  var se_PutQueryDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutQueryDefinition");
    let body;
    body = JSON.stringify(se_PutQueryDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutQueryDefinitionCommand");
  var se_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutResourcePolicyCommand");
  var se_PutRetentionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutRetentionPolicy");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutRetentionPolicyCommand");
  var se_PutSubscriptionFilterCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutSubscriptionFilter");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutSubscriptionFilterCommand");
  var se_PutTransformerCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutTransformer");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutTransformerCommand");
  var se_StartLiveTailCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("StartLiveTail");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
      resolvedHostname = "streaming-" + resolvedHostname;
      if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
        throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
      }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
  }, "se_StartLiveTailCommand");
  var se_StartQueryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("StartQuery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_StartQueryCommand");
  var se_StopQueryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("StopQuery");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_StopQueryCommand");
  var se_TagLogGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("TagLogGroup");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagLogGroupCommand");
  var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagResourceCommand");
  var se_TestMetricFilterCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("TestMetricFilter");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TestMetricFilterCommand");
  var se_TestTransformerCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("TestTransformer");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TestTransformerCommand");
  var se_UntagLogGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UntagLogGroup");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagLogGroupCommand");
  var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagResourceCommand");
  var se_UpdateAnomalyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UpdateAnomaly");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateAnomalyCommand");
  var se_UpdateDeliveryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UpdateDeliveryConfiguration");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateDeliveryConfigurationCommand");
  var se_UpdateLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UpdateLogAnomalyDetector");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateLogAnomalyDetectorCommand");
  var de_AssociateKmsKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AssociateKmsKeyCommand");
  var de_CancelExportTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_CancelExportTaskCommand");
  var de_CreateDeliveryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateDeliveryCommand");
  var de_CreateExportTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateExportTaskCommand");
  var de_CreateLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateLogAnomalyDetectorCommand");
  var de_CreateLogGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_CreateLogGroupCommand");
  var de_CreateLogStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_CreateLogStreamCommand");
  var de_DeleteAccountPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteAccountPolicyCommand");
  var de_DeleteDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDataProtectionPolicyCommand");
  var de_DeleteDeliveryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDeliveryCommand");
  var de_DeleteDeliveryDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDeliveryDestinationCommand");
  var de_DeleteDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDeliveryDestinationPolicyCommand");
  var de_DeleteDeliverySourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDeliverySourceCommand");
  var de_DeleteDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteDestinationCommand");
  var de_DeleteIndexPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DeleteIndexPolicyCommand");
  var de_DeleteIntegrationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DeleteIntegrationCommand");
  var de_DeleteLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteLogAnomalyDetectorCommand");
  var de_DeleteLogGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteLogGroupCommand");
  var de_DeleteLogStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteLogStreamCommand");
  var de_DeleteMetricFilterCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteMetricFilterCommand");
  var de_DeleteQueryDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DeleteQueryDefinitionCommand");
  var de_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteResourcePolicyCommand");
  var de_DeleteRetentionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteRetentionPolicyCommand");
  var de_DeleteSubscriptionFilterCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteSubscriptionFilterCommand");
  var de_DeleteTransformerCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteTransformerCommand");
  var de_DescribeAccountPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeAccountPoliciesCommand");
  var de_DescribeConfigurationTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeConfigurationTemplatesCommand");
  var de_DescribeDeliveriesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeDeliveriesCommand");
  var de_DescribeDeliveryDestinationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeDeliveryDestinationsCommand");
  var de_DescribeDeliverySourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeDeliverySourcesCommand");
  var de_DescribeDestinationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeDestinationsCommand");
  var de_DescribeExportTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeExportTasksCommand");
  var de_DescribeFieldIndexesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeFieldIndexesCommand");
  var de_DescribeIndexPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeIndexPoliciesCommand");
  var de_DescribeLogGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeLogGroupsCommand");
  var de_DescribeLogStreamsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeLogStreamsCommand");
  var de_DescribeMetricFiltersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_DescribeMetricFiltersResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeMetricFiltersCommand");
  var de_DescribeQueriesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeQueriesCommand");
  var de_DescribeQueryDefinitionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeQueryDefinitionsCommand");
  var de_DescribeResourcePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeResourcePoliciesCommand");
  var de_DescribeSubscriptionFiltersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DescribeSubscriptionFiltersCommand");
  var de_DisassociateKmsKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DisassociateKmsKeyCommand");
  var de_FilterLogEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_FilterLogEventsCommand");
  var de_GetDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetDataProtectionPolicyCommand");
  var de_GetDeliveryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetDeliveryCommand");
  var de_GetDeliveryDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetDeliveryDestinationCommand");
  var de_GetDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetDeliveryDestinationPolicyCommand");
  var de_GetDeliverySourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetDeliverySourceCommand");
  var de_GetIntegrationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetIntegrationCommand");
  var de_GetLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetLogAnomalyDetectorCommand");
  var de_GetLogEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetLogEventsCommand");
  var de_GetLogGroupFieldsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetLogGroupFieldsCommand");
  var de_GetLogRecordCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetLogRecordCommand");
  var de_GetQueryResultsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetQueryResultsResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetQueryResultsCommand");
  var de_GetTransformerCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetTransformerCommand");
  var de_ListAnomaliesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAnomaliesCommand");
  var de_ListIntegrationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListIntegrationsCommand");
  var de_ListLogAnomalyDetectorsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListLogAnomalyDetectorsCommand");
  var de_ListLogGroupsForQueryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListLogGroupsForQueryCommand");
  var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListTagsForResourceCommand");
  var de_ListTagsLogGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListTagsLogGroupCommand");
  var de_PutAccountPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutAccountPolicyCommand");
  var de_PutDataProtectionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutDataProtectionPolicyCommand");
  var de_PutDeliveryDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutDeliveryDestinationCommand");
  var de_PutDeliveryDestinationPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutDeliveryDestinationPolicyCommand");
  var de_PutDeliverySourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutDeliverySourceCommand");
  var de_PutDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutDestinationCommand");
  var de_PutDestinationPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutDestinationPolicyCommand");
  var de_PutIndexPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutIndexPolicyCommand");
  var de_PutIntegrationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutIntegrationCommand");
  var de_PutLogEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutLogEventsCommand");
  var de_PutMetricFilterCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutMetricFilterCommand");
  var de_PutQueryDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutQueryDefinitionCommand");
  var de_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutResourcePolicyCommand");
  var de_PutRetentionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutRetentionPolicyCommand");
  var de_PutSubscriptionFilterCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutSubscriptionFilterCommand");
  var de_PutTransformerCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutTransformerCommand");
  var de_StartLiveTailCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = { responseStream: de_StartLiveTailResponseStream(output.body, context) };
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_StartLiveTailCommand");
  var de_StartQueryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_StartQueryCommand");
  var de_StopQueryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_StopQueryCommand");
  var de_TagLogGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagLogGroupCommand");
  var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagResourceCommand");
  var de_TestMetricFilterCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_TestMetricFilterCommand");
  var de_TestTransformerCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_TestTransformerCommand");
  var de_UntagLogGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagLogGroupCommand");
  var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagResourceCommand");
  var de_UpdateAnomalyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateAnomalyCommand");
  var de_UpdateDeliveryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UpdateDeliveryConfigurationCommand");
  var de_UpdateLogAnomalyDetectorCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateLogAnomalyDetectorCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidParameterException":
      case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
        throw await de_InvalidParameterExceptionRes(parsedOutput, context);
      case "OperationAbortedException":
      case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
        throw await de_OperationAbortedExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "ServiceUnavailableException":
      case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
        throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
      case "InvalidOperationException":
      case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
        throw await de_InvalidOperationExceptionRes(parsedOutput, context);
      case "AccessDeniedException":
      case "com.amazonaws.cloudwatchlogs#AccessDeniedException":
        throw await de_AccessDeniedExceptionRes(parsedOutput, context);
      case "ConflictException":
      case "com.amazonaws.cloudwatchlogs#ConflictException":
        throw await de_ConflictExceptionRes(parsedOutput, context);
      case "ServiceQuotaExceededException":
      case "com.amazonaws.cloudwatchlogs#ServiceQuotaExceededException":
        throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
      case "ThrottlingException":
      case "com.amazonaws.cloudwatchlogs#ThrottlingException":
        throw await de_ThrottlingExceptionRes(parsedOutput, context);
      case "ValidationException":
      case "com.amazonaws.cloudwatchlogs#ValidationException":
        throw await de_ValidationExceptionRes(parsedOutput, context);
      case "LimitExceededException":
      case "com.amazonaws.cloudwatchlogs#LimitExceededException":
        throw await de_LimitExceededExceptionRes(parsedOutput, context);
      case "ResourceAlreadyExistsException":
      case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
        throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
      case "DataAlreadyAcceptedException":
      case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
        throw await de_DataAlreadyAcceptedExceptionRes(parsedOutput, context);
      case "InvalidSequenceTokenException":
      case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
        throw await de_InvalidSequenceTokenExceptionRes(parsedOutput, context);
      case "UnrecognizedClientException":
      case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
        throw await de_UnrecognizedClientExceptionRes(parsedOutput, context);
      case "MalformedQueryException":
      case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
        throw await de_MalformedQueryExceptionRes(parsedOutput, context);
      case "TooManyTagsException":
      case "com.amazonaws.cloudwatchlogs#TooManyTagsException":
        throw await de_TooManyTagsExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new AccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_AccessDeniedExceptionRes");
  var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ConflictException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ConflictExceptionRes");
  var de_DataAlreadyAcceptedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new DataAlreadyAcceptedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_DataAlreadyAcceptedExceptionRes");
  var de_InvalidOperationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new InvalidOperationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidOperationExceptionRes");
  var de_InvalidParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new InvalidParameterException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidParameterExceptionRes");
  var de_InvalidSequenceTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new InvalidSequenceTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidSequenceTokenExceptionRes");
  var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new LimitExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_LimitExceededExceptionRes");
  var de_MalformedQueryExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new MalformedQueryException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_MalformedQueryExceptionRes");
  var de_OperationAbortedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new OperationAbortedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_OperationAbortedExceptionRes");
  var de_ResourceAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ResourceAlreadyExistsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ResourceAlreadyExistsExceptionRes");
  var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ResourceNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ResourceNotFoundExceptionRes");
  var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ServiceQuotaExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceQuotaExceededExceptionRes");
  var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ServiceUnavailableException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceUnavailableExceptionRes");
  var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ThrottlingException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ThrottlingExceptionRes");
  var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new TooManyTagsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_TooManyTagsExceptionRes");
  var de_UnrecognizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new UnrecognizedClientException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_UnrecognizedClientExceptionRes");
  var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ValidationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ValidationExceptionRes");
  var de_StartLiveTailResponseStream = /* @__PURE__ */ __name((output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
      if (event["sessionStart"] != null) {
        return {
          sessionStart: await de_LiveTailSessionStart_event(event["sessionStart"], context)
        };
      }
      if (event["sessionUpdate"] != null) {
        return {
          sessionUpdate: await de_LiveTailSessionUpdate_event(event["sessionUpdate"], context)
        };
      }
      if (event["SessionTimeoutException"] != null) {
        return {
          SessionTimeoutException: await de_SessionTimeoutException_event(event["SessionTimeoutException"], context)
        };
      }
      if (event["SessionStreamingException"] != null) {
        return {
          SessionStreamingException: await de_SessionStreamingException_event(event["SessionStreamingException"], context)
        };
      }
      return { $unknown: output };
    });
  }, "de_StartLiveTailResponseStream");
  var de_LiveTailSessionStart_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    Object.assign(contents, (0, import_smithy_client._json)(data));
    return contents;
  }, "de_LiveTailSessionStart_event");
  var de_LiveTailSessionUpdate_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    Object.assign(contents, (0, import_smithy_client._json)(data));
    return contents;
  }, "de_LiveTailSessionUpdate_event");
  var de_SessionStreamingException_event = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonBody)(output.body, context)
    };
    return de_SessionStreamingExceptionRes(parsedOutput, context);
  }, "de_SessionStreamingException_event");
  var de_SessionTimeoutException_event = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonBody)(output.body, context)
    };
    return de_SessionTimeoutExceptionRes(parsedOutput, context);
  }, "de_SessionTimeoutException_event");
  var de_SessionStreamingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new SessionStreamingException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_SessionStreamingExceptionRes");
  var de_SessionTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new SessionTimeoutException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_SessionTimeoutExceptionRes");
  var se_MetricTransformation = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      defaultValue: import_smithy_client.serializeFloat,
      dimensions: import_smithy_client._json,
      metricName: [],
      metricNamespace: [],
      metricValue: [],
      unit: []
    });
  }, "se_MetricTransformation");
  var se_MetricTransformations = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      return se_MetricTransformation(entry, context);
    });
  }, "se_MetricTransformations");
  var se_PutMetricFilterRequest = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      applyOnTransformedLogs: [],
      filterName: [],
      filterPattern: [],
      logGroupName: [],
      metricTransformations: /* @__PURE__ */ __name((_) => se_MetricTransformations(_, context), "metricTransformations")
    });
  }, "se_PutMetricFilterRequest");
  var se_PutQueryDefinitionRequest = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      logGroupNames: import_smithy_client._json,
      name: [],
      queryDefinitionId: [],
      queryLanguage: [],
      queryString: []
    });
  }, "se_PutQueryDefinitionRequest");
  var de_DescribeMetricFiltersResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      metricFilters: /* @__PURE__ */ __name((_) => de_MetricFilters(_, context), "metricFilters"),
      nextToken: import_smithy_client.expectString
    });
  }, "de_DescribeMetricFiltersResponse");
  var de_GetQueryResultsResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      encryptionKey: import_smithy_client.expectString,
      queryLanguage: import_smithy_client.expectString,
      results: import_smithy_client._json,
      statistics: /* @__PURE__ */ __name((_) => de_QueryStatistics(_, context), "statistics"),
      status: import_smithy_client.expectString
    });
  }, "de_GetQueryResultsResponse");
  var de_MetricFilter = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      applyOnTransformedLogs: import_smithy_client.expectBoolean,
      creationTime: import_smithy_client.expectLong,
      filterName: import_smithy_client.expectString,
      filterPattern: import_smithy_client.expectString,
      logGroupName: import_smithy_client.expectString,
      metricTransformations: /* @__PURE__ */ __name((_) => de_MetricTransformations(_, context), "metricTransformations")
    });
  }, "de_MetricFilter");
  var de_MetricFilters = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_MetricFilter(entry, context);
    });
    return retVal;
  }, "de_MetricFilters");
  var de_MetricTransformation = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      defaultValue: import_smithy_client.limitedParseDouble,
      dimensions: import_smithy_client._json,
      metricName: import_smithy_client.expectString,
      metricNamespace: import_smithy_client.expectString,
      metricValue: import_smithy_client.expectString,
      unit: import_smithy_client.expectString
    });
  }, "de_MetricTransformation");
  var de_MetricTransformations = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_MetricTransformation(entry, context);
    });
    return retVal;
  }, "de_MetricTransformations");
  var de_QueryStatistics = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      bytesScanned: import_smithy_client.limitedParseDouble,
      estimatedBytesSkipped: import_smithy_client.limitedParseDouble,
      estimatedRecordsSkipped: import_smithy_client.limitedParseDouble,
      logGroupsScanned: import_smithy_client.limitedParseDouble,
      recordsMatched: import_smithy_client.limitedParseDouble,
      recordsScanned: import_smithy_client.limitedParseDouble
    });
  }, "de_QueryStatistics");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(CloudWatchLogsServiceException);
  var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new import_protocol_http.HttpRequest(contents);
  }, "buildHttpRpcRequest");
  function sharedHeaders(operation) {
    return {
      "content-type": "application/x-amz-json-1.1",
      "x-amz-target": `Logs_20140328.${operation}`
    };
  }
  __name(sharedHeaders, "sharedHeaders");
  var AssociateKmsKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "AssociateKmsKey", {}).n("CloudWatchLogsClient", "AssociateKmsKeyCommand").f(undefined, undefined).ser(se_AssociateKmsKeyCommand).de(de_AssociateKmsKeyCommand).build() {
    static {
      __name(this, "AssociateKmsKeyCommand");
    }
  };
  var CancelExportTaskCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CancelExportTask", {}).n("CloudWatchLogsClient", "CancelExportTaskCommand").f(undefined, undefined).ser(se_CancelExportTaskCommand).de(de_CancelExportTaskCommand).build() {
    static {
      __name(this, "CancelExportTaskCommand");
    }
  };
  var CreateDeliveryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CreateDelivery", {}).n("CloudWatchLogsClient", "CreateDeliveryCommand").f(undefined, undefined).ser(se_CreateDeliveryCommand).de(de_CreateDeliveryCommand).build() {
    static {
      __name(this, "CreateDeliveryCommand");
    }
  };
  var CreateExportTaskCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CreateExportTask", {}).n("CloudWatchLogsClient", "CreateExportTaskCommand").f(undefined, undefined).ser(se_CreateExportTaskCommand).de(de_CreateExportTaskCommand).build() {
    static {
      __name(this, "CreateExportTaskCommand");
    }
  };
  var CreateLogAnomalyDetectorCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CreateLogAnomalyDetector", {}).n("CloudWatchLogsClient", "CreateLogAnomalyDetectorCommand").f(undefined, undefined).ser(se_CreateLogAnomalyDetectorCommand).de(de_CreateLogAnomalyDetectorCommand).build() {
    static {
      __name(this, "CreateLogAnomalyDetectorCommand");
    }
  };
  var CreateLogGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CreateLogGroup", {}).n("CloudWatchLogsClient", "CreateLogGroupCommand").f(undefined, undefined).ser(se_CreateLogGroupCommand).de(de_CreateLogGroupCommand).build() {
    static {
      __name(this, "CreateLogGroupCommand");
    }
  };
  var CreateLogStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "CreateLogStream", {}).n("CloudWatchLogsClient", "CreateLogStreamCommand").f(undefined, undefined).ser(se_CreateLogStreamCommand).de(de_CreateLogStreamCommand).build() {
    static {
      __name(this, "CreateLogStreamCommand");
    }
  };
  var DeleteAccountPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteAccountPolicy", {}).n("CloudWatchLogsClient", "DeleteAccountPolicyCommand").f(undefined, undefined).ser(se_DeleteAccountPolicyCommand).de(de_DeleteAccountPolicyCommand).build() {
    static {
      __name(this, "DeleteAccountPolicyCommand");
    }
  };
  var DeleteDataProtectionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDataProtectionPolicy", {}).n("CloudWatchLogsClient", "DeleteDataProtectionPolicyCommand").f(undefined, undefined).ser(se_DeleteDataProtectionPolicyCommand).de(de_DeleteDataProtectionPolicyCommand).build() {
    static {
      __name(this, "DeleteDataProtectionPolicyCommand");
    }
  };
  var DeleteDeliveryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDelivery", {}).n("CloudWatchLogsClient", "DeleteDeliveryCommand").f(undefined, undefined).ser(se_DeleteDeliveryCommand).de(de_DeleteDeliveryCommand).build() {
    static {
      __name(this, "DeleteDeliveryCommand");
    }
  };
  var DeleteDeliveryDestinationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDeliveryDestination", {}).n("CloudWatchLogsClient", "DeleteDeliveryDestinationCommand").f(undefined, undefined).ser(se_DeleteDeliveryDestinationCommand).de(de_DeleteDeliveryDestinationCommand).build() {
    static {
      __name(this, "DeleteDeliveryDestinationCommand");
    }
  };
  var DeleteDeliveryDestinationPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDeliveryDestinationPolicy", {}).n("CloudWatchLogsClient", "DeleteDeliveryDestinationPolicyCommand").f(undefined, undefined).ser(se_DeleteDeliveryDestinationPolicyCommand).de(de_DeleteDeliveryDestinationPolicyCommand).build() {
    static {
      __name(this, "DeleteDeliveryDestinationPolicyCommand");
    }
  };
  var DeleteDeliverySourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDeliverySource", {}).n("CloudWatchLogsClient", "DeleteDeliverySourceCommand").f(undefined, undefined).ser(se_DeleteDeliverySourceCommand).de(de_DeleteDeliverySourceCommand).build() {
    static {
      __name(this, "DeleteDeliverySourceCommand");
    }
  };
  var DeleteDestinationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteDestination", {}).n("CloudWatchLogsClient", "DeleteDestinationCommand").f(undefined, undefined).ser(se_DeleteDestinationCommand).de(de_DeleteDestinationCommand).build() {
    static {
      __name(this, "DeleteDestinationCommand");
    }
  };
  var DeleteIndexPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteIndexPolicy", {}).n("CloudWatchLogsClient", "DeleteIndexPolicyCommand").f(undefined, undefined).ser(se_DeleteIndexPolicyCommand).de(de_DeleteIndexPolicyCommand).build() {
    static {
      __name(this, "DeleteIndexPolicyCommand");
    }
  };
  var DeleteIntegrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteIntegration", {}).n("CloudWatchLogsClient", "DeleteIntegrationCommand").f(undefined, undefined).ser(se_DeleteIntegrationCommand).de(de_DeleteIntegrationCommand).build() {
    static {
      __name(this, "DeleteIntegrationCommand");
    }
  };
  var DeleteLogAnomalyDetectorCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteLogAnomalyDetector", {}).n("CloudWatchLogsClient", "DeleteLogAnomalyDetectorCommand").f(undefined, undefined).ser(se_DeleteLogAnomalyDetectorCommand).de(de_DeleteLogAnomalyDetectorCommand).build() {
    static {
      __name(this, "DeleteLogAnomalyDetectorCommand");
    }
  };
  var DeleteLogGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteLogGroup", {}).n("CloudWatchLogsClient", "DeleteLogGroupCommand").f(undefined, undefined).ser(se_DeleteLogGroupCommand).de(de_DeleteLogGroupCommand).build() {
    static {
      __name(this, "DeleteLogGroupCommand");
    }
  };
  var DeleteLogStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteLogStream", {}).n("CloudWatchLogsClient", "DeleteLogStreamCommand").f(undefined, undefined).ser(se_DeleteLogStreamCommand).de(de_DeleteLogStreamCommand).build() {
    static {
      __name(this, "DeleteLogStreamCommand");
    }
  };
  var DeleteMetricFilterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteMetricFilter", {}).n("CloudWatchLogsClient", "DeleteMetricFilterCommand").f(undefined, undefined).ser(se_DeleteMetricFilterCommand).de(de_DeleteMetricFilterCommand).build() {
    static {
      __name(this, "DeleteMetricFilterCommand");
    }
  };
  var DeleteQueryDefinitionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteQueryDefinition", {}).n("CloudWatchLogsClient", "DeleteQueryDefinitionCommand").f(undefined, undefined).ser(se_DeleteQueryDefinitionCommand).de(de_DeleteQueryDefinitionCommand).build() {
    static {
      __name(this, "DeleteQueryDefinitionCommand");
    }
  };
  var DeleteResourcePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteResourcePolicy", {}).n("CloudWatchLogsClient", "DeleteResourcePolicyCommand").f(undefined, undefined).ser(se_DeleteResourcePolicyCommand).de(de_DeleteResourcePolicyCommand).build() {
    static {
      __name(this, "DeleteResourcePolicyCommand");
    }
  };
  var DeleteRetentionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteRetentionPolicy", {}).n("CloudWatchLogsClient", "DeleteRetentionPolicyCommand").f(undefined, undefined).ser(se_DeleteRetentionPolicyCommand).de(de_DeleteRetentionPolicyCommand).build() {
    static {
      __name(this, "DeleteRetentionPolicyCommand");
    }
  };
  var DeleteSubscriptionFilterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteSubscriptionFilter", {}).n("CloudWatchLogsClient", "DeleteSubscriptionFilterCommand").f(undefined, undefined).ser(se_DeleteSubscriptionFilterCommand).de(de_DeleteSubscriptionFilterCommand).build() {
    static {
      __name(this, "DeleteSubscriptionFilterCommand");
    }
  };
  var DeleteTransformerCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DeleteTransformer", {}).n("CloudWatchLogsClient", "DeleteTransformerCommand").f(undefined, undefined).ser(se_DeleteTransformerCommand).de(de_DeleteTransformerCommand).build() {
    static {
      __name(this, "DeleteTransformerCommand");
    }
  };
  var DescribeAccountPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeAccountPolicies", {}).n("CloudWatchLogsClient", "DescribeAccountPoliciesCommand").f(undefined, undefined).ser(se_DescribeAccountPoliciesCommand).de(de_DescribeAccountPoliciesCommand).build() {
    static {
      __name(this, "DescribeAccountPoliciesCommand");
    }
  };
  var DescribeConfigurationTemplatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeConfigurationTemplates", {}).n("CloudWatchLogsClient", "DescribeConfigurationTemplatesCommand").f(undefined, undefined).ser(se_DescribeConfigurationTemplatesCommand).de(de_DescribeConfigurationTemplatesCommand).build() {
    static {
      __name(this, "DescribeConfigurationTemplatesCommand");
    }
  };
  var DescribeDeliveriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeDeliveries", {}).n("CloudWatchLogsClient", "DescribeDeliveriesCommand").f(undefined, undefined).ser(se_DescribeDeliveriesCommand).de(de_DescribeDeliveriesCommand).build() {
    static {
      __name(this, "DescribeDeliveriesCommand");
    }
  };
  var DescribeDeliveryDestinationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeDeliveryDestinations", {}).n("CloudWatchLogsClient", "DescribeDeliveryDestinationsCommand").f(undefined, undefined).ser(se_DescribeDeliveryDestinationsCommand).de(de_DescribeDeliveryDestinationsCommand).build() {
    static {
      __name(this, "DescribeDeliveryDestinationsCommand");
    }
  };
  var DescribeDeliverySourcesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeDeliverySources", {}).n("CloudWatchLogsClient", "DescribeDeliverySourcesCommand").f(undefined, undefined).ser(se_DescribeDeliverySourcesCommand).de(de_DescribeDeliverySourcesCommand).build() {
    static {
      __name(this, "DescribeDeliverySourcesCommand");
    }
  };
  var DescribeDestinationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeDestinations", {}).n("CloudWatchLogsClient", "DescribeDestinationsCommand").f(undefined, undefined).ser(se_DescribeDestinationsCommand).de(de_DescribeDestinationsCommand).build() {
    static {
      __name(this, "DescribeDestinationsCommand");
    }
  };
  var DescribeExportTasksCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeExportTasks", {}).n("CloudWatchLogsClient", "DescribeExportTasksCommand").f(undefined, undefined).ser(se_DescribeExportTasksCommand).de(de_DescribeExportTasksCommand).build() {
    static {
      __name(this, "DescribeExportTasksCommand");
    }
  };
  var DescribeFieldIndexesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeFieldIndexes", {}).n("CloudWatchLogsClient", "DescribeFieldIndexesCommand").f(undefined, undefined).ser(se_DescribeFieldIndexesCommand).de(de_DescribeFieldIndexesCommand).build() {
    static {
      __name(this, "DescribeFieldIndexesCommand");
    }
  };
  var DescribeIndexPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeIndexPolicies", {}).n("CloudWatchLogsClient", "DescribeIndexPoliciesCommand").f(undefined, undefined).ser(se_DescribeIndexPoliciesCommand).de(de_DescribeIndexPoliciesCommand).build() {
    static {
      __name(this, "DescribeIndexPoliciesCommand");
    }
  };
  var DescribeLogGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeLogGroups", {}).n("CloudWatchLogsClient", "DescribeLogGroupsCommand").f(undefined, undefined).ser(se_DescribeLogGroupsCommand).de(de_DescribeLogGroupsCommand).build() {
    static {
      __name(this, "DescribeLogGroupsCommand");
    }
  };
  var DescribeLogStreamsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeLogStreams", {}).n("CloudWatchLogsClient", "DescribeLogStreamsCommand").f(undefined, undefined).ser(se_DescribeLogStreamsCommand).de(de_DescribeLogStreamsCommand).build() {
    static {
      __name(this, "DescribeLogStreamsCommand");
    }
  };
  var DescribeMetricFiltersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeMetricFilters", {}).n("CloudWatchLogsClient", "DescribeMetricFiltersCommand").f(undefined, undefined).ser(se_DescribeMetricFiltersCommand).de(de_DescribeMetricFiltersCommand).build() {
    static {
      __name(this, "DescribeMetricFiltersCommand");
    }
  };
  var DescribeQueriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeQueries", {}).n("CloudWatchLogsClient", "DescribeQueriesCommand").f(undefined, undefined).ser(se_DescribeQueriesCommand).de(de_DescribeQueriesCommand).build() {
    static {
      __name(this, "DescribeQueriesCommand");
    }
  };
  var DescribeQueryDefinitionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeQueryDefinitions", {}).n("CloudWatchLogsClient", "DescribeQueryDefinitionsCommand").f(undefined, undefined).ser(se_DescribeQueryDefinitionsCommand).de(de_DescribeQueryDefinitionsCommand).build() {
    static {
      __name(this, "DescribeQueryDefinitionsCommand");
    }
  };
  var DescribeResourcePoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeResourcePolicies", {}).n("CloudWatchLogsClient", "DescribeResourcePoliciesCommand").f(undefined, undefined).ser(se_DescribeResourcePoliciesCommand).de(de_DescribeResourcePoliciesCommand).build() {
    static {
      __name(this, "DescribeResourcePoliciesCommand");
    }
  };
  var DescribeSubscriptionFiltersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DescribeSubscriptionFilters", {}).n("CloudWatchLogsClient", "DescribeSubscriptionFiltersCommand").f(undefined, undefined).ser(se_DescribeSubscriptionFiltersCommand).de(de_DescribeSubscriptionFiltersCommand).build() {
    static {
      __name(this, "DescribeSubscriptionFiltersCommand");
    }
  };
  var DisassociateKmsKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "DisassociateKmsKey", {}).n("CloudWatchLogsClient", "DisassociateKmsKeyCommand").f(undefined, undefined).ser(se_DisassociateKmsKeyCommand).de(de_DisassociateKmsKeyCommand).build() {
    static {
      __name(this, "DisassociateKmsKeyCommand");
    }
  };
  var FilterLogEventsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "FilterLogEvents", {}).n("CloudWatchLogsClient", "FilterLogEventsCommand").f(undefined, undefined).ser(se_FilterLogEventsCommand).de(de_FilterLogEventsCommand).build() {
    static {
      __name(this, "FilterLogEventsCommand");
    }
  };
  var GetDataProtectionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetDataProtectionPolicy", {}).n("CloudWatchLogsClient", "GetDataProtectionPolicyCommand").f(undefined, undefined).ser(se_GetDataProtectionPolicyCommand).de(de_GetDataProtectionPolicyCommand).build() {
    static {
      __name(this, "GetDataProtectionPolicyCommand");
    }
  };
  var GetDeliveryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetDelivery", {}).n("CloudWatchLogsClient", "GetDeliveryCommand").f(undefined, undefined).ser(se_GetDeliveryCommand).de(de_GetDeliveryCommand).build() {
    static {
      __name(this, "GetDeliveryCommand");
    }
  };
  var GetDeliveryDestinationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetDeliveryDestination", {}).n("CloudWatchLogsClient", "GetDeliveryDestinationCommand").f(undefined, undefined).ser(se_GetDeliveryDestinationCommand).de(de_GetDeliveryDestinationCommand).build() {
    static {
      __name(this, "GetDeliveryDestinationCommand");
    }
  };
  var GetDeliveryDestinationPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetDeliveryDestinationPolicy", {}).n("CloudWatchLogsClient", "GetDeliveryDestinationPolicyCommand").f(undefined, undefined).ser(se_GetDeliveryDestinationPolicyCommand).de(de_GetDeliveryDestinationPolicyCommand).build() {
    static {
      __name(this, "GetDeliveryDestinationPolicyCommand");
    }
  };
  var GetDeliverySourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetDeliverySource", {}).n("CloudWatchLogsClient", "GetDeliverySourceCommand").f(undefined, undefined).ser(se_GetDeliverySourceCommand).de(de_GetDeliverySourceCommand).build() {
    static {
      __name(this, "GetDeliverySourceCommand");
    }
  };
  var GetIntegrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetIntegration", {}).n("CloudWatchLogsClient", "GetIntegrationCommand").f(undefined, undefined).ser(se_GetIntegrationCommand).de(de_GetIntegrationCommand).build() {
    static {
      __name(this, "GetIntegrationCommand");
    }
  };
  var GetLogAnomalyDetectorCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetLogAnomalyDetector", {}).n("CloudWatchLogsClient", "GetLogAnomalyDetectorCommand").f(undefined, undefined).ser(se_GetLogAnomalyDetectorCommand).de(de_GetLogAnomalyDetectorCommand).build() {
    static {
      __name(this, "GetLogAnomalyDetectorCommand");
    }
  };
  var GetLogEventsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetLogEvents", {}).n("CloudWatchLogsClient", "GetLogEventsCommand").f(undefined, undefined).ser(se_GetLogEventsCommand).de(de_GetLogEventsCommand).build() {
    static {
      __name(this, "GetLogEventsCommand");
    }
  };
  var GetLogGroupFieldsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetLogGroupFields", {}).n("CloudWatchLogsClient", "GetLogGroupFieldsCommand").f(undefined, undefined).ser(se_GetLogGroupFieldsCommand).de(de_GetLogGroupFieldsCommand).build() {
    static {
      __name(this, "GetLogGroupFieldsCommand");
    }
  };
  var GetLogRecordCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetLogRecord", {}).n("CloudWatchLogsClient", "GetLogRecordCommand").f(undefined, undefined).ser(se_GetLogRecordCommand).de(de_GetLogRecordCommand).build() {
    static {
      __name(this, "GetLogRecordCommand");
    }
  };
  var GetQueryResultsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetQueryResults", {}).n("CloudWatchLogsClient", "GetQueryResultsCommand").f(undefined, undefined).ser(se_GetQueryResultsCommand).de(de_GetQueryResultsCommand).build() {
    static {
      __name(this, "GetQueryResultsCommand");
    }
  };
  var GetTransformerCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "GetTransformer", {}).n("CloudWatchLogsClient", "GetTransformerCommand").f(undefined, undefined).ser(se_GetTransformerCommand).de(de_GetTransformerCommand).build() {
    static {
      __name(this, "GetTransformerCommand");
    }
  };
  var ListAnomaliesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListAnomalies", {}).n("CloudWatchLogsClient", "ListAnomaliesCommand").f(undefined, undefined).ser(se_ListAnomaliesCommand).de(de_ListAnomaliesCommand).build() {
    static {
      __name(this, "ListAnomaliesCommand");
    }
  };
  var ListIntegrationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListIntegrations", {}).n("CloudWatchLogsClient", "ListIntegrationsCommand").f(undefined, undefined).ser(se_ListIntegrationsCommand).de(de_ListIntegrationsCommand).build() {
    static {
      __name(this, "ListIntegrationsCommand");
    }
  };
  var ListLogAnomalyDetectorsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListLogAnomalyDetectors", {}).n("CloudWatchLogsClient", "ListLogAnomalyDetectorsCommand").f(undefined, undefined).ser(se_ListLogAnomalyDetectorsCommand).de(de_ListLogAnomalyDetectorsCommand).build() {
    static {
      __name(this, "ListLogAnomalyDetectorsCommand");
    }
  };
  var ListLogGroupsForQueryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListLogGroupsForQuery", {}).n("CloudWatchLogsClient", "ListLogGroupsForQueryCommand").f(undefined, undefined).ser(se_ListLogGroupsForQueryCommand).de(de_ListLogGroupsForQueryCommand).build() {
    static {
      __name(this, "ListLogGroupsForQueryCommand");
    }
  };
  var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListTagsForResource", {}).n("CloudWatchLogsClient", "ListTagsForResourceCommand").f(undefined, undefined).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    static {
      __name(this, "ListTagsForResourceCommand");
    }
  };
  var ListTagsLogGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "ListTagsLogGroup", {}).n("CloudWatchLogsClient", "ListTagsLogGroupCommand").f(undefined, undefined).ser(se_ListTagsLogGroupCommand).de(de_ListTagsLogGroupCommand).build() {
    static {
      __name(this, "ListTagsLogGroupCommand");
    }
  };
  var PutAccountPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutAccountPolicy", {}).n("CloudWatchLogsClient", "PutAccountPolicyCommand").f(undefined, undefined).ser(se_PutAccountPolicyCommand).de(de_PutAccountPolicyCommand).build() {
    static {
      __name(this, "PutAccountPolicyCommand");
    }
  };
  var PutDataProtectionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDataProtectionPolicy", {}).n("CloudWatchLogsClient", "PutDataProtectionPolicyCommand").f(undefined, undefined).ser(se_PutDataProtectionPolicyCommand).de(de_PutDataProtectionPolicyCommand).build() {
    static {
      __name(this, "PutDataProtectionPolicyCommand");
    }
  };
  var PutDeliveryDestinationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDeliveryDestination", {}).n("CloudWatchLogsClient", "PutDeliveryDestinationCommand").f(undefined, undefined).ser(se_PutDeliveryDestinationCommand).de(de_PutDeliveryDestinationCommand).build() {
    static {
      __name(this, "PutDeliveryDestinationCommand");
    }
  };
  var PutDeliveryDestinationPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDeliveryDestinationPolicy", {}).n("CloudWatchLogsClient", "PutDeliveryDestinationPolicyCommand").f(undefined, undefined).ser(se_PutDeliveryDestinationPolicyCommand).de(de_PutDeliveryDestinationPolicyCommand).build() {
    static {
      __name(this, "PutDeliveryDestinationPolicyCommand");
    }
  };
  var PutDeliverySourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDeliverySource", {}).n("CloudWatchLogsClient", "PutDeliverySourceCommand").f(undefined, undefined).ser(se_PutDeliverySourceCommand).de(de_PutDeliverySourceCommand).build() {
    static {
      __name(this, "PutDeliverySourceCommand");
    }
  };
  var PutDestinationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDestination", {}).n("CloudWatchLogsClient", "PutDestinationCommand").f(undefined, undefined).ser(se_PutDestinationCommand).de(de_PutDestinationCommand).build() {
    static {
      __name(this, "PutDestinationCommand");
    }
  };
  var PutDestinationPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutDestinationPolicy", {}).n("CloudWatchLogsClient", "PutDestinationPolicyCommand").f(undefined, undefined).ser(se_PutDestinationPolicyCommand).de(de_PutDestinationPolicyCommand).build() {
    static {
      __name(this, "PutDestinationPolicyCommand");
    }
  };
  var PutIndexPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutIndexPolicy", {}).n("CloudWatchLogsClient", "PutIndexPolicyCommand").f(undefined, undefined).ser(se_PutIndexPolicyCommand).de(de_PutIndexPolicyCommand).build() {
    static {
      __name(this, "PutIndexPolicyCommand");
    }
  };
  var PutIntegrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutIntegration", {}).n("CloudWatchLogsClient", "PutIntegrationCommand").f(undefined, undefined).ser(se_PutIntegrationCommand).de(de_PutIntegrationCommand).build() {
    static {
      __name(this, "PutIntegrationCommand");
    }
  };
  var PutLogEventsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutLogEvents", {}).n("CloudWatchLogsClient", "PutLogEventsCommand").f(undefined, undefined).ser(se_PutLogEventsCommand).de(de_PutLogEventsCommand).build() {
    static {
      __name(this, "PutLogEventsCommand");
    }
  };
  var PutMetricFilterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutMetricFilter", {}).n("CloudWatchLogsClient", "PutMetricFilterCommand").f(undefined, undefined).ser(se_PutMetricFilterCommand).de(de_PutMetricFilterCommand).build() {
    static {
      __name(this, "PutMetricFilterCommand");
    }
  };
  var PutQueryDefinitionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutQueryDefinition", {}).n("CloudWatchLogsClient", "PutQueryDefinitionCommand").f(undefined, undefined).ser(se_PutQueryDefinitionCommand).de(de_PutQueryDefinitionCommand).build() {
    static {
      __name(this, "PutQueryDefinitionCommand");
    }
  };
  var PutResourcePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutResourcePolicy", {}).n("CloudWatchLogsClient", "PutResourcePolicyCommand").f(undefined, undefined).ser(se_PutResourcePolicyCommand).de(de_PutResourcePolicyCommand).build() {
    static {
      __name(this, "PutResourcePolicyCommand");
    }
  };
  var PutRetentionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutRetentionPolicy", {}).n("CloudWatchLogsClient", "PutRetentionPolicyCommand").f(undefined, undefined).ser(se_PutRetentionPolicyCommand).de(de_PutRetentionPolicyCommand).build() {
    static {
      __name(this, "PutRetentionPolicyCommand");
    }
  };
  var PutSubscriptionFilterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutSubscriptionFilter", {}).n("CloudWatchLogsClient", "PutSubscriptionFilterCommand").f(undefined, undefined).ser(se_PutSubscriptionFilterCommand).de(de_PutSubscriptionFilterCommand).build() {
    static {
      __name(this, "PutSubscriptionFilterCommand");
    }
  };
  var PutTransformerCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "PutTransformer", {}).n("CloudWatchLogsClient", "PutTransformerCommand").f(undefined, undefined).ser(se_PutTransformerCommand).de(de_PutTransformerCommand).build() {
    static {
      __name(this, "PutTransformerCommand");
    }
  };
  var StartLiveTailCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "StartLiveTail", {
    eventStream: {
      output: true
    }
  }).n("CloudWatchLogsClient", "StartLiveTailCommand").f(undefined, StartLiveTailResponseFilterSensitiveLog).ser(se_StartLiveTailCommand).de(de_StartLiveTailCommand).build() {
    static {
      __name(this, "StartLiveTailCommand");
    }
  };
  var StartQueryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "StartQuery", {}).n("CloudWatchLogsClient", "StartQueryCommand").f(undefined, undefined).ser(se_StartQueryCommand).de(de_StartQueryCommand).build() {
    static {
      __name(this, "StartQueryCommand");
    }
  };
  var StopQueryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "StopQuery", {}).n("CloudWatchLogsClient", "StopQueryCommand").f(undefined, undefined).ser(se_StopQueryCommand).de(de_StopQueryCommand).build() {
    static {
      __name(this, "StopQueryCommand");
    }
  };
  var TagLogGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "TagLogGroup", {}).n("CloudWatchLogsClient", "TagLogGroupCommand").f(undefined, undefined).ser(se_TagLogGroupCommand).de(de_TagLogGroupCommand).build() {
    static {
      __name(this, "TagLogGroupCommand");
    }
  };
  var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "TagResource", {}).n("CloudWatchLogsClient", "TagResourceCommand").f(undefined, undefined).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    static {
      __name(this, "TagResourceCommand");
    }
  };
  var TestMetricFilterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "TestMetricFilter", {}).n("CloudWatchLogsClient", "TestMetricFilterCommand").f(undefined, undefined).ser(se_TestMetricFilterCommand).de(de_TestMetricFilterCommand).build() {
    static {
      __name(this, "TestMetricFilterCommand");
    }
  };
  var TestTransformerCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "TestTransformer", {}).n("CloudWatchLogsClient", "TestTransformerCommand").f(undefined, undefined).ser(se_TestTransformerCommand).de(de_TestTransformerCommand).build() {
    static {
      __name(this, "TestTransformerCommand");
    }
  };
  var UntagLogGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "UntagLogGroup", {}).n("CloudWatchLogsClient", "UntagLogGroupCommand").f(undefined, undefined).ser(se_UntagLogGroupCommand).de(de_UntagLogGroupCommand).build() {
    static {
      __name(this, "UntagLogGroupCommand");
    }
  };
  var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "UntagResource", {}).n("CloudWatchLogsClient", "UntagResourceCommand").f(undefined, undefined).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    static {
      __name(this, "UntagResourceCommand");
    }
  };
  var UpdateAnomalyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "UpdateAnomaly", {}).n("CloudWatchLogsClient", "UpdateAnomalyCommand").f(undefined, undefined).ser(se_UpdateAnomalyCommand).de(de_UpdateAnomalyCommand).build() {
    static {
      __name(this, "UpdateAnomalyCommand");
    }
  };
  var UpdateDeliveryConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "UpdateDeliveryConfiguration", {}).n("CloudWatchLogsClient", "UpdateDeliveryConfigurationCommand").f(undefined, undefined).ser(se_UpdateDeliveryConfigurationCommand).de(de_UpdateDeliveryConfigurationCommand).build() {
    static {
      __name(this, "UpdateDeliveryConfigurationCommand");
    }
  };
  var UpdateLogAnomalyDetectorCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("Logs_20140328", "UpdateLogAnomalyDetector", {}).n("CloudWatchLogsClient", "UpdateLogAnomalyDetectorCommand").f(undefined, undefined).ser(se_UpdateLogAnomalyDetectorCommand).de(de_UpdateLogAnomalyDetectorCommand).build() {
    static {
      __name(this, "UpdateLogAnomalyDetectorCommand");
    }
  };
  var commands = {
    AssociateKmsKeyCommand,
    CancelExportTaskCommand,
    CreateDeliveryCommand,
    CreateExportTaskCommand,
    CreateLogAnomalyDetectorCommand,
    CreateLogGroupCommand,
    CreateLogStreamCommand,
    DeleteAccountPolicyCommand,
    DeleteDataProtectionPolicyCommand,
    DeleteDeliveryCommand,
    DeleteDeliveryDestinationCommand,
    DeleteDeliveryDestinationPolicyCommand,
    DeleteDeliverySourceCommand,
    DeleteDestinationCommand,
    DeleteIndexPolicyCommand,
    DeleteIntegrationCommand,
    DeleteLogAnomalyDetectorCommand,
    DeleteLogGroupCommand,
    DeleteLogStreamCommand,
    DeleteMetricFilterCommand,
    DeleteQueryDefinitionCommand,
    DeleteResourcePolicyCommand,
    DeleteRetentionPolicyCommand,
    DeleteSubscriptionFilterCommand,
    DeleteTransformerCommand,
    DescribeAccountPoliciesCommand,
    DescribeConfigurationTemplatesCommand,
    DescribeDeliveriesCommand,
    DescribeDeliveryDestinationsCommand,
    DescribeDeliverySourcesCommand,
    DescribeDestinationsCommand,
    DescribeExportTasksCommand,
    DescribeFieldIndexesCommand,
    DescribeIndexPoliciesCommand,
    DescribeLogGroupsCommand,
    DescribeLogStreamsCommand,
    DescribeMetricFiltersCommand,
    DescribeQueriesCommand,
    DescribeQueryDefinitionsCommand,
    DescribeResourcePoliciesCommand,
    DescribeSubscriptionFiltersCommand,
    DisassociateKmsKeyCommand,
    FilterLogEventsCommand,
    GetDataProtectionPolicyCommand,
    GetDeliveryCommand,
    GetDeliveryDestinationCommand,
    GetDeliveryDestinationPolicyCommand,
    GetDeliverySourceCommand,
    GetIntegrationCommand,
    GetLogAnomalyDetectorCommand,
    GetLogEventsCommand,
    GetLogGroupFieldsCommand,
    GetLogRecordCommand,
    GetQueryResultsCommand,
    GetTransformerCommand,
    ListAnomaliesCommand,
    ListIntegrationsCommand,
    ListLogAnomalyDetectorsCommand,
    ListLogGroupsForQueryCommand,
    ListTagsForResourceCommand,
    ListTagsLogGroupCommand,
    PutAccountPolicyCommand,
    PutDataProtectionPolicyCommand,
    PutDeliveryDestinationCommand,
    PutDeliveryDestinationPolicyCommand,
    PutDeliverySourceCommand,
    PutDestinationCommand,
    PutDestinationPolicyCommand,
    PutIndexPolicyCommand,
    PutIntegrationCommand,
    PutLogEventsCommand,
    PutMetricFilterCommand,
    PutQueryDefinitionCommand,
    PutResourcePolicyCommand,
    PutRetentionPolicyCommand,
    PutSubscriptionFilterCommand,
    PutTransformerCommand,
    StartLiveTailCommand,
    StartQueryCommand,
    StopQueryCommand,
    TagLogGroupCommand,
    TagResourceCommand,
    TestMetricFilterCommand,
    TestTransformerCommand,
    UntagLogGroupCommand,
    UntagResourceCommand,
    UpdateAnomalyCommand,
    UpdateDeliveryConfigurationCommand,
    UpdateLogAnomalyDetectorCommand
  };
  var CloudWatchLogs = class extends CloudWatchLogsClient {
    static {
      __name(this, "CloudWatchLogs");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, CloudWatchLogs);
  var paginateDescribeConfigurationTemplates = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeConfigurationTemplatesCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeDeliveries = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeDeliveriesCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeDeliveryDestinations = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeDeliveryDestinationsCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeDeliverySources = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeDeliverySourcesCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeDestinations = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeDestinationsCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeLogGroups = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeLogGroupsCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeLogStreams = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeLogStreamsCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeMetricFilters = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeMetricFiltersCommand, "nextToken", "nextToken", "limit");
  var paginateDescribeSubscriptionFilters = (0, import_core.createPaginator)(CloudWatchLogsClient, DescribeSubscriptionFiltersCommand, "nextToken", "nextToken", "limit");
  var paginateFilterLogEvents = (0, import_core.createPaginator)(CloudWatchLogsClient, FilterLogEventsCommand, "nextToken", "nextToken", "limit");
  var paginateGetLogEvents = (0, import_core.createPaginator)(CloudWatchLogsClient, GetLogEventsCommand, "nextToken", "nextForwardToken", "limit");
  var paginateListAnomalies = (0, import_core.createPaginator)(CloudWatchLogsClient, ListAnomaliesCommand, "nextToken", "nextToken", "limit");
  var paginateListLogAnomalyDetectors = (0, import_core.createPaginator)(CloudWatchLogsClient, ListLogAnomalyDetectorsCommand, "nextToken", "nextToken", "limit");
  var paginateListLogGroupsForQuery = (0, import_core.createPaginator)(CloudWatchLogsClient, ListLogGroupsForQueryCommand, "nextToken", "nextToken", "maxResults");
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultIAMHttpAuthSchemeProvider = exports.defaultIAMHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultIAMHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultIAMHttpAuthSchemeParametersProvider = defaultIAMHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "iam",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  var defaultIAMHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultIAMHttpAuthSchemeProvider = defaultIAMHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/package.json
var require_package4 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-iam",
    description: "AWS SDK for JavaScript Iam Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-iam",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo iam"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      "@smithy/util-waiter": "^4.0.3",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-iam",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-iam"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var H = "required";
  var I = "fn";
  var J = "argv";
  var K = "ref";
  var L = "properties";
  var M = "headers";
  var N = "authSchemes";
  var O = "name";
  var P = "signingRegion";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "stringEquals";
  var i = "sigv4";
  var j = { [H]: true, default: false, type: "Boolean" };
  var k = { [H]: false, type: "String" };
  var l = { [K]: "Endpoint" };
  var m = { [I]: c, [J]: [{ [K]: "UseFIPS" }, true] };
  var n = { [I]: c, [J]: [{ [K]: "UseDualStack" }, true] };
  var o = {};
  var p = { [I]: h, [J]: [{ [I]: "getAttr", [J]: [{ [K]: g }, "name"] }, "aws"] };
  var q = { [I]: "getAttr", [J]: [{ [K]: g }, "name"] };
  var r = { [I]: c, [J]: [{ [K]: "UseFIPS" }, false] };
  var s = { [N]: [{ [O]: i, [P]: "us-east-1" }] };
  var t = { [I]: h, [J]: [q, "aws-cn"] };
  var u = { [N]: [{ [O]: i, [P]: "cn-north-1" }] };
  var v = { [I]: c, [J]: [{ [K]: "UseDualStack" }, false] };
  var w = { [I]: h, [J]: [q, "aws-us-gov"] };
  var x = { url: "https://iam.us-gov.api.aws", [L]: { [N]: [{ [O]: i, [P]: "us-gov-west-1" }] }, [M]: {} };
  var y = { url: "https://iam.us-gov.amazonaws.com", [L]: { [N]: [{ [O]: i, [P]: "us-gov-west-1" }] }, [M]: {} };
  var z = { [I]: h, [J]: [q, "aws-iso"] };
  var A = { [N]: [{ [O]: i, [P]: "us-iso-east-1" }] };
  var B = { [I]: h, [J]: [q, "aws-iso-b"] };
  var C = { [N]: [{ [O]: i, [P]: "us-isob-east-1" }] };
  var D = { [I]: "getAttr", [J]: [{ [K]: g }, "supportsFIPS"] };
  var E = { [I]: c, [J]: [true, { [I]: "getAttr", [J]: [{ [K]: g }, "supportsDualStack"] }] };
  var F = { [N]: [{ [O]: i, [P]: "{PartitionResult#implicitGlobalRegion}" }] };
  var G = [{ [K]: "Region" }];
  var _data = { version: "1.0", parameters: { UseDualStack: j, UseFIPS: j, Endpoint: k, Region: k }, rules: [{ conditions: [{ [I]: b, [J]: [l] }], rules: [{ conditions: [m], error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: [n], error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: l, [L]: o, [M]: o }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [I]: b, [J]: G }], rules: [{ conditions: [{ [I]: "aws.partition", [J]: G, assign: g }], rules: [{ conditions: [p, r, n], endpoint: { url: "https://iam.global.api.aws", [L]: s, [M]: o }, type: e }, { conditions: [p, m, n], endpoint: { url: "https://iam-fips.global.api.aws", [L]: s, [M]: o }, type: e }, { conditions: [t, r, n], endpoint: { url: "https://iam.global.api.amazonwebservices.com.cn", [L]: u, [M]: o }, type: e }, { conditions: [t, r, v], endpoint: { url: "https://iam.cn-north-1.amazonaws.com.cn", [L]: u, [M]: o }, type: e }, { conditions: [w, r, n], endpoint: x, type: e }, { conditions: [w, m, n], endpoint: x, type: e }, { conditions: [w, r, v], endpoint: y, type: e }, { conditions: [w, m, v], endpoint: y, type: e }, { conditions: [z, r, v], endpoint: { url: "https://iam.us-iso-east-1.c2s.ic.gov", [L]: A, [M]: o }, type: e }, { conditions: [z, m, v], endpoint: { url: "https://iam-fips.us-iso-east-1.c2s.ic.gov", [L]: A, [M]: o }, type: e }, { conditions: [B, r, v], endpoint: { url: "https://iam.us-isob-east-1.sc2s.sgov.gov", [L]: C, [M]: o }, type: e }, { conditions: [B, m, v], endpoint: { url: "https://iam-fips.us-isob-east-1.sc2s.sgov.gov", [L]: C, [M]: o }, type: e }, { conditions: [{ [I]: h, [J]: [q, "aws-iso-e"] }, r, v], endpoint: { url: "https://iam.eu-isoe-west-1.cloud.adc-e.uk", [L]: { [N]: [{ [O]: i, [P]: "eu-isoe-west-1" }] }, [M]: o }, type: e }, { conditions: [{ [I]: h, [J]: [q, "aws-iso-f"] }, r, v], endpoint: { url: "https://iam.us-isof-south-1.csp.hci.ic.gov", [L]: { [N]: [{ [O]: i, [P]: "us-isof-south-1" }] }, [M]: o }, type: e }, { conditions: [m, n], rules: [{ conditions: [{ [I]: c, [J]: [a, D] }, E], rules: [{ endpoint: { url: "https://iam-fips.{PartitionResult#dualStackDnsSuffix}", [L]: F, [M]: o }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: [m, v], rules: [{ conditions: [{ [I]: c, [J]: [D, a] }], rules: [{ endpoint: { url: "https://iam-fips.{PartitionResult#dnsSuffix}", [L]: F, [M]: o }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: [r, n], rules: [{ conditions: [E], rules: [{ endpoint: { url: "https://iam.{PartitionResult#dualStackDnsSuffix}", [L]: F, [M]: o }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://iam.{PartitionResult#dnsSuffix}", [L]: F, [M]: o }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset5();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider5();
  var endpointResolver_1 = require_endpointResolver5();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2010-05-08",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultIAMHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "IAM",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package4());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@smithy+util-waiter@4.0.3/node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs61 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    WaiterState: () => WaiterState,
    checkExceptions: () => checkExceptions,
    createWaiter: () => createWaiter,
    waiterServiceDefaults: () => waiterServiceDefaults
  });
  module.exports = __toCommonJS(src_exports);
  var sleep = /* @__PURE__ */ __name((seconds) => {
    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));
  }, "sleep");
  var waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120
  };
  var WaiterState = /* @__PURE__ */ ((WaiterState2) => {
    WaiterState2["ABORTED"] = "ABORTED";
    WaiterState2["FAILURE"] = "FAILURE";
    WaiterState2["SUCCESS"] = "SUCCESS";
    WaiterState2["RETRY"] = "RETRY";
    WaiterState2["TIMEOUT"] = "TIMEOUT";
    return WaiterState2;
  })(WaiterState || {});
  var checkExceptions = /* @__PURE__ */ __name((result) => {
    if (result.state === "ABORTED") {
      const abortError = new Error(`${JSON.stringify({
        ...result,
        reason: "Request was aborted"
      })}`);
      abortError.name = "AbortError";
      throw abortError;
    } else if (result.state === "TIMEOUT") {
      const timeoutError = new Error(`${JSON.stringify({
        ...result,
        reason: "Waiter has timed out"
      })}`);
      timeoutError.name = "TimeoutError";
      throw timeoutError;
    } else if (result.state !== "SUCCESS") {
      throw new Error(`${JSON.stringify(result)}`);
    }
    return result;
  }, "checkExceptions");
  var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
    if (attempt > attemptCeiling)
      return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
  }, "exponentialBackoffWithJitter");
  var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), "randomInRange");
  var runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
    const observedResponses = {};
    const { state, reason } = await acceptorChecks(client, input);
    if (reason) {
      const message = createMessageFromResponse(reason);
      observedResponses[message] |= 0;
      observedResponses[message] += 1;
    }
    if (state !== "RETRY") {
      return { state, reason, observedResponses };
    }
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while (true) {
      if (abortController?.signal?.aborted || abortSignal?.aborted) {
        const message = "AbortController signal aborted.";
        observedResponses[message] |= 0;
        observedResponses[message] += 1;
        return { state: "ABORTED", observedResponses };
      }
      const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
      if (Date.now() + delay * 1000 > waitUntil) {
        return { state: "TIMEOUT", observedResponses };
      }
      await sleep(delay);
      const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
      if (reason2) {
        const message = createMessageFromResponse(reason2);
        observedResponses[message] |= 0;
        observedResponses[message] += 1;
      }
      if (state2 !== "RETRY") {
        return { state: state2, reason: reason2, observedResponses };
      }
      currentAttempt += 1;
    }
  }, "runPolling");
  var createMessageFromResponse = /* @__PURE__ */ __name((reason) => {
    if (reason?.$responseBodyText) {
      return `Deserialization error for body: ${reason.$responseBodyText}`;
    }
    if (reason?.$metadata?.httpStatusCode) {
      if (reason.$response || reason.message) {
        return `${reason.$response.statusCode ?? reason.$metadata.httpStatusCode ?? "Unknown"}: ${reason.message}`;
      }
      return `${reason.$metadata.httpStatusCode}: OK`;
    }
    return String(reason?.message ?? JSON.stringify(reason) ?? "Unknown");
  }, "createMessageFromResponse");
  var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
    if (options.maxWaitTime <= 0) {
      throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    } else if (options.minDelay <= 0) {
      throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    } else if (options.maxDelay <= 0) {
      throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    } else if (options.maxWaitTime <= options.minDelay) {
      throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    } else if (options.maxDelay < options.minDelay) {
      throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
  }, "validateWaiterOptions");
  var abortTimeout = /* @__PURE__ */ __name(async (abortSignal) => {
    return new Promise((resolve) => {
      const onAbort = /* @__PURE__ */ __name(() => resolve({ state: "ABORTED" }), "onAbort");
      if (typeof abortSignal.addEventListener === "function") {
        abortSignal.addEventListener("abort", onAbort);
      } else {
        abortSignal.onabort = onAbort;
      }
    });
  }, "abortTimeout");
  var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
    const params = {
      ...waiterServiceDefaults,
      ...options
    };
    validateWaiterOptions(params);
    const exitConditions = [runPolling(params, input, acceptorChecks)];
    if (options.abortController) {
      exitConditions.push(abortTimeout(options.abortController.signal));
    }
    if (options.abortSignal) {
      exitConditions.push(abortTimeout(options.abortSignal));
    }
    return Promise.race(exitConditions);
  }, "createWaiter");
});

// ../../node_modules/.bun/@aws-sdk+client-iam@3.787.0/node_modules/@aws-sdk/client-iam/dist-cjs/index.js
var require_dist_cjs62 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AccessAdvisorUsageGranularityType: () => AccessAdvisorUsageGranularityType,
    AccessKeyFilterSensitiveLog: () => AccessKeyFilterSensitiveLog,
    AccountNotManagementOrDelegatedAdministratorException: () => AccountNotManagementOrDelegatedAdministratorException,
    AddClientIDToOpenIDConnectProviderCommand: () => AddClientIDToOpenIDConnectProviderCommand,
    AddRoleToInstanceProfileCommand: () => AddRoleToInstanceProfileCommand,
    AddUserToGroupCommand: () => AddUserToGroupCommand,
    AssertionEncryptionModeType: () => AssertionEncryptionModeType,
    AssignmentStatusType: () => AssignmentStatusType,
    AttachGroupPolicyCommand: () => AttachGroupPolicyCommand,
    AttachRolePolicyCommand: () => AttachRolePolicyCommand,
    AttachUserPolicyCommand: () => AttachUserPolicyCommand,
    CallerIsNotManagementAccountException: () => CallerIsNotManagementAccountException,
    ChangePasswordCommand: () => ChangePasswordCommand,
    ChangePasswordRequestFilterSensitiveLog: () => ChangePasswordRequestFilterSensitiveLog,
    ConcurrentModificationException: () => ConcurrentModificationException,
    ContextKeyTypeEnum: () => ContextKeyTypeEnum,
    CreateAccessKeyCommand: () => CreateAccessKeyCommand,
    CreateAccessKeyResponseFilterSensitiveLog: () => CreateAccessKeyResponseFilterSensitiveLog,
    CreateAccountAliasCommand: () => CreateAccountAliasCommand,
    CreateGroupCommand: () => CreateGroupCommand,
    CreateInstanceProfileCommand: () => CreateInstanceProfileCommand,
    CreateLoginProfileCommand: () => CreateLoginProfileCommand,
    CreateLoginProfileRequestFilterSensitiveLog: () => CreateLoginProfileRequestFilterSensitiveLog,
    CreateOpenIDConnectProviderCommand: () => CreateOpenIDConnectProviderCommand,
    CreatePolicyCommand: () => CreatePolicyCommand,
    CreatePolicyVersionCommand: () => CreatePolicyVersionCommand,
    CreateRoleCommand: () => CreateRoleCommand,
    CreateSAMLProviderCommand: () => CreateSAMLProviderCommand,
    CreateSAMLProviderRequestFilterSensitiveLog: () => CreateSAMLProviderRequestFilterSensitiveLog,
    CreateServiceLinkedRoleCommand: () => CreateServiceLinkedRoleCommand,
    CreateServiceSpecificCredentialCommand: () => CreateServiceSpecificCredentialCommand,
    CreateServiceSpecificCredentialResponseFilterSensitiveLog: () => CreateServiceSpecificCredentialResponseFilterSensitiveLog,
    CreateUserCommand: () => CreateUserCommand,
    CreateVirtualMFADeviceCommand: () => CreateVirtualMFADeviceCommand,
    CreateVirtualMFADeviceResponseFilterSensitiveLog: () => CreateVirtualMFADeviceResponseFilterSensitiveLog,
    CredentialReportExpiredException: () => CredentialReportExpiredException,
    CredentialReportNotPresentException: () => CredentialReportNotPresentException,
    CredentialReportNotReadyException: () => CredentialReportNotReadyException,
    DeactivateMFADeviceCommand: () => DeactivateMFADeviceCommand,
    DeleteAccessKeyCommand: () => DeleteAccessKeyCommand,
    DeleteAccountAliasCommand: () => DeleteAccountAliasCommand,
    DeleteAccountPasswordPolicyCommand: () => DeleteAccountPasswordPolicyCommand,
    DeleteConflictException: () => DeleteConflictException,
    DeleteGroupCommand: () => DeleteGroupCommand,
    DeleteGroupPolicyCommand: () => DeleteGroupPolicyCommand,
    DeleteInstanceProfileCommand: () => DeleteInstanceProfileCommand,
    DeleteLoginProfileCommand: () => DeleteLoginProfileCommand,
    DeleteOpenIDConnectProviderCommand: () => DeleteOpenIDConnectProviderCommand,
    DeletePolicyCommand: () => DeletePolicyCommand,
    DeletePolicyVersionCommand: () => DeletePolicyVersionCommand,
    DeleteRoleCommand: () => DeleteRoleCommand,
    DeleteRolePermissionsBoundaryCommand: () => DeleteRolePermissionsBoundaryCommand,
    DeleteRolePolicyCommand: () => DeleteRolePolicyCommand,
    DeleteSAMLProviderCommand: () => DeleteSAMLProviderCommand,
    DeleteSSHPublicKeyCommand: () => DeleteSSHPublicKeyCommand,
    DeleteServerCertificateCommand: () => DeleteServerCertificateCommand,
    DeleteServiceLinkedRoleCommand: () => DeleteServiceLinkedRoleCommand,
    DeleteServiceSpecificCredentialCommand: () => DeleteServiceSpecificCredentialCommand,
    DeleteSigningCertificateCommand: () => DeleteSigningCertificateCommand,
    DeleteUserCommand: () => DeleteUserCommand,
    DeleteUserPermissionsBoundaryCommand: () => DeleteUserPermissionsBoundaryCommand,
    DeleteUserPolicyCommand: () => DeleteUserPolicyCommand,
    DeleteVirtualMFADeviceCommand: () => DeleteVirtualMFADeviceCommand,
    DeletionTaskStatusType: () => DeletionTaskStatusType,
    DetachGroupPolicyCommand: () => DetachGroupPolicyCommand,
    DetachRolePolicyCommand: () => DetachRolePolicyCommand,
    DetachUserPolicyCommand: () => DetachUserPolicyCommand,
    DisableOrganizationsRootCredentialsManagementCommand: () => DisableOrganizationsRootCredentialsManagementCommand,
    DisableOrganizationsRootSessionsCommand: () => DisableOrganizationsRootSessionsCommand,
    DuplicateCertificateException: () => DuplicateCertificateException,
    DuplicateSSHPublicKeyException: () => DuplicateSSHPublicKeyException,
    EnableMFADeviceCommand: () => EnableMFADeviceCommand,
    EnableOrganizationsRootCredentialsManagementCommand: () => EnableOrganizationsRootCredentialsManagementCommand,
    EnableOrganizationsRootSessionsCommand: () => EnableOrganizationsRootSessionsCommand,
    EncodingType: () => EncodingType,
    EntityAlreadyExistsException: () => EntityAlreadyExistsException,
    EntityTemporarilyUnmodifiableException: () => EntityTemporarilyUnmodifiableException,
    EntityType: () => EntityType,
    FeatureType: () => FeatureType,
    GenerateCredentialReportCommand: () => GenerateCredentialReportCommand,
    GenerateOrganizationsAccessReportCommand: () => GenerateOrganizationsAccessReportCommand,
    GenerateServiceLastAccessedDetailsCommand: () => GenerateServiceLastAccessedDetailsCommand,
    GetAccessKeyLastUsedCommand: () => GetAccessKeyLastUsedCommand,
    GetAccountAuthorizationDetailsCommand: () => GetAccountAuthorizationDetailsCommand,
    GetAccountPasswordPolicyCommand: () => GetAccountPasswordPolicyCommand,
    GetAccountSummaryCommand: () => GetAccountSummaryCommand,
    GetContextKeysForCustomPolicyCommand: () => GetContextKeysForCustomPolicyCommand,
    GetContextKeysForPrincipalPolicyCommand: () => GetContextKeysForPrincipalPolicyCommand,
    GetCredentialReportCommand: () => GetCredentialReportCommand,
    GetGroupCommand: () => GetGroupCommand,
    GetGroupPolicyCommand: () => GetGroupPolicyCommand,
    GetInstanceProfileCommand: () => GetInstanceProfileCommand,
    GetLoginProfileCommand: () => GetLoginProfileCommand,
    GetMFADeviceCommand: () => GetMFADeviceCommand,
    GetOpenIDConnectProviderCommand: () => GetOpenIDConnectProviderCommand,
    GetOrganizationsAccessReportCommand: () => GetOrganizationsAccessReportCommand,
    GetPolicyCommand: () => GetPolicyCommand,
    GetPolicyVersionCommand: () => GetPolicyVersionCommand,
    GetRoleCommand: () => GetRoleCommand,
    GetRolePolicyCommand: () => GetRolePolicyCommand,
    GetSAMLProviderCommand: () => GetSAMLProviderCommand,
    GetSSHPublicKeyCommand: () => GetSSHPublicKeyCommand,
    GetServerCertificateCommand: () => GetServerCertificateCommand,
    GetServiceLastAccessedDetailsCommand: () => GetServiceLastAccessedDetailsCommand,
    GetServiceLastAccessedDetailsWithEntitiesCommand: () => GetServiceLastAccessedDetailsWithEntitiesCommand,
    GetServiceLinkedRoleDeletionStatusCommand: () => GetServiceLinkedRoleDeletionStatusCommand,
    GetUserCommand: () => GetUserCommand,
    GetUserPolicyCommand: () => GetUserPolicyCommand,
    GlobalEndpointTokenVersion: () => GlobalEndpointTokenVersion,
    IAM: () => IAM,
    IAMClient: () => IAMClient,
    IAMServiceException: () => IAMServiceException,
    InvalidAuthenticationCodeException: () => InvalidAuthenticationCodeException,
    InvalidCertificateException: () => InvalidCertificateException,
    InvalidInputException: () => InvalidInputException,
    InvalidPublicKeyException: () => InvalidPublicKeyException,
    InvalidUserTypeException: () => InvalidUserTypeException,
    JobStatusType: () => JobStatusType,
    KeyPairMismatchException: () => KeyPairMismatchException,
    LimitExceededException: () => LimitExceededException,
    ListAccessKeysCommand: () => ListAccessKeysCommand,
    ListAccountAliasesCommand: () => ListAccountAliasesCommand,
    ListAttachedGroupPoliciesCommand: () => ListAttachedGroupPoliciesCommand,
    ListAttachedRolePoliciesCommand: () => ListAttachedRolePoliciesCommand,
    ListAttachedUserPoliciesCommand: () => ListAttachedUserPoliciesCommand,
    ListEntitiesForPolicyCommand: () => ListEntitiesForPolicyCommand,
    ListGroupPoliciesCommand: () => ListGroupPoliciesCommand,
    ListGroupsCommand: () => ListGroupsCommand,
    ListGroupsForUserCommand: () => ListGroupsForUserCommand,
    ListInstanceProfileTagsCommand: () => ListInstanceProfileTagsCommand,
    ListInstanceProfilesCommand: () => ListInstanceProfilesCommand,
    ListInstanceProfilesForRoleCommand: () => ListInstanceProfilesForRoleCommand,
    ListMFADeviceTagsCommand: () => ListMFADeviceTagsCommand,
    ListMFADevicesCommand: () => ListMFADevicesCommand,
    ListOpenIDConnectProviderTagsCommand: () => ListOpenIDConnectProviderTagsCommand,
    ListOpenIDConnectProvidersCommand: () => ListOpenIDConnectProvidersCommand,
    ListOrganizationsFeaturesCommand: () => ListOrganizationsFeaturesCommand,
    ListPoliciesCommand: () => ListPoliciesCommand,
    ListPoliciesGrantingServiceAccessCommand: () => ListPoliciesGrantingServiceAccessCommand,
    ListPolicyTagsCommand: () => ListPolicyTagsCommand,
    ListPolicyVersionsCommand: () => ListPolicyVersionsCommand,
    ListRolePoliciesCommand: () => ListRolePoliciesCommand,
    ListRoleTagsCommand: () => ListRoleTagsCommand,
    ListRolesCommand: () => ListRolesCommand,
    ListSAMLProviderTagsCommand: () => ListSAMLProviderTagsCommand,
    ListSAMLProvidersCommand: () => ListSAMLProvidersCommand,
    ListSSHPublicKeysCommand: () => ListSSHPublicKeysCommand,
    ListServerCertificateTagsCommand: () => ListServerCertificateTagsCommand,
    ListServerCertificatesCommand: () => ListServerCertificatesCommand,
    ListServiceSpecificCredentialsCommand: () => ListServiceSpecificCredentialsCommand,
    ListSigningCertificatesCommand: () => ListSigningCertificatesCommand,
    ListUserPoliciesCommand: () => ListUserPoliciesCommand,
    ListUserTagsCommand: () => ListUserTagsCommand,
    ListUsersCommand: () => ListUsersCommand,
    ListVirtualMFADevicesCommand: () => ListVirtualMFADevicesCommand,
    ListVirtualMFADevicesResponseFilterSensitiveLog: () => ListVirtualMFADevicesResponseFilterSensitiveLog,
    MalformedCertificateException: () => MalformedCertificateException,
    MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
    NoSuchEntityException: () => NoSuchEntityException,
    OpenIdIdpCommunicationErrorException: () => OpenIdIdpCommunicationErrorException,
    OrganizationNotFoundException: () => OrganizationNotFoundException,
    OrganizationNotInAllFeaturesModeException: () => OrganizationNotInAllFeaturesModeException,
    PasswordPolicyViolationException: () => PasswordPolicyViolationException,
    PermissionsBoundaryAttachmentType: () => PermissionsBoundaryAttachmentType,
    PolicyEvaluationDecisionType: () => PolicyEvaluationDecisionType,
    PolicyEvaluationException: () => PolicyEvaluationException,
    PolicyNotAttachableException: () => PolicyNotAttachableException,
    PolicyOwnerEntityType: () => PolicyOwnerEntityType,
    PolicyScopeType: () => PolicyScopeType,
    PolicySourceType: () => PolicySourceType,
    PolicyType: () => PolicyType,
    PolicyUsageType: () => PolicyUsageType,
    PutGroupPolicyCommand: () => PutGroupPolicyCommand,
    PutRolePermissionsBoundaryCommand: () => PutRolePermissionsBoundaryCommand,
    PutRolePolicyCommand: () => PutRolePolicyCommand,
    PutUserPermissionsBoundaryCommand: () => PutUserPermissionsBoundaryCommand,
    PutUserPolicyCommand: () => PutUserPolicyCommand,
    RemoveClientIDFromOpenIDConnectProviderCommand: () => RemoveClientIDFromOpenIDConnectProviderCommand,
    RemoveRoleFromInstanceProfileCommand: () => RemoveRoleFromInstanceProfileCommand,
    RemoveUserFromGroupCommand: () => RemoveUserFromGroupCommand,
    ReportFormatType: () => ReportFormatType,
    ReportGenerationLimitExceededException: () => ReportGenerationLimitExceededException,
    ReportStateType: () => ReportStateType,
    ResetServiceSpecificCredentialCommand: () => ResetServiceSpecificCredentialCommand,
    ResetServiceSpecificCredentialResponseFilterSensitiveLog: () => ResetServiceSpecificCredentialResponseFilterSensitiveLog,
    ResyncMFADeviceCommand: () => ResyncMFADeviceCommand,
    ServiceAccessNotEnabledException: () => ServiceAccessNotEnabledException,
    ServiceFailureException: () => ServiceFailureException,
    ServiceNotSupportedException: () => ServiceNotSupportedException,
    ServiceSpecificCredentialFilterSensitiveLog: () => ServiceSpecificCredentialFilterSensitiveLog,
    SetDefaultPolicyVersionCommand: () => SetDefaultPolicyVersionCommand,
    SetSecurityTokenServicePreferencesCommand: () => SetSecurityTokenServicePreferencesCommand,
    SimulateCustomPolicyCommand: () => SimulateCustomPolicyCommand,
    SimulatePrincipalPolicyCommand: () => SimulatePrincipalPolicyCommand,
    SortKeyType: () => SortKeyType,
    StatusType: () => StatusType,
    SummaryKeyType: () => SummaryKeyType,
    TagInstanceProfileCommand: () => TagInstanceProfileCommand,
    TagMFADeviceCommand: () => TagMFADeviceCommand,
    TagOpenIDConnectProviderCommand: () => TagOpenIDConnectProviderCommand,
    TagPolicyCommand: () => TagPolicyCommand,
    TagRoleCommand: () => TagRoleCommand,
    TagSAMLProviderCommand: () => TagSAMLProviderCommand,
    TagServerCertificateCommand: () => TagServerCertificateCommand,
    TagUserCommand: () => TagUserCommand,
    UnmodifiableEntityException: () => UnmodifiableEntityException,
    UnrecognizedPublicKeyEncodingException: () => UnrecognizedPublicKeyEncodingException,
    UntagInstanceProfileCommand: () => UntagInstanceProfileCommand,
    UntagMFADeviceCommand: () => UntagMFADeviceCommand,
    UntagOpenIDConnectProviderCommand: () => UntagOpenIDConnectProviderCommand,
    UntagPolicyCommand: () => UntagPolicyCommand,
    UntagRoleCommand: () => UntagRoleCommand,
    UntagSAMLProviderCommand: () => UntagSAMLProviderCommand,
    UntagServerCertificateCommand: () => UntagServerCertificateCommand,
    UntagUserCommand: () => UntagUserCommand,
    UpdateAccessKeyCommand: () => UpdateAccessKeyCommand,
    UpdateAccountPasswordPolicyCommand: () => UpdateAccountPasswordPolicyCommand,
    UpdateAssumeRolePolicyCommand: () => UpdateAssumeRolePolicyCommand,
    UpdateGroupCommand: () => UpdateGroupCommand,
    UpdateLoginProfileCommand: () => UpdateLoginProfileCommand,
    UpdateLoginProfileRequestFilterSensitiveLog: () => UpdateLoginProfileRequestFilterSensitiveLog,
    UpdateOpenIDConnectProviderThumbprintCommand: () => UpdateOpenIDConnectProviderThumbprintCommand,
    UpdateRoleCommand: () => UpdateRoleCommand,
    UpdateRoleDescriptionCommand: () => UpdateRoleDescriptionCommand,
    UpdateSAMLProviderCommand: () => UpdateSAMLProviderCommand,
    UpdateSAMLProviderRequestFilterSensitiveLog: () => UpdateSAMLProviderRequestFilterSensitiveLog,
    UpdateSSHPublicKeyCommand: () => UpdateSSHPublicKeyCommand,
    UpdateServerCertificateCommand: () => UpdateServerCertificateCommand,
    UpdateServiceSpecificCredentialCommand: () => UpdateServiceSpecificCredentialCommand,
    UpdateSigningCertificateCommand: () => UpdateSigningCertificateCommand,
    UpdateUserCommand: () => UpdateUserCommand,
    UploadSSHPublicKeyCommand: () => UploadSSHPublicKeyCommand,
    UploadServerCertificateCommand: () => UploadServerCertificateCommand,
    UploadServerCertificateRequestFilterSensitiveLog: () => UploadServerCertificateRequestFilterSensitiveLog,
    UploadSigningCertificateCommand: () => UploadSigningCertificateCommand,
    VirtualMFADeviceFilterSensitiveLog: () => VirtualMFADeviceFilterSensitiveLog,
    __Client: () => import_smithy_client.Client,
    paginateGetAccountAuthorizationDetails: () => paginateGetAccountAuthorizationDetails,
    paginateGetGroup: () => paginateGetGroup,
    paginateListAccessKeys: () => paginateListAccessKeys,
    paginateListAccountAliases: () => paginateListAccountAliases,
    paginateListAttachedGroupPolicies: () => paginateListAttachedGroupPolicies,
    paginateListAttachedRolePolicies: () => paginateListAttachedRolePolicies,
    paginateListAttachedUserPolicies: () => paginateListAttachedUserPolicies,
    paginateListEntitiesForPolicy: () => paginateListEntitiesForPolicy,
    paginateListGroupPolicies: () => paginateListGroupPolicies,
    paginateListGroups: () => paginateListGroups,
    paginateListGroupsForUser: () => paginateListGroupsForUser,
    paginateListInstanceProfileTags: () => paginateListInstanceProfileTags,
    paginateListInstanceProfiles: () => paginateListInstanceProfiles,
    paginateListInstanceProfilesForRole: () => paginateListInstanceProfilesForRole,
    paginateListMFADeviceTags: () => paginateListMFADeviceTags,
    paginateListMFADevices: () => paginateListMFADevices,
    paginateListOpenIDConnectProviderTags: () => paginateListOpenIDConnectProviderTags,
    paginateListPolicies: () => paginateListPolicies,
    paginateListPolicyTags: () => paginateListPolicyTags,
    paginateListPolicyVersions: () => paginateListPolicyVersions,
    paginateListRolePolicies: () => paginateListRolePolicies,
    paginateListRoleTags: () => paginateListRoleTags,
    paginateListRoles: () => paginateListRoles,
    paginateListSAMLProviderTags: () => paginateListSAMLProviderTags,
    paginateListSSHPublicKeys: () => paginateListSSHPublicKeys,
    paginateListServerCertificateTags: () => paginateListServerCertificateTags,
    paginateListServerCertificates: () => paginateListServerCertificates,
    paginateListSigningCertificates: () => paginateListSigningCertificates,
    paginateListUserPolicies: () => paginateListUserPolicies,
    paginateListUserTags: () => paginateListUserTags,
    paginateListUsers: () => paginateListUsers,
    paginateListVirtualMFADevices: () => paginateListVirtualMFADevices,
    paginateSimulateCustomPolicy: () => paginateSimulateCustomPolicy,
    paginateSimulatePrincipalPolicy: () => paginateSimulatePrincipalPolicy,
    waitForInstanceProfileExists: () => waitForInstanceProfileExists,
    waitForPolicyExists: () => waitForPolicyExists,
    waitForRoleExists: () => waitForRoleExists,
    waitForUserExists: () => waitForUserExists,
    waitUntilInstanceProfileExists: () => waitUntilInstanceProfileExists,
    waitUntilPolicyExists: () => waitUntilPolicyExists,
    waitUntilRoleExists: () => waitUntilRoleExists,
    waitUntilUserExists: () => waitUntilUserExists
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider5();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "iam"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig5();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var IAMClient = class extends import_smithy_client.Client {
    static {
      __name(this, "IAMClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultIAMHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_serde = require_dist_cjs7();
  var import_core2 = require_dist_cjs25();
  var IAMServiceException = class _IAMServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "IAMServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _IAMServiceException.prototype);
    }
  };
  var AccessAdvisorUsageGranularityType = {
    ACTION_LEVEL: "ACTION_LEVEL",
    SERVICE_LEVEL: "SERVICE_LEVEL"
  };
  var StatusType = {
    Active: "Active",
    Inactive: "Inactive"
  };
  var AccountNotManagementOrDelegatedAdministratorException = class _AccountNotManagementOrDelegatedAdministratorException extends IAMServiceException {
    static {
      __name(this, "AccountNotManagementOrDelegatedAdministratorException");
    }
    name = "AccountNotManagementOrDelegatedAdministratorException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "AccountNotManagementOrDelegatedAdministratorException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AccountNotManagementOrDelegatedAdministratorException.prototype);
      this.Message = opts.Message;
    }
  };
  var InvalidInputException = class _InvalidInputException extends IAMServiceException {
    static {
      __name(this, "InvalidInputException");
    }
    name = "InvalidInputException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidInputException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidInputException.prototype);
    }
  };
  var LimitExceededException = class _LimitExceededException extends IAMServiceException {
    static {
      __name(this, "LimitExceededException");
    }
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "LimitExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _LimitExceededException.prototype);
    }
  };
  var NoSuchEntityException = class _NoSuchEntityException extends IAMServiceException {
    static {
      __name(this, "NoSuchEntityException");
    }
    name = "NoSuchEntityException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "NoSuchEntityException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoSuchEntityException.prototype);
    }
  };
  var ServiceFailureException = class _ServiceFailureException extends IAMServiceException {
    static {
      __name(this, "ServiceFailureException");
    }
    name = "ServiceFailureException";
    $fault = "server";
    constructor(opts) {
      super({
        name: "ServiceFailureException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceFailureException.prototype);
    }
  };
  var EntityAlreadyExistsException = class _EntityAlreadyExistsException extends IAMServiceException {
    static {
      __name(this, "EntityAlreadyExistsException");
    }
    name = "EntityAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "EntityAlreadyExistsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EntityAlreadyExistsException.prototype);
    }
  };
  var UnmodifiableEntityException = class _UnmodifiableEntityException extends IAMServiceException {
    static {
      __name(this, "UnmodifiableEntityException");
    }
    name = "UnmodifiableEntityException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "UnmodifiableEntityException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnmodifiableEntityException.prototype);
    }
  };
  var AssertionEncryptionModeType = {
    Allowed: "Allowed",
    Required: "Required"
  };
  var AssignmentStatusType = {
    Any: "Any",
    Assigned: "Assigned",
    Unassigned: "Unassigned"
  };
  var PermissionsBoundaryAttachmentType = {
    Policy: "PermissionsBoundaryPolicy"
  };
  var PolicyNotAttachableException = class _PolicyNotAttachableException extends IAMServiceException {
    static {
      __name(this, "PolicyNotAttachableException");
    }
    name = "PolicyNotAttachableException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "PolicyNotAttachableException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PolicyNotAttachableException.prototype);
    }
  };
  var EntityTemporarilyUnmodifiableException = class _EntityTemporarilyUnmodifiableException extends IAMServiceException {
    static {
      __name(this, "EntityTemporarilyUnmodifiableException");
    }
    name = "EntityTemporarilyUnmodifiableException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "EntityTemporarilyUnmodifiableException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EntityTemporarilyUnmodifiableException.prototype);
    }
  };
  var InvalidUserTypeException = class _InvalidUserTypeException extends IAMServiceException {
    static {
      __name(this, "InvalidUserTypeException");
    }
    name = "InvalidUserTypeException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidUserTypeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidUserTypeException.prototype);
    }
  };
  var PasswordPolicyViolationException = class _PasswordPolicyViolationException extends IAMServiceException {
    static {
      __name(this, "PasswordPolicyViolationException");
    }
    name = "PasswordPolicyViolationException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "PasswordPolicyViolationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PasswordPolicyViolationException.prototype);
    }
  };
  var ConcurrentModificationException = class _ConcurrentModificationException extends IAMServiceException {
    static {
      __name(this, "ConcurrentModificationException");
    }
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ConcurrentModificationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ConcurrentModificationException.prototype);
    }
  };
  var OpenIdIdpCommunicationErrorException = class _OpenIdIdpCommunicationErrorException extends IAMServiceException {
    static {
      __name(this, "OpenIdIdpCommunicationErrorException");
    }
    name = "OpenIdIdpCommunicationErrorException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "OpenIdIdpCommunicationErrorException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _OpenIdIdpCommunicationErrorException.prototype);
    }
  };
  var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends IAMServiceException {
    static {
      __name(this, "MalformedPolicyDocumentException");
    }
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "MalformedPolicyDocumentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
    }
  };
  var ServiceNotSupportedException = class _ServiceNotSupportedException extends IAMServiceException {
    static {
      __name(this, "ServiceNotSupportedException");
    }
    name = "ServiceNotSupportedException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ServiceNotSupportedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceNotSupportedException.prototype);
    }
  };
  var DeleteConflictException = class _DeleteConflictException extends IAMServiceException {
    static {
      __name(this, "DeleteConflictException");
    }
    name = "DeleteConflictException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "DeleteConflictException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _DeleteConflictException.prototype);
    }
  };
  var FeatureType = {
    ROOT_CREDENTIALS_MANAGEMENT: "RootCredentialsManagement",
    ROOT_SESSIONS: "RootSessions"
  };
  var OrganizationNotFoundException = class _OrganizationNotFoundException extends IAMServiceException {
    static {
      __name(this, "OrganizationNotFoundException");
    }
    name = "OrganizationNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "OrganizationNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _OrganizationNotFoundException.prototype);
      this.Message = opts.Message;
    }
  };
  var OrganizationNotInAllFeaturesModeException = class _OrganizationNotInAllFeaturesModeException extends IAMServiceException {
    static {
      __name(this, "OrganizationNotInAllFeaturesModeException");
    }
    name = "OrganizationNotInAllFeaturesModeException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "OrganizationNotInAllFeaturesModeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _OrganizationNotInAllFeaturesModeException.prototype);
      this.Message = opts.Message;
    }
  };
  var ServiceAccessNotEnabledException = class _ServiceAccessNotEnabledException extends IAMServiceException {
    static {
      __name(this, "ServiceAccessNotEnabledException");
    }
    name = "ServiceAccessNotEnabledException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "ServiceAccessNotEnabledException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceAccessNotEnabledException.prototype);
      this.Message = opts.Message;
    }
  };
  var InvalidAuthenticationCodeException = class _InvalidAuthenticationCodeException extends IAMServiceException {
    static {
      __name(this, "InvalidAuthenticationCodeException");
    }
    name = "InvalidAuthenticationCodeException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidAuthenticationCodeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidAuthenticationCodeException.prototype);
    }
  };
  var CallerIsNotManagementAccountException = class _CallerIsNotManagementAccountException extends IAMServiceException {
    static {
      __name(this, "CallerIsNotManagementAccountException");
    }
    name = "CallerIsNotManagementAccountException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "CallerIsNotManagementAccountException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CallerIsNotManagementAccountException.prototype);
      this.Message = opts.Message;
    }
  };
  var ReportStateType = {
    COMPLETE: "COMPLETE",
    INPROGRESS: "INPROGRESS",
    STARTED: "STARTED"
  };
  var ReportGenerationLimitExceededException = class _ReportGenerationLimitExceededException extends IAMServiceException {
    static {
      __name(this, "ReportGenerationLimitExceededException");
    }
    name = "ReportGenerationLimitExceededException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ReportGenerationLimitExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ReportGenerationLimitExceededException.prototype);
    }
  };
  var EntityType = {
    AWSManagedPolicy: "AWSManagedPolicy",
    Group: "Group",
    LocalManagedPolicy: "LocalManagedPolicy",
    Role: "Role",
    User: "User"
  };
  var SummaryKeyType = {
    AccessKeysPerUserQuota: "AccessKeysPerUserQuota",
    AccountAccessKeysPresent: "AccountAccessKeysPresent",
    AccountMFAEnabled: "AccountMFAEnabled",
    AccountPasswordPresent: "AccountPasswordPresent",
    AccountSigningCertificatesPresent: "AccountSigningCertificatesPresent",
    AttachedPoliciesPerGroupQuota: "AttachedPoliciesPerGroupQuota",
    AttachedPoliciesPerRoleQuota: "AttachedPoliciesPerRoleQuota",
    AttachedPoliciesPerUserQuota: "AttachedPoliciesPerUserQuota",
    GlobalEndpointTokenVersion: "GlobalEndpointTokenVersion",
    GroupPolicySizeQuota: "GroupPolicySizeQuota",
    Groups: "Groups",
    GroupsPerUserQuota: "GroupsPerUserQuota",
    GroupsQuota: "GroupsQuota",
    MFADevices: "MFADevices",
    MFADevicesInUse: "MFADevicesInUse",
    Policies: "Policies",
    PoliciesQuota: "PoliciesQuota",
    PolicySizeQuota: "PolicySizeQuota",
    PolicyVersionsInUse: "PolicyVersionsInUse",
    PolicyVersionsInUseQuota: "PolicyVersionsInUseQuota",
    ServerCertificates: "ServerCertificates",
    ServerCertificatesQuota: "ServerCertificatesQuota",
    SigningCertificatesPerUserQuota: "SigningCertificatesPerUserQuota",
    UserPolicySizeQuota: "UserPolicySizeQuota",
    Users: "Users",
    UsersQuota: "UsersQuota",
    VersionsPerPolicyQuota: "VersionsPerPolicyQuota"
  };
  var CredentialReportExpiredException = class _CredentialReportExpiredException extends IAMServiceException {
    static {
      __name(this, "CredentialReportExpiredException");
    }
    name = "CredentialReportExpiredException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "CredentialReportExpiredException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CredentialReportExpiredException.prototype);
    }
  };
  var CredentialReportNotPresentException = class _CredentialReportNotPresentException extends IAMServiceException {
    static {
      __name(this, "CredentialReportNotPresentException");
    }
    name = "CredentialReportNotPresentException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "CredentialReportNotPresentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CredentialReportNotPresentException.prototype);
    }
  };
  var CredentialReportNotReadyException = class _CredentialReportNotReadyException extends IAMServiceException {
    static {
      __name(this, "CredentialReportNotReadyException");
    }
    name = "CredentialReportNotReadyException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "CredentialReportNotReadyException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CredentialReportNotReadyException.prototype);
    }
  };
  var ReportFormatType = {
    text_csv: "text/csv"
  };
  var SortKeyType = {
    LAST_AUTHENTICATED_TIME_ASCENDING: "LAST_AUTHENTICATED_TIME_ASCENDING",
    LAST_AUTHENTICATED_TIME_DESCENDING: "LAST_AUTHENTICATED_TIME_DESCENDING",
    SERVICE_NAMESPACE_ASCENDING: "SERVICE_NAMESPACE_ASCENDING",
    SERVICE_NAMESPACE_DESCENDING: "SERVICE_NAMESPACE_DESCENDING"
  };
  var JobStatusType = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS"
  };
  var PolicyOwnerEntityType = {
    GROUP: "GROUP",
    ROLE: "ROLE",
    USER: "USER"
  };
  var DeletionTaskStatusType = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SUCCEEDED: "SUCCEEDED"
  };
  var EncodingType = {
    PEM: "PEM",
    SSH: "SSH"
  };
  var UnrecognizedPublicKeyEncodingException = class _UnrecognizedPublicKeyEncodingException extends IAMServiceException {
    static {
      __name(this, "UnrecognizedPublicKeyEncodingException");
    }
    name = "UnrecognizedPublicKeyEncodingException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "UnrecognizedPublicKeyEncodingException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnrecognizedPublicKeyEncodingException.prototype);
    }
  };
  var PolicyUsageType = {
    PermissionsBoundary: "PermissionsBoundary",
    PermissionsPolicy: "PermissionsPolicy"
  };
  var PolicyScopeType = {
    AWS: "AWS",
    All: "All",
    Local: "Local"
  };
  var PolicyType = {
    INLINE: "INLINE",
    MANAGED: "MANAGED"
  };
  var GlobalEndpointTokenVersion = {
    v1Token: "v1Token",
    v2Token: "v2Token"
  };
  var PolicyEvaluationException = class _PolicyEvaluationException extends IAMServiceException {
    static {
      __name(this, "PolicyEvaluationException");
    }
    name = "PolicyEvaluationException";
    $fault = "server";
    constructor(opts) {
      super({
        name: "PolicyEvaluationException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _PolicyEvaluationException.prototype);
    }
  };
  var ContextKeyTypeEnum = {
    BINARY: "binary",
    BINARY_LIST: "binaryList",
    BOOLEAN: "boolean",
    BOOLEAN_LIST: "booleanList",
    DATE: "date",
    DATE_LIST: "dateList",
    IP: "ip",
    IP_LIST: "ipList",
    NUMERIC: "numeric",
    NUMERIC_LIST: "numericList",
    STRING: "string",
    STRING_LIST: "stringList"
  };
  var AccessKeyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING }
  }), "AccessKeyFilterSensitiveLog");
  var ChangePasswordRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.OldPassword && { OldPassword: import_smithy_client.SENSITIVE_STRING },
    ...obj.NewPassword && { NewPassword: import_smithy_client.SENSITIVE_STRING }
  }), "ChangePasswordRequestFilterSensitiveLog");
  var CreateAccessKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.AccessKey && { AccessKey: AccessKeyFilterSensitiveLog(obj.AccessKey) }
  }), "CreateAccessKeyResponseFilterSensitiveLog");
  var CreateLoginProfileRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Password && { Password: import_smithy_client.SENSITIVE_STRING }
  }), "CreateLoginProfileRequestFilterSensitiveLog");
  var CreateSAMLProviderRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.AddPrivateKey && { AddPrivateKey: import_smithy_client.SENSITIVE_STRING }
  }), "CreateSAMLProviderRequestFilterSensitiveLog");
  var ServiceSpecificCredentialFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ServicePassword && { ServicePassword: import_smithy_client.SENSITIVE_STRING }
  }), "ServiceSpecificCredentialFilterSensitiveLog");
  var CreateServiceSpecificCredentialResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ServiceSpecificCredential && {
      ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential)
    }
  }), "CreateServiceSpecificCredentialResponseFilterSensitiveLog");
  var VirtualMFADeviceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Base32StringSeed && { Base32StringSeed: import_smithy_client.SENSITIVE_STRING },
    ...obj.QRCodePNG && { QRCodePNG: import_smithy_client.SENSITIVE_STRING }
  }), "VirtualMFADeviceFilterSensitiveLog");
  var CreateVirtualMFADeviceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.VirtualMFADevice && { VirtualMFADevice: VirtualMFADeviceFilterSensitiveLog(obj.VirtualMFADevice) }
  }), "CreateVirtualMFADeviceResponseFilterSensitiveLog");
  var ListVirtualMFADevicesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.VirtualMFADevices && {
      VirtualMFADevices: obj.VirtualMFADevices.map((item) => VirtualMFADeviceFilterSensitiveLog(item))
    }
  }), "ListVirtualMFADevicesResponseFilterSensitiveLog");
  var ResetServiceSpecificCredentialResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ServiceSpecificCredential && {
      ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential)
    }
  }), "ResetServiceSpecificCredentialResponseFilterSensitiveLog");
  var PolicyEvaluationDecisionType = {
    ALLOWED: "allowed",
    EXPLICIT_DENY: "explicitDeny",
    IMPLICIT_DENY: "implicitDeny"
  };
  var PolicySourceType = {
    AWS_MANAGED: "aws-managed",
    GROUP: "group",
    NONE: "none",
    RESOURCE: "resource",
    ROLE: "role",
    USER: "user",
    USER_MANAGED: "user-managed"
  };
  var KeyPairMismatchException = class _KeyPairMismatchException extends IAMServiceException {
    static {
      __name(this, "KeyPairMismatchException");
    }
    name = "KeyPairMismatchException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "KeyPairMismatchException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _KeyPairMismatchException.prototype);
    }
  };
  var MalformedCertificateException = class _MalformedCertificateException extends IAMServiceException {
    static {
      __name(this, "MalformedCertificateException");
    }
    name = "MalformedCertificateException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "MalformedCertificateException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _MalformedCertificateException.prototype);
    }
  };
  var DuplicateCertificateException = class _DuplicateCertificateException extends IAMServiceException {
    static {
      __name(this, "DuplicateCertificateException");
    }
    name = "DuplicateCertificateException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "DuplicateCertificateException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _DuplicateCertificateException.prototype);
    }
  };
  var InvalidCertificateException = class _InvalidCertificateException extends IAMServiceException {
    static {
      __name(this, "InvalidCertificateException");
    }
    name = "InvalidCertificateException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidCertificateException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidCertificateException.prototype);
    }
  };
  var DuplicateSSHPublicKeyException = class _DuplicateSSHPublicKeyException extends IAMServiceException {
    static {
      __name(this, "DuplicateSSHPublicKeyException");
    }
    name = "DuplicateSSHPublicKeyException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "DuplicateSSHPublicKeyException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _DuplicateSSHPublicKeyException.prototype);
    }
  };
  var InvalidPublicKeyException = class _InvalidPublicKeyException extends IAMServiceException {
    static {
      __name(this, "InvalidPublicKeyException");
    }
    name = "InvalidPublicKeyException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidPublicKeyException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidPublicKeyException.prototype);
    }
  };
  var UpdateLoginProfileRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Password && { Password: import_smithy_client.SENSITIVE_STRING }
  }), "UpdateLoginProfileRequestFilterSensitiveLog");
  var UpdateSAMLProviderRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.AddPrivateKey && { AddPrivateKey: import_smithy_client.SENSITIVE_STRING }
  }), "UpdateSAMLProviderRequestFilterSensitiveLog");
  var UploadServerCertificateRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.PrivateKey && { PrivateKey: import_smithy_client.SENSITIVE_STRING }
  }), "UploadServerCertificateRequestFilterSensitiveLog");
  var se_AddClientIDToOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AddClientIDToOpenIDConnectProviderRequest(input, context),
      [_A]: _ACIDTOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AddClientIDToOpenIDConnectProviderCommand");
  var se_AddRoleToInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AddRoleToInstanceProfileRequest(input, context),
      [_A]: _ARTIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AddRoleToInstanceProfileCommand");
  var se_AddUserToGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AddUserToGroupRequest(input, context),
      [_A]: _AUTG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AddUserToGroupCommand");
  var se_AttachGroupPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AttachGroupPolicyRequest(input, context),
      [_A]: _AGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AttachGroupPolicyCommand");
  var se_AttachRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AttachRolePolicyRequest(input, context),
      [_A]: _ARP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AttachRolePolicyCommand");
  var se_AttachUserPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AttachUserPolicyRequest(input, context),
      [_A]: _AUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AttachUserPolicyCommand");
  var se_ChangePasswordCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ChangePasswordRequest(input, context),
      [_A]: _CP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ChangePasswordCommand");
  var se_CreateAccessKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateAccessKeyRequest(input, context),
      [_A]: _CAK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateAccessKeyCommand");
  var se_CreateAccountAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateAccountAliasRequest(input, context),
      [_A]: _CAA,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateAccountAliasCommand");
  var se_CreateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateGroupRequest(input, context),
      [_A]: _CG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateGroupCommand");
  var se_CreateInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateInstanceProfileRequest(input, context),
      [_A]: _CIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateInstanceProfileCommand");
  var se_CreateLoginProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateLoginProfileRequest(input, context),
      [_A]: _CLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateLoginProfileCommand");
  var se_CreateOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateOpenIDConnectProviderRequest(input, context),
      [_A]: _COIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateOpenIDConnectProviderCommand");
  var se_CreatePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreatePolicyRequest(input, context),
      [_A]: _CPr,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreatePolicyCommand");
  var se_CreatePolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreatePolicyVersionRequest(input, context),
      [_A]: _CPV,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreatePolicyVersionCommand");
  var se_CreateRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateRoleRequest(input, context),
      [_A]: _CR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateRoleCommand");
  var se_CreateSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateSAMLProviderRequest(input, context),
      [_A]: _CSAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateSAMLProviderCommand");
  var se_CreateServiceLinkedRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateServiceLinkedRoleRequest(input, context),
      [_A]: _CSLR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateServiceLinkedRoleCommand");
  var se_CreateServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateServiceSpecificCredentialRequest(input, context),
      [_A]: _CSSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateServiceSpecificCredentialCommand");
  var se_CreateUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateUserRequest(input, context),
      [_A]: _CU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateUserCommand");
  var se_CreateVirtualMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_CreateVirtualMFADeviceRequest(input, context),
      [_A]: _CVMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_CreateVirtualMFADeviceCommand");
  var se_DeactivateMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeactivateMFADeviceRequest(input, context),
      [_A]: _DMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeactivateMFADeviceCommand");
  var se_DeleteAccessKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteAccessKeyRequest(input, context),
      [_A]: _DAK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteAccessKeyCommand");
  var se_DeleteAccountAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteAccountAliasRequest(input, context),
      [_A]: _DAA,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteAccountAliasCommand");
  var se_DeleteAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
      [_A]: _DAPP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteAccountPasswordPolicyCommand");
  var se_DeleteGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteGroupRequest(input, context),
      [_A]: _DG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteGroupCommand");
  var se_DeleteGroupPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteGroupPolicyRequest(input, context),
      [_A]: _DGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteGroupPolicyCommand");
  var se_DeleteInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteInstanceProfileRequest(input, context),
      [_A]: _DIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteInstanceProfileCommand");
  var se_DeleteLoginProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteLoginProfileRequest(input, context),
      [_A]: _DLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteLoginProfileCommand");
  var se_DeleteOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteOpenIDConnectProviderRequest(input, context),
      [_A]: _DOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteOpenIDConnectProviderCommand");
  var se_DeletePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeletePolicyRequest(input, context),
      [_A]: _DP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeletePolicyCommand");
  var se_DeletePolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeletePolicyVersionRequest(input, context),
      [_A]: _DPV,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeletePolicyVersionCommand");
  var se_DeleteRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteRoleRequest(input, context),
      [_A]: _DR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteRoleCommand");
  var se_DeleteRolePermissionsBoundaryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteRolePermissionsBoundaryRequest(input, context),
      [_A]: _DRPB,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteRolePermissionsBoundaryCommand");
  var se_DeleteRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteRolePolicyRequest(input, context),
      [_A]: _DRP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteRolePolicyCommand");
  var se_DeleteSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteSAMLProviderRequest(input, context),
      [_A]: _DSAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteSAMLProviderCommand");
  var se_DeleteServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteServerCertificateRequest(input, context),
      [_A]: _DSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteServerCertificateCommand");
  var se_DeleteServiceLinkedRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteServiceLinkedRoleRequest(input, context),
      [_A]: _DSLR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteServiceLinkedRoleCommand");
  var se_DeleteServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteServiceSpecificCredentialRequest(input, context),
      [_A]: _DSSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteServiceSpecificCredentialCommand");
  var se_DeleteSigningCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteSigningCertificateRequest(input, context),
      [_A]: _DSCe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteSigningCertificateCommand");
  var se_DeleteSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteSSHPublicKeyRequest(input, context),
      [_A]: _DSSHPK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteSSHPublicKeyCommand");
  var se_DeleteUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteUserRequest(input, context),
      [_A]: _DU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteUserCommand");
  var se_DeleteUserPermissionsBoundaryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteUserPermissionsBoundaryRequest(input, context),
      [_A]: _DUPB,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteUserPermissionsBoundaryCommand");
  var se_DeleteUserPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteUserPolicyRequest(input, context),
      [_A]: _DUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteUserPolicyCommand");
  var se_DeleteVirtualMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DeleteVirtualMFADeviceRequest(input, context),
      [_A]: _DVMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteVirtualMFADeviceCommand");
  var se_DetachGroupPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DetachGroupPolicyRequest(input, context),
      [_A]: _DGPe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DetachGroupPolicyCommand");
  var se_DetachRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DetachRolePolicyRequest(input, context),
      [_A]: _DRPe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DetachRolePolicyCommand");
  var se_DetachUserPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DetachUserPolicyRequest(input, context),
      [_A]: _DUPe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DetachUserPolicyCommand");
  var se_DisableOrganizationsRootCredentialsManagementCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DisableOrganizationsRootCredentialsManagementRequest(input, context),
      [_A]: _DORCM,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DisableOrganizationsRootCredentialsManagementCommand");
  var se_DisableOrganizationsRootSessionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DisableOrganizationsRootSessionsRequest(input, context),
      [_A]: _DORS,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DisableOrganizationsRootSessionsCommand");
  var se_EnableMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_EnableMFADeviceRequest(input, context),
      [_A]: _EMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_EnableMFADeviceCommand");
  var se_EnableOrganizationsRootCredentialsManagementCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_EnableOrganizationsRootCredentialsManagementRequest(input, context),
      [_A]: _EORCM,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_EnableOrganizationsRootCredentialsManagementCommand");
  var se_EnableOrganizationsRootSessionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_EnableOrganizationsRootSessionsRequest(input, context),
      [_A]: _EORS,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_EnableOrganizationsRootSessionsCommand");
  var se_GenerateCredentialReportCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
      [_A]: _GCR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GenerateCredentialReportCommand");
  var se_GenerateOrganizationsAccessReportCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GenerateOrganizationsAccessReportRequest(input, context),
      [_A]: _GOAR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GenerateOrganizationsAccessReportCommand");
  var se_GenerateServiceLastAccessedDetailsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GenerateServiceLastAccessedDetailsRequest(input, context),
      [_A]: _GSLAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GenerateServiceLastAccessedDetailsCommand");
  var se_GetAccessKeyLastUsedCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetAccessKeyLastUsedRequest(input, context),
      [_A]: _GAKLU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAccessKeyLastUsedCommand");
  var se_GetAccountAuthorizationDetailsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetAccountAuthorizationDetailsRequest(input, context),
      [_A]: _GAAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAccountAuthorizationDetailsCommand");
  var se_GetAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
      [_A]: _GAPP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAccountPasswordPolicyCommand");
  var se_GetAccountSummaryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
      [_A]: _GAS,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAccountSummaryCommand");
  var se_GetContextKeysForCustomPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetContextKeysForCustomPolicyRequest(input, context),
      [_A]: _GCKFCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetContextKeysForCustomPolicyCommand");
  var se_GetContextKeysForPrincipalPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetContextKeysForPrincipalPolicyRequest(input, context),
      [_A]: _GCKFPP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetContextKeysForPrincipalPolicyCommand");
  var se_GetCredentialReportCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
      [_A]: _GCRe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetCredentialReportCommand");
  var se_GetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetGroupRequest(input, context),
      [_A]: _GG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetGroupCommand");
  var se_GetGroupPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetGroupPolicyRequest(input, context),
      [_A]: _GGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetGroupPolicyCommand");
  var se_GetInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetInstanceProfileRequest(input, context),
      [_A]: _GIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetInstanceProfileCommand");
  var se_GetLoginProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetLoginProfileRequest(input, context),
      [_A]: _GLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetLoginProfileCommand");
  var se_GetMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetMFADeviceRequest(input, context),
      [_A]: _GMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetMFADeviceCommand");
  var se_GetOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetOpenIDConnectProviderRequest(input, context),
      [_A]: _GOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetOpenIDConnectProviderCommand");
  var se_GetOrganizationsAccessReportCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetOrganizationsAccessReportRequest(input, context),
      [_A]: _GOARe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetOrganizationsAccessReportCommand");
  var se_GetPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetPolicyRequest(input, context),
      [_A]: _GP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetPolicyCommand");
  var se_GetPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetPolicyVersionRequest(input, context),
      [_A]: _GPV,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetPolicyVersionCommand");
  var se_GetRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetRoleRequest(input, context),
      [_A]: _GR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetRoleCommand");
  var se_GetRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetRolePolicyRequest(input, context),
      [_A]: _GRP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetRolePolicyCommand");
  var se_GetSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetSAMLProviderRequest(input, context),
      [_A]: _GSAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetSAMLProviderCommand");
  var se_GetServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetServerCertificateRequest(input, context),
      [_A]: _GSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServerCertificateCommand");
  var se_GetServiceLastAccessedDetailsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetServiceLastAccessedDetailsRequest(input, context),
      [_A]: _GSLADe,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServiceLastAccessedDetailsCommand");
  var se_GetServiceLastAccessedDetailsWithEntitiesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetServiceLastAccessedDetailsWithEntitiesRequest(input, context),
      [_A]: _GSLADWE,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServiceLastAccessedDetailsWithEntitiesCommand");
  var se_GetServiceLinkedRoleDeletionStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetServiceLinkedRoleDeletionStatusRequest(input, context),
      [_A]: _GSLRDS,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServiceLinkedRoleDeletionStatusCommand");
  var se_GetSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetSSHPublicKeyRequest(input, context),
      [_A]: _GSSHPK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetSSHPublicKeyCommand");
  var se_GetUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetUserRequest(input, context),
      [_A]: _GU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetUserCommand");
  var se_GetUserPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetUserPolicyRequest(input, context),
      [_A]: _GUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetUserPolicyCommand");
  var se_ListAccessKeysCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListAccessKeysRequest(input, context),
      [_A]: _LAK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAccessKeysCommand");
  var se_ListAccountAliasesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListAccountAliasesRequest(input, context),
      [_A]: _LAA,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAccountAliasesCommand");
  var se_ListAttachedGroupPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListAttachedGroupPoliciesRequest(input, context),
      [_A]: _LAGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAttachedGroupPoliciesCommand");
  var se_ListAttachedRolePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListAttachedRolePoliciesRequest(input, context),
      [_A]: _LARP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAttachedRolePoliciesCommand");
  var se_ListAttachedUserPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListAttachedUserPoliciesRequest(input, context),
      [_A]: _LAUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAttachedUserPoliciesCommand");
  var se_ListEntitiesForPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListEntitiesForPolicyRequest(input, context),
      [_A]: _LEFP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListEntitiesForPolicyCommand");
  var se_ListGroupPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListGroupPoliciesRequest(input, context),
      [_A]: _LGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListGroupPoliciesCommand");
  var se_ListGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListGroupsRequest(input, context),
      [_A]: _LG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListGroupsCommand");
  var se_ListGroupsForUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListGroupsForUserRequest(input, context),
      [_A]: _LGFU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListGroupsForUserCommand");
  var se_ListInstanceProfilesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListInstanceProfilesRequest(input, context),
      [_A]: _LIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListInstanceProfilesCommand");
  var se_ListInstanceProfilesForRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListInstanceProfilesForRoleRequest(input, context),
      [_A]: _LIPFR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListInstanceProfilesForRoleCommand");
  var se_ListInstanceProfileTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListInstanceProfileTagsRequest(input, context),
      [_A]: _LIPT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListInstanceProfileTagsCommand");
  var se_ListMFADevicesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListMFADevicesRequest(input, context),
      [_A]: _LMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListMFADevicesCommand");
  var se_ListMFADeviceTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListMFADeviceTagsRequest(input, context),
      [_A]: _LMFADT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListMFADeviceTagsCommand");
  var se_ListOpenIDConnectProvidersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListOpenIDConnectProvidersRequest(input, context),
      [_A]: _LOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListOpenIDConnectProvidersCommand");
  var se_ListOpenIDConnectProviderTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListOpenIDConnectProviderTagsRequest(input, context),
      [_A]: _LOIDCPT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListOpenIDConnectProviderTagsCommand");
  var se_ListOrganizationsFeaturesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListOrganizationsFeaturesRequest(input, context),
      [_A]: _LOF,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListOrganizationsFeaturesCommand");
  var se_ListPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListPoliciesRequest(input, context),
      [_A]: _LP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListPoliciesCommand");
  var se_ListPoliciesGrantingServiceAccessCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListPoliciesGrantingServiceAccessRequest(input, context),
      [_A]: _LPGSA,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListPoliciesGrantingServiceAccessCommand");
  var se_ListPolicyTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListPolicyTagsRequest(input, context),
      [_A]: _LPT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListPolicyTagsCommand");
  var se_ListPolicyVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListPolicyVersionsRequest(input, context),
      [_A]: _LPV,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListPolicyVersionsCommand");
  var se_ListRolePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListRolePoliciesRequest(input, context),
      [_A]: _LRP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListRolePoliciesCommand");
  var se_ListRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListRolesRequest(input, context),
      [_A]: _LR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListRolesCommand");
  var se_ListRoleTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListRoleTagsRequest(input, context),
      [_A]: _LRT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListRoleTagsCommand");
  var se_ListSAMLProvidersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListSAMLProvidersRequest(input, context),
      [_A]: _LSAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListSAMLProvidersCommand");
  var se_ListSAMLProviderTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListSAMLProviderTagsRequest(input, context),
      [_A]: _LSAMLPT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListSAMLProviderTagsCommand");
  var se_ListServerCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListServerCertificatesRequest(input, context),
      [_A]: _LSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServerCertificatesCommand");
  var se_ListServerCertificateTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListServerCertificateTagsRequest(input, context),
      [_A]: _LSCT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServerCertificateTagsCommand");
  var se_ListServiceSpecificCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListServiceSpecificCredentialsRequest(input, context),
      [_A]: _LSSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServiceSpecificCredentialsCommand");
  var se_ListSigningCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListSigningCertificatesRequest(input, context),
      [_A]: _LSCi,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListSigningCertificatesCommand");
  var se_ListSSHPublicKeysCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListSSHPublicKeysRequest(input, context),
      [_A]: _LSSHPK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListSSHPublicKeysCommand");
  var se_ListUserPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListUserPoliciesRequest(input, context),
      [_A]: _LUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListUserPoliciesCommand");
  var se_ListUsersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListUsersRequest(input, context),
      [_A]: _LU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListUsersCommand");
  var se_ListUserTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListUserTagsRequest(input, context),
      [_A]: _LUT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListUserTagsCommand");
  var se_ListVirtualMFADevicesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ListVirtualMFADevicesRequest(input, context),
      [_A]: _LVMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListVirtualMFADevicesCommand");
  var se_PutGroupPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_PutGroupPolicyRequest(input, context),
      [_A]: _PGP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutGroupPolicyCommand");
  var se_PutRolePermissionsBoundaryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_PutRolePermissionsBoundaryRequest(input, context),
      [_A]: _PRPB,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutRolePermissionsBoundaryCommand");
  var se_PutRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_PutRolePolicyRequest(input, context),
      [_A]: _PRP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutRolePolicyCommand");
  var se_PutUserPermissionsBoundaryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_PutUserPermissionsBoundaryRequest(input, context),
      [_A]: _PUPB,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutUserPermissionsBoundaryCommand");
  var se_PutUserPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_PutUserPolicyRequest(input, context),
      [_A]: _PUP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutUserPolicyCommand");
  var se_RemoveClientIDFromOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_RemoveClientIDFromOpenIDConnectProviderRequest(input, context),
      [_A]: _RCIDFOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_RemoveClientIDFromOpenIDConnectProviderCommand");
  var se_RemoveRoleFromInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_RemoveRoleFromInstanceProfileRequest(input, context),
      [_A]: _RRFIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_RemoveRoleFromInstanceProfileCommand");
  var se_RemoveUserFromGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_RemoveUserFromGroupRequest(input, context),
      [_A]: _RUFG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_RemoveUserFromGroupCommand");
  var se_ResetServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ResetServiceSpecificCredentialRequest(input, context),
      [_A]: _RSSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ResetServiceSpecificCredentialCommand");
  var se_ResyncMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_ResyncMFADeviceRequest(input, context),
      [_A]: _RMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ResyncMFADeviceCommand");
  var se_SetDefaultPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_SetDefaultPolicyVersionRequest(input, context),
      [_A]: _SDPV,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_SetDefaultPolicyVersionCommand");
  var se_SetSecurityTokenServicePreferencesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_SetSecurityTokenServicePreferencesRequest(input, context),
      [_A]: _SSTSP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_SetSecurityTokenServicePreferencesCommand");
  var se_SimulateCustomPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_SimulateCustomPolicyRequest(input, context),
      [_A]: _SCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_SimulateCustomPolicyCommand");
  var se_SimulatePrincipalPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_SimulatePrincipalPolicyRequest(input, context),
      [_A]: _SPP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_SimulatePrincipalPolicyCommand");
  var se_TagInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagInstanceProfileRequest(input, context),
      [_A]: _TIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagInstanceProfileCommand");
  var se_TagMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagMFADeviceRequest(input, context),
      [_A]: _TMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagMFADeviceCommand");
  var se_TagOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagOpenIDConnectProviderRequest(input, context),
      [_A]: _TOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagOpenIDConnectProviderCommand");
  var se_TagPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagPolicyRequest(input, context),
      [_A]: _TP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagPolicyCommand");
  var se_TagRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagRoleRequest(input, context),
      [_A]: _TR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagRoleCommand");
  var se_TagSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagSAMLProviderRequest(input, context),
      [_A]: _TSAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagSAMLProviderCommand");
  var se_TagServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagServerCertificateRequest(input, context),
      [_A]: _TSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagServerCertificateCommand");
  var se_TagUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_TagUserRequest(input, context),
      [_A]: _TU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagUserCommand");
  var se_UntagInstanceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagInstanceProfileRequest(input, context),
      [_A]: _UIP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagInstanceProfileCommand");
  var se_UntagMFADeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagMFADeviceRequest(input, context),
      [_A]: _UMFAD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagMFADeviceCommand");
  var se_UntagOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagOpenIDConnectProviderRequest(input, context),
      [_A]: _UOIDCP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagOpenIDConnectProviderCommand");
  var se_UntagPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagPolicyRequest(input, context),
      [_A]: _UP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagPolicyCommand");
  var se_UntagRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagRoleRequest(input, context),
      [_A]: _UR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagRoleCommand");
  var se_UntagSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagSAMLProviderRequest(input, context),
      [_A]: _USAMLP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagSAMLProviderCommand");
  var se_UntagServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagServerCertificateRequest(input, context),
      [_A]: _USC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagServerCertificateCommand");
  var se_UntagUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UntagUserRequest(input, context),
      [_A]: _UU,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagUserCommand");
  var se_UpdateAccessKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateAccessKeyRequest(input, context),
      [_A]: _UAK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateAccessKeyCommand");
  var se_UpdateAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateAccountPasswordPolicyRequest(input, context),
      [_A]: _UAPP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateAccountPasswordPolicyCommand");
  var se_UpdateAssumeRolePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateAssumeRolePolicyRequest(input, context),
      [_A]: _UARP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateAssumeRolePolicyCommand");
  var se_UpdateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateGroupRequest(input, context),
      [_A]: _UG,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateGroupCommand");
  var se_UpdateLoginProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateLoginProfileRequest(input, context),
      [_A]: _ULP,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateLoginProfileCommand");
  var se_UpdateOpenIDConnectProviderThumbprintCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateOpenIDConnectProviderThumbprintRequest(input, context),
      [_A]: _UOIDCPT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateOpenIDConnectProviderThumbprintCommand");
  var se_UpdateRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateRoleRequest(input, context),
      [_A]: _URp,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateRoleCommand");
  var se_UpdateRoleDescriptionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateRoleDescriptionRequest(input, context),
      [_A]: _URD,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateRoleDescriptionCommand");
  var se_UpdateSAMLProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateSAMLProviderRequest(input, context),
      [_A]: _USAMLPp,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateSAMLProviderCommand");
  var se_UpdateServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateServerCertificateRequest(input, context),
      [_A]: _USCp,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateServerCertificateCommand");
  var se_UpdateServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateServiceSpecificCredentialRequest(input, context),
      [_A]: _USSC,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateServiceSpecificCredentialCommand");
  var se_UpdateSigningCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateSigningCertificateRequest(input, context),
      [_A]: _USCpd,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateSigningCertificateCommand");
  var se_UpdateSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateSSHPublicKeyRequest(input, context),
      [_A]: _USSHPK,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateSSHPublicKeyCommand");
  var se_UpdateUserCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UpdateUserRequest(input, context),
      [_A]: _UUp,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UpdateUserCommand");
  var se_UploadServerCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UploadServerCertificateRequest(input, context),
      [_A]: _USCpl,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UploadServerCertificateCommand");
  var se_UploadSigningCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UploadSigningCertificateRequest(input, context),
      [_A]: _USCplo,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UploadSigningCertificateCommand");
  var se_UploadSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_UploadSSHPublicKeyRequest(input, context),
      [_A]: _USSHPKp,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UploadSSHPublicKeyCommand");
  var de_AddClientIDToOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AddClientIDToOpenIDConnectProviderCommand");
  var de_AddRoleToInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AddRoleToInstanceProfileCommand");
  var de_AddUserToGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AddUserToGroupCommand");
  var de_AttachGroupPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AttachGroupPolicyCommand");
  var de_AttachRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AttachRolePolicyCommand");
  var de_AttachUserPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_AttachUserPolicyCommand");
  var de_ChangePasswordCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_ChangePasswordCommand");
  var de_CreateAccessKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateAccessKeyResponse(data.CreateAccessKeyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateAccessKeyCommand");
  var de_CreateAccountAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_CreateAccountAliasCommand");
  var de_CreateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateGroupResponse(data.CreateGroupResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateGroupCommand");
  var de_CreateInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateInstanceProfileResponse(data.CreateInstanceProfileResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateInstanceProfileCommand");
  var de_CreateLoginProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateLoginProfileResponse(data.CreateLoginProfileResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateLoginProfileCommand");
  var de_CreateOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateOpenIDConnectProviderResponse(data.CreateOpenIDConnectProviderResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateOpenIDConnectProviderCommand");
  var de_CreatePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreatePolicyResponse(data.CreatePolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreatePolicyCommand");
  var de_CreatePolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreatePolicyVersionResponse(data.CreatePolicyVersionResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreatePolicyVersionCommand");
  var de_CreateRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateRoleResponse(data.CreateRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateRoleCommand");
  var de_CreateSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateSAMLProviderResponse(data.CreateSAMLProviderResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateSAMLProviderCommand");
  var de_CreateServiceLinkedRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateServiceLinkedRoleResponse(data.CreateServiceLinkedRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateServiceLinkedRoleCommand");
  var de_CreateServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateServiceSpecificCredentialResponse(data.CreateServiceSpecificCredentialResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateServiceSpecificCredentialCommand");
  var de_CreateUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateUserResponse(data.CreateUserResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateUserCommand");
  var de_CreateVirtualMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_CreateVirtualMFADeviceResponse(data.CreateVirtualMFADeviceResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_CreateVirtualMFADeviceCommand");
  var de_DeactivateMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeactivateMFADeviceCommand");
  var de_DeleteAccessKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteAccessKeyCommand");
  var de_DeleteAccountAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteAccountAliasCommand");
  var de_DeleteAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteAccountPasswordPolicyCommand");
  var de_DeleteGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteGroupCommand");
  var de_DeleteGroupPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteGroupPolicyCommand");
  var de_DeleteInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteInstanceProfileCommand");
  var de_DeleteLoginProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteLoginProfileCommand");
  var de_DeleteOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteOpenIDConnectProviderCommand");
  var de_DeletePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeletePolicyCommand");
  var de_DeletePolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeletePolicyVersionCommand");
  var de_DeleteRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteRoleCommand");
  var de_DeleteRolePermissionsBoundaryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteRolePermissionsBoundaryCommand");
  var de_DeleteRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteRolePolicyCommand");
  var de_DeleteSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteSAMLProviderCommand");
  var de_DeleteServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteServerCertificateCommand");
  var de_DeleteServiceLinkedRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_DeleteServiceLinkedRoleResponse(data.DeleteServiceLinkedRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DeleteServiceLinkedRoleCommand");
  var de_DeleteServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteServiceSpecificCredentialCommand");
  var de_DeleteSigningCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteSigningCertificateCommand");
  var de_DeleteSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteSSHPublicKeyCommand");
  var de_DeleteUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteUserCommand");
  var de_DeleteUserPermissionsBoundaryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteUserPermissionsBoundaryCommand");
  var de_DeleteUserPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteUserPolicyCommand");
  var de_DeleteVirtualMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DeleteVirtualMFADeviceCommand");
  var de_DetachGroupPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DetachGroupPolicyCommand");
  var de_DetachRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DetachRolePolicyCommand");
  var de_DetachUserPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_DetachUserPolicyCommand");
  var de_DisableOrganizationsRootCredentialsManagementCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_DisableOrganizationsRootCredentialsManagementResponse(data.DisableOrganizationsRootCredentialsManagementResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DisableOrganizationsRootCredentialsManagementCommand");
  var de_DisableOrganizationsRootSessionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_DisableOrganizationsRootSessionsResponse(data.DisableOrganizationsRootSessionsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DisableOrganizationsRootSessionsCommand");
  var de_EnableMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_EnableMFADeviceCommand");
  var de_EnableOrganizationsRootCredentialsManagementCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_EnableOrganizationsRootCredentialsManagementResponse(data.EnableOrganizationsRootCredentialsManagementResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_EnableOrganizationsRootCredentialsManagementCommand");
  var de_EnableOrganizationsRootSessionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_EnableOrganizationsRootSessionsResponse(data.EnableOrganizationsRootSessionsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_EnableOrganizationsRootSessionsCommand");
  var de_GenerateCredentialReportCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GenerateCredentialReportResponse(data.GenerateCredentialReportResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GenerateCredentialReportCommand");
  var de_GenerateOrganizationsAccessReportCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GenerateOrganizationsAccessReportResponse(data.GenerateOrganizationsAccessReportResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GenerateOrganizationsAccessReportCommand");
  var de_GenerateServiceLastAccessedDetailsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GenerateServiceLastAccessedDetailsResponse(data.GenerateServiceLastAccessedDetailsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GenerateServiceLastAccessedDetailsCommand");
  var de_GetAccessKeyLastUsedCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyLastUsedResponse(data.GetAccessKeyLastUsedResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAccessKeyLastUsedCommand");
  var de_GetAccountAuthorizationDetailsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetAccountAuthorizationDetailsResponse(data.GetAccountAuthorizationDetailsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAccountAuthorizationDetailsCommand");
  var de_GetAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetAccountPasswordPolicyResponse(data.GetAccountPasswordPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAccountPasswordPolicyCommand");
  var de_GetAccountSummaryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetAccountSummaryResponse(data.GetAccountSummaryResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAccountSummaryCommand");
  var de_GetContextKeysForCustomPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForCustomPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetContextKeysForCustomPolicyCommand");
  var de_GetContextKeysForPrincipalPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForPrincipalPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetContextKeysForPrincipalPolicyCommand");
  var de_GetCredentialReportCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetCredentialReportResponse(data.GetCredentialReportResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetCredentialReportCommand");
  var de_GetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetGroupResponse(data.GetGroupResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetGroupCommand");
  var de_GetGroupPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetGroupPolicyResponse(data.GetGroupPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetGroupPolicyCommand");
  var de_GetInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetInstanceProfileResponse(data.GetInstanceProfileResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetInstanceProfileCommand");
  var de_GetLoginProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetLoginProfileResponse(data.GetLoginProfileResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetLoginProfileCommand");
  var de_GetMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetMFADeviceResponse(data.GetMFADeviceResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetMFADeviceCommand");
  var de_GetOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetOpenIDConnectProviderResponse(data.GetOpenIDConnectProviderResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetOpenIDConnectProviderCommand");
  var de_GetOrganizationsAccessReportCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetOrganizationsAccessReportResponse(data.GetOrganizationsAccessReportResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetOrganizationsAccessReportCommand");
  var de_GetPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetPolicyResponse(data.GetPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetPolicyCommand");
  var de_GetPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetPolicyVersionResponse(data.GetPolicyVersionResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetPolicyVersionCommand");
  var de_GetRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetRoleResponse(data.GetRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetRoleCommand");
  var de_GetRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetRolePolicyResponse(data.GetRolePolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetRolePolicyCommand");
  var de_GetSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetSAMLProviderResponse(data.GetSAMLProviderResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetSAMLProviderCommand");
  var de_GetServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetServerCertificateResponse(data.GetServerCertificateResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServerCertificateCommand");
  var de_GetServiceLastAccessedDetailsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetServiceLastAccessedDetailsResponse(data.GetServiceLastAccessedDetailsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServiceLastAccessedDetailsCommand");
  var de_GetServiceLastAccessedDetailsWithEntitiesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetServiceLastAccessedDetailsWithEntitiesResponse(data.GetServiceLastAccessedDetailsWithEntitiesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServiceLastAccessedDetailsWithEntitiesCommand");
  var de_GetServiceLinkedRoleDeletionStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetServiceLinkedRoleDeletionStatusResponse(data.GetServiceLinkedRoleDeletionStatusResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServiceLinkedRoleDeletionStatusCommand");
  var de_GetSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetSSHPublicKeyResponse(data.GetSSHPublicKeyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetSSHPublicKeyCommand");
  var de_GetUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetUserResponse(data.GetUserResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetUserCommand");
  var de_GetUserPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetUserPolicyResponse(data.GetUserPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetUserPolicyCommand");
  var de_ListAccessKeysCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListAccessKeysResponse(data.ListAccessKeysResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAccessKeysCommand");
  var de_ListAccountAliasesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListAccountAliasesResponse(data.ListAccountAliasesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAccountAliasesCommand");
  var de_ListAttachedGroupPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListAttachedGroupPoliciesResponse(data.ListAttachedGroupPoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAttachedGroupPoliciesCommand");
  var de_ListAttachedRolePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListAttachedRolePoliciesResponse(data.ListAttachedRolePoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAttachedRolePoliciesCommand");
  var de_ListAttachedUserPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListAttachedUserPoliciesResponse(data.ListAttachedUserPoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAttachedUserPoliciesCommand");
  var de_ListEntitiesForPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListEntitiesForPolicyResponse(data.ListEntitiesForPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListEntitiesForPolicyCommand");
  var de_ListGroupPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListGroupPoliciesResponse(data.ListGroupPoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListGroupPoliciesCommand");
  var de_ListGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListGroupsResponse(data.ListGroupsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListGroupsCommand");
  var de_ListGroupsForUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListGroupsForUserResponse(data.ListGroupsForUserResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListGroupsForUserCommand");
  var de_ListInstanceProfilesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfilesResponse(data.ListInstanceProfilesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListInstanceProfilesCommand");
  var de_ListInstanceProfilesForRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfilesForRoleResponse(data.ListInstanceProfilesForRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListInstanceProfilesForRoleCommand");
  var de_ListInstanceProfileTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListInstanceProfileTagsResponse(data.ListInstanceProfileTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListInstanceProfileTagsCommand");
  var de_ListMFADevicesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListMFADevicesResponse(data.ListMFADevicesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListMFADevicesCommand");
  var de_ListMFADeviceTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListMFADeviceTagsResponse(data.ListMFADeviceTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListMFADeviceTagsCommand");
  var de_ListOpenIDConnectProvidersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListOpenIDConnectProvidersResponse(data.ListOpenIDConnectProvidersResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListOpenIDConnectProvidersCommand");
  var de_ListOpenIDConnectProviderTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListOpenIDConnectProviderTagsResponse(data.ListOpenIDConnectProviderTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListOpenIDConnectProviderTagsCommand");
  var de_ListOrganizationsFeaturesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListOrganizationsFeaturesResponse(data.ListOrganizationsFeaturesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListOrganizationsFeaturesCommand");
  var de_ListPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListPoliciesResponse(data.ListPoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListPoliciesCommand");
  var de_ListPoliciesGrantingServiceAccessCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListPoliciesGrantingServiceAccessResponse(data.ListPoliciesGrantingServiceAccessResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListPoliciesGrantingServiceAccessCommand");
  var de_ListPolicyTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListPolicyTagsResponse(data.ListPolicyTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListPolicyTagsCommand");
  var de_ListPolicyVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListPolicyVersionsResponse(data.ListPolicyVersionsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListPolicyVersionsCommand");
  var de_ListRolePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListRolePoliciesResponse(data.ListRolePoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListRolePoliciesCommand");
  var de_ListRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListRolesResponse(data.ListRolesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListRolesCommand");
  var de_ListRoleTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListRoleTagsResponse(data.ListRoleTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListRoleTagsCommand");
  var de_ListSAMLProvidersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListSAMLProvidersResponse(data.ListSAMLProvidersResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListSAMLProvidersCommand");
  var de_ListSAMLProviderTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListSAMLProviderTagsResponse(data.ListSAMLProviderTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListSAMLProviderTagsCommand");
  var de_ListServerCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListServerCertificatesResponse(data.ListServerCertificatesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServerCertificatesCommand");
  var de_ListServerCertificateTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListServerCertificateTagsResponse(data.ListServerCertificateTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServerCertificateTagsCommand");
  var de_ListServiceSpecificCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListServiceSpecificCredentialsResponse(data.ListServiceSpecificCredentialsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServiceSpecificCredentialsCommand");
  var de_ListSigningCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListSigningCertificatesResponse(data.ListSigningCertificatesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListSigningCertificatesCommand");
  var de_ListSSHPublicKeysCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListSSHPublicKeysResponse(data.ListSSHPublicKeysResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListSSHPublicKeysCommand");
  var de_ListUserPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListUserPoliciesResponse(data.ListUserPoliciesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListUserPoliciesCommand");
  var de_ListUsersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListUsersResponse(data.ListUsersResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListUsersCommand");
  var de_ListUserTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListUserTagsResponse(data.ListUserTagsResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListUserTagsCommand");
  var de_ListVirtualMFADevicesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ListVirtualMFADevicesResponse(data.ListVirtualMFADevicesResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListVirtualMFADevicesCommand");
  var de_PutGroupPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutGroupPolicyCommand");
  var de_PutRolePermissionsBoundaryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutRolePermissionsBoundaryCommand");
  var de_PutRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutRolePolicyCommand");
  var de_PutUserPermissionsBoundaryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutUserPermissionsBoundaryCommand");
  var de_PutUserPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_PutUserPolicyCommand");
  var de_RemoveClientIDFromOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_RemoveClientIDFromOpenIDConnectProviderCommand");
  var de_RemoveRoleFromInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_RemoveRoleFromInstanceProfileCommand");
  var de_RemoveUserFromGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_RemoveUserFromGroupCommand");
  var de_ResetServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_ResetServiceSpecificCredentialResponse(data.ResetServiceSpecificCredentialResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ResetServiceSpecificCredentialCommand");
  var de_ResyncMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_ResyncMFADeviceCommand");
  var de_SetDefaultPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_SetDefaultPolicyVersionCommand");
  var de_SetSecurityTokenServicePreferencesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_SetSecurityTokenServicePreferencesCommand");
  var de_SimulateCustomPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_SimulatePolicyResponse(data.SimulateCustomPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_SimulateCustomPolicyCommand");
  var de_SimulatePrincipalPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_SimulatePolicyResponse(data.SimulatePrincipalPolicyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_SimulatePrincipalPolicyCommand");
  var de_TagInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagInstanceProfileCommand");
  var de_TagMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagMFADeviceCommand");
  var de_TagOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagOpenIDConnectProviderCommand");
  var de_TagPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagPolicyCommand");
  var de_TagRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagRoleCommand");
  var de_TagSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagSAMLProviderCommand");
  var de_TagServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagServerCertificateCommand");
  var de_TagUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_TagUserCommand");
  var de_UntagInstanceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagInstanceProfileCommand");
  var de_UntagMFADeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagMFADeviceCommand");
  var de_UntagOpenIDConnectProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagOpenIDConnectProviderCommand");
  var de_UntagPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagPolicyCommand");
  var de_UntagRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagRoleCommand");
  var de_UntagSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagSAMLProviderCommand");
  var de_UntagServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagServerCertificateCommand");
  var de_UntagUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UntagUserCommand");
  var de_UpdateAccessKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateAccessKeyCommand");
  var de_UpdateAccountPasswordPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateAccountPasswordPolicyCommand");
  var de_UpdateAssumeRolePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateAssumeRolePolicyCommand");
  var de_UpdateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateGroupCommand");
  var de_UpdateLoginProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateLoginProfileCommand");
  var de_UpdateOpenIDConnectProviderThumbprintCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateOpenIDConnectProviderThumbprintCommand");
  var de_UpdateRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UpdateRoleResponse(data.UpdateRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UpdateRoleCommand");
  var de_UpdateRoleDescriptionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UpdateRoleDescriptionResponse(data.UpdateRoleDescriptionResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UpdateRoleDescriptionCommand");
  var de_UpdateSAMLProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UpdateSAMLProviderResponse(data.UpdateSAMLProviderResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UpdateSAMLProviderCommand");
  var de_UpdateServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateServerCertificateCommand");
  var de_UpdateServiceSpecificCredentialCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateServiceSpecificCredentialCommand");
  var de_UpdateSigningCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateSigningCertificateCommand");
  var de_UpdateSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateSSHPublicKeyCommand");
  var de_UpdateUserCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    await (0, import_smithy_client.collectBody)(output.body, context);
    const response = {
      $metadata: deserializeMetadata(output)
    };
    return response;
  }, "de_UpdateUserCommand");
  var de_UploadServerCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UploadServerCertificateResponse(data.UploadServerCertificateResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UploadServerCertificateCommand");
  var de_UploadSigningCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UploadSigningCertificateResponse(data.UploadSigningCertificateResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UploadSigningCertificateCommand");
  var de_UploadSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_UploadSSHPublicKeyResponse(data.UploadSSHPublicKeyResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UploadSSHPublicKeyCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidInput":
      case "com.amazonaws.iam#InvalidInputException":
        throw await de_InvalidInputExceptionRes(parsedOutput, context);
      case "LimitExceeded":
      case "com.amazonaws.iam#LimitExceededException":
        throw await de_LimitExceededExceptionRes(parsedOutput, context);
      case "NoSuchEntity":
      case "com.amazonaws.iam#NoSuchEntityException":
        throw await de_NoSuchEntityExceptionRes(parsedOutput, context);
      case "ServiceFailure":
      case "com.amazonaws.iam#ServiceFailureException":
        throw await de_ServiceFailureExceptionRes(parsedOutput, context);
      case "EntityAlreadyExists":
      case "com.amazonaws.iam#EntityAlreadyExistsException":
        throw await de_EntityAlreadyExistsExceptionRes(parsedOutput, context);
      case "UnmodifiableEntity":
      case "com.amazonaws.iam#UnmodifiableEntityException":
        throw await de_UnmodifiableEntityExceptionRes(parsedOutput, context);
      case "PolicyNotAttachable":
      case "com.amazonaws.iam#PolicyNotAttachableException":
        throw await de_PolicyNotAttachableExceptionRes(parsedOutput, context);
      case "EntityTemporarilyUnmodifiable":
      case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
        throw await de_EntityTemporarilyUnmodifiableExceptionRes(parsedOutput, context);
      case "InvalidUserType":
      case "com.amazonaws.iam#InvalidUserTypeException":
        throw await de_InvalidUserTypeExceptionRes(parsedOutput, context);
      case "PasswordPolicyViolation":
      case "com.amazonaws.iam#PasswordPolicyViolationException":
        throw await de_PasswordPolicyViolationExceptionRes(parsedOutput, context);
      case "ConcurrentModification":
      case "com.amazonaws.iam#ConcurrentModificationException":
        throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
      case "OpenIdIdpCommunicationError":
      case "com.amazonaws.iam#OpenIdIdpCommunicationErrorException":
        throw await de_OpenIdIdpCommunicationErrorExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.iam#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "NotSupportedService":
      case "com.amazonaws.iam#ServiceNotSupportedException":
        throw await de_ServiceNotSupportedExceptionRes(parsedOutput, context);
      case "DeleteConflict":
      case "com.amazonaws.iam#DeleteConflictException":
        throw await de_DeleteConflictExceptionRes(parsedOutput, context);
      case "AccountNotManagementOrDelegatedAdministratorException":
      case "com.amazonaws.iam#AccountNotManagementOrDelegatedAdministratorException":
        throw await de_AccountNotManagementOrDelegatedAdministratorExceptionRes(parsedOutput, context);
      case "OrganizationNotFoundException":
      case "com.amazonaws.iam#OrganizationNotFoundException":
        throw await de_OrganizationNotFoundExceptionRes(parsedOutput, context);
      case "OrganizationNotInAllFeaturesModeException":
      case "com.amazonaws.iam#OrganizationNotInAllFeaturesModeException":
        throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput, context);
      case "ServiceAccessNotEnabledException":
      case "com.amazonaws.iam#ServiceAccessNotEnabledException":
        throw await de_ServiceAccessNotEnabledExceptionRes(parsedOutput, context);
      case "InvalidAuthenticationCode":
      case "com.amazonaws.iam#InvalidAuthenticationCodeException":
        throw await de_InvalidAuthenticationCodeExceptionRes(parsedOutput, context);
      case "CallerIsNotManagementAccountException":
      case "com.amazonaws.iam#CallerIsNotManagementAccountException":
        throw await de_CallerIsNotManagementAccountExceptionRes(parsedOutput, context);
      case "ReportGenerationLimitExceeded":
      case "com.amazonaws.iam#ReportGenerationLimitExceededException":
        throw await de_ReportGenerationLimitExceededExceptionRes(parsedOutput, context);
      case "ReportExpired":
      case "com.amazonaws.iam#CredentialReportExpiredException":
        throw await de_CredentialReportExpiredExceptionRes(parsedOutput, context);
      case "ReportInProgress":
      case "com.amazonaws.iam#CredentialReportNotReadyException":
        throw await de_CredentialReportNotReadyExceptionRes(parsedOutput, context);
      case "ReportNotPresent":
      case "com.amazonaws.iam#CredentialReportNotPresentException":
        throw await de_CredentialReportNotPresentExceptionRes(parsedOutput, context);
      case "UnrecognizedPublicKeyEncoding":
      case "com.amazonaws.iam#UnrecognizedPublicKeyEncodingException":
        throw await de_UnrecognizedPublicKeyEncodingExceptionRes(parsedOutput, context);
      case "PolicyEvaluation":
      case "com.amazonaws.iam#PolicyEvaluationException":
        throw await de_PolicyEvaluationExceptionRes(parsedOutput, context);
      case "KeyPairMismatch":
      case "com.amazonaws.iam#KeyPairMismatchException":
        throw await de_KeyPairMismatchExceptionRes(parsedOutput, context);
      case "MalformedCertificate":
      case "com.amazonaws.iam#MalformedCertificateException":
        throw await de_MalformedCertificateExceptionRes(parsedOutput, context);
      case "DuplicateCertificate":
      case "com.amazonaws.iam#DuplicateCertificateException":
        throw await de_DuplicateCertificateExceptionRes(parsedOutput, context);
      case "InvalidCertificate":
      case "com.amazonaws.iam#InvalidCertificateException":
        throw await de_InvalidCertificateExceptionRes(parsedOutput, context);
      case "DuplicateSSHPublicKey":
      case "com.amazonaws.iam#DuplicateSSHPublicKeyException":
        throw await de_DuplicateSSHPublicKeyExceptionRes(parsedOutput, context);
      case "InvalidPublicKey":
      case "com.amazonaws.iam#InvalidPublicKeyException":
        throw await de_InvalidPublicKeyExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  }, "de_CommandError");
  var de_AccountNotManagementOrDelegatedAdministratorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AccountNotManagementOrDelegatedAdministratorException(body.Error, context);
    const exception = new AccountNotManagementOrDelegatedAdministratorException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_AccountNotManagementOrDelegatedAdministratorExceptionRes");
  var de_CallerIsNotManagementAccountExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CallerIsNotManagementAccountException(body.Error, context);
    const exception = new CallerIsNotManagementAccountException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_CallerIsNotManagementAccountExceptionRes");
  var de_ConcurrentModificationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentModificationException(body.Error, context);
    const exception = new ConcurrentModificationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ConcurrentModificationExceptionRes");
  var de_CredentialReportExpiredExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportExpiredException(body.Error, context);
    const exception = new CredentialReportExpiredException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_CredentialReportExpiredExceptionRes");
  var de_CredentialReportNotPresentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportNotPresentException(body.Error, context);
    const exception = new CredentialReportNotPresentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_CredentialReportNotPresentExceptionRes");
  var de_CredentialReportNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CredentialReportNotReadyException(body.Error, context);
    const exception = new CredentialReportNotReadyException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_CredentialReportNotReadyExceptionRes");
  var de_DeleteConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DeleteConflictException(body.Error, context);
    const exception = new DeleteConflictException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_DeleteConflictExceptionRes");
  var de_DuplicateCertificateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DuplicateCertificateException(body.Error, context);
    const exception = new DuplicateCertificateException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_DuplicateCertificateExceptionRes");
  var de_DuplicateSSHPublicKeyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DuplicateSSHPublicKeyException(body.Error, context);
    const exception = new DuplicateSSHPublicKeyException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_DuplicateSSHPublicKeyExceptionRes");
  var de_EntityAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EntityAlreadyExistsException(body.Error, context);
    const exception = new EntityAlreadyExistsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_EntityAlreadyExistsExceptionRes");
  var de_EntityTemporarilyUnmodifiableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EntityTemporarilyUnmodifiableException(body.Error, context);
    const exception = new EntityTemporarilyUnmodifiableException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_EntityTemporarilyUnmodifiableExceptionRes");
  var de_InvalidAuthenticationCodeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthenticationCodeException(body.Error, context);
    const exception = new InvalidAuthenticationCodeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidAuthenticationCodeExceptionRes");
  var de_InvalidCertificateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidCertificateException(body.Error, context);
    const exception = new InvalidCertificateException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidCertificateExceptionRes");
  var de_InvalidInputExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidInputException(body.Error, context);
    const exception = new InvalidInputException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidInputExceptionRes");
  var de_InvalidPublicKeyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidPublicKeyException(body.Error, context);
    const exception = new InvalidPublicKeyException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidPublicKeyExceptionRes");
  var de_InvalidUserTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidUserTypeException(body.Error, context);
    const exception = new InvalidUserTypeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidUserTypeExceptionRes");
  var de_KeyPairMismatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KeyPairMismatchException(body.Error, context);
    const exception = new KeyPairMismatchException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_KeyPairMismatchExceptionRes");
  var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body.Error, context);
    const exception = new LimitExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_LimitExceededExceptionRes");
  var de_MalformedCertificateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedCertificateException(body.Error, context);
    const exception = new MalformedCertificateException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_MalformedCertificateExceptionRes");
  var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new MalformedPolicyDocumentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_MalformedPolicyDocumentExceptionRes");
  var de_NoSuchEntityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchEntityException(body.Error, context);
    const exception = new NoSuchEntityException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_NoSuchEntityExceptionRes");
  var de_OpenIdIdpCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OpenIdIdpCommunicationErrorException(body.Error, context);
    const exception = new OpenIdIdpCommunicationErrorException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_OpenIdIdpCommunicationErrorExceptionRes");
  var de_OrganizationNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationNotFoundException(body.Error, context);
    const exception = new OrganizationNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_OrganizationNotFoundExceptionRes");
  var de_OrganizationNotInAllFeaturesModeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationNotInAllFeaturesModeException(body.Error, context);
    const exception = new OrganizationNotInAllFeaturesModeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_OrganizationNotInAllFeaturesModeExceptionRes");
  var de_PasswordPolicyViolationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PasswordPolicyViolationException(body.Error, context);
    const exception = new PasswordPolicyViolationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_PasswordPolicyViolationExceptionRes");
  var de_PolicyEvaluationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PolicyEvaluationException(body.Error, context);
    const exception = new PolicyEvaluationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_PolicyEvaluationExceptionRes");
  var de_PolicyNotAttachableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PolicyNotAttachableException(body.Error, context);
    const exception = new PolicyNotAttachableException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_PolicyNotAttachableExceptionRes");
  var de_ReportGenerationLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReportGenerationLimitExceededException(body.Error, context);
    const exception = new ReportGenerationLimitExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ReportGenerationLimitExceededExceptionRes");
  var de_ServiceAccessNotEnabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceAccessNotEnabledException(body.Error, context);
    const exception = new ServiceAccessNotEnabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceAccessNotEnabledExceptionRes");
  var de_ServiceFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceFailureException(body.Error, context);
    const exception = new ServiceFailureException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceFailureExceptionRes");
  var de_ServiceNotSupportedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceNotSupportedException(body.Error, context);
    const exception = new ServiceNotSupportedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceNotSupportedExceptionRes");
  var de_UnmodifiableEntityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnmodifiableEntityException(body.Error, context);
    const exception = new UnmodifiableEntityException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_UnmodifiableEntityExceptionRes");
  var de_UnrecognizedPublicKeyEncodingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnrecognizedPublicKeyEncodingException(body.Error, context);
    const exception = new UnrecognizedPublicKeyEncodingException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_UnrecognizedPublicKeyEncodingExceptionRes");
  var se_ActionNameListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_ActionNameListType");
  var se_AddClientIDToOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_CID] != null) {
      entries[_CID] = input[_CID];
    }
    return entries;
  }, "se_AddClientIDToOpenIDConnectProviderRequest");
  var se_AddRoleToInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_AddRoleToInstanceProfileRequest");
  var se_AddUserToGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_AddUserToGroupRequest");
  var se_AttachGroupPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_AttachGroupPolicyRequest");
  var se_AttachRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_AttachRolePolicyRequest");
  var se_AttachUserPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_AttachUserPolicyRequest");
  var se_ChangePasswordRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OP] != null) {
      entries[_OP] = input[_OP];
    }
    if (input[_NP] != null) {
      entries[_NP] = input[_NP];
    }
    return entries;
  }, "se_ChangePasswordRequest");
  var se_clientIDListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_clientIDListType");
  var se_ContextEntry = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_CKN] != null) {
      entries[_CKN] = input[_CKN];
    }
    if (input[_CKV] != null) {
      const memberEntries = se_ContextKeyValueListType(input[_CKV], context);
      if (input[_CKV]?.length === 0) {
        entries.ContextKeyValues = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ContextKeyValues.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_CKT] != null) {
      entries[_CKT] = input[_CKT];
    }
    return entries;
  }, "se_ContextEntry");
  var se_ContextEntryListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_ContextEntry(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_ContextEntryListType");
  var se_ContextKeyValueListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_ContextKeyValueListType");
  var se_CreateAccessKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_CreateAccessKeyRequest");
  var se_CreateAccountAliasRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AA] != null) {
      entries[_AA] = input[_AA];
    }
    return entries;
  }, "se_CreateAccountAliasRequest");
  var se_CreateGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    return entries;
  }, "se_CreateGroupRequest");
  var se_CreateInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreateInstanceProfileRequest");
  var se_CreateLoginProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_Pa] != null) {
      entries[_Pa] = input[_Pa];
    }
    if (input[_PRR] != null) {
      entries[_PRR] = input[_PRR];
    }
    return entries;
  }, "se_CreateLoginProfileRequest");
  var se_CreateOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_U] != null) {
      entries[_U] = input[_U];
    }
    if (input[_CIDL] != null) {
      const memberEntries = se_clientIDListType(input[_CIDL], context);
      if (input[_CIDL]?.length === 0) {
        entries.ClientIDList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ClientIDList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_TL] != null) {
      const memberEntries = se_thumbprintListType(input[_TL], context);
      if (input[_TL]?.length === 0) {
        entries.ThumbprintList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ThumbprintList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreateOpenIDConnectProviderRequest");
  var se_CreatePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    if (input[_D] != null) {
      entries[_D] = input[_D];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreatePolicyRequest");
  var se_CreatePolicyVersionRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    if (input[_SAD] != null) {
      entries[_SAD] = input[_SAD];
    }
    return entries;
  }, "se_CreatePolicyVersionRequest");
  var se_CreateRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_ARPD] != null) {
      entries[_ARPD] = input[_ARPD];
    }
    if (input[_D] != null) {
      entries[_D] = input[_D];
    }
    if (input[_MSD] != null) {
      entries[_MSD] = input[_MSD];
    }
    if (input[_PB] != null) {
      entries[_PB] = input[_PB];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreateRoleRequest");
  var se_CreateSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLMD] != null) {
      entries[_SAMLMD] = input[_SAMLMD];
    }
    if (input[_N] != null) {
      entries[_N] = input[_N];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_AEM] != null) {
      entries[_AEM] = input[_AEM];
    }
    if (input[_APK] != null) {
      entries[_APK] = input[_APK];
    }
    return entries;
  }, "se_CreateSAMLProviderRequest");
  var se_CreateServiceLinkedRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AWSSN] != null) {
      entries[_AWSSN] = input[_AWSSN];
    }
    if (input[_D] != null) {
      entries[_D] = input[_D];
    }
    if (input[_CS] != null) {
      entries[_CS] = input[_CS];
    }
    return entries;
  }, "se_CreateServiceLinkedRoleRequest");
  var se_CreateServiceSpecificCredentialRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    return entries;
  }, "se_CreateServiceSpecificCredentialRequest");
  var se_CreateUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PB] != null) {
      entries[_PB] = input[_PB];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreateUserRequest");
  var se_CreateVirtualMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_VMFADN] != null) {
      entries[_VMFADN] = input[_VMFADN];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_CreateVirtualMFADeviceRequest");
  var se_DeactivateMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    return entries;
  }, "se_DeactivateMFADeviceRequest");
  var se_DeleteAccessKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_AKI] != null) {
      entries[_AKI] = input[_AKI];
    }
    return entries;
  }, "se_DeleteAccessKeyRequest");
  var se_DeleteAccountAliasRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AA] != null) {
      entries[_AA] = input[_AA];
    }
    return entries;
  }, "se_DeleteAccountAliasRequest");
  var se_DeleteGroupPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_DeleteGroupPolicyRequest");
  var se_DeleteGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    return entries;
  }, "se_DeleteGroupRequest");
  var se_DeleteInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    return entries;
  }, "se_DeleteInstanceProfileRequest");
  var se_DeleteLoginProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_DeleteLoginProfileRequest");
  var se_DeleteOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    return entries;
  }, "se_DeleteOpenIDConnectProviderRequest");
  var se_DeletePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_DeletePolicyRequest");
  var se_DeletePolicyVersionRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
      entries[_VI] = input[_VI];
    }
    return entries;
  }, "se_DeletePolicyVersionRequest");
  var se_DeleteRolePermissionsBoundaryRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_DeleteRolePermissionsBoundaryRequest");
  var se_DeleteRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_DeleteRolePolicyRequest");
  var se_DeleteRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_DeleteRoleRequest");
  var se_DeleteSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    return entries;
  }, "se_DeleteSAMLProviderRequest");
  var se_DeleteServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    return entries;
  }, "se_DeleteServerCertificateRequest");
  var se_DeleteServiceLinkedRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_DeleteServiceLinkedRoleRequest");
  var se_DeleteServiceSpecificCredentialRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
      entries[_SSCI] = input[_SSCI];
    }
    return entries;
  }, "se_DeleteServiceSpecificCredentialRequest");
  var se_DeleteSigningCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_CI] != null) {
      entries[_CI] = input[_CI];
    }
    return entries;
  }, "se_DeleteSigningCertificateRequest");
  var se_DeleteSSHPublicKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
      entries[_SSHPKI] = input[_SSHPKI];
    }
    return entries;
  }, "se_DeleteSSHPublicKeyRequest");
  var se_DeleteUserPermissionsBoundaryRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_DeleteUserPermissionsBoundaryRequest");
  var se_DeleteUserPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_DeleteUserPolicyRequest");
  var se_DeleteUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_DeleteUserRequest");
  var se_DeleteVirtualMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    return entries;
  }, "se_DeleteVirtualMFADeviceRequest");
  var se_DetachGroupPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_DetachGroupPolicyRequest");
  var se_DetachRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_DetachRolePolicyRequest");
  var se_DetachUserPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_DetachUserPolicyRequest");
  var se_DisableOrganizationsRootCredentialsManagementRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_DisableOrganizationsRootCredentialsManagementRequest");
  var se_DisableOrganizationsRootSessionsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_DisableOrganizationsRootSessionsRequest");
  var se_EnableMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_AC] != null) {
      entries[_AC] = input[_AC];
    }
    if (input[_ACu] != null) {
      entries[_ACu] = input[_ACu];
    }
    return entries;
  }, "se_EnableMFADeviceRequest");
  var se_EnableOrganizationsRootCredentialsManagementRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_EnableOrganizationsRootCredentialsManagementRequest");
  var se_EnableOrganizationsRootSessionsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_EnableOrganizationsRootSessionsRequest");
  var se_entityListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_entityListType");
  var se_GenerateOrganizationsAccessReportRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_EP] != null) {
      entries[_EP] = input[_EP];
    }
    if (input[_OPI] != null) {
      entries[_OPI] = input[_OPI];
    }
    return entries;
  }, "se_GenerateOrganizationsAccessReportRequest");
  var se_GenerateServiceLastAccessedDetailsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
      entries[_Ar] = input[_Ar];
    }
    if (input[_G] != null) {
      entries[_G] = input[_G];
    }
    return entries;
  }, "se_GenerateServiceLastAccessedDetailsRequest");
  var se_GetAccessKeyLastUsedRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AKI] != null) {
      entries[_AKI] = input[_AKI];
    }
    return entries;
  }, "se_GetAccessKeyLastUsedRequest");
  var se_GetAccountAuthorizationDetailsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_F] != null) {
      const memberEntries = se_entityListType(input[_F], context);
      if (input[_F]?.length === 0) {
        entries.Filter = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Filter.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    return entries;
  }, "se_GetAccountAuthorizationDetailsRequest");
  var se_GetContextKeysForCustomPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
      if (input[_PIL]?.length === 0) {
        entries.PolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_GetContextKeysForCustomPolicyRequest");
  var se_GetContextKeysForPrincipalPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PSA] != null) {
      entries[_PSA] = input[_PSA];
    }
    if (input[_PIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
      if (input[_PIL]?.length === 0) {
        entries.PolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_GetContextKeysForPrincipalPolicyRequest");
  var se_GetGroupPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_GetGroupPolicyRequest");
  var se_GetGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_GetGroupRequest");
  var se_GetInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    return entries;
  }, "se_GetInstanceProfileRequest");
  var se_GetLoginProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_GetLoginProfileRequest");
  var se_GetMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_GetMFADeviceRequest");
  var se_GetOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    return entries;
  }, "se_GetOpenIDConnectProviderRequest");
  var se_GetOrganizationsAccessReportRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_JI] != null) {
      entries[_JI] = input[_JI];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_SK] != null) {
      entries[_SK] = input[_SK];
    }
    return entries;
  }, "se_GetOrganizationsAccessReportRequest");
  var se_GetPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    return entries;
  }, "se_GetPolicyRequest");
  var se_GetPolicyVersionRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
      entries[_VI] = input[_VI];
    }
    return entries;
  }, "se_GetPolicyVersionRequest");
  var se_GetRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_GetRolePolicyRequest");
  var se_GetRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_GetRoleRequest");
  var se_GetSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    return entries;
  }, "se_GetSAMLProviderRequest");
  var se_GetServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    return entries;
  }, "se_GetServerCertificateRequest");
  var se_GetServiceLastAccessedDetailsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_JI] != null) {
      entries[_JI] = input[_JI];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    return entries;
  }, "se_GetServiceLastAccessedDetailsRequest");
  var se_GetServiceLastAccessedDetailsWithEntitiesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_JI] != null) {
      entries[_JI] = input[_JI];
    }
    if (input[_SNer] != null) {
      entries[_SNer] = input[_SNer];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    return entries;
  }, "se_GetServiceLastAccessedDetailsWithEntitiesRequest");
  var se_GetServiceLinkedRoleDeletionStatusRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_DTI] != null) {
      entries[_DTI] = input[_DTI];
    }
    return entries;
  }, "se_GetServiceLinkedRoleDeletionStatusRequest");
  var se_GetSSHPublicKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
      entries[_SSHPKI] = input[_SSHPKI];
    }
    if (input[_E] != null) {
      entries[_E] = input[_E];
    }
    return entries;
  }, "se_GetSSHPublicKeyRequest");
  var se_GetUserPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    return entries;
  }, "se_GetUserPolicyRequest");
  var se_GetUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_GetUserRequest");
  var se_ListAccessKeysRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListAccessKeysRequest");
  var se_ListAccountAliasesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListAccountAliasesRequest");
  var se_ListAttachedGroupPoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListAttachedGroupPoliciesRequest");
  var se_ListAttachedRolePoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListAttachedRolePoliciesRequest");
  var se_ListAttachedUserPoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListAttachedUserPoliciesRequest");
  var se_ListEntitiesForPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_EF] != null) {
      entries[_EF] = input[_EF];
    }
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_PUF] != null) {
      entries[_PUF] = input[_PUF];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListEntitiesForPolicyRequest");
  var se_ListGroupPoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListGroupPoliciesRequest");
  var se_ListGroupsForUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListGroupsForUserRequest");
  var se_ListGroupsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListGroupsRequest");
  var se_ListInstanceProfilesForRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListInstanceProfilesForRoleRequest");
  var se_ListInstanceProfilesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListInstanceProfilesRequest");
  var se_ListInstanceProfileTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListInstanceProfileTagsRequest");
  var se_ListMFADevicesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListMFADevicesRequest");
  var se_ListMFADeviceTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListMFADeviceTagsRequest");
  var se_ListOpenIDConnectProvidersRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_ListOpenIDConnectProvidersRequest");
  var se_ListOpenIDConnectProviderTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListOpenIDConnectProviderTagsRequest");
  var se_ListOrganizationsFeaturesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_ListOrganizationsFeaturesRequest");
  var se_ListPoliciesGrantingServiceAccessRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_Ar] != null) {
      entries[_Ar] = input[_Ar];
    }
    if (input[_SNerv] != null) {
      const memberEntries = se_serviceNamespaceListType(input[_SNerv], context);
      if (input[_SNerv]?.length === 0) {
        entries.ServiceNamespaces = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ServiceNamespaces.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_ListPoliciesGrantingServiceAccessRequest");
  var se_ListPoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_S] != null) {
      entries[_S] = input[_S];
    }
    if (input[_OA] != null) {
      entries[_OA] = input[_OA];
    }
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_PUF] != null) {
      entries[_PUF] = input[_PUF];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListPoliciesRequest");
  var se_ListPolicyTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListPolicyTagsRequest");
  var se_ListPolicyVersionsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListPolicyVersionsRequest");
  var se_ListRolePoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListRolePoliciesRequest");
  var se_ListRolesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListRolesRequest");
  var se_ListRoleTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListRoleTagsRequest");
  var se_ListSAMLProvidersRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_ListSAMLProvidersRequest");
  var se_ListSAMLProviderTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListSAMLProviderTagsRequest");
  var se_ListServerCertificatesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListServerCertificatesRequest");
  var se_ListServerCertificateTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListServerCertificateTagsRequest");
  var se_ListServiceSpecificCredentialsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    return entries;
  }, "se_ListServiceSpecificCredentialsRequest");
  var se_ListSigningCertificatesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListSigningCertificatesRequest");
  var se_ListSSHPublicKeysRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListSSHPublicKeysRequest");
  var se_ListUserPoliciesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListUserPoliciesRequest");
  var se_ListUsersRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PP] != null) {
      entries[_PP] = input[_PP];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListUsersRequest");
  var se_ListUserTagsRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListUserTagsRequest");
  var se_ListVirtualMFADevicesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AS] != null) {
      entries[_AS] = input[_AS];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    return entries;
  }, "se_ListVirtualMFADevicesRequest");
  var se_PutGroupPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    return entries;
  }, "se_PutGroupPolicyRequest");
  var se_PutRolePermissionsBoundaryRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PB] != null) {
      entries[_PB] = input[_PB];
    }
    return entries;
  }, "se_PutRolePermissionsBoundaryRequest");
  var se_PutRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    return entries;
  }, "se_PutRolePolicyRequest");
  var se_PutUserPermissionsBoundaryRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PB] != null) {
      entries[_PB] = input[_PB];
    }
    return entries;
  }, "se_PutUserPermissionsBoundaryRequest");
  var se_PutUserPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_PN] != null) {
      entries[_PN] = input[_PN];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    return entries;
  }, "se_PutUserPolicyRequest");
  var se_RemoveClientIDFromOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_CID] != null) {
      entries[_CID] = input[_CID];
    }
    return entries;
  }, "se_RemoveClientIDFromOpenIDConnectProviderRequest");
  var se_RemoveRoleFromInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    return entries;
  }, "se_RemoveRoleFromInstanceProfileRequest");
  var se_RemoveUserFromGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    return entries;
  }, "se_RemoveUserFromGroupRequest");
  var se_ResetServiceSpecificCredentialRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
      entries[_SSCI] = input[_SSCI];
    }
    return entries;
  }, "se_ResetServiceSpecificCredentialRequest");
  var se_ResourceNameListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_ResourceNameListType");
  var se_ResyncMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_AC] != null) {
      entries[_AC] = input[_AC];
    }
    if (input[_ACu] != null) {
      entries[_ACu] = input[_ACu];
    }
    return entries;
  }, "se_ResyncMFADeviceRequest");
  var se_serviceNamespaceListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_serviceNamespaceListType");
  var se_SetDefaultPolicyVersionRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_VI] != null) {
      entries[_VI] = input[_VI];
    }
    return entries;
  }, "se_SetDefaultPolicyVersionRequest");
  var se_SetSecurityTokenServicePreferencesRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GETV] != null) {
      entries[_GETV] = input[_GETV];
    }
    return entries;
  }, "se_SetSecurityTokenServicePreferencesRequest");
  var se_SimulateCustomPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
      if (input[_PIL]?.length === 0) {
        entries.PolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_PBPIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PBPIL], context);
      if (input[_PBPIL]?.length === 0) {
        entries.PermissionsBoundaryPolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PermissionsBoundaryPolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_AN] != null) {
      const memberEntries = se_ActionNameListType(input[_AN], context);
      if (input[_AN]?.length === 0) {
        entries.ActionNames = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ActionNames.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RA] != null) {
      const memberEntries = se_ResourceNameListType(input[_RA], context);
      if (input[_RA]?.length === 0) {
        entries.ResourceArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ResourceArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RP] != null) {
      entries[_RP] = input[_RP];
    }
    if (input[_RO] != null) {
      entries[_RO] = input[_RO];
    }
    if (input[_CA] != null) {
      entries[_CA] = input[_CA];
    }
    if (input[_CE] != null) {
      const memberEntries = se_ContextEntryListType(input[_CE], context);
      if (input[_CE]?.length === 0) {
        entries.ContextEntries = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ContextEntries.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RHO] != null) {
      entries[_RHO] = input[_RHO];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    return entries;
  }, "se_SimulateCustomPolicyRequest");
  var se_SimulatePrincipalPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PSA] != null) {
      entries[_PSA] = input[_PSA];
    }
    if (input[_PIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
      if (input[_PIL]?.length === 0) {
        entries.PolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_PBPIL] != null) {
      const memberEntries = se_SimulationPolicyListType(input[_PBPIL], context);
      if (input[_PBPIL]?.length === 0) {
        entries.PermissionsBoundaryPolicyInputList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PermissionsBoundaryPolicyInputList.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_AN] != null) {
      const memberEntries = se_ActionNameListType(input[_AN], context);
      if (input[_AN]?.length === 0) {
        entries.ActionNames = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ActionNames.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RA] != null) {
      const memberEntries = se_ResourceNameListType(input[_RA], context);
      if (input[_RA]?.length === 0) {
        entries.ResourceArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ResourceArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RP] != null) {
      entries[_RP] = input[_RP];
    }
    if (input[_RO] != null) {
      entries[_RO] = input[_RO];
    }
    if (input[_CA] != null) {
      entries[_CA] = input[_CA];
    }
    if (input[_CE] != null) {
      const memberEntries = se_ContextEntryListType(input[_CE], context);
      if (input[_CE]?.length === 0) {
        entries.ContextEntries = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ContextEntries.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_RHO] != null) {
      entries[_RHO] = input[_RHO];
    }
    if (input[_MI] != null) {
      entries[_MI] = input[_MI];
    }
    if (input[_M] != null) {
      entries[_M] = input[_M];
    }
    return entries;
  }, "se_SimulatePrincipalPolicyRequest");
  var se_SimulationPolicyListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_SimulationPolicyListType");
  var se_Tag = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_K] != null) {
      entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
      entries[_Va] = input[_Va];
    }
    return entries;
  }, "se_Tag");
  var se_TagInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagInstanceProfileRequest");
  var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_tagKeyListType");
  var se_tagListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_Tag(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_tagListType");
  var se_TagMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagMFADeviceRequest");
  var se_TagOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagOpenIDConnectProviderRequest");
  var se_TagPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagPolicyRequest");
  var se_TagRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagRoleRequest");
  var se_TagSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagSAMLProviderRequest");
  var se_TagServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagServerCertificateRequest");
  var se_TagUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_TagUserRequest");
  var se_thumbprintListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_thumbprintListType");
  var se_UntagInstanceProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_IPN] != null) {
      entries[_IPN] = input[_IPN];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagInstanceProfileRequest");
  var se_UntagMFADeviceRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SNe] != null) {
      entries[_SNe] = input[_SNe];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagMFADeviceRequest");
  var se_UntagOpenIDConnectProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagOpenIDConnectProviderRequest");
  var se_UntagPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PA] != null) {
      entries[_PA] = input[_PA];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagPolicyRequest");
  var se_UntagRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagRoleRequest");
  var se_UntagSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagSAMLProviderRequest");
  var se_UntagServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagServerCertificateRequest");
  var se_UntagUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_TK] != null) {
      const memberEntries = se_tagKeyListType(input[_TK], context);
      if (input[_TK]?.length === 0) {
        entries.TagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TagKeys.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UntagUserRequest");
  var se_UpdateAccessKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_AKI] != null) {
      entries[_AKI] = input[_AKI];
    }
    if (input[_St] != null) {
      entries[_St] = input[_St];
    }
    return entries;
  }, "se_UpdateAccessKeyRequest");
  var se_UpdateAccountPasswordPolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_MPL] != null) {
      entries[_MPL] = input[_MPL];
    }
    if (input[_RS] != null) {
      entries[_RS] = input[_RS];
    }
    if (input[_RNe] != null) {
      entries[_RNe] = input[_RNe];
    }
    if (input[_RUC] != null) {
      entries[_RUC] = input[_RUC];
    }
    if (input[_RLC] != null) {
      entries[_RLC] = input[_RLC];
    }
    if (input[_AUTCP] != null) {
      entries[_AUTCP] = input[_AUTCP];
    }
    if (input[_MPA] != null) {
      entries[_MPA] = input[_MPA];
    }
    if (input[_PRPa] != null) {
      entries[_PRPa] = input[_PRPa];
    }
    if (input[_HE] != null) {
      entries[_HE] = input[_HE];
    }
    return entries;
  }, "se_UpdateAccountPasswordPolicyRequest");
  var se_UpdateAssumeRolePolicyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_PD] != null) {
      entries[_PD] = input[_PD];
    }
    return entries;
  }, "se_UpdateAssumeRolePolicyRequest");
  var se_UpdateGroupRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_GN] != null) {
      entries[_GN] = input[_GN];
    }
    if (input[_NPe] != null) {
      entries[_NPe] = input[_NPe];
    }
    if (input[_NGN] != null) {
      entries[_NGN] = input[_NGN];
    }
    return entries;
  }, "se_UpdateGroupRequest");
  var se_UpdateLoginProfileRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_Pa] != null) {
      entries[_Pa] = input[_Pa];
    }
    if (input[_PRR] != null) {
      entries[_PRR] = input[_PRR];
    }
    return entries;
  }, "se_UpdateLoginProfileRequest");
  var se_UpdateOpenIDConnectProviderThumbprintRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_OIDCPA] != null) {
      entries[_OIDCPA] = input[_OIDCPA];
    }
    if (input[_TL] != null) {
      const memberEntries = se_thumbprintListType(input[_TL], context);
      if (input[_TL]?.length === 0) {
        entries.ThumbprintList = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ThumbprintList.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UpdateOpenIDConnectProviderThumbprintRequest");
  var se_UpdateRoleDescriptionRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_D] != null) {
      entries[_D] = input[_D];
    }
    return entries;
  }, "se_UpdateRoleDescriptionRequest");
  var se_UpdateRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RN] != null) {
      entries[_RN] = input[_RN];
    }
    if (input[_D] != null) {
      entries[_D] = input[_D];
    }
    if (input[_MSD] != null) {
      entries[_MSD] = input[_MSD];
    }
    return entries;
  }, "se_UpdateRoleRequest");
  var se_UpdateSAMLProviderRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SAMLMD] != null) {
      entries[_SAMLMD] = input[_SAMLMD];
    }
    if (input[_SAMLPA] != null) {
      entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_AEM] != null) {
      entries[_AEM] = input[_AEM];
    }
    if (input[_APK] != null) {
      entries[_APK] = input[_APK];
    }
    if (input[_RPK] != null) {
      entries[_RPK] = input[_RPK];
    }
    return entries;
  }, "se_UpdateSAMLProviderRequest");
  var se_UpdateServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    if (input[_NPe] != null) {
      entries[_NPe] = input[_NPe];
    }
    if (input[_NSCN] != null) {
      entries[_NSCN] = input[_NSCN];
    }
    return entries;
  }, "se_UpdateServerCertificateRequest");
  var se_UpdateServiceSpecificCredentialRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSCI] != null) {
      entries[_SSCI] = input[_SSCI];
    }
    if (input[_St] != null) {
      entries[_St] = input[_St];
    }
    return entries;
  }, "se_UpdateServiceSpecificCredentialRequest");
  var se_UpdateSigningCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_CI] != null) {
      entries[_CI] = input[_CI];
    }
    if (input[_St] != null) {
      entries[_St] = input[_St];
    }
    return entries;
  }, "se_UpdateSigningCertificateRequest");
  var se_UpdateSSHPublicKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSHPKI] != null) {
      entries[_SSHPKI] = input[_SSHPKI];
    }
    if (input[_St] != null) {
      entries[_St] = input[_St];
    }
    return entries;
  }, "se_UpdateSSHPublicKeyRequest");
  var se_UpdateUserRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_NPe] != null) {
      entries[_NPe] = input[_NPe];
    }
    if (input[_NUN] != null) {
      entries[_NUN] = input[_NUN];
    }
    return entries;
  }, "se_UpdateUserRequest");
  var se_UploadServerCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_SCN] != null) {
      entries[_SCN] = input[_SCN];
    }
    if (input[_CB] != null) {
      entries[_CB] = input[_CB];
    }
    if (input[_PK] != null) {
      entries[_PK] = input[_PK];
    }
    if (input[_CC] != null) {
      entries[_CC] = input[_CC];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_UploadServerCertificateRequest");
  var se_UploadSigningCertificateRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_CB] != null) {
      entries[_CB] = input[_CB];
    }
    return entries;
  }, "se_UploadSigningCertificateRequest");
  var se_UploadSSHPublicKeyRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_UN] != null) {
      entries[_UN] = input[_UN];
    }
    if (input[_SSHPKB] != null) {
      entries[_SSHPKB] = input[_SSHPKB];
    }
    return entries;
  }, "se_UploadSSHPublicKeyRequest");
  var de_AccessDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SN] != null) {
      contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
    }
    if (output[_SNer] != null) {
      contents[_SNer] = (0, import_smithy_client.expectString)(output[_SNer]);
    }
    if (output[_R] != null) {
      contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
    }
    if (output[_EP] != null) {
      contents[_EP] = (0, import_smithy_client.expectString)(output[_EP]);
    }
    if (output[_LAT] != null) {
      contents[_LAT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LAT]));
    }
    if (output[_TAE] != null) {
      contents[_TAE] = (0, import_smithy_client.strictParseInt32)(output[_TAE]);
    }
    return contents;
  }, "de_AccessDetail");
  var de_AccessDetails = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_AccessDetail(entry, context);
    });
  }, "de_AccessDetails");
  var de_AccessKey = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    return contents;
  }, "de_AccessKey");
  var de_AccessKeyLastUsed = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_LUD] != null) {
      contents[_LUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LUD]));
    }
    if (output[_SN] != null) {
      contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
    }
    if (output[_R] != null) {
      contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
    }
    return contents;
  }, "de_AccessKeyLastUsed");
  var de_AccessKeyMetadata = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    return contents;
  }, "de_AccessKeyMetadata");
  var de_accessKeyMetadataListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_AccessKeyMetadata(entry, context);
    });
  }, "de_accessKeyMetadataListType");
  var de_accountAliasListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_accountAliasListType");
  var de_AccountNotManagementOrDelegatedAdministratorException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    return contents;
  }, "de_AccountNotManagementOrDelegatedAdministratorException");
  var de_ArnListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ArnListType");
  var de_AttachedPermissionsBoundary = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PBT] != null) {
      contents[_PBT] = (0, import_smithy_client.expectString)(output[_PBT]);
    }
    if (output[_PBA] != null) {
      contents[_PBA] = (0, import_smithy_client.expectString)(output[_PBA]);
    }
    return contents;
  }, "de_AttachedPermissionsBoundary");
  var de_attachedPoliciesListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_AttachedPolicy(entry, context);
    });
  }, "de_attachedPoliciesListType");
  var de_AttachedPolicy = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PA] != null) {
      contents[_PA] = (0, import_smithy_client.expectString)(output[_PA]);
    }
    return contents;
  }, "de_AttachedPolicy");
  var de_CallerIsNotManagementAccountException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    return contents;
  }, "de_CallerIsNotManagementAccountException");
  var de_certificateListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_SigningCertificate(entry, context);
    });
  }, "de_certificateListType");
  var de_CertificationMapType = /* @__PURE__ */ __name((output, context) => {
    return output.reduce((acc, pair) => {
      if (pair["value"] === null) {
        return acc;
      }
      acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
      return acc;
    }, {});
  }, "de_CertificationMapType");
  var de_clientIDListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_clientIDListType");
  var de_ConcurrentModificationException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_ConcurrentModificationException");
  var de_ContextKeyNamesResultListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ContextKeyNamesResultListType");
  var de_CreateAccessKeyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_AK] != null) {
      contents[_AK] = de_AccessKey(output[_AK], context);
    }
    return contents;
  }, "de_CreateAccessKeyResponse");
  var de_CreateGroupResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Gr] != null) {
      contents[_Gr] = de_Group(output[_Gr], context);
    }
    return contents;
  }, "de_CreateGroupResponse");
  var de_CreateInstanceProfileResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_IP] != null) {
      contents[_IP] = de_InstanceProfile(output[_IP], context);
    }
    return contents;
  }, "de_CreateInstanceProfileResponse");
  var de_CreateLoginProfileResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_LPo] != null) {
      contents[_LPo] = de_LoginProfile(output[_LPo], context);
    }
    return contents;
  }, "de_CreateLoginProfileResponse");
  var de_CreateOpenIDConnectProviderResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OIDCPA] != null) {
      contents[_OIDCPA] = (0, import_smithy_client.expectString)(output[_OIDCPA]);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_CreateOpenIDConnectProviderResponse");
  var de_CreatePolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Po] != null) {
      contents[_Po] = de_Policy(output[_Po], context);
    }
    return contents;
  }, "de_CreatePolicyResponse");
  var de_CreatePolicyVersionResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PV] != null) {
      contents[_PV] = de_PolicyVersion(output[_PV], context);
    }
    return contents;
  }, "de_CreatePolicyVersionResponse");
  var de_CreateRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = de_Role(output[_Ro], context);
    }
    return contents;
  }, "de_CreateRoleResponse");
  var de_CreateSAMLProviderResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SAMLPA] != null) {
      contents[_SAMLPA] = (0, import_smithy_client.expectString)(output[_SAMLPA]);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_CreateSAMLProviderResponse");
  var de_CreateServiceLinkedRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = de_Role(output[_Ro], context);
    }
    return contents;
  }, "de_CreateServiceLinkedRoleResponse");
  var de_CreateServiceSpecificCredentialResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SSC] != null) {
      contents[_SSC] = de_ServiceSpecificCredential(output[_SSC], context);
    }
    return contents;
  }, "de_CreateServiceSpecificCredentialResponse");
  var de_CreateUserResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Us] != null) {
      contents[_Us] = de_User(output[_Us], context);
    }
    return contents;
  }, "de_CreateUserResponse");
  var de_CreateVirtualMFADeviceResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_VMFAD] != null) {
      contents[_VMFAD] = de_VirtualMFADevice(output[_VMFAD], context);
    }
    return contents;
  }, "de_CreateVirtualMFADeviceResponse");
  var de_CredentialReportExpiredException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_CredentialReportExpiredException");
  var de_CredentialReportNotPresentException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_CredentialReportNotPresentException");
  var de_CredentialReportNotReadyException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_CredentialReportNotReadyException");
  var de_DeleteConflictException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_DeleteConflictException");
  var de_DeleteServiceLinkedRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DTI] != null) {
      contents[_DTI] = (0, import_smithy_client.expectString)(output[_DTI]);
    }
    return contents;
  }, "de_DeleteServiceLinkedRoleResponse");
  var de_DeletionTaskFailureReasonType = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Re] != null) {
      contents[_Re] = (0, import_smithy_client.expectString)(output[_Re]);
    }
    if (output.RoleUsageList === "") {
      contents[_RUL] = [];
    } else if (output[_RUL] != null && output[_RUL][_me] != null) {
      contents[_RUL] = de_RoleUsageListType((0, import_smithy_client.getArrayIfSingleItem)(output[_RUL][_me]), context);
    }
    return contents;
  }, "de_DeletionTaskFailureReasonType");
  var de_DisableOrganizationsRootCredentialsManagementResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OI] != null) {
      contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
    }
    if (output.EnabledFeatures === "") {
      contents[_EFn] = [];
    } else if (output[_EFn] != null && output[_EFn][_me] != null) {
      contents[_EFn] = de_FeaturesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EFn][_me]), context);
    }
    return contents;
  }, "de_DisableOrganizationsRootCredentialsManagementResponse");
  var de_DisableOrganizationsRootSessionsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OI] != null) {
      contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
    }
    if (output.EnabledFeatures === "") {
      contents[_EFn] = [];
    } else if (output[_EFn] != null && output[_EFn][_me] != null) {
      contents[_EFn] = de_FeaturesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EFn][_me]), context);
    }
    return contents;
  }, "de_DisableOrganizationsRootSessionsResponse");
  var de_DuplicateCertificateException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_DuplicateCertificateException");
  var de_DuplicateSSHPublicKeyException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_DuplicateSSHPublicKeyException");
  var de_EnableOrganizationsRootCredentialsManagementResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OI] != null) {
      contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
    }
    if (output.EnabledFeatures === "") {
      contents[_EFn] = [];
    } else if (output[_EFn] != null && output[_EFn][_me] != null) {
      contents[_EFn] = de_FeaturesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EFn][_me]), context);
    }
    return contents;
  }, "de_EnableOrganizationsRootCredentialsManagementResponse");
  var de_EnableOrganizationsRootSessionsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OI] != null) {
      contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
    }
    if (output.EnabledFeatures === "") {
      contents[_EFn] = [];
    } else if (output[_EFn] != null && output[_EFn][_me] != null) {
      contents[_EFn] = de_FeaturesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EFn][_me]), context);
    }
    return contents;
  }, "de_EnableOrganizationsRootSessionsResponse");
  var de_EntityAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_EntityAlreadyExistsException");
  var de_EntityDetails = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_EI] != null) {
      contents[_EI] = de_EntityInfo(output[_EI], context);
    }
    if (output[_LA] != null) {
      contents[_LA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LA]));
    }
    return contents;
  }, "de_EntityDetails");
  var de_entityDetailsListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_EntityDetails(entry, context);
    });
  }, "de_entityDetailsListType");
  var de_EntityInfo = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
    }
    if (output[_Ty] != null) {
      contents[_Ty] = (0, import_smithy_client.expectString)(output[_Ty]);
    }
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_EntityInfo");
  var de_EntityTemporarilyUnmodifiableException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_EntityTemporarilyUnmodifiableException");
  var de_ErrorDetails = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    if (output[_C] != null) {
      contents[_C] = (0, import_smithy_client.expectString)(output[_C]);
    }
    return contents;
  }, "de_ErrorDetails");
  var de_EvalDecisionDetailsType = /* @__PURE__ */ __name((output, context) => {
    return output.reduce((acc, pair) => {
      if (pair["value"] === null) {
        return acc;
      }
      acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
      return acc;
    }, {});
  }, "de_EvalDecisionDetailsType");
  var de_EvaluationResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_EAN] != null) {
      contents[_EAN] = (0, import_smithy_client.expectString)(output[_EAN]);
    }
    if (output[_ERN] != null) {
      contents[_ERN] = (0, import_smithy_client.expectString)(output[_ERN]);
    }
    if (output[_ED] != null) {
      contents[_ED] = (0, import_smithy_client.expectString)(output[_ED]);
    }
    if (output.MatchedStatements === "") {
      contents[_MS] = [];
    } else if (output[_MS] != null && output[_MS][_me] != null) {
      contents[_MS] = de_StatementListType((0, import_smithy_client.getArrayIfSingleItem)(output[_MS][_me]), context);
    }
    if (output.MissingContextValues === "") {
      contents[_MCV] = [];
    } else if (output[_MCV] != null && output[_MCV][_me] != null) {
      contents[_MCV] = de_ContextKeyNamesResultListType((0, import_smithy_client.getArrayIfSingleItem)(output[_MCV][_me]), context);
    }
    if (output[_ODD] != null) {
      contents[_ODD] = de_OrganizationsDecisionDetail(output[_ODD], context);
    }
    if (output[_PBDD] != null) {
      contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD], context);
    }
    if (output.EvalDecisionDetails === "") {
      contents[_EDD] = {};
    } else if (output[_EDD] != null && output[_EDD][_e] != null) {
      contents[_EDD] = de_EvalDecisionDetailsType((0, import_smithy_client.getArrayIfSingleItem)(output[_EDD][_e]), context);
    }
    if (output.ResourceSpecificResults === "") {
      contents[_RSR] = [];
    } else if (output[_RSR] != null && output[_RSR][_me] != null) {
      contents[_RSR] = de_ResourceSpecificResultListType((0, import_smithy_client.getArrayIfSingleItem)(output[_RSR][_me]), context);
    }
    return contents;
  }, "de_EvaluationResult");
  var de_EvaluationResultsListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_EvaluationResult(entry, context);
    });
  }, "de_EvaluationResultsListType");
  var de_FeaturesListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_FeaturesListType");
  var de_GenerateCredentialReportResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Sta] != null) {
      contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
    }
    if (output[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
    }
    return contents;
  }, "de_GenerateCredentialReportResponse");
  var de_GenerateOrganizationsAccessReportResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_JI] != null) {
      contents[_JI] = (0, import_smithy_client.expectString)(output[_JI]);
    }
    return contents;
  }, "de_GenerateOrganizationsAccessReportResponse");
  var de_GenerateServiceLastAccessedDetailsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_JI] != null) {
      contents[_JI] = (0, import_smithy_client.expectString)(output[_JI]);
    }
    return contents;
  }, "de_GenerateServiceLastAccessedDetailsResponse");
  var de_GetAccessKeyLastUsedResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_AKLU] != null) {
      contents[_AKLU] = de_AccessKeyLastUsed(output[_AKLU], context);
    }
    return contents;
  }, "de_GetAccessKeyLastUsedResponse");
  var de_GetAccountAuthorizationDetailsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.UserDetailList === "") {
      contents[_UDL] = [];
    } else if (output[_UDL] != null && output[_UDL][_me] != null) {
      contents[_UDL] = de_userDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_UDL][_me]), context);
    }
    if (output.GroupDetailList === "") {
      contents[_GDL] = [];
    } else if (output[_GDL] != null && output[_GDL][_me] != null) {
      contents[_GDL] = de_groupDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_GDL][_me]), context);
    }
    if (output.RoleDetailList === "") {
      contents[_RDL] = [];
    } else if (output[_RDL] != null && output[_RDL][_me] != null) {
      contents[_RDL] = de_roleDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_RDL][_me]), context);
    }
    if (output.Policies === "") {
      contents[_Pol] = [];
    } else if (output[_Pol] != null && output[_Pol][_me] != null) {
      contents[_Pol] = de_ManagedPolicyDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Pol][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_GetAccountAuthorizationDetailsResponse");
  var de_GetAccountPasswordPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PPa] != null) {
      contents[_PPa] = de_PasswordPolicy(output[_PPa], context);
    }
    return contents;
  }, "de_GetAccountPasswordPolicyResponse");
  var de_GetAccountSummaryResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.SummaryMap === "") {
      contents[_SM] = {};
    } else if (output[_SM] != null && output[_SM][_e] != null) {
      contents[_SM] = de_summaryMapType((0, import_smithy_client.getArrayIfSingleItem)(output[_SM][_e]), context);
    }
    return contents;
  }, "de_GetAccountSummaryResponse");
  var de_GetContextKeysForPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.ContextKeyNames === "") {
      contents[_CKNo] = [];
    } else if (output[_CKNo] != null && output[_CKNo][_me] != null) {
      contents[_CKNo] = de_ContextKeyNamesResultListType((0, import_smithy_client.getArrayIfSingleItem)(output[_CKNo][_me]), context);
    }
    return contents;
  }, "de_GetContextKeysForPolicyResponse");
  var de_GetCredentialReportResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Co] != null) {
      contents[_Co] = context.base64Decoder(output[_Co]);
    }
    if (output[_RF] != null) {
      contents[_RF] = (0, import_smithy_client.expectString)(output[_RF]);
    }
    if (output[_GT] != null) {
      contents[_GT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_GT]));
    }
    return contents;
  }, "de_GetCredentialReportResponse");
  var de_GetGroupPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_GN] != null) {
      contents[_GN] = (0, import_smithy_client.expectString)(output[_GN]);
    }
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PD] != null) {
      contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
    }
    return contents;
  }, "de_GetGroupPolicyResponse");
  var de_GetGroupResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Gr] != null) {
      contents[_Gr] = de_Group(output[_Gr], context);
    }
    if (output.Users === "") {
      contents[_Use] = [];
    } else if (output[_Use] != null && output[_Use][_me] != null) {
      contents[_Use] = de_userListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Use][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_GetGroupResponse");
  var de_GetInstanceProfileResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_IP] != null) {
      contents[_IP] = de_InstanceProfile(output[_IP], context);
    }
    return contents;
  }, "de_GetInstanceProfileResponse");
  var de_GetLoginProfileResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_LPo] != null) {
      contents[_LPo] = de_LoginProfile(output[_LPo], context);
    }
    return contents;
  }, "de_GetLoginProfileResponse");
  var de_GetMFADeviceResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_SNe] != null) {
      contents[_SNe] = (0, import_smithy_client.expectString)(output[_SNe]);
    }
    if (output[_EDn] != null) {
      contents[_EDn] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_EDn]));
    }
    if (output.Certifications === "") {
      contents[_Ce] = {};
    } else if (output[_Ce] != null && output[_Ce][_e] != null) {
      contents[_Ce] = de_CertificationMapType((0, import_smithy_client.getArrayIfSingleItem)(output[_Ce][_e]), context);
    }
    return contents;
  }, "de_GetMFADeviceResponse");
  var de_GetOpenIDConnectProviderResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_U] != null) {
      contents[_U] = (0, import_smithy_client.expectString)(output[_U]);
    }
    if (output.ClientIDList === "") {
      contents[_CIDL] = [];
    } else if (output[_CIDL] != null && output[_CIDL][_me] != null) {
      contents[_CIDL] = de_clientIDListType((0, import_smithy_client.getArrayIfSingleItem)(output[_CIDL][_me]), context);
    }
    if (output.ThumbprintList === "") {
      contents[_TL] = [];
    } else if (output[_TL] != null && output[_TL][_me] != null) {
      contents[_TL] = de_thumbprintListType((0, import_smithy_client.getArrayIfSingleItem)(output[_TL][_me]), context);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_GetOpenIDConnectProviderResponse");
  var de_GetOrganizationsAccessReportResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_JS] != null) {
      contents[_JS] = (0, import_smithy_client.expectString)(output[_JS]);
    }
    if (output[_JCD] != null) {
      contents[_JCD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCD]));
    }
    if (output[_JCDo] != null) {
      contents[_JCDo] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCDo]));
    }
    if (output[_NOSA] != null) {
      contents[_NOSA] = (0, import_smithy_client.strictParseInt32)(output[_NOSA]);
    }
    if (output[_NOSNA] != null) {
      contents[_NOSNA] = (0, import_smithy_client.strictParseInt32)(output[_NOSNA]);
    }
    if (output.AccessDetails === "") {
      contents[_AD] = [];
    } else if (output[_AD] != null && output[_AD][_me] != null) {
      contents[_AD] = de_AccessDetails((0, import_smithy_client.getArrayIfSingleItem)(output[_AD][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    if (output[_EDr] != null) {
      contents[_EDr] = de_ErrorDetails(output[_EDr], context);
    }
    return contents;
  }, "de_GetOrganizationsAccessReportResponse");
  var de_GetPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Po] != null) {
      contents[_Po] = de_Policy(output[_Po], context);
    }
    return contents;
  }, "de_GetPolicyResponse");
  var de_GetPolicyVersionResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PV] != null) {
      contents[_PV] = de_PolicyVersion(output[_PV], context);
    }
    return contents;
  }, "de_GetPolicyVersionResponse");
  var de_GetRolePolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_RN] != null) {
      contents[_RN] = (0, import_smithy_client.expectString)(output[_RN]);
    }
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PD] != null) {
      contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
    }
    return contents;
  }, "de_GetRolePolicyResponse");
  var de_GetRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = de_Role(output[_Ro], context);
    }
    return contents;
  }, "de_GetRoleResponse");
  var de_GetSAMLProviderResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SAMLPUUID] != null) {
      contents[_SAMLPUUID] = (0, import_smithy_client.expectString)(output[_SAMLPUUID]);
    }
    if (output[_SAMLMD] != null) {
      contents[_SAMLMD] = (0, import_smithy_client.expectString)(output[_SAMLMD]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_VU] != null) {
      contents[_VU] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_VU]));
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_AEM] != null) {
      contents[_AEM] = (0, import_smithy_client.expectString)(output[_AEM]);
    }
    if (output.PrivateKeyList === "") {
      contents[_PKL] = [];
    } else if (output[_PKL] != null && output[_PKL][_me] != null) {
      contents[_PKL] = de_privateKeyList((0, import_smithy_client.getArrayIfSingleItem)(output[_PKL][_me]), context);
    }
    return contents;
  }, "de_GetSAMLProviderResponse");
  var de_GetServerCertificateResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SC] != null) {
      contents[_SC] = de_ServerCertificate(output[_SC], context);
    }
    return contents;
  }, "de_GetServerCertificateResponse");
  var de_GetServiceLastAccessedDetailsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_JS] != null) {
      contents[_JS] = (0, import_smithy_client.expectString)(output[_JS]);
    }
    if (output[_JT] != null) {
      contents[_JT] = (0, import_smithy_client.expectString)(output[_JT]);
    }
    if (output[_JCD] != null) {
      contents[_JCD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCD]));
    }
    if (output.ServicesLastAccessed === "") {
      contents[_SLA] = [];
    } else if (output[_SLA] != null && output[_SLA][_me] != null) {
      contents[_SLA] = de_ServicesLastAccessed((0, import_smithy_client.getArrayIfSingleItem)(output[_SLA][_me]), context);
    }
    if (output[_JCDo] != null) {
      contents[_JCDo] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCDo]));
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    if (output[_Er] != null) {
      contents[_Er] = de_ErrorDetails(output[_Er], context);
    }
    return contents;
  }, "de_GetServiceLastAccessedDetailsResponse");
  var de_GetServiceLastAccessedDetailsWithEntitiesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_JS] != null) {
      contents[_JS] = (0, import_smithy_client.expectString)(output[_JS]);
    }
    if (output[_JCD] != null) {
      contents[_JCD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCD]));
    }
    if (output[_JCDo] != null) {
      contents[_JCDo] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_JCDo]));
    }
    if (output.EntityDetailsList === "") {
      contents[_EDL] = [];
    } else if (output[_EDL] != null && output[_EDL][_me] != null) {
      contents[_EDL] = de_entityDetailsListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EDL][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    if (output[_Er] != null) {
      contents[_Er] = de_ErrorDetails(output[_Er], context);
    }
    return contents;
  }, "de_GetServiceLastAccessedDetailsWithEntitiesResponse");
  var de_GetServiceLinkedRoleDeletionStatusResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_Re] != null) {
      contents[_Re] = de_DeletionTaskFailureReasonType(output[_Re], context);
    }
    return contents;
  }, "de_GetServiceLinkedRoleDeletionStatusResponse");
  var de_GetSSHPublicKeyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SSHPK] != null) {
      contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK], context);
    }
    return contents;
  }, "de_GetSSHPublicKeyResponse");
  var de_GetUserPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PD] != null) {
      contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
    }
    return contents;
  }, "de_GetUserPolicyResponse");
  var de_GetUserResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Us] != null) {
      contents[_Us] = de_User(output[_Us], context);
    }
    return contents;
  }, "de_GetUserResponse");
  var de_Group = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_GN] != null) {
      contents[_GN] = (0, import_smithy_client.expectString)(output[_GN]);
    }
    if (output[_GI] != null) {
      contents[_GI] = (0, import_smithy_client.expectString)(output[_GI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    return contents;
  }, "de_Group");
  var de_GroupDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_GN] != null) {
      contents[_GN] = (0, import_smithy_client.expectString)(output[_GN]);
    }
    if (output[_GI] != null) {
      contents[_GI] = (0, import_smithy_client.expectString)(output[_GI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output.GroupPolicyList === "") {
      contents[_GPL] = [];
    } else if (output[_GPL] != null && output[_GPL][_me] != null) {
      contents[_GPL] = de_policyDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_GPL][_me]), context);
    }
    if (output.AttachedManagedPolicies === "") {
      contents[_AMP] = [];
    } else if (output[_AMP] != null && output[_AMP][_me] != null) {
      contents[_AMP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AMP][_me]), context);
    }
    return contents;
  }, "de_GroupDetail");
  var de_groupDetailListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_GroupDetail(entry, context);
    });
  }, "de_groupDetailListType");
  var de_groupListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Group(entry, context);
    });
  }, "de_groupListType");
  var de_groupNameListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_groupNameListType");
  var de_InstanceProfile = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_IPN] != null) {
      contents[_IPN] = (0, import_smithy_client.expectString)(output[_IPN]);
    }
    if (output[_IPI] != null) {
      contents[_IPI] = (0, import_smithy_client.expectString)(output[_IPI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output.Roles === "") {
      contents[_Rol] = [];
    } else if (output[_Rol] != null && output[_Rol][_me] != null) {
      contents[_Rol] = de_roleListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Rol][_me]), context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_InstanceProfile");
  var de_instanceProfileListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_InstanceProfile(entry, context);
    });
  }, "de_instanceProfileListType");
  var de_InvalidAuthenticationCodeException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidAuthenticationCodeException");
  var de_InvalidCertificateException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidCertificateException");
  var de_InvalidInputException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidInputException");
  var de_InvalidPublicKeyException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidPublicKeyException");
  var de_InvalidUserTypeException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidUserTypeException");
  var de_KeyPairMismatchException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_KeyPairMismatchException");
  var de_LimitExceededException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_LimitExceededException");
  var de_ListAccessKeysResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.AccessKeyMetadata === "") {
      contents[_AKM] = [];
    } else if (output[_AKM] != null && output[_AKM][_me] != null) {
      contents[_AKM] = de_accessKeyMetadataListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AKM][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListAccessKeysResponse");
  var de_ListAccountAliasesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.AccountAliases === "") {
      contents[_AAc] = [];
    } else if (output[_AAc] != null && output[_AAc][_me] != null) {
      contents[_AAc] = de_accountAliasListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AAc][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListAccountAliasesResponse");
  var de_ListAttachedGroupPoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.AttachedPolicies === "") {
      contents[_AP] = [];
    } else if (output[_AP] != null && output[_AP][_me] != null) {
      contents[_AP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AP][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListAttachedGroupPoliciesResponse");
  var de_ListAttachedRolePoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.AttachedPolicies === "") {
      contents[_AP] = [];
    } else if (output[_AP] != null && output[_AP][_me] != null) {
      contents[_AP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AP][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListAttachedRolePoliciesResponse");
  var de_ListAttachedUserPoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.AttachedPolicies === "") {
      contents[_AP] = [];
    } else if (output[_AP] != null && output[_AP][_me] != null) {
      contents[_AP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AP][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListAttachedUserPoliciesResponse");
  var de_ListEntitiesForPolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.PolicyGroups === "") {
      contents[_PG] = [];
    } else if (output[_PG] != null && output[_PG][_me] != null) {
      contents[_PG] = de_PolicyGroupListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PG][_me]), context);
    }
    if (output.PolicyUsers === "") {
      contents[_PU] = [];
    } else if (output[_PU] != null && output[_PU][_me] != null) {
      contents[_PU] = de_PolicyUserListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PU][_me]), context);
    }
    if (output.PolicyRoles === "") {
      contents[_PR] = [];
    } else if (output[_PR] != null && output[_PR][_me] != null) {
      contents[_PR] = de_PolicyRoleListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PR][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListEntitiesForPolicyResponse");
  var de_ListGroupPoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.PolicyNames === "") {
      contents[_PNo] = [];
    } else if (output[_PNo] != null && output[_PNo][_me] != null) {
      contents[_PNo] = de_policyNameListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PNo][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListGroupPoliciesResponse");
  var de_ListGroupsForUserResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Groups === "") {
      contents[_Gro] = [];
    } else if (output[_Gro] != null && output[_Gro][_me] != null) {
      contents[_Gro] = de_groupListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Gro][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListGroupsForUserResponse");
  var de_ListGroupsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Groups === "") {
      contents[_Gro] = [];
    } else if (output[_Gro] != null && output[_Gro][_me] != null) {
      contents[_Gro] = de_groupListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Gro][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListGroupsResponse");
  var de_ListInstanceProfilesForRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.InstanceProfiles === "") {
      contents[_IPn] = [];
    } else if (output[_IPn] != null && output[_IPn][_me] != null) {
      contents[_IPn] = de_instanceProfileListType((0, import_smithy_client.getArrayIfSingleItem)(output[_IPn][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListInstanceProfilesForRoleResponse");
  var de_ListInstanceProfilesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.InstanceProfiles === "") {
      contents[_IPn] = [];
    } else if (output[_IPn] != null && output[_IPn][_me] != null) {
      contents[_IPn] = de_instanceProfileListType((0, import_smithy_client.getArrayIfSingleItem)(output[_IPn][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListInstanceProfilesResponse");
  var de_ListInstanceProfileTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListInstanceProfileTagsResponse");
  var de_ListMFADevicesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.MFADevices === "") {
      contents[_MFAD] = [];
    } else if (output[_MFAD] != null && output[_MFAD][_me] != null) {
      contents[_MFAD] = de_mfaDeviceListType((0, import_smithy_client.getArrayIfSingleItem)(output[_MFAD][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListMFADevicesResponse");
  var de_ListMFADeviceTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListMFADeviceTagsResponse");
  var de_ListOpenIDConnectProvidersResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.OpenIDConnectProviderList === "") {
      contents[_OIDCPL] = [];
    } else if (output[_OIDCPL] != null && output[_OIDCPL][_me] != null) {
      contents[_OIDCPL] = de_OpenIDConnectProviderListType((0, import_smithy_client.getArrayIfSingleItem)(output[_OIDCPL][_me]), context);
    }
    return contents;
  }, "de_ListOpenIDConnectProvidersResponse");
  var de_ListOpenIDConnectProviderTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListOpenIDConnectProviderTagsResponse");
  var de_ListOrganizationsFeaturesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OI] != null) {
      contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
    }
    if (output.EnabledFeatures === "") {
      contents[_EFn] = [];
    } else if (output[_EFn] != null && output[_EFn][_me] != null) {
      contents[_EFn] = de_FeaturesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_EFn][_me]), context);
    }
    return contents;
  }, "de_ListOrganizationsFeaturesResponse");
  var de_ListPoliciesGrantingServiceAccessEntry = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SNer] != null) {
      contents[_SNer] = (0, import_smithy_client.expectString)(output[_SNer]);
    }
    if (output.Policies === "") {
      contents[_Pol] = [];
    } else if (output[_Pol] != null && output[_Pol][_me] != null) {
      contents[_Pol] = de_policyGrantingServiceAccessListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Pol][_me]), context);
    }
    return contents;
  }, "de_ListPoliciesGrantingServiceAccessEntry");
  var de_ListPoliciesGrantingServiceAccessResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.PoliciesGrantingServiceAccess === "") {
      contents[_PGSA] = [];
    } else if (output[_PGSA] != null && output[_PGSA][_me] != null) {
      contents[_PGSA] = de_listPolicyGrantingServiceAccessResponseListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PGSA][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListPoliciesGrantingServiceAccessResponse");
  var de_ListPoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Policies === "") {
      contents[_Pol] = [];
    } else if (output[_Pol] != null && output[_Pol][_me] != null) {
      contents[_Pol] = de_policyListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Pol][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListPoliciesResponse");
  var de_listPolicyGrantingServiceAccessResponseListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ListPoliciesGrantingServiceAccessEntry(entry, context);
    });
  }, "de_listPolicyGrantingServiceAccessResponseListType");
  var de_ListPolicyTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListPolicyTagsResponse");
  var de_ListPolicyVersionsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Versions === "") {
      contents[_Ve] = [];
    } else if (output[_Ve] != null && output[_Ve][_me] != null) {
      contents[_Ve] = de_policyDocumentVersionListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Ve][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListPolicyVersionsResponse");
  var de_ListRolePoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.PolicyNames === "") {
      contents[_PNo] = [];
    } else if (output[_PNo] != null && output[_PNo][_me] != null) {
      contents[_PNo] = de_policyNameListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PNo][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListRolePoliciesResponse");
  var de_ListRolesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Roles === "") {
      contents[_Rol] = [];
    } else if (output[_Rol] != null && output[_Rol][_me] != null) {
      contents[_Rol] = de_roleListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Rol][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListRolesResponse");
  var de_ListRoleTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListRoleTagsResponse");
  var de_ListSAMLProvidersResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.SAMLProviderList === "") {
      contents[_SAMLPL] = [];
    } else if (output[_SAMLPL] != null && output[_SAMLPL][_me] != null) {
      contents[_SAMLPL] = de_SAMLProviderListType((0, import_smithy_client.getArrayIfSingleItem)(output[_SAMLPL][_me]), context);
    }
    return contents;
  }, "de_ListSAMLProvidersResponse");
  var de_ListSAMLProviderTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListSAMLProviderTagsResponse");
  var de_ListServerCertificatesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.ServerCertificateMetadataList === "") {
      contents[_SCML] = [];
    } else if (output[_SCML] != null && output[_SCML][_me] != null) {
      contents[_SCML] = de_serverCertificateMetadataListType((0, import_smithy_client.getArrayIfSingleItem)(output[_SCML][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListServerCertificatesResponse");
  var de_ListServerCertificateTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListServerCertificateTagsResponse");
  var de_ListServiceSpecificCredentialsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.ServiceSpecificCredentials === "") {
      contents[_SSCe] = [];
    } else if (output[_SSCe] != null && output[_SSCe][_me] != null) {
      contents[_SSCe] = de_ServiceSpecificCredentialsListType((0, import_smithy_client.getArrayIfSingleItem)(output[_SSCe][_me]), context);
    }
    return contents;
  }, "de_ListServiceSpecificCredentialsResponse");
  var de_ListSigningCertificatesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Certificates === "") {
      contents[_Cer] = [];
    } else if (output[_Cer] != null && output[_Cer][_me] != null) {
      contents[_Cer] = de_certificateListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Cer][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListSigningCertificatesResponse");
  var de_ListSSHPublicKeysResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.SSHPublicKeys === "") {
      contents[_SSHPKu] = [];
    } else if (output[_SSHPKu] != null && output[_SSHPKu][_me] != null) {
      contents[_SSHPKu] = de_SSHPublicKeyListType((0, import_smithy_client.getArrayIfSingleItem)(output[_SSHPKu][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListSSHPublicKeysResponse");
  var de_ListUserPoliciesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.PolicyNames === "") {
      contents[_PNo] = [];
    } else if (output[_PNo] != null && output[_PNo][_me] != null) {
      contents[_PNo] = de_policyNameListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PNo][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListUserPoliciesResponse");
  var de_ListUsersResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Users === "") {
      contents[_Use] = [];
    } else if (output[_Use] != null && output[_Use][_me] != null) {
      contents[_Use] = de_userListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Use][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListUsersResponse");
  var de_ListUserTagsResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListUserTagsResponse");
  var de_ListVirtualMFADevicesResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.VirtualMFADevices === "") {
      contents[_VMFADi] = [];
    } else if (output[_VMFADi] != null && output[_VMFADi][_me] != null) {
      contents[_VMFADi] = de_virtualMFADeviceListType((0, import_smithy_client.getArrayIfSingleItem)(output[_VMFADi][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_ListVirtualMFADevicesResponse");
  var de_LoginProfile = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_PRR] != null) {
      contents[_PRR] = (0, import_smithy_client.parseBoolean)(output[_PRR]);
    }
    return contents;
  }, "de_LoginProfile");
  var de_MalformedCertificateException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_MalformedCertificateException");
  var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_MalformedPolicyDocumentException");
  var de_ManagedPolicyDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PI] != null) {
      contents[_PI] = (0, import_smithy_client.expectString)(output[_PI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_DVI] != null) {
      contents[_DVI] = (0, import_smithy_client.expectString)(output[_DVI]);
    }
    if (output[_ACt] != null) {
      contents[_ACt] = (0, import_smithy_client.strictParseInt32)(output[_ACt]);
    }
    if (output[_PBUC] != null) {
      contents[_PBUC] = (0, import_smithy_client.strictParseInt32)(output[_PBUC]);
    }
    if (output[_IA] != null) {
      contents[_IA] = (0, import_smithy_client.parseBoolean)(output[_IA]);
    }
    if (output[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_UD] != null) {
      contents[_UD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UD]));
    }
    if (output.PolicyVersionList === "") {
      contents[_PVL] = [];
    } else if (output[_PVL] != null && output[_PVL][_me] != null) {
      contents[_PVL] = de_policyDocumentVersionListType((0, import_smithy_client.getArrayIfSingleItem)(output[_PVL][_me]), context);
    }
    return contents;
  }, "de_ManagedPolicyDetail");
  var de_ManagedPolicyDetailListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ManagedPolicyDetail(entry, context);
    });
  }, "de_ManagedPolicyDetailListType");
  var de_MFADevice = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_SNe] != null) {
      contents[_SNe] = (0, import_smithy_client.expectString)(output[_SNe]);
    }
    if (output[_EDn] != null) {
      contents[_EDn] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_EDn]));
    }
    return contents;
  }, "de_MFADevice");
  var de_mfaDeviceListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_MFADevice(entry, context);
    });
  }, "de_mfaDeviceListType");
  var de_NoSuchEntityException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_NoSuchEntityException");
  var de_OpenIDConnectProviderListEntry = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    return contents;
  }, "de_OpenIDConnectProviderListEntry");
  var de_OpenIDConnectProviderListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_OpenIDConnectProviderListEntry(entry, context);
    });
  }, "de_OpenIDConnectProviderListType");
  var de_OpenIdIdpCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_OpenIdIdpCommunicationErrorException");
  var de_OrganizationNotFoundException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    return contents;
  }, "de_OrganizationNotFoundException");
  var de_OrganizationNotInAllFeaturesModeException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    return contents;
  }, "de_OrganizationNotInAllFeaturesModeException");
  var de_OrganizationsDecisionDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ABO] != null) {
      contents[_ABO] = (0, import_smithy_client.parseBoolean)(output[_ABO]);
    }
    return contents;
  }, "de_OrganizationsDecisionDetail");
  var de_PasswordPolicy = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_MPL] != null) {
      contents[_MPL] = (0, import_smithy_client.strictParseInt32)(output[_MPL]);
    }
    if (output[_RS] != null) {
      contents[_RS] = (0, import_smithy_client.parseBoolean)(output[_RS]);
    }
    if (output[_RNe] != null) {
      contents[_RNe] = (0, import_smithy_client.parseBoolean)(output[_RNe]);
    }
    if (output[_RUC] != null) {
      contents[_RUC] = (0, import_smithy_client.parseBoolean)(output[_RUC]);
    }
    if (output[_RLC] != null) {
      contents[_RLC] = (0, import_smithy_client.parseBoolean)(output[_RLC]);
    }
    if (output[_AUTCP] != null) {
      contents[_AUTCP] = (0, import_smithy_client.parseBoolean)(output[_AUTCP]);
    }
    if (output[_EPx] != null) {
      contents[_EPx] = (0, import_smithy_client.parseBoolean)(output[_EPx]);
    }
    if (output[_MPA] != null) {
      contents[_MPA] = (0, import_smithy_client.strictParseInt32)(output[_MPA]);
    }
    if (output[_PRPa] != null) {
      contents[_PRPa] = (0, import_smithy_client.strictParseInt32)(output[_PRPa]);
    }
    if (output[_HE] != null) {
      contents[_HE] = (0, import_smithy_client.parseBoolean)(output[_HE]);
    }
    return contents;
  }, "de_PasswordPolicy");
  var de_PasswordPolicyViolationException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_PasswordPolicyViolationException");
  var de_PermissionsBoundaryDecisionDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ABPB] != null) {
      contents[_ABPB] = (0, import_smithy_client.parseBoolean)(output[_ABPB]);
    }
    return contents;
  }, "de_PermissionsBoundaryDecisionDetail");
  var de_Policy = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PI] != null) {
      contents[_PI] = (0, import_smithy_client.expectString)(output[_PI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_DVI] != null) {
      contents[_DVI] = (0, import_smithy_client.expectString)(output[_DVI]);
    }
    if (output[_ACt] != null) {
      contents[_ACt] = (0, import_smithy_client.strictParseInt32)(output[_ACt]);
    }
    if (output[_PBUC] != null) {
      contents[_PBUC] = (0, import_smithy_client.strictParseInt32)(output[_PBUC]);
    }
    if (output[_IA] != null) {
      contents[_IA] = (0, import_smithy_client.parseBoolean)(output[_IA]);
    }
    if (output[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_UD] != null) {
      contents[_UD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UD]));
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_Policy");
  var de_PolicyDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PD] != null) {
      contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
    }
    return contents;
  }, "de_PolicyDetail");
  var de_policyDetailListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyDetail(entry, context);
    });
  }, "de_policyDetailListType");
  var de_policyDocumentVersionListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyVersion(entry, context);
    });
  }, "de_policyDocumentVersionListType");
  var de_PolicyEvaluationException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_PolicyEvaluationException");
  var de_PolicyGrantingServiceAccess = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
    }
    if (output[_PT] != null) {
      contents[_PT] = (0, import_smithy_client.expectString)(output[_PT]);
    }
    if (output[_PA] != null) {
      contents[_PA] = (0, import_smithy_client.expectString)(output[_PA]);
    }
    if (output[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
    }
    if (output[_EN] != null) {
      contents[_EN] = (0, import_smithy_client.expectString)(output[_EN]);
    }
    return contents;
  }, "de_PolicyGrantingServiceAccess");
  var de_policyGrantingServiceAccessListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyGrantingServiceAccess(entry, context);
    });
  }, "de_policyGrantingServiceAccessListType");
  var de_PolicyGroup = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_GN] != null) {
      contents[_GN] = (0, import_smithy_client.expectString)(output[_GN]);
    }
    if (output[_GI] != null) {
      contents[_GI] = (0, import_smithy_client.expectString)(output[_GI]);
    }
    return contents;
  }, "de_PolicyGroup");
  var de_PolicyGroupListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyGroup(entry, context);
    });
  }, "de_PolicyGroupListType");
  var de_policyListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Policy(entry, context);
    });
  }, "de_policyListType");
  var de_policyNameListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_policyNameListType");
  var de_PolicyNotAttachableException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_PolicyNotAttachableException");
  var de_PolicyRole = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_RN] != null) {
      contents[_RN] = (0, import_smithy_client.expectString)(output[_RN]);
    }
    if (output[_RI] != null) {
      contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
    }
    return contents;
  }, "de_PolicyRole");
  var de_PolicyRoleListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyRole(entry, context);
    });
  }, "de_PolicyRoleListType");
  var de_PolicyUser = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    return contents;
  }, "de_PolicyUser");
  var de_PolicyUserListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_PolicyUser(entry, context);
    });
  }, "de_PolicyUserListType");
  var de_PolicyVersion = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Do] != null) {
      contents[_Do] = (0, import_smithy_client.expectString)(output[_Do]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_IDV] != null) {
      contents[_IDV] = (0, import_smithy_client.parseBoolean)(output[_IDV]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    return contents;
  }, "de_PolicyVersion");
  var de_Position = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_L] != null) {
      contents[_L] = (0, import_smithy_client.strictParseInt32)(output[_L]);
    }
    if (output[_Col] != null) {
      contents[_Col] = (0, import_smithy_client.strictParseInt32)(output[_Col]);
    }
    return contents;
  }, "de_Position");
  var de_privateKeyList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_SAMLPrivateKey(entry, context);
    });
  }, "de_privateKeyList");
  var de_ReportGenerationLimitExceededException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_ReportGenerationLimitExceededException");
  var de_ResetServiceSpecificCredentialResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SSC] != null) {
      contents[_SSC] = de_ServiceSpecificCredential(output[_SSC], context);
    }
    return contents;
  }, "de_ResetServiceSpecificCredentialResponse");
  var de_ResourceSpecificResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ERN] != null) {
      contents[_ERN] = (0, import_smithy_client.expectString)(output[_ERN]);
    }
    if (output[_ERD] != null) {
      contents[_ERD] = (0, import_smithy_client.expectString)(output[_ERD]);
    }
    if (output.MatchedStatements === "") {
      contents[_MS] = [];
    } else if (output[_MS] != null && output[_MS][_me] != null) {
      contents[_MS] = de_StatementListType((0, import_smithy_client.getArrayIfSingleItem)(output[_MS][_me]), context);
    }
    if (output.MissingContextValues === "") {
      contents[_MCV] = [];
    } else if (output[_MCV] != null && output[_MCV][_me] != null) {
      contents[_MCV] = de_ContextKeyNamesResultListType((0, import_smithy_client.getArrayIfSingleItem)(output[_MCV][_me]), context);
    }
    if (output.EvalDecisionDetails === "") {
      contents[_EDD] = {};
    } else if (output[_EDD] != null && output[_EDD][_e] != null) {
      contents[_EDD] = de_EvalDecisionDetailsType((0, import_smithy_client.getArrayIfSingleItem)(output[_EDD][_e]), context);
    }
    if (output[_PBDD] != null) {
      contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD], context);
    }
    return contents;
  }, "de_ResourceSpecificResult");
  var de_ResourceSpecificResultListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ResourceSpecificResult(entry, context);
    });
  }, "de_ResourceSpecificResultListType");
  var de_Role = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_RN] != null) {
      contents[_RN] = (0, import_smithy_client.expectString)(output[_RN]);
    }
    if (output[_RI] != null) {
      contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_ARPD] != null) {
      contents[_ARPD] = (0, import_smithy_client.expectString)(output[_ARPD]);
    }
    if (output[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
    }
    if (output[_MSD] != null) {
      contents[_MSD] = (0, import_smithy_client.strictParseInt32)(output[_MSD]);
    }
    if (output[_PB] != null) {
      contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_RLU] != null) {
      contents[_RLU] = de_RoleLastUsed(output[_RLU], context);
    }
    return contents;
  }, "de_Role");
  var de_RoleDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_RN] != null) {
      contents[_RN] = (0, import_smithy_client.expectString)(output[_RN]);
    }
    if (output[_RI] != null) {
      contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_ARPD] != null) {
      contents[_ARPD] = (0, import_smithy_client.expectString)(output[_ARPD]);
    }
    if (output.InstanceProfileList === "") {
      contents[_IPL] = [];
    } else if (output[_IPL] != null && output[_IPL][_me] != null) {
      contents[_IPL] = de_instanceProfileListType((0, import_smithy_client.getArrayIfSingleItem)(output[_IPL][_me]), context);
    }
    if (output.RolePolicyList === "") {
      contents[_RPL] = [];
    } else if (output[_RPL] != null && output[_RPL][_me] != null) {
      contents[_RPL] = de_policyDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_RPL][_me]), context);
    }
    if (output.AttachedManagedPolicies === "") {
      contents[_AMP] = [];
    } else if (output[_AMP] != null && output[_AMP][_me] != null) {
      contents[_AMP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AMP][_me]), context);
    }
    if (output[_PB] != null) {
      contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    if (output[_RLU] != null) {
      contents[_RLU] = de_RoleLastUsed(output[_RLU], context);
    }
    return contents;
  }, "de_RoleDetail");
  var de_roleDetailListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_RoleDetail(entry, context);
    });
  }, "de_roleDetailListType");
  var de_RoleLastUsed = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_LUD] != null) {
      contents[_LUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LUD]));
    }
    if (output[_R] != null) {
      contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
    }
    return contents;
  }, "de_RoleLastUsed");
  var de_roleListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Role(entry, context);
    });
  }, "de_roleListType");
  var de_RoleUsageListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_RoleUsageType(entry, context);
    });
  }, "de_RoleUsageListType");
  var de_RoleUsageType = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_R] != null) {
      contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
    }
    if (output.Resources === "") {
      contents[_Res] = [];
    } else if (output[_Res] != null && output[_Res][_me] != null) {
      contents[_Res] = de_ArnListType((0, import_smithy_client.getArrayIfSingleItem)(output[_Res][_me]), context);
    }
    return contents;
  }, "de_RoleUsageType");
  var de_SAMLPrivateKey = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_KI] != null) {
      contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
    }
    if (output[_Ti] != null) {
      contents[_Ti] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Ti]));
    }
    return contents;
  }, "de_SAMLPrivateKey");
  var de_SAMLProviderListEntry = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_VU] != null) {
      contents[_VU] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_VU]));
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    return contents;
  }, "de_SAMLProviderListEntry");
  var de_SAMLProviderListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_SAMLProviderListEntry(entry, context);
    });
  }, "de_SAMLProviderListType");
  var de_ServerCertificate = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SCM] != null) {
      contents[_SCM] = de_ServerCertificateMetadata(output[_SCM], context);
    }
    if (output[_CB] != null) {
      contents[_CB] = (0, import_smithy_client.expectString)(output[_CB]);
    }
    if (output[_CC] != null) {
      contents[_CC] = (0, import_smithy_client.expectString)(output[_CC]);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_ServerCertificate");
  var de_ServerCertificateMetadata = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_SCN] != null) {
      contents[_SCN] = (0, import_smithy_client.expectString)(output[_SCN]);
    }
    if (output[_SCI] != null) {
      contents[_SCI] = (0, import_smithy_client.expectString)(output[_SCI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_UDp] != null) {
      contents[_UDp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UDp]));
    }
    if (output[_Ex] != null) {
      contents[_Ex] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Ex]));
    }
    return contents;
  }, "de_ServerCertificateMetadata");
  var de_serverCertificateMetadataListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ServerCertificateMetadata(entry, context);
    });
  }, "de_serverCertificateMetadataListType");
  var de_ServiceAccessNotEnabledException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Me] != null) {
      contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
    }
    return contents;
  }, "de_ServiceAccessNotEnabledException");
  var de_ServiceFailureException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_ServiceFailureException");
  var de_ServiceLastAccessed = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SN] != null) {
      contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
    }
    if (output[_LA] != null) {
      contents[_LA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LA]));
    }
    if (output[_SNer] != null) {
      contents[_SNer] = (0, import_smithy_client.expectString)(output[_SNer]);
    }
    if (output[_LAE] != null) {
      contents[_LAE] = (0, import_smithy_client.expectString)(output[_LAE]);
    }
    if (output[_LAR] != null) {
      contents[_LAR] = (0, import_smithy_client.expectString)(output[_LAR]);
    }
    if (output[_TAE] != null) {
      contents[_TAE] = (0, import_smithy_client.strictParseInt32)(output[_TAE]);
    }
    if (output.TrackedActionsLastAccessed === "") {
      contents[_TALA] = [];
    } else if (output[_TALA] != null && output[_TALA][_me] != null) {
      contents[_TALA] = de_TrackedActionsLastAccessed((0, import_smithy_client.getArrayIfSingleItem)(output[_TALA][_me]), context);
    }
    return contents;
  }, "de_ServiceLastAccessed");
  var de_ServiceNotSupportedException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_ServiceNotSupportedException");
  var de_ServicesLastAccessed = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ServiceLastAccessed(entry, context);
    });
  }, "de_ServicesLastAccessed");
  var de_ServiceSpecificCredential = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_SN] != null) {
      contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
    }
    if (output[_SUN] != null) {
      contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
    }
    if (output[_SP] != null) {
      contents[_SP] = (0, import_smithy_client.expectString)(output[_SP]);
    }
    if (output[_SSCI] != null) {
      contents[_SSCI] = (0, import_smithy_client.expectString)(output[_SSCI]);
    }
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    return contents;
  }, "de_ServiceSpecificCredential");
  var de_ServiceSpecificCredentialMetadata = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_SUN] != null) {
      contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_SSCI] != null) {
      contents[_SSCI] = (0, import_smithy_client.expectString)(output[_SSCI]);
    }
    if (output[_SN] != null) {
      contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
    }
    return contents;
  }, "de_ServiceSpecificCredentialMetadata");
  var de_ServiceSpecificCredentialsListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ServiceSpecificCredentialMetadata(entry, context);
    });
  }, "de_ServiceSpecificCredentialsListType");
  var de_SigningCertificate = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_CI] != null) {
      contents[_CI] = (0, import_smithy_client.expectString)(output[_CI]);
    }
    if (output[_CB] != null) {
      contents[_CB] = (0, import_smithy_client.expectString)(output[_CB]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_UDp] != null) {
      contents[_UDp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UDp]));
    }
    return contents;
  }, "de_SigningCertificate");
  var de_SimulatePolicyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.EvaluationResults === "") {
      contents[_ER] = [];
    } else if (output[_ER] != null && output[_ER][_me] != null) {
      contents[_ER] = de_EvaluationResultsListType((0, import_smithy_client.getArrayIfSingleItem)(output[_ER][_me]), context);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(output[_M]);
    }
    return contents;
  }, "de_SimulatePolicyResponse");
  var de_SSHPublicKey = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_SSHPKI] != null) {
      contents[_SSHPKI] = (0, import_smithy_client.expectString)(output[_SSHPKI]);
    }
    if (output[_Fi] != null) {
      contents[_Fi] = (0, import_smithy_client.expectString)(output[_Fi]);
    }
    if (output[_SSHPKB] != null) {
      contents[_SSHPKB] = (0, import_smithy_client.expectString)(output[_SSHPKB]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_UDp] != null) {
      contents[_UDp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UDp]));
    }
    return contents;
  }, "de_SSHPublicKey");
  var de_SSHPublicKeyListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_SSHPublicKeyMetadata(entry, context);
    });
  }, "de_SSHPublicKeyListType");
  var de_SSHPublicKeyMetadata = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_SSHPKI] != null) {
      contents[_SSHPKI] = (0, import_smithy_client.expectString)(output[_SSHPKI]);
    }
    if (output[_St] != null) {
      contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
    }
    if (output[_UDp] != null) {
      contents[_UDp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UDp]));
    }
    return contents;
  }, "de_SSHPublicKeyMetadata");
  var de_Statement = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SPI] != null) {
      contents[_SPI] = (0, import_smithy_client.expectString)(output[_SPI]);
    }
    if (output[_SPT] != null) {
      contents[_SPT] = (0, import_smithy_client.expectString)(output[_SPT]);
    }
    if (output[_SPt] != null) {
      contents[_SPt] = de_Position(output[_SPt], context);
    }
    if (output[_EPn] != null) {
      contents[_EPn] = de_Position(output[_EPn], context);
    }
    return contents;
  }, "de_Statement");
  var de_StatementListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Statement(entry, context);
    });
  }, "de_StatementListType");
  var de_summaryMapType = /* @__PURE__ */ __name((output, context) => {
    return output.reduce((acc, pair) => {
      if (pair["value"] === null) {
        return acc;
      }
      acc[pair["key"]] = (0, import_smithy_client.strictParseInt32)(pair["value"]);
      return acc;
    }, {});
  }, "de_summaryMapType");
  var de_Tag = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_Va] != null) {
      contents[_Va] = (0, import_smithy_client.expectString)(output[_Va]);
    }
    return contents;
  }, "de_Tag");
  var de_tagListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Tag(entry, context);
    });
  }, "de_tagListType");
  var de_thumbprintListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_thumbprintListType");
  var de_TrackedActionLastAccessed = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ANc] != null) {
      contents[_ANc] = (0, import_smithy_client.expectString)(output[_ANc]);
    }
    if (output[_LAEa] != null) {
      contents[_LAEa] = (0, import_smithy_client.expectString)(output[_LAEa]);
    }
    if (output[_LATa] != null) {
      contents[_LATa] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LATa]));
    }
    if (output[_LARa] != null) {
      contents[_LARa] = (0, import_smithy_client.expectString)(output[_LARa]);
    }
    return contents;
  }, "de_TrackedActionLastAccessed");
  var de_TrackedActionsLastAccessed = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_TrackedActionLastAccessed(entry, context);
    });
  }, "de_TrackedActionsLastAccessed");
  var de_UnmodifiableEntityException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_UnmodifiableEntityException");
  var de_UnrecognizedPublicKeyEncodingException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_UnrecognizedPublicKeyEncodingException");
  var de_UpdateRoleDescriptionResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = de_Role(output[_Ro], context);
    }
    return contents;
  }, "de_UpdateRoleDescriptionResponse");
  var de_UpdateRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_UpdateRoleResponse");
  var de_UpdateSAMLProviderResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SAMLPA] != null) {
      contents[_SAMLPA] = (0, import_smithy_client.expectString)(output[_SAMLPA]);
    }
    return contents;
  }, "de_UpdateSAMLProviderResponse");
  var de_UploadServerCertificateResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SCM] != null) {
      contents[_SCM] = de_ServerCertificateMetadata(output[_SCM], context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_UploadServerCertificateResponse");
  var de_UploadSigningCertificateResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Cert] != null) {
      contents[_Cert] = de_SigningCertificate(output[_Cert], context);
    }
    return contents;
  }, "de_UploadSigningCertificateResponse");
  var de_UploadSSHPublicKeyResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SSHPK] != null) {
      contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK], context);
    }
    return contents;
  }, "de_UploadSSHPublicKeyResponse");
  var de_User = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output[_PLU] != null) {
      contents[_PLU] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_PLU]));
    }
    if (output[_PB] != null) {
      contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_User");
  var de_UserDetail = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_UN] != null) {
      contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
    }
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    if (output[_CD] != null) {
      contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
    }
    if (output.UserPolicyList === "") {
      contents[_UPL] = [];
    } else if (output[_UPL] != null && output[_UPL][_me] != null) {
      contents[_UPL] = de_policyDetailListType((0, import_smithy_client.getArrayIfSingleItem)(output[_UPL][_me]), context);
    }
    if (output.GroupList === "") {
      contents[_GL] = [];
    } else if (output[_GL] != null && output[_GL][_me] != null) {
      contents[_GL] = de_groupNameListType((0, import_smithy_client.getArrayIfSingleItem)(output[_GL][_me]), context);
    }
    if (output.AttachedManagedPolicies === "") {
      contents[_AMP] = [];
    } else if (output[_AMP] != null && output[_AMP][_me] != null) {
      contents[_AMP] = de_attachedPoliciesListType((0, import_smithy_client.getArrayIfSingleItem)(output[_AMP][_me]), context);
    }
    if (output[_PB] != null) {
      contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_UserDetail");
  var de_userDetailListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_UserDetail(entry, context);
    });
  }, "de_userDetailListType");
  var de_userListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_User(entry, context);
    });
  }, "de_userListType");
  var de_VirtualMFADevice = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SNe] != null) {
      contents[_SNe] = (0, import_smithy_client.expectString)(output[_SNe]);
    }
    if (output[_BSS] != null) {
      contents[_BSS] = context.base64Decoder(output[_BSS]);
    }
    if (output[_QRCPNG] != null) {
      contents[_QRCPNG] = context.base64Decoder(output[_QRCPNG]);
    }
    if (output[_Us] != null) {
      contents[_Us] = de_User(output[_Us], context);
    }
    if (output[_EDn] != null) {
      contents[_EDn] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_EDn]));
    }
    if (output.Tags === "") {
      contents[_T] = [];
    } else if (output[_T] != null && output[_T][_me] != null) {
      contents[_T] = de_tagListType((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_me]), context);
    }
    return contents;
  }, "de_VirtualMFADevice");
  var de_virtualMFADeviceListType = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_VirtualMFADevice(entry, context);
    });
  }, "de_virtualMFADeviceListType");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(IAMServiceException);
  var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new import_protocol_http.HttpRequest(contents);
  }, "buildHttpRpcRequest");
  var SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
  };
  var _ = "2010-05-08";
  var _A = "Action";
  var _AA = "AccountAlias";
  var _AAc = "AccountAliases";
  var _ABO = "AllowedByOrganizations";
  var _ABPB = "AllowedByPermissionsBoundary";
  var _AC = "AuthenticationCode1";
  var _ACIDTOIDCP = "AddClientIDToOpenIDConnectProvider";
  var _ACt = "AttachmentCount";
  var _ACu = "AuthenticationCode2";
  var _AD = "AccessDetails";
  var _AEM = "AssertionEncryptionMode";
  var _AGP = "AttachGroupPolicy";
  var _AK = "AccessKey";
  var _AKI = "AccessKeyId";
  var _AKLU = "AccessKeyLastUsed";
  var _AKM = "AccessKeyMetadata";
  var _AMP = "AttachedManagedPolicies";
  var _AN = "ActionNames";
  var _ANc = "ActionName";
  var _AP = "AttachedPolicies";
  var _APK = "AddPrivateKey";
  var _ARP = "AttachRolePolicy";
  var _ARPD = "AssumeRolePolicyDocument";
  var _ARTIP = "AddRoleToInstanceProfile";
  var _AS = "AssignmentStatus";
  var _AUP = "AttachUserPolicy";
  var _AUTCP = "AllowUsersToChangePassword";
  var _AUTG = "AddUserToGroup";
  var _AWSSN = "AWSServiceName";
  var _Ar = "Arn";
  var _BSS = "Base32StringSeed";
  var _C = "Code";
  var _CA = "CallerArn";
  var _CAA = "CreateAccountAlias";
  var _CAK = "CreateAccessKey";
  var _CB = "CertificateBody";
  var _CC = "CertificateChain";
  var _CD = "CreateDate";
  var _CE = "ContextEntries";
  var _CG = "CreateGroup";
  var _CI = "CertificateId";
  var _CID = "ClientID";
  var _CIDL = "ClientIDList";
  var _CIP = "CreateInstanceProfile";
  var _CKN = "ContextKeyName";
  var _CKNo = "ContextKeyNames";
  var _CKT = "ContextKeyType";
  var _CKV = "ContextKeyValues";
  var _CLP = "CreateLoginProfile";
  var _COIDCP = "CreateOpenIDConnectProvider";
  var _CP = "ChangePassword";
  var _CPV = "CreatePolicyVersion";
  var _CPr = "CreatePolicy";
  var _CR = "CreateRole";
  var _CS = "CustomSuffix";
  var _CSAMLP = "CreateSAMLProvider";
  var _CSLR = "CreateServiceLinkedRole";
  var _CSSC = "CreateServiceSpecificCredential";
  var _CU = "CreateUser";
  var _CVMFAD = "CreateVirtualMFADevice";
  var _Ce = "Certifications";
  var _Cer = "Certificates";
  var _Cert = "Certificate";
  var _Co = "Content";
  var _Col = "Column";
  var _D = "Description";
  var _DAA = "DeleteAccountAlias";
  var _DAK = "DeleteAccessKey";
  var _DAPP = "DeleteAccountPasswordPolicy";
  var _DG = "DeleteGroup";
  var _DGP = "DeleteGroupPolicy";
  var _DGPe = "DetachGroupPolicy";
  var _DIP = "DeleteInstanceProfile";
  var _DLP = "DeleteLoginProfile";
  var _DMFAD = "DeactivateMFADevice";
  var _DOIDCP = "DeleteOpenIDConnectProvider";
  var _DORCM = "DisableOrganizationsRootCredentialsManagement";
  var _DORS = "DisableOrganizationsRootSessions";
  var _DP = "DeletePolicy";
  var _DPV = "DeletePolicyVersion";
  var _DR = "DeleteRole";
  var _DRP = "DeleteRolePolicy";
  var _DRPB = "DeleteRolePermissionsBoundary";
  var _DRPe = "DetachRolePolicy";
  var _DSAMLP = "DeleteSAMLProvider";
  var _DSC = "DeleteServerCertificate";
  var _DSCe = "DeleteSigningCertificate";
  var _DSLR = "DeleteServiceLinkedRole";
  var _DSSC = "DeleteServiceSpecificCredential";
  var _DSSHPK = "DeleteSSHPublicKey";
  var _DTI = "DeletionTaskId";
  var _DU = "DeleteUser";
  var _DUP = "DeleteUserPolicy";
  var _DUPB = "DeleteUserPermissionsBoundary";
  var _DUPe = "DetachUserPolicy";
  var _DVI = "DefaultVersionId";
  var _DVMFAD = "DeleteVirtualMFADevice";
  var _Do = "Document";
  var _E = "Encoding";
  var _EAN = "EvalActionName";
  var _ED = "EvalDecision";
  var _EDD = "EvalDecisionDetails";
  var _EDL = "EntityDetailsList";
  var _EDn = "EnableDate";
  var _EDr = "ErrorDetails";
  var _EF = "EntityFilter";
  var _EFn = "EnabledFeatures";
  var _EI = "EntityInfo";
  var _EMFAD = "EnableMFADevice";
  var _EN = "EntityName";
  var _EORCM = "EnableOrganizationsRootCredentialsManagement";
  var _EORS = "EnableOrganizationsRootSessions";
  var _EP = "EntityPath";
  var _EPn = "EndPosition";
  var _EPx = "ExpirePasswords";
  var _ER = "EvaluationResults";
  var _ERD = "EvalResourceDecision";
  var _ERN = "EvalResourceName";
  var _ET = "EntityType";
  var _Er = "Error";
  var _Ex = "Expiration";
  var _F = "Filter";
  var _Fi = "Fingerprint";
  var _G = "Granularity";
  var _GAAD = "GetAccountAuthorizationDetails";
  var _GAKLU = "GetAccessKeyLastUsed";
  var _GAPP = "GetAccountPasswordPolicy";
  var _GAS = "GetAccountSummary";
  var _GCKFCP = "GetContextKeysForCustomPolicy";
  var _GCKFPP = "GetContextKeysForPrincipalPolicy";
  var _GCR = "GenerateCredentialReport";
  var _GCRe = "GetCredentialReport";
  var _GDL = "GroupDetailList";
  var _GETV = "GlobalEndpointTokenVersion";
  var _GG = "GetGroup";
  var _GGP = "GetGroupPolicy";
  var _GI = "GroupId";
  var _GIP = "GetInstanceProfile";
  var _GL = "GroupList";
  var _GLP = "GetLoginProfile";
  var _GMFAD = "GetMFADevice";
  var _GN = "GroupName";
  var _GOAR = "GenerateOrganizationsAccessReport";
  var _GOARe = "GetOrganizationsAccessReport";
  var _GOIDCP = "GetOpenIDConnectProvider";
  var _GP = "GetPolicy";
  var _GPL = "GroupPolicyList";
  var _GPV = "GetPolicyVersion";
  var _GR = "GetRole";
  var _GRP = "GetRolePolicy";
  var _GSAMLP = "GetSAMLProvider";
  var _GSC = "GetServerCertificate";
  var _GSLAD = "GenerateServiceLastAccessedDetails";
  var _GSLADWE = "GetServiceLastAccessedDetailsWithEntities";
  var _GSLADe = "GetServiceLastAccessedDetails";
  var _GSLRDS = "GetServiceLinkedRoleDeletionStatus";
  var _GSSHPK = "GetSSHPublicKey";
  var _GT = "GeneratedTime";
  var _GU = "GetUser";
  var _GUP = "GetUserPolicy";
  var _Gr = "Group";
  var _Gro = "Groups";
  var _HE = "HardExpiry";
  var _I = "Id";
  var _IA = "IsAttachable";
  var _IDV = "IsDefaultVersion";
  var _IP = "InstanceProfile";
  var _IPI = "InstanceProfileId";
  var _IPL = "InstanceProfileList";
  var _IPN = "InstanceProfileName";
  var _IPn = "InstanceProfiles";
  var _IT = "IsTruncated";
  var _JCD = "JobCreationDate";
  var _JCDo = "JobCompletionDate";
  var _JI = "JobId";
  var _JS = "JobStatus";
  var _JT = "JobType";
  var _K = "Key";
  var _KI = "KeyId";
  var _L = "Line";
  var _LA = "LastAuthenticated";
  var _LAA = "ListAccountAliases";
  var _LAE = "LastAuthenticatedEntity";
  var _LAEa = "LastAccessedEntity";
  var _LAGP = "ListAttachedGroupPolicies";
  var _LAK = "ListAccessKeys";
  var _LAR = "LastAuthenticatedRegion";
  var _LARP = "ListAttachedRolePolicies";
  var _LARa = "LastAccessedRegion";
  var _LAT = "LastAuthenticatedTime";
  var _LATa = "LastAccessedTime";
  var _LAUP = "ListAttachedUserPolicies";
  var _LEFP = "ListEntitiesForPolicy";
  var _LG = "ListGroups";
  var _LGFU = "ListGroupsForUser";
  var _LGP = "ListGroupPolicies";
  var _LIP = "ListInstanceProfiles";
  var _LIPFR = "ListInstanceProfilesForRole";
  var _LIPT = "ListInstanceProfileTags";
  var _LMFAD = "ListMFADevices";
  var _LMFADT = "ListMFADeviceTags";
  var _LOF = "ListOrganizationsFeatures";
  var _LOIDCP = "ListOpenIDConnectProviders";
  var _LOIDCPT = "ListOpenIDConnectProviderTags";
  var _LP = "ListPolicies";
  var _LPGSA = "ListPoliciesGrantingServiceAccess";
  var _LPT = "ListPolicyTags";
  var _LPV = "ListPolicyVersions";
  var _LPo = "LoginProfile";
  var _LR = "ListRoles";
  var _LRP = "ListRolePolicies";
  var _LRT = "ListRoleTags";
  var _LSAMLP = "ListSAMLProviders";
  var _LSAMLPT = "ListSAMLProviderTags";
  var _LSC = "ListServerCertificates";
  var _LSCT = "ListServerCertificateTags";
  var _LSCi = "ListSigningCertificates";
  var _LSSC = "ListServiceSpecificCredentials";
  var _LSSHPK = "ListSSHPublicKeys";
  var _LU = "ListUsers";
  var _LUD = "LastUsedDate";
  var _LUP = "ListUserPolicies";
  var _LUT = "ListUserTags";
  var _LVMFAD = "ListVirtualMFADevices";
  var _M = "Marker";
  var _MCV = "MissingContextValues";
  var _MFAD = "MFADevices";
  var _MI = "MaxItems";
  var _MPA = "MaxPasswordAge";
  var _MPL = "MinimumPasswordLength";
  var _MS = "MatchedStatements";
  var _MSD = "MaxSessionDuration";
  var _Me = "Message";
  var _N = "Name";
  var _NGN = "NewGroupName";
  var _NOSA = "NumberOfServicesAccessible";
  var _NOSNA = "NumberOfServicesNotAccessed";
  var _NP = "NewPassword";
  var _NPe = "NewPath";
  var _NSCN = "NewServerCertificateName";
  var _NUN = "NewUserName";
  var _OA = "OnlyAttached";
  var _ODD = "OrganizationsDecisionDetail";
  var _OI = "OrganizationId";
  var _OIDCPA = "OpenIDConnectProviderArn";
  var _OIDCPL = "OpenIDConnectProviderList";
  var _OP = "OldPassword";
  var _OPI = "OrganizationsPolicyId";
  var _P = "Path";
  var _PA = "PolicyArn";
  var _PB = "PermissionsBoundary";
  var _PBA = "PermissionsBoundaryArn";
  var _PBDD = "PermissionsBoundaryDecisionDetail";
  var _PBPIL = "PermissionsBoundaryPolicyInputList";
  var _PBT = "PermissionsBoundaryType";
  var _PBUC = "PermissionsBoundaryUsageCount";
  var _PD = "PolicyDocument";
  var _PG = "PolicyGroups";
  var _PGP = "PutGroupPolicy";
  var _PGSA = "PoliciesGrantingServiceAccess";
  var _PI = "PolicyId";
  var _PIL = "PolicyInputList";
  var _PK = "PrivateKey";
  var _PKL = "PrivateKeyList";
  var _PLU = "PasswordLastUsed";
  var _PN = "PolicyName";
  var _PNo = "PolicyNames";
  var _PP = "PathPrefix";
  var _PPa = "PasswordPolicy";
  var _PR = "PolicyRoles";
  var _PRP = "PutRolePolicy";
  var _PRPB = "PutRolePermissionsBoundary";
  var _PRPa = "PasswordReusePrevention";
  var _PRR = "PasswordResetRequired";
  var _PSA = "PolicySourceArn";
  var _PT = "PolicyType";
  var _PU = "PolicyUsers";
  var _PUF = "PolicyUsageFilter";
  var _PUP = "PutUserPolicy";
  var _PUPB = "PutUserPermissionsBoundary";
  var _PV = "PolicyVersion";
  var _PVL = "PolicyVersionList";
  var _Pa = "Password";
  var _Po = "Policy";
  var _Pol = "Policies";
  var _QRCPNG = "QRCodePNG";
  var _R = "Region";
  var _RA = "ResourceArns";
  var _RCIDFOIDCP = "RemoveClientIDFromOpenIDConnectProvider";
  var _RDL = "RoleDetailList";
  var _RF = "ReportFormat";
  var _RHO = "ResourceHandlingOption";
  var _RI = "RoleId";
  var _RLC = "RequireLowercaseCharacters";
  var _RLU = "RoleLastUsed";
  var _RMFAD = "ResyncMFADevice";
  var _RN = "RoleName";
  var _RNe = "RequireNumbers";
  var _RO = "ResourceOwner";
  var _RP = "ResourcePolicy";
  var _RPK = "RemovePrivateKey";
  var _RPL = "RolePolicyList";
  var _RRFIP = "RemoveRoleFromInstanceProfile";
  var _RS = "RequireSymbols";
  var _RSR = "ResourceSpecificResults";
  var _RSSC = "ResetServiceSpecificCredential";
  var _RUC = "RequireUppercaseCharacters";
  var _RUFG = "RemoveUserFromGroup";
  var _RUL = "RoleUsageList";
  var _Re = "Reason";
  var _Res = "Resources";
  var _Ro = "Role";
  var _Rol = "Roles";
  var _S = "Scope";
  var _SAD = "SetAsDefault";
  var _SAK = "SecretAccessKey";
  var _SAMLMD = "SAMLMetadataDocument";
  var _SAMLPA = "SAMLProviderArn";
  var _SAMLPL = "SAMLProviderList";
  var _SAMLPUUID = "SAMLProviderUUID";
  var _SC = "ServerCertificate";
  var _SCI = "ServerCertificateId";
  var _SCM = "ServerCertificateMetadata";
  var _SCML = "ServerCertificateMetadataList";
  var _SCN = "ServerCertificateName";
  var _SCP = "SimulateCustomPolicy";
  var _SDPV = "SetDefaultPolicyVersion";
  var _SK = "SortKey";
  var _SLA = "ServicesLastAccessed";
  var _SM = "SummaryMap";
  var _SN = "ServiceName";
  var _SNe = "SerialNumber";
  var _SNer = "ServiceNamespace";
  var _SNerv = "ServiceNamespaces";
  var _SP = "ServicePassword";
  var _SPI = "SourcePolicyId";
  var _SPP = "SimulatePrincipalPolicy";
  var _SPT = "SourcePolicyType";
  var _SPt = "StartPosition";
  var _SSC = "ServiceSpecificCredential";
  var _SSCI = "ServiceSpecificCredentialId";
  var _SSCe = "ServiceSpecificCredentials";
  var _SSHPK = "SSHPublicKey";
  var _SSHPKB = "SSHPublicKeyBody";
  var _SSHPKI = "SSHPublicKeyId";
  var _SSHPKu = "SSHPublicKeys";
  var _SSTSP = "SetSecurityTokenServicePreferences";
  var _SUN = "ServiceUserName";
  var _St = "Status";
  var _Sta = "State";
  var _T = "Tags";
  var _TAE = "TotalAuthenticatedEntities";
  var _TALA = "TrackedActionsLastAccessed";
  var _TIP = "TagInstanceProfile";
  var _TK = "TagKeys";
  var _TL = "ThumbprintList";
  var _TMFAD = "TagMFADevice";
  var _TOIDCP = "TagOpenIDConnectProvider";
  var _TP = "TagPolicy";
  var _TR = "TagRole";
  var _TSAMLP = "TagSAMLProvider";
  var _TSC = "TagServerCertificate";
  var _TU = "TagUser";
  var _Ti = "Timestamp";
  var _Ty = "Type";
  var _U = "Url";
  var _UAK = "UpdateAccessKey";
  var _UAPP = "UpdateAccountPasswordPolicy";
  var _UARP = "UpdateAssumeRolePolicy";
  var _UD = "UpdateDate";
  var _UDL = "UserDetailList";
  var _UDp = "UploadDate";
  var _UG = "UpdateGroup";
  var _UI = "UserId";
  var _UIP = "UntagInstanceProfile";
  var _ULP = "UpdateLoginProfile";
  var _UMFAD = "UntagMFADevice";
  var _UN = "UserName";
  var _UOIDCP = "UntagOpenIDConnectProvider";
  var _UOIDCPT = "UpdateOpenIDConnectProviderThumbprint";
  var _UP = "UntagPolicy";
  var _UPL = "UserPolicyList";
  var _UR = "UntagRole";
  var _URD = "UpdateRoleDescription";
  var _URp = "UpdateRole";
  var _USAMLP = "UntagSAMLProvider";
  var _USAMLPp = "UpdateSAMLProvider";
  var _USC = "UntagServerCertificate";
  var _USCp = "UpdateServerCertificate";
  var _USCpd = "UpdateSigningCertificate";
  var _USCpl = "UploadServerCertificate";
  var _USCplo = "UploadSigningCertificate";
  var _USSC = "UpdateServiceSpecificCredential";
  var _USSHPK = "UpdateSSHPublicKey";
  var _USSHPKp = "UploadSSHPublicKey";
  var _UU = "UntagUser";
  var _UUp = "UpdateUser";
  var _Us = "User";
  var _Use = "Users";
  var _V = "Version";
  var _VI = "VersionId";
  var _VMFAD = "VirtualMFADevice";
  var _VMFADN = "VirtualMFADeviceName";
  var _VMFADi = "VirtualMFADevices";
  var _VU = "ValidUntil";
  var _Va = "Value";
  var _Ve = "Versions";
  var _e = "entry";
  var _m = "message";
  var _me = "member";
  var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
  var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
    if (data.Error?.Code !== undefined) {
      return data.Error.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  }, "loadQueryErrorCode");
  var AddClientIDToOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AddClientIDToOpenIDConnectProvider", {}).n("IAMClient", "AddClientIDToOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_AddClientIDToOpenIDConnectProviderCommand).de(de_AddClientIDToOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "AddClientIDToOpenIDConnectProviderCommand");
    }
  };
  var AddRoleToInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AddRoleToInstanceProfile", {}).n("IAMClient", "AddRoleToInstanceProfileCommand").f(undefined, undefined).ser(se_AddRoleToInstanceProfileCommand).de(de_AddRoleToInstanceProfileCommand).build() {
    static {
      __name(this, "AddRoleToInstanceProfileCommand");
    }
  };
  var AddUserToGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AddUserToGroup", {}).n("IAMClient", "AddUserToGroupCommand").f(undefined, undefined).ser(se_AddUserToGroupCommand).de(de_AddUserToGroupCommand).build() {
    static {
      __name(this, "AddUserToGroupCommand");
    }
  };
  var AttachGroupPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AttachGroupPolicy", {}).n("IAMClient", "AttachGroupPolicyCommand").f(undefined, undefined).ser(se_AttachGroupPolicyCommand).de(de_AttachGroupPolicyCommand).build() {
    static {
      __name(this, "AttachGroupPolicyCommand");
    }
  };
  var AttachRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AttachRolePolicy", {}).n("IAMClient", "AttachRolePolicyCommand").f(undefined, undefined).ser(se_AttachRolePolicyCommand).de(de_AttachRolePolicyCommand).build() {
    static {
      __name(this, "AttachRolePolicyCommand");
    }
  };
  var AttachUserPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "AttachUserPolicy", {}).n("IAMClient", "AttachUserPolicyCommand").f(undefined, undefined).ser(se_AttachUserPolicyCommand).de(de_AttachUserPolicyCommand).build() {
    static {
      __name(this, "AttachUserPolicyCommand");
    }
  };
  var ChangePasswordCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ChangePassword", {}).n("IAMClient", "ChangePasswordCommand").f(ChangePasswordRequestFilterSensitiveLog, undefined).ser(se_ChangePasswordCommand).de(de_ChangePasswordCommand).build() {
    static {
      __name(this, "ChangePasswordCommand");
    }
  };
  var CreateAccessKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateAccessKey", {}).n("IAMClient", "CreateAccessKeyCommand").f(undefined, CreateAccessKeyResponseFilterSensitiveLog).ser(se_CreateAccessKeyCommand).de(de_CreateAccessKeyCommand).build() {
    static {
      __name(this, "CreateAccessKeyCommand");
    }
  };
  var CreateAccountAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateAccountAlias", {}).n("IAMClient", "CreateAccountAliasCommand").f(undefined, undefined).ser(se_CreateAccountAliasCommand).de(de_CreateAccountAliasCommand).build() {
    static {
      __name(this, "CreateAccountAliasCommand");
    }
  };
  var CreateGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateGroup", {}).n("IAMClient", "CreateGroupCommand").f(undefined, undefined).ser(se_CreateGroupCommand).de(de_CreateGroupCommand).build() {
    static {
      __name(this, "CreateGroupCommand");
    }
  };
  var CreateInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateInstanceProfile", {}).n("IAMClient", "CreateInstanceProfileCommand").f(undefined, undefined).ser(se_CreateInstanceProfileCommand).de(de_CreateInstanceProfileCommand).build() {
    static {
      __name(this, "CreateInstanceProfileCommand");
    }
  };
  var CreateLoginProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateLoginProfile", {}).n("IAMClient", "CreateLoginProfileCommand").f(CreateLoginProfileRequestFilterSensitiveLog, undefined).ser(se_CreateLoginProfileCommand).de(de_CreateLoginProfileCommand).build() {
    static {
      __name(this, "CreateLoginProfileCommand");
    }
  };
  var CreateOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateOpenIDConnectProvider", {}).n("IAMClient", "CreateOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_CreateOpenIDConnectProviderCommand).de(de_CreateOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "CreateOpenIDConnectProviderCommand");
    }
  };
  var CreatePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreatePolicy", {}).n("IAMClient", "CreatePolicyCommand").f(undefined, undefined).ser(se_CreatePolicyCommand).de(de_CreatePolicyCommand).build() {
    static {
      __name(this, "CreatePolicyCommand");
    }
  };
  var CreatePolicyVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreatePolicyVersion", {}).n("IAMClient", "CreatePolicyVersionCommand").f(undefined, undefined).ser(se_CreatePolicyVersionCommand).de(de_CreatePolicyVersionCommand).build() {
    static {
      __name(this, "CreatePolicyVersionCommand");
    }
  };
  var CreateRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateRole", {}).n("IAMClient", "CreateRoleCommand").f(undefined, undefined).ser(se_CreateRoleCommand).de(de_CreateRoleCommand).build() {
    static {
      __name(this, "CreateRoleCommand");
    }
  };
  var CreateSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateSAMLProvider", {}).n("IAMClient", "CreateSAMLProviderCommand").f(CreateSAMLProviderRequestFilterSensitiveLog, undefined).ser(se_CreateSAMLProviderCommand).de(de_CreateSAMLProviderCommand).build() {
    static {
      __name(this, "CreateSAMLProviderCommand");
    }
  };
  var CreateServiceLinkedRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateServiceLinkedRole", {}).n("IAMClient", "CreateServiceLinkedRoleCommand").f(undefined, undefined).ser(se_CreateServiceLinkedRoleCommand).de(de_CreateServiceLinkedRoleCommand).build() {
    static {
      __name(this, "CreateServiceLinkedRoleCommand");
    }
  };
  var CreateServiceSpecificCredentialCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateServiceSpecificCredential", {}).n("IAMClient", "CreateServiceSpecificCredentialCommand").f(undefined, CreateServiceSpecificCredentialResponseFilterSensitiveLog).ser(se_CreateServiceSpecificCredentialCommand).de(de_CreateServiceSpecificCredentialCommand).build() {
    static {
      __name(this, "CreateServiceSpecificCredentialCommand");
    }
  };
  var CreateUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateUser", {}).n("IAMClient", "CreateUserCommand").f(undefined, undefined).ser(se_CreateUserCommand).de(de_CreateUserCommand).build() {
    static {
      __name(this, "CreateUserCommand");
    }
  };
  var CreateVirtualMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "CreateVirtualMFADevice", {}).n("IAMClient", "CreateVirtualMFADeviceCommand").f(undefined, CreateVirtualMFADeviceResponseFilterSensitiveLog).ser(se_CreateVirtualMFADeviceCommand).de(de_CreateVirtualMFADeviceCommand).build() {
    static {
      __name(this, "CreateVirtualMFADeviceCommand");
    }
  };
  var DeactivateMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeactivateMFADevice", {}).n("IAMClient", "DeactivateMFADeviceCommand").f(undefined, undefined).ser(se_DeactivateMFADeviceCommand).de(de_DeactivateMFADeviceCommand).build() {
    static {
      __name(this, "DeactivateMFADeviceCommand");
    }
  };
  var DeleteAccessKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteAccessKey", {}).n("IAMClient", "DeleteAccessKeyCommand").f(undefined, undefined).ser(se_DeleteAccessKeyCommand).de(de_DeleteAccessKeyCommand).build() {
    static {
      __name(this, "DeleteAccessKeyCommand");
    }
  };
  var DeleteAccountAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteAccountAlias", {}).n("IAMClient", "DeleteAccountAliasCommand").f(undefined, undefined).ser(se_DeleteAccountAliasCommand).de(de_DeleteAccountAliasCommand).build() {
    static {
      __name(this, "DeleteAccountAliasCommand");
    }
  };
  var DeleteAccountPasswordPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteAccountPasswordPolicy", {}).n("IAMClient", "DeleteAccountPasswordPolicyCommand").f(undefined, undefined).ser(se_DeleteAccountPasswordPolicyCommand).de(de_DeleteAccountPasswordPolicyCommand).build() {
    static {
      __name(this, "DeleteAccountPasswordPolicyCommand");
    }
  };
  var DeleteGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteGroup", {}).n("IAMClient", "DeleteGroupCommand").f(undefined, undefined).ser(se_DeleteGroupCommand).de(de_DeleteGroupCommand).build() {
    static {
      __name(this, "DeleteGroupCommand");
    }
  };
  var DeleteGroupPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteGroupPolicy", {}).n("IAMClient", "DeleteGroupPolicyCommand").f(undefined, undefined).ser(se_DeleteGroupPolicyCommand).de(de_DeleteGroupPolicyCommand).build() {
    static {
      __name(this, "DeleteGroupPolicyCommand");
    }
  };
  var DeleteInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteInstanceProfile", {}).n("IAMClient", "DeleteInstanceProfileCommand").f(undefined, undefined).ser(se_DeleteInstanceProfileCommand).de(de_DeleteInstanceProfileCommand).build() {
    static {
      __name(this, "DeleteInstanceProfileCommand");
    }
  };
  var DeleteLoginProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteLoginProfile", {}).n("IAMClient", "DeleteLoginProfileCommand").f(undefined, undefined).ser(se_DeleteLoginProfileCommand).de(de_DeleteLoginProfileCommand).build() {
    static {
      __name(this, "DeleteLoginProfileCommand");
    }
  };
  var DeleteOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteOpenIDConnectProvider", {}).n("IAMClient", "DeleteOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_DeleteOpenIDConnectProviderCommand).de(de_DeleteOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "DeleteOpenIDConnectProviderCommand");
    }
  };
  var DeletePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeletePolicy", {}).n("IAMClient", "DeletePolicyCommand").f(undefined, undefined).ser(se_DeletePolicyCommand).de(de_DeletePolicyCommand).build() {
    static {
      __name(this, "DeletePolicyCommand");
    }
  };
  var DeletePolicyVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeletePolicyVersion", {}).n("IAMClient", "DeletePolicyVersionCommand").f(undefined, undefined).ser(se_DeletePolicyVersionCommand).de(de_DeletePolicyVersionCommand).build() {
    static {
      __name(this, "DeletePolicyVersionCommand");
    }
  };
  var DeleteRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteRole", {}).n("IAMClient", "DeleteRoleCommand").f(undefined, undefined).ser(se_DeleteRoleCommand).de(de_DeleteRoleCommand).build() {
    static {
      __name(this, "DeleteRoleCommand");
    }
  };
  var DeleteRolePermissionsBoundaryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteRolePermissionsBoundary", {}).n("IAMClient", "DeleteRolePermissionsBoundaryCommand").f(undefined, undefined).ser(se_DeleteRolePermissionsBoundaryCommand).de(de_DeleteRolePermissionsBoundaryCommand).build() {
    static {
      __name(this, "DeleteRolePermissionsBoundaryCommand");
    }
  };
  var DeleteRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteRolePolicy", {}).n("IAMClient", "DeleteRolePolicyCommand").f(undefined, undefined).ser(se_DeleteRolePolicyCommand).de(de_DeleteRolePolicyCommand).build() {
    static {
      __name(this, "DeleteRolePolicyCommand");
    }
  };
  var DeleteSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteSAMLProvider", {}).n("IAMClient", "DeleteSAMLProviderCommand").f(undefined, undefined).ser(se_DeleteSAMLProviderCommand).de(de_DeleteSAMLProviderCommand).build() {
    static {
      __name(this, "DeleteSAMLProviderCommand");
    }
  };
  var DeleteServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteServerCertificate", {}).n("IAMClient", "DeleteServerCertificateCommand").f(undefined, undefined).ser(se_DeleteServerCertificateCommand).de(de_DeleteServerCertificateCommand).build() {
    static {
      __name(this, "DeleteServerCertificateCommand");
    }
  };
  var DeleteServiceLinkedRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteServiceLinkedRole", {}).n("IAMClient", "DeleteServiceLinkedRoleCommand").f(undefined, undefined).ser(se_DeleteServiceLinkedRoleCommand).de(de_DeleteServiceLinkedRoleCommand).build() {
    static {
      __name(this, "DeleteServiceLinkedRoleCommand");
    }
  };
  var DeleteServiceSpecificCredentialCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteServiceSpecificCredential", {}).n("IAMClient", "DeleteServiceSpecificCredentialCommand").f(undefined, undefined).ser(se_DeleteServiceSpecificCredentialCommand).de(de_DeleteServiceSpecificCredentialCommand).build() {
    static {
      __name(this, "DeleteServiceSpecificCredentialCommand");
    }
  };
  var DeleteSigningCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteSigningCertificate", {}).n("IAMClient", "DeleteSigningCertificateCommand").f(undefined, undefined).ser(se_DeleteSigningCertificateCommand).de(de_DeleteSigningCertificateCommand).build() {
    static {
      __name(this, "DeleteSigningCertificateCommand");
    }
  };
  var DeleteSSHPublicKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteSSHPublicKey", {}).n("IAMClient", "DeleteSSHPublicKeyCommand").f(undefined, undefined).ser(se_DeleteSSHPublicKeyCommand).de(de_DeleteSSHPublicKeyCommand).build() {
    static {
      __name(this, "DeleteSSHPublicKeyCommand");
    }
  };
  var DeleteUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteUser", {}).n("IAMClient", "DeleteUserCommand").f(undefined, undefined).ser(se_DeleteUserCommand).de(de_DeleteUserCommand).build() {
    static {
      __name(this, "DeleteUserCommand");
    }
  };
  var DeleteUserPermissionsBoundaryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteUserPermissionsBoundary", {}).n("IAMClient", "DeleteUserPermissionsBoundaryCommand").f(undefined, undefined).ser(se_DeleteUserPermissionsBoundaryCommand).de(de_DeleteUserPermissionsBoundaryCommand).build() {
    static {
      __name(this, "DeleteUserPermissionsBoundaryCommand");
    }
  };
  var DeleteUserPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteUserPolicy", {}).n("IAMClient", "DeleteUserPolicyCommand").f(undefined, undefined).ser(se_DeleteUserPolicyCommand).de(de_DeleteUserPolicyCommand).build() {
    static {
      __name(this, "DeleteUserPolicyCommand");
    }
  };
  var DeleteVirtualMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DeleteVirtualMFADevice", {}).n("IAMClient", "DeleteVirtualMFADeviceCommand").f(undefined, undefined).ser(se_DeleteVirtualMFADeviceCommand).de(de_DeleteVirtualMFADeviceCommand).build() {
    static {
      __name(this, "DeleteVirtualMFADeviceCommand");
    }
  };
  var DetachGroupPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DetachGroupPolicy", {}).n("IAMClient", "DetachGroupPolicyCommand").f(undefined, undefined).ser(se_DetachGroupPolicyCommand).de(de_DetachGroupPolicyCommand).build() {
    static {
      __name(this, "DetachGroupPolicyCommand");
    }
  };
  var DetachRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DetachRolePolicy", {}).n("IAMClient", "DetachRolePolicyCommand").f(undefined, undefined).ser(se_DetachRolePolicyCommand).de(de_DetachRolePolicyCommand).build() {
    static {
      __name(this, "DetachRolePolicyCommand");
    }
  };
  var DetachUserPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DetachUserPolicy", {}).n("IAMClient", "DetachUserPolicyCommand").f(undefined, undefined).ser(se_DetachUserPolicyCommand).de(de_DetachUserPolicyCommand).build() {
    static {
      __name(this, "DetachUserPolicyCommand");
    }
  };
  var DisableOrganizationsRootCredentialsManagementCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DisableOrganizationsRootCredentialsManagement", {}).n("IAMClient", "DisableOrganizationsRootCredentialsManagementCommand").f(undefined, undefined).ser(se_DisableOrganizationsRootCredentialsManagementCommand).de(de_DisableOrganizationsRootCredentialsManagementCommand).build() {
    static {
      __name(this, "DisableOrganizationsRootCredentialsManagementCommand");
    }
  };
  var DisableOrganizationsRootSessionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "DisableOrganizationsRootSessions", {}).n("IAMClient", "DisableOrganizationsRootSessionsCommand").f(undefined, undefined).ser(se_DisableOrganizationsRootSessionsCommand).de(de_DisableOrganizationsRootSessionsCommand).build() {
    static {
      __name(this, "DisableOrganizationsRootSessionsCommand");
    }
  };
  var EnableMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "EnableMFADevice", {}).n("IAMClient", "EnableMFADeviceCommand").f(undefined, undefined).ser(se_EnableMFADeviceCommand).de(de_EnableMFADeviceCommand).build() {
    static {
      __name(this, "EnableMFADeviceCommand");
    }
  };
  var EnableOrganizationsRootCredentialsManagementCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "EnableOrganizationsRootCredentialsManagement", {}).n("IAMClient", "EnableOrganizationsRootCredentialsManagementCommand").f(undefined, undefined).ser(se_EnableOrganizationsRootCredentialsManagementCommand).de(de_EnableOrganizationsRootCredentialsManagementCommand).build() {
    static {
      __name(this, "EnableOrganizationsRootCredentialsManagementCommand");
    }
  };
  var EnableOrganizationsRootSessionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "EnableOrganizationsRootSessions", {}).n("IAMClient", "EnableOrganizationsRootSessionsCommand").f(undefined, undefined).ser(se_EnableOrganizationsRootSessionsCommand).de(de_EnableOrganizationsRootSessionsCommand).build() {
    static {
      __name(this, "EnableOrganizationsRootSessionsCommand");
    }
  };
  var GenerateCredentialReportCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GenerateCredentialReport", {}).n("IAMClient", "GenerateCredentialReportCommand").f(undefined, undefined).ser(se_GenerateCredentialReportCommand).de(de_GenerateCredentialReportCommand).build() {
    static {
      __name(this, "GenerateCredentialReportCommand");
    }
  };
  var GenerateOrganizationsAccessReportCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GenerateOrganizationsAccessReport", {}).n("IAMClient", "GenerateOrganizationsAccessReportCommand").f(undefined, undefined).ser(se_GenerateOrganizationsAccessReportCommand).de(de_GenerateOrganizationsAccessReportCommand).build() {
    static {
      __name(this, "GenerateOrganizationsAccessReportCommand");
    }
  };
  var GenerateServiceLastAccessedDetailsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GenerateServiceLastAccessedDetails", {}).n("IAMClient", "GenerateServiceLastAccessedDetailsCommand").f(undefined, undefined).ser(se_GenerateServiceLastAccessedDetailsCommand).de(de_GenerateServiceLastAccessedDetailsCommand).build() {
    static {
      __name(this, "GenerateServiceLastAccessedDetailsCommand");
    }
  };
  var GetAccessKeyLastUsedCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetAccessKeyLastUsed", {}).n("IAMClient", "GetAccessKeyLastUsedCommand").f(undefined, undefined).ser(se_GetAccessKeyLastUsedCommand).de(de_GetAccessKeyLastUsedCommand).build() {
    static {
      __name(this, "GetAccessKeyLastUsedCommand");
    }
  };
  var GetAccountAuthorizationDetailsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetAccountAuthorizationDetails", {}).n("IAMClient", "GetAccountAuthorizationDetailsCommand").f(undefined, undefined).ser(se_GetAccountAuthorizationDetailsCommand).de(de_GetAccountAuthorizationDetailsCommand).build() {
    static {
      __name(this, "GetAccountAuthorizationDetailsCommand");
    }
  };
  var GetAccountPasswordPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetAccountPasswordPolicy", {}).n("IAMClient", "GetAccountPasswordPolicyCommand").f(undefined, undefined).ser(se_GetAccountPasswordPolicyCommand).de(de_GetAccountPasswordPolicyCommand).build() {
    static {
      __name(this, "GetAccountPasswordPolicyCommand");
    }
  };
  var GetAccountSummaryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetAccountSummary", {}).n("IAMClient", "GetAccountSummaryCommand").f(undefined, undefined).ser(se_GetAccountSummaryCommand).de(de_GetAccountSummaryCommand).build() {
    static {
      __name(this, "GetAccountSummaryCommand");
    }
  };
  var GetContextKeysForCustomPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetContextKeysForCustomPolicy", {}).n("IAMClient", "GetContextKeysForCustomPolicyCommand").f(undefined, undefined).ser(se_GetContextKeysForCustomPolicyCommand).de(de_GetContextKeysForCustomPolicyCommand).build() {
    static {
      __name(this, "GetContextKeysForCustomPolicyCommand");
    }
  };
  var GetContextKeysForPrincipalPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetContextKeysForPrincipalPolicy", {}).n("IAMClient", "GetContextKeysForPrincipalPolicyCommand").f(undefined, undefined).ser(se_GetContextKeysForPrincipalPolicyCommand).de(de_GetContextKeysForPrincipalPolicyCommand).build() {
    static {
      __name(this, "GetContextKeysForPrincipalPolicyCommand");
    }
  };
  var GetCredentialReportCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetCredentialReport", {}).n("IAMClient", "GetCredentialReportCommand").f(undefined, undefined).ser(se_GetCredentialReportCommand).de(de_GetCredentialReportCommand).build() {
    static {
      __name(this, "GetCredentialReportCommand");
    }
  };
  var GetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetGroup", {}).n("IAMClient", "GetGroupCommand").f(undefined, undefined).ser(se_GetGroupCommand).de(de_GetGroupCommand).build() {
    static {
      __name(this, "GetGroupCommand");
    }
  };
  var GetGroupPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetGroupPolicy", {}).n("IAMClient", "GetGroupPolicyCommand").f(undefined, undefined).ser(se_GetGroupPolicyCommand).de(de_GetGroupPolicyCommand).build() {
    static {
      __name(this, "GetGroupPolicyCommand");
    }
  };
  var GetInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetInstanceProfile", {}).n("IAMClient", "GetInstanceProfileCommand").f(undefined, undefined).ser(se_GetInstanceProfileCommand).de(de_GetInstanceProfileCommand).build() {
    static {
      __name(this, "GetInstanceProfileCommand");
    }
  };
  var GetLoginProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetLoginProfile", {}).n("IAMClient", "GetLoginProfileCommand").f(undefined, undefined).ser(se_GetLoginProfileCommand).de(de_GetLoginProfileCommand).build() {
    static {
      __name(this, "GetLoginProfileCommand");
    }
  };
  var GetMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetMFADevice", {}).n("IAMClient", "GetMFADeviceCommand").f(undefined, undefined).ser(se_GetMFADeviceCommand).de(de_GetMFADeviceCommand).build() {
    static {
      __name(this, "GetMFADeviceCommand");
    }
  };
  var GetOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetOpenIDConnectProvider", {}).n("IAMClient", "GetOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_GetOpenIDConnectProviderCommand).de(de_GetOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "GetOpenIDConnectProviderCommand");
    }
  };
  var GetOrganizationsAccessReportCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetOrganizationsAccessReport", {}).n("IAMClient", "GetOrganizationsAccessReportCommand").f(undefined, undefined).ser(se_GetOrganizationsAccessReportCommand).de(de_GetOrganizationsAccessReportCommand).build() {
    static {
      __name(this, "GetOrganizationsAccessReportCommand");
    }
  };
  var GetPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetPolicy", {}).n("IAMClient", "GetPolicyCommand").f(undefined, undefined).ser(se_GetPolicyCommand).de(de_GetPolicyCommand).build() {
    static {
      __name(this, "GetPolicyCommand");
    }
  };
  var GetPolicyVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetPolicyVersion", {}).n("IAMClient", "GetPolicyVersionCommand").f(undefined, undefined).ser(se_GetPolicyVersionCommand).de(de_GetPolicyVersionCommand).build() {
    static {
      __name(this, "GetPolicyVersionCommand");
    }
  };
  var GetRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetRole", {}).n("IAMClient", "GetRoleCommand").f(undefined, undefined).ser(se_GetRoleCommand).de(de_GetRoleCommand).build() {
    static {
      __name(this, "GetRoleCommand");
    }
  };
  var GetRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetRolePolicy", {}).n("IAMClient", "GetRolePolicyCommand").f(undefined, undefined).ser(se_GetRolePolicyCommand).de(de_GetRolePolicyCommand).build() {
    static {
      __name(this, "GetRolePolicyCommand");
    }
  };
  var GetSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetSAMLProvider", {}).n("IAMClient", "GetSAMLProviderCommand").f(undefined, undefined).ser(se_GetSAMLProviderCommand).de(de_GetSAMLProviderCommand).build() {
    static {
      __name(this, "GetSAMLProviderCommand");
    }
  };
  var GetServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetServerCertificate", {}).n("IAMClient", "GetServerCertificateCommand").f(undefined, undefined).ser(se_GetServerCertificateCommand).de(de_GetServerCertificateCommand).build() {
    static {
      __name(this, "GetServerCertificateCommand");
    }
  };
  var GetServiceLastAccessedDetailsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetails", {}).n("IAMClient", "GetServiceLastAccessedDetailsCommand").f(undefined, undefined).ser(se_GetServiceLastAccessedDetailsCommand).de(de_GetServiceLastAccessedDetailsCommand).build() {
    static {
      __name(this, "GetServiceLastAccessedDetailsCommand");
    }
  };
  var GetServiceLastAccessedDetailsWithEntitiesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetailsWithEntities", {}).n("IAMClient", "GetServiceLastAccessedDetailsWithEntitiesCommand").f(undefined, undefined).ser(se_GetServiceLastAccessedDetailsWithEntitiesCommand).de(de_GetServiceLastAccessedDetailsWithEntitiesCommand).build() {
    static {
      __name(this, "GetServiceLastAccessedDetailsWithEntitiesCommand");
    }
  };
  var GetServiceLinkedRoleDeletionStatusCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetServiceLinkedRoleDeletionStatus", {}).n("IAMClient", "GetServiceLinkedRoleDeletionStatusCommand").f(undefined, undefined).ser(se_GetServiceLinkedRoleDeletionStatusCommand).de(de_GetServiceLinkedRoleDeletionStatusCommand).build() {
    static {
      __name(this, "GetServiceLinkedRoleDeletionStatusCommand");
    }
  };
  var GetSSHPublicKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetSSHPublicKey", {}).n("IAMClient", "GetSSHPublicKeyCommand").f(undefined, undefined).ser(se_GetSSHPublicKeyCommand).de(de_GetSSHPublicKeyCommand).build() {
    static {
      __name(this, "GetSSHPublicKeyCommand");
    }
  };
  var GetUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetUser", {}).n("IAMClient", "GetUserCommand").f(undefined, undefined).ser(se_GetUserCommand).de(de_GetUserCommand).build() {
    static {
      __name(this, "GetUserCommand");
    }
  };
  var GetUserPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "GetUserPolicy", {}).n("IAMClient", "GetUserPolicyCommand").f(undefined, undefined).ser(se_GetUserPolicyCommand).de(de_GetUserPolicyCommand).build() {
    static {
      __name(this, "GetUserPolicyCommand");
    }
  };
  var ListAccessKeysCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListAccessKeys", {}).n("IAMClient", "ListAccessKeysCommand").f(undefined, undefined).ser(se_ListAccessKeysCommand).de(de_ListAccessKeysCommand).build() {
    static {
      __name(this, "ListAccessKeysCommand");
    }
  };
  var ListAccountAliasesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListAccountAliases", {}).n("IAMClient", "ListAccountAliasesCommand").f(undefined, undefined).ser(se_ListAccountAliasesCommand).de(de_ListAccountAliasesCommand).build() {
    static {
      __name(this, "ListAccountAliasesCommand");
    }
  };
  var ListAttachedGroupPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListAttachedGroupPolicies", {}).n("IAMClient", "ListAttachedGroupPoliciesCommand").f(undefined, undefined).ser(se_ListAttachedGroupPoliciesCommand).de(de_ListAttachedGroupPoliciesCommand).build() {
    static {
      __name(this, "ListAttachedGroupPoliciesCommand");
    }
  };
  var ListAttachedRolePoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListAttachedRolePolicies", {}).n("IAMClient", "ListAttachedRolePoliciesCommand").f(undefined, undefined).ser(se_ListAttachedRolePoliciesCommand).de(de_ListAttachedRolePoliciesCommand).build() {
    static {
      __name(this, "ListAttachedRolePoliciesCommand");
    }
  };
  var ListAttachedUserPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListAttachedUserPolicies", {}).n("IAMClient", "ListAttachedUserPoliciesCommand").f(undefined, undefined).ser(se_ListAttachedUserPoliciesCommand).de(de_ListAttachedUserPoliciesCommand).build() {
    static {
      __name(this, "ListAttachedUserPoliciesCommand");
    }
  };
  var ListEntitiesForPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListEntitiesForPolicy", {}).n("IAMClient", "ListEntitiesForPolicyCommand").f(undefined, undefined).ser(se_ListEntitiesForPolicyCommand).de(de_ListEntitiesForPolicyCommand).build() {
    static {
      __name(this, "ListEntitiesForPolicyCommand");
    }
  };
  var ListGroupPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListGroupPolicies", {}).n("IAMClient", "ListGroupPoliciesCommand").f(undefined, undefined).ser(se_ListGroupPoliciesCommand).de(de_ListGroupPoliciesCommand).build() {
    static {
      __name(this, "ListGroupPoliciesCommand");
    }
  };
  var ListGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListGroups", {}).n("IAMClient", "ListGroupsCommand").f(undefined, undefined).ser(se_ListGroupsCommand).de(de_ListGroupsCommand).build() {
    static {
      __name(this, "ListGroupsCommand");
    }
  };
  var ListGroupsForUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListGroupsForUser", {}).n("IAMClient", "ListGroupsForUserCommand").f(undefined, undefined).ser(se_ListGroupsForUserCommand).de(de_ListGroupsForUserCommand).build() {
    static {
      __name(this, "ListGroupsForUserCommand");
    }
  };
  var ListInstanceProfilesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListInstanceProfiles", {}).n("IAMClient", "ListInstanceProfilesCommand").f(undefined, undefined).ser(se_ListInstanceProfilesCommand).de(de_ListInstanceProfilesCommand).build() {
    static {
      __name(this, "ListInstanceProfilesCommand");
    }
  };
  var ListInstanceProfilesForRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListInstanceProfilesForRole", {}).n("IAMClient", "ListInstanceProfilesForRoleCommand").f(undefined, undefined).ser(se_ListInstanceProfilesForRoleCommand).de(de_ListInstanceProfilesForRoleCommand).build() {
    static {
      __name(this, "ListInstanceProfilesForRoleCommand");
    }
  };
  var ListInstanceProfileTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListInstanceProfileTags", {}).n("IAMClient", "ListInstanceProfileTagsCommand").f(undefined, undefined).ser(se_ListInstanceProfileTagsCommand).de(de_ListInstanceProfileTagsCommand).build() {
    static {
      __name(this, "ListInstanceProfileTagsCommand");
    }
  };
  var ListMFADevicesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListMFADevices", {}).n("IAMClient", "ListMFADevicesCommand").f(undefined, undefined).ser(se_ListMFADevicesCommand).de(de_ListMFADevicesCommand).build() {
    static {
      __name(this, "ListMFADevicesCommand");
    }
  };
  var ListMFADeviceTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListMFADeviceTags", {}).n("IAMClient", "ListMFADeviceTagsCommand").f(undefined, undefined).ser(se_ListMFADeviceTagsCommand).de(de_ListMFADeviceTagsCommand).build() {
    static {
      __name(this, "ListMFADeviceTagsCommand");
    }
  };
  var ListOpenIDConnectProvidersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviders", {}).n("IAMClient", "ListOpenIDConnectProvidersCommand").f(undefined, undefined).ser(se_ListOpenIDConnectProvidersCommand).de(de_ListOpenIDConnectProvidersCommand).build() {
    static {
      __name(this, "ListOpenIDConnectProvidersCommand");
    }
  };
  var ListOpenIDConnectProviderTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviderTags", {}).n("IAMClient", "ListOpenIDConnectProviderTagsCommand").f(undefined, undefined).ser(se_ListOpenIDConnectProviderTagsCommand).de(de_ListOpenIDConnectProviderTagsCommand).build() {
    static {
      __name(this, "ListOpenIDConnectProviderTagsCommand");
    }
  };
  var ListOrganizationsFeaturesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListOrganizationsFeatures", {}).n("IAMClient", "ListOrganizationsFeaturesCommand").f(undefined, undefined).ser(se_ListOrganizationsFeaturesCommand).de(de_ListOrganizationsFeaturesCommand).build() {
    static {
      __name(this, "ListOrganizationsFeaturesCommand");
    }
  };
  var ListPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListPolicies", {}).n("IAMClient", "ListPoliciesCommand").f(undefined, undefined).ser(se_ListPoliciesCommand).de(de_ListPoliciesCommand).build() {
    static {
      __name(this, "ListPoliciesCommand");
    }
  };
  var ListPoliciesGrantingServiceAccessCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListPoliciesGrantingServiceAccess", {}).n("IAMClient", "ListPoliciesGrantingServiceAccessCommand").f(undefined, undefined).ser(se_ListPoliciesGrantingServiceAccessCommand).de(de_ListPoliciesGrantingServiceAccessCommand).build() {
    static {
      __name(this, "ListPoliciesGrantingServiceAccessCommand");
    }
  };
  var ListPolicyTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListPolicyTags", {}).n("IAMClient", "ListPolicyTagsCommand").f(undefined, undefined).ser(se_ListPolicyTagsCommand).de(de_ListPolicyTagsCommand).build() {
    static {
      __name(this, "ListPolicyTagsCommand");
    }
  };
  var ListPolicyVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListPolicyVersions", {}).n("IAMClient", "ListPolicyVersionsCommand").f(undefined, undefined).ser(se_ListPolicyVersionsCommand).de(de_ListPolicyVersionsCommand).build() {
    static {
      __name(this, "ListPolicyVersionsCommand");
    }
  };
  var ListRolePoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListRolePolicies", {}).n("IAMClient", "ListRolePoliciesCommand").f(undefined, undefined).ser(se_ListRolePoliciesCommand).de(de_ListRolePoliciesCommand).build() {
    static {
      __name(this, "ListRolePoliciesCommand");
    }
  };
  var ListRolesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListRoles", {}).n("IAMClient", "ListRolesCommand").f(undefined, undefined).ser(se_ListRolesCommand).de(de_ListRolesCommand).build() {
    static {
      __name(this, "ListRolesCommand");
    }
  };
  var ListRoleTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListRoleTags", {}).n("IAMClient", "ListRoleTagsCommand").f(undefined, undefined).ser(se_ListRoleTagsCommand).de(de_ListRoleTagsCommand).build() {
    static {
      __name(this, "ListRoleTagsCommand");
    }
  };
  var ListSAMLProvidersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListSAMLProviders", {}).n("IAMClient", "ListSAMLProvidersCommand").f(undefined, undefined).ser(se_ListSAMLProvidersCommand).de(de_ListSAMLProvidersCommand).build() {
    static {
      __name(this, "ListSAMLProvidersCommand");
    }
  };
  var ListSAMLProviderTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListSAMLProviderTags", {}).n("IAMClient", "ListSAMLProviderTagsCommand").f(undefined, undefined).ser(se_ListSAMLProviderTagsCommand).de(de_ListSAMLProviderTagsCommand).build() {
    static {
      __name(this, "ListSAMLProviderTagsCommand");
    }
  };
  var ListServerCertificatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListServerCertificates", {}).n("IAMClient", "ListServerCertificatesCommand").f(undefined, undefined).ser(se_ListServerCertificatesCommand).de(de_ListServerCertificatesCommand).build() {
    static {
      __name(this, "ListServerCertificatesCommand");
    }
  };
  var ListServerCertificateTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListServerCertificateTags", {}).n("IAMClient", "ListServerCertificateTagsCommand").f(undefined, undefined).ser(se_ListServerCertificateTagsCommand).de(de_ListServerCertificateTagsCommand).build() {
    static {
      __name(this, "ListServerCertificateTagsCommand");
    }
  };
  var ListServiceSpecificCredentialsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListServiceSpecificCredentials", {}).n("IAMClient", "ListServiceSpecificCredentialsCommand").f(undefined, undefined).ser(se_ListServiceSpecificCredentialsCommand).de(de_ListServiceSpecificCredentialsCommand).build() {
    static {
      __name(this, "ListServiceSpecificCredentialsCommand");
    }
  };
  var ListSigningCertificatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListSigningCertificates", {}).n("IAMClient", "ListSigningCertificatesCommand").f(undefined, undefined).ser(se_ListSigningCertificatesCommand).de(de_ListSigningCertificatesCommand).build() {
    static {
      __name(this, "ListSigningCertificatesCommand");
    }
  };
  var ListSSHPublicKeysCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListSSHPublicKeys", {}).n("IAMClient", "ListSSHPublicKeysCommand").f(undefined, undefined).ser(se_ListSSHPublicKeysCommand).de(de_ListSSHPublicKeysCommand).build() {
    static {
      __name(this, "ListSSHPublicKeysCommand");
    }
  };
  var ListUserPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListUserPolicies", {}).n("IAMClient", "ListUserPoliciesCommand").f(undefined, undefined).ser(se_ListUserPoliciesCommand).de(de_ListUserPoliciesCommand).build() {
    static {
      __name(this, "ListUserPoliciesCommand");
    }
  };
  var ListUsersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListUsers", {}).n("IAMClient", "ListUsersCommand").f(undefined, undefined).ser(se_ListUsersCommand).de(de_ListUsersCommand).build() {
    static {
      __name(this, "ListUsersCommand");
    }
  };
  var ListUserTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListUserTags", {}).n("IAMClient", "ListUserTagsCommand").f(undefined, undefined).ser(se_ListUserTagsCommand).de(de_ListUserTagsCommand).build() {
    static {
      __name(this, "ListUserTagsCommand");
    }
  };
  var ListVirtualMFADevicesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ListVirtualMFADevices", {}).n("IAMClient", "ListVirtualMFADevicesCommand").f(undefined, ListVirtualMFADevicesResponseFilterSensitiveLog).ser(se_ListVirtualMFADevicesCommand).de(de_ListVirtualMFADevicesCommand).build() {
    static {
      __name(this, "ListVirtualMFADevicesCommand");
    }
  };
  var PutGroupPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "PutGroupPolicy", {}).n("IAMClient", "PutGroupPolicyCommand").f(undefined, undefined).ser(se_PutGroupPolicyCommand).de(de_PutGroupPolicyCommand).build() {
    static {
      __name(this, "PutGroupPolicyCommand");
    }
  };
  var PutRolePermissionsBoundaryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "PutRolePermissionsBoundary", {}).n("IAMClient", "PutRolePermissionsBoundaryCommand").f(undefined, undefined).ser(se_PutRolePermissionsBoundaryCommand).de(de_PutRolePermissionsBoundaryCommand).build() {
    static {
      __name(this, "PutRolePermissionsBoundaryCommand");
    }
  };
  var PutRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "PutRolePolicy", {}).n("IAMClient", "PutRolePolicyCommand").f(undefined, undefined).ser(se_PutRolePolicyCommand).de(de_PutRolePolicyCommand).build() {
    static {
      __name(this, "PutRolePolicyCommand");
    }
  };
  var PutUserPermissionsBoundaryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "PutUserPermissionsBoundary", {}).n("IAMClient", "PutUserPermissionsBoundaryCommand").f(undefined, undefined).ser(se_PutUserPermissionsBoundaryCommand).de(de_PutUserPermissionsBoundaryCommand).build() {
    static {
      __name(this, "PutUserPermissionsBoundaryCommand");
    }
  };
  var PutUserPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "PutUserPolicy", {}).n("IAMClient", "PutUserPolicyCommand").f(undefined, undefined).ser(se_PutUserPolicyCommand).de(de_PutUserPolicyCommand).build() {
    static {
      __name(this, "PutUserPolicyCommand");
    }
  };
  var RemoveClientIDFromOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "RemoveClientIDFromOpenIDConnectProvider", {}).n("IAMClient", "RemoveClientIDFromOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_RemoveClientIDFromOpenIDConnectProviderCommand).de(de_RemoveClientIDFromOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "RemoveClientIDFromOpenIDConnectProviderCommand");
    }
  };
  var RemoveRoleFromInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "RemoveRoleFromInstanceProfile", {}).n("IAMClient", "RemoveRoleFromInstanceProfileCommand").f(undefined, undefined).ser(se_RemoveRoleFromInstanceProfileCommand).de(de_RemoveRoleFromInstanceProfileCommand).build() {
    static {
      __name(this, "RemoveRoleFromInstanceProfileCommand");
    }
  };
  var RemoveUserFromGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "RemoveUserFromGroup", {}).n("IAMClient", "RemoveUserFromGroupCommand").f(undefined, undefined).ser(se_RemoveUserFromGroupCommand).de(de_RemoveUserFromGroupCommand).build() {
    static {
      __name(this, "RemoveUserFromGroupCommand");
    }
  };
  var ResetServiceSpecificCredentialCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ResetServiceSpecificCredential", {}).n("IAMClient", "ResetServiceSpecificCredentialCommand").f(undefined, ResetServiceSpecificCredentialResponseFilterSensitiveLog).ser(se_ResetServiceSpecificCredentialCommand).de(de_ResetServiceSpecificCredentialCommand).build() {
    static {
      __name(this, "ResetServiceSpecificCredentialCommand");
    }
  };
  var ResyncMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "ResyncMFADevice", {}).n("IAMClient", "ResyncMFADeviceCommand").f(undefined, undefined).ser(se_ResyncMFADeviceCommand).de(de_ResyncMFADeviceCommand).build() {
    static {
      __name(this, "ResyncMFADeviceCommand");
    }
  };
  var SetDefaultPolicyVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "SetDefaultPolicyVersion", {}).n("IAMClient", "SetDefaultPolicyVersionCommand").f(undefined, undefined).ser(se_SetDefaultPolicyVersionCommand).de(de_SetDefaultPolicyVersionCommand).build() {
    static {
      __name(this, "SetDefaultPolicyVersionCommand");
    }
  };
  var SetSecurityTokenServicePreferencesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "SetSecurityTokenServicePreferences", {}).n("IAMClient", "SetSecurityTokenServicePreferencesCommand").f(undefined, undefined).ser(se_SetSecurityTokenServicePreferencesCommand).de(de_SetSecurityTokenServicePreferencesCommand).build() {
    static {
      __name(this, "SetSecurityTokenServicePreferencesCommand");
    }
  };
  var SimulateCustomPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "SimulateCustomPolicy", {}).n("IAMClient", "SimulateCustomPolicyCommand").f(undefined, undefined).ser(se_SimulateCustomPolicyCommand).de(de_SimulateCustomPolicyCommand).build() {
    static {
      __name(this, "SimulateCustomPolicyCommand");
    }
  };
  var SimulatePrincipalPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "SimulatePrincipalPolicy", {}).n("IAMClient", "SimulatePrincipalPolicyCommand").f(undefined, undefined).ser(se_SimulatePrincipalPolicyCommand).de(de_SimulatePrincipalPolicyCommand).build() {
    static {
      __name(this, "SimulatePrincipalPolicyCommand");
    }
  };
  var TagInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagInstanceProfile", {}).n("IAMClient", "TagInstanceProfileCommand").f(undefined, undefined).ser(se_TagInstanceProfileCommand).de(de_TagInstanceProfileCommand).build() {
    static {
      __name(this, "TagInstanceProfileCommand");
    }
  };
  var TagMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagMFADevice", {}).n("IAMClient", "TagMFADeviceCommand").f(undefined, undefined).ser(se_TagMFADeviceCommand).de(de_TagMFADeviceCommand).build() {
    static {
      __name(this, "TagMFADeviceCommand");
    }
  };
  var TagOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagOpenIDConnectProvider", {}).n("IAMClient", "TagOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_TagOpenIDConnectProviderCommand).de(de_TagOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "TagOpenIDConnectProviderCommand");
    }
  };
  var TagPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagPolicy", {}).n("IAMClient", "TagPolicyCommand").f(undefined, undefined).ser(se_TagPolicyCommand).de(de_TagPolicyCommand).build() {
    static {
      __name(this, "TagPolicyCommand");
    }
  };
  var TagRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagRole", {}).n("IAMClient", "TagRoleCommand").f(undefined, undefined).ser(se_TagRoleCommand).de(de_TagRoleCommand).build() {
    static {
      __name(this, "TagRoleCommand");
    }
  };
  var TagSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagSAMLProvider", {}).n("IAMClient", "TagSAMLProviderCommand").f(undefined, undefined).ser(se_TagSAMLProviderCommand).de(de_TagSAMLProviderCommand).build() {
    static {
      __name(this, "TagSAMLProviderCommand");
    }
  };
  var TagServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagServerCertificate", {}).n("IAMClient", "TagServerCertificateCommand").f(undefined, undefined).ser(se_TagServerCertificateCommand).de(de_TagServerCertificateCommand).build() {
    static {
      __name(this, "TagServerCertificateCommand");
    }
  };
  var TagUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "TagUser", {}).n("IAMClient", "TagUserCommand").f(undefined, undefined).ser(se_TagUserCommand).de(de_TagUserCommand).build() {
    static {
      __name(this, "TagUserCommand");
    }
  };
  var UntagInstanceProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagInstanceProfile", {}).n("IAMClient", "UntagInstanceProfileCommand").f(undefined, undefined).ser(se_UntagInstanceProfileCommand).de(de_UntagInstanceProfileCommand).build() {
    static {
      __name(this, "UntagInstanceProfileCommand");
    }
  };
  var UntagMFADeviceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagMFADevice", {}).n("IAMClient", "UntagMFADeviceCommand").f(undefined, undefined).ser(se_UntagMFADeviceCommand).de(de_UntagMFADeviceCommand).build() {
    static {
      __name(this, "UntagMFADeviceCommand");
    }
  };
  var UntagOpenIDConnectProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagOpenIDConnectProvider", {}).n("IAMClient", "UntagOpenIDConnectProviderCommand").f(undefined, undefined).ser(se_UntagOpenIDConnectProviderCommand).de(de_UntagOpenIDConnectProviderCommand).build() {
    static {
      __name(this, "UntagOpenIDConnectProviderCommand");
    }
  };
  var UntagPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagPolicy", {}).n("IAMClient", "UntagPolicyCommand").f(undefined, undefined).ser(se_UntagPolicyCommand).de(de_UntagPolicyCommand).build() {
    static {
      __name(this, "UntagPolicyCommand");
    }
  };
  var UntagRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagRole", {}).n("IAMClient", "UntagRoleCommand").f(undefined, undefined).ser(se_UntagRoleCommand).de(de_UntagRoleCommand).build() {
    static {
      __name(this, "UntagRoleCommand");
    }
  };
  var UntagSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagSAMLProvider", {}).n("IAMClient", "UntagSAMLProviderCommand").f(undefined, undefined).ser(se_UntagSAMLProviderCommand).de(de_UntagSAMLProviderCommand).build() {
    static {
      __name(this, "UntagSAMLProviderCommand");
    }
  };
  var UntagServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagServerCertificate", {}).n("IAMClient", "UntagServerCertificateCommand").f(undefined, undefined).ser(se_UntagServerCertificateCommand).de(de_UntagServerCertificateCommand).build() {
    static {
      __name(this, "UntagServerCertificateCommand");
    }
  };
  var UntagUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UntagUser", {}).n("IAMClient", "UntagUserCommand").f(undefined, undefined).ser(se_UntagUserCommand).de(de_UntagUserCommand).build() {
    static {
      __name(this, "UntagUserCommand");
    }
  };
  var UpdateAccessKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateAccessKey", {}).n("IAMClient", "UpdateAccessKeyCommand").f(undefined, undefined).ser(se_UpdateAccessKeyCommand).de(de_UpdateAccessKeyCommand).build() {
    static {
      __name(this, "UpdateAccessKeyCommand");
    }
  };
  var UpdateAccountPasswordPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateAccountPasswordPolicy", {}).n("IAMClient", "UpdateAccountPasswordPolicyCommand").f(undefined, undefined).ser(se_UpdateAccountPasswordPolicyCommand).de(de_UpdateAccountPasswordPolicyCommand).build() {
    static {
      __name(this, "UpdateAccountPasswordPolicyCommand");
    }
  };
  var UpdateAssumeRolePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateAssumeRolePolicy", {}).n("IAMClient", "UpdateAssumeRolePolicyCommand").f(undefined, undefined).ser(se_UpdateAssumeRolePolicyCommand).de(de_UpdateAssumeRolePolicyCommand).build() {
    static {
      __name(this, "UpdateAssumeRolePolicyCommand");
    }
  };
  var UpdateGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateGroup", {}).n("IAMClient", "UpdateGroupCommand").f(undefined, undefined).ser(se_UpdateGroupCommand).de(de_UpdateGroupCommand).build() {
    static {
      __name(this, "UpdateGroupCommand");
    }
  };
  var UpdateLoginProfileCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateLoginProfile", {}).n("IAMClient", "UpdateLoginProfileCommand").f(UpdateLoginProfileRequestFilterSensitiveLog, undefined).ser(se_UpdateLoginProfileCommand).de(de_UpdateLoginProfileCommand).build() {
    static {
      __name(this, "UpdateLoginProfileCommand");
    }
  };
  var UpdateOpenIDConnectProviderThumbprintCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateOpenIDConnectProviderThumbprint", {}).n("IAMClient", "UpdateOpenIDConnectProviderThumbprintCommand").f(undefined, undefined).ser(se_UpdateOpenIDConnectProviderThumbprintCommand).de(de_UpdateOpenIDConnectProviderThumbprintCommand).build() {
    static {
      __name(this, "UpdateOpenIDConnectProviderThumbprintCommand");
    }
  };
  var UpdateRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateRole", {}).n("IAMClient", "UpdateRoleCommand").f(undefined, undefined).ser(se_UpdateRoleCommand).de(de_UpdateRoleCommand).build() {
    static {
      __name(this, "UpdateRoleCommand");
    }
  };
  var UpdateRoleDescriptionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateRoleDescription", {}).n("IAMClient", "UpdateRoleDescriptionCommand").f(undefined, undefined).ser(se_UpdateRoleDescriptionCommand).de(de_UpdateRoleDescriptionCommand).build() {
    static {
      __name(this, "UpdateRoleDescriptionCommand");
    }
  };
  var UpdateSAMLProviderCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateSAMLProvider", {}).n("IAMClient", "UpdateSAMLProviderCommand").f(UpdateSAMLProviderRequestFilterSensitiveLog, undefined).ser(se_UpdateSAMLProviderCommand).de(de_UpdateSAMLProviderCommand).build() {
    static {
      __name(this, "UpdateSAMLProviderCommand");
    }
  };
  var UpdateServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateServerCertificate", {}).n("IAMClient", "UpdateServerCertificateCommand").f(undefined, undefined).ser(se_UpdateServerCertificateCommand).de(de_UpdateServerCertificateCommand).build() {
    static {
      __name(this, "UpdateServerCertificateCommand");
    }
  };
  var UpdateServiceSpecificCredentialCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateServiceSpecificCredential", {}).n("IAMClient", "UpdateServiceSpecificCredentialCommand").f(undefined, undefined).ser(se_UpdateServiceSpecificCredentialCommand).de(de_UpdateServiceSpecificCredentialCommand).build() {
    static {
      __name(this, "UpdateServiceSpecificCredentialCommand");
    }
  };
  var UpdateSigningCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateSigningCertificate", {}).n("IAMClient", "UpdateSigningCertificateCommand").f(undefined, undefined).ser(se_UpdateSigningCertificateCommand).de(de_UpdateSigningCertificateCommand).build() {
    static {
      __name(this, "UpdateSigningCertificateCommand");
    }
  };
  var UpdateSSHPublicKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateSSHPublicKey", {}).n("IAMClient", "UpdateSSHPublicKeyCommand").f(undefined, undefined).ser(se_UpdateSSHPublicKeyCommand).de(de_UpdateSSHPublicKeyCommand).build() {
    static {
      __name(this, "UpdateSSHPublicKeyCommand");
    }
  };
  var UpdateUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UpdateUser", {}).n("IAMClient", "UpdateUserCommand").f(undefined, undefined).ser(se_UpdateUserCommand).de(de_UpdateUserCommand).build() {
    static {
      __name(this, "UpdateUserCommand");
    }
  };
  var UploadServerCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UploadServerCertificate", {}).n("IAMClient", "UploadServerCertificateCommand").f(UploadServerCertificateRequestFilterSensitiveLog, undefined).ser(se_UploadServerCertificateCommand).de(de_UploadServerCertificateCommand).build() {
    static {
      __name(this, "UploadServerCertificateCommand");
    }
  };
  var UploadSigningCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UploadSigningCertificate", {}).n("IAMClient", "UploadSigningCertificateCommand").f(undefined, undefined).ser(se_UploadSigningCertificateCommand).de(de_UploadSigningCertificateCommand).build() {
    static {
      __name(this, "UploadSigningCertificateCommand");
    }
  };
  var UploadSSHPublicKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSIdentityManagementV20100508", "UploadSSHPublicKey", {}).n("IAMClient", "UploadSSHPublicKeyCommand").f(undefined, undefined).ser(se_UploadSSHPublicKeyCommand).de(de_UploadSSHPublicKeyCommand).build() {
    static {
      __name(this, "UploadSSHPublicKeyCommand");
    }
  };
  var commands = {
    AddClientIDToOpenIDConnectProviderCommand,
    AddRoleToInstanceProfileCommand,
    AddUserToGroupCommand,
    AttachGroupPolicyCommand,
    AttachRolePolicyCommand,
    AttachUserPolicyCommand,
    ChangePasswordCommand,
    CreateAccessKeyCommand,
    CreateAccountAliasCommand,
    CreateGroupCommand,
    CreateInstanceProfileCommand,
    CreateLoginProfileCommand,
    CreateOpenIDConnectProviderCommand,
    CreatePolicyCommand,
    CreatePolicyVersionCommand,
    CreateRoleCommand,
    CreateSAMLProviderCommand,
    CreateServiceLinkedRoleCommand,
    CreateServiceSpecificCredentialCommand,
    CreateUserCommand,
    CreateVirtualMFADeviceCommand,
    DeactivateMFADeviceCommand,
    DeleteAccessKeyCommand,
    DeleteAccountAliasCommand,
    DeleteAccountPasswordPolicyCommand,
    DeleteGroupCommand,
    DeleteGroupPolicyCommand,
    DeleteInstanceProfileCommand,
    DeleteLoginProfileCommand,
    DeleteOpenIDConnectProviderCommand,
    DeletePolicyCommand,
    DeletePolicyVersionCommand,
    DeleteRoleCommand,
    DeleteRolePermissionsBoundaryCommand,
    DeleteRolePolicyCommand,
    DeleteSAMLProviderCommand,
    DeleteServerCertificateCommand,
    DeleteServiceLinkedRoleCommand,
    DeleteServiceSpecificCredentialCommand,
    DeleteSigningCertificateCommand,
    DeleteSSHPublicKeyCommand,
    DeleteUserCommand,
    DeleteUserPermissionsBoundaryCommand,
    DeleteUserPolicyCommand,
    DeleteVirtualMFADeviceCommand,
    DetachGroupPolicyCommand,
    DetachRolePolicyCommand,
    DetachUserPolicyCommand,
    DisableOrganizationsRootCredentialsManagementCommand,
    DisableOrganizationsRootSessionsCommand,
    EnableMFADeviceCommand,
    EnableOrganizationsRootCredentialsManagementCommand,
    EnableOrganizationsRootSessionsCommand,
    GenerateCredentialReportCommand,
    GenerateOrganizationsAccessReportCommand,
    GenerateServiceLastAccessedDetailsCommand,
    GetAccessKeyLastUsedCommand,
    GetAccountAuthorizationDetailsCommand,
    GetAccountPasswordPolicyCommand,
    GetAccountSummaryCommand,
    GetContextKeysForCustomPolicyCommand,
    GetContextKeysForPrincipalPolicyCommand,
    GetCredentialReportCommand,
    GetGroupCommand,
    GetGroupPolicyCommand,
    GetInstanceProfileCommand,
    GetLoginProfileCommand,
    GetMFADeviceCommand,
    GetOpenIDConnectProviderCommand,
    GetOrganizationsAccessReportCommand,
    GetPolicyCommand,
    GetPolicyVersionCommand,
    GetRoleCommand,
    GetRolePolicyCommand,
    GetSAMLProviderCommand,
    GetServerCertificateCommand,
    GetServiceLastAccessedDetailsCommand,
    GetServiceLastAccessedDetailsWithEntitiesCommand,
    GetServiceLinkedRoleDeletionStatusCommand,
    GetSSHPublicKeyCommand,
    GetUserCommand,
    GetUserPolicyCommand,
    ListAccessKeysCommand,
    ListAccountAliasesCommand,
    ListAttachedGroupPoliciesCommand,
    ListAttachedRolePoliciesCommand,
    ListAttachedUserPoliciesCommand,
    ListEntitiesForPolicyCommand,
    ListGroupPoliciesCommand,
    ListGroupsCommand,
    ListGroupsForUserCommand,
    ListInstanceProfilesCommand,
    ListInstanceProfilesForRoleCommand,
    ListInstanceProfileTagsCommand,
    ListMFADevicesCommand,
    ListMFADeviceTagsCommand,
    ListOpenIDConnectProvidersCommand,
    ListOpenIDConnectProviderTagsCommand,
    ListOrganizationsFeaturesCommand,
    ListPoliciesCommand,
    ListPoliciesGrantingServiceAccessCommand,
    ListPolicyTagsCommand,
    ListPolicyVersionsCommand,
    ListRolePoliciesCommand,
    ListRolesCommand,
    ListRoleTagsCommand,
    ListSAMLProvidersCommand,
    ListSAMLProviderTagsCommand,
    ListServerCertificatesCommand,
    ListServerCertificateTagsCommand,
    ListServiceSpecificCredentialsCommand,
    ListSigningCertificatesCommand,
    ListSSHPublicKeysCommand,
    ListUserPoliciesCommand,
    ListUsersCommand,
    ListUserTagsCommand,
    ListVirtualMFADevicesCommand,
    PutGroupPolicyCommand,
    PutRolePermissionsBoundaryCommand,
    PutRolePolicyCommand,
    PutUserPermissionsBoundaryCommand,
    PutUserPolicyCommand,
    RemoveClientIDFromOpenIDConnectProviderCommand,
    RemoveRoleFromInstanceProfileCommand,
    RemoveUserFromGroupCommand,
    ResetServiceSpecificCredentialCommand,
    ResyncMFADeviceCommand,
    SetDefaultPolicyVersionCommand,
    SetSecurityTokenServicePreferencesCommand,
    SimulateCustomPolicyCommand,
    SimulatePrincipalPolicyCommand,
    TagInstanceProfileCommand,
    TagMFADeviceCommand,
    TagOpenIDConnectProviderCommand,
    TagPolicyCommand,
    TagRoleCommand,
    TagSAMLProviderCommand,
    TagServerCertificateCommand,
    TagUserCommand,
    UntagInstanceProfileCommand,
    UntagMFADeviceCommand,
    UntagOpenIDConnectProviderCommand,
    UntagPolicyCommand,
    UntagRoleCommand,
    UntagSAMLProviderCommand,
    UntagServerCertificateCommand,
    UntagUserCommand,
    UpdateAccessKeyCommand,
    UpdateAccountPasswordPolicyCommand,
    UpdateAssumeRolePolicyCommand,
    UpdateGroupCommand,
    UpdateLoginProfileCommand,
    UpdateOpenIDConnectProviderThumbprintCommand,
    UpdateRoleCommand,
    UpdateRoleDescriptionCommand,
    UpdateSAMLProviderCommand,
    UpdateServerCertificateCommand,
    UpdateServiceSpecificCredentialCommand,
    UpdateSigningCertificateCommand,
    UpdateSSHPublicKeyCommand,
    UpdateUserCommand,
    UploadServerCertificateCommand,
    UploadSigningCertificateCommand,
    UploadSSHPublicKeyCommand
  };
  var IAM = class extends IAMClient {
    static {
      __name(this, "IAM");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, IAM);
  var paginateGetAccountAuthorizationDetails = (0, import_core.createPaginator)(IAMClient, GetAccountAuthorizationDetailsCommand, "Marker", "Marker", "MaxItems");
  var paginateGetGroup = (0, import_core.createPaginator)(IAMClient, GetGroupCommand, "Marker", "Marker", "MaxItems");
  var paginateListAccessKeys = (0, import_core.createPaginator)(IAMClient, ListAccessKeysCommand, "Marker", "Marker", "MaxItems");
  var paginateListAccountAliases = (0, import_core.createPaginator)(IAMClient, ListAccountAliasesCommand, "Marker", "Marker", "MaxItems");
  var paginateListAttachedGroupPolicies = (0, import_core.createPaginator)(IAMClient, ListAttachedGroupPoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListAttachedRolePolicies = (0, import_core.createPaginator)(IAMClient, ListAttachedRolePoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListAttachedUserPolicies = (0, import_core.createPaginator)(IAMClient, ListAttachedUserPoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListEntitiesForPolicy = (0, import_core.createPaginator)(IAMClient, ListEntitiesForPolicyCommand, "Marker", "Marker", "MaxItems");
  var paginateListGroupPolicies = (0, import_core.createPaginator)(IAMClient, ListGroupPoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListGroupsForUser = (0, import_core.createPaginator)(IAMClient, ListGroupsForUserCommand, "Marker", "Marker", "MaxItems");
  var paginateListGroups = (0, import_core.createPaginator)(IAMClient, ListGroupsCommand, "Marker", "Marker", "MaxItems");
  var paginateListInstanceProfileTags = (0, import_core.createPaginator)(IAMClient, ListInstanceProfileTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListInstanceProfilesForRole = (0, import_core.createPaginator)(IAMClient, ListInstanceProfilesForRoleCommand, "Marker", "Marker", "MaxItems");
  var paginateListInstanceProfiles = (0, import_core.createPaginator)(IAMClient, ListInstanceProfilesCommand, "Marker", "Marker", "MaxItems");
  var paginateListMFADeviceTags = (0, import_core.createPaginator)(IAMClient, ListMFADeviceTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListMFADevices = (0, import_core.createPaginator)(IAMClient, ListMFADevicesCommand, "Marker", "Marker", "MaxItems");
  var paginateListOpenIDConnectProviderTags = (0, import_core.createPaginator)(IAMClient, ListOpenIDConnectProviderTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListPolicies = (0, import_core.createPaginator)(IAMClient, ListPoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListPolicyTags = (0, import_core.createPaginator)(IAMClient, ListPolicyTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListPolicyVersions = (0, import_core.createPaginator)(IAMClient, ListPolicyVersionsCommand, "Marker", "Marker", "MaxItems");
  var paginateListRolePolicies = (0, import_core.createPaginator)(IAMClient, ListRolePoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListRoleTags = (0, import_core.createPaginator)(IAMClient, ListRoleTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListRoles = (0, import_core.createPaginator)(IAMClient, ListRolesCommand, "Marker", "Marker", "MaxItems");
  var paginateListSAMLProviderTags = (0, import_core.createPaginator)(IAMClient, ListSAMLProviderTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListSSHPublicKeys = (0, import_core.createPaginator)(IAMClient, ListSSHPublicKeysCommand, "Marker", "Marker", "MaxItems");
  var paginateListServerCertificateTags = (0, import_core.createPaginator)(IAMClient, ListServerCertificateTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListServerCertificates = (0, import_core.createPaginator)(IAMClient, ListServerCertificatesCommand, "Marker", "Marker", "MaxItems");
  var paginateListSigningCertificates = (0, import_core.createPaginator)(IAMClient, ListSigningCertificatesCommand, "Marker", "Marker", "MaxItems");
  var paginateListUserPolicies = (0, import_core.createPaginator)(IAMClient, ListUserPoliciesCommand, "Marker", "Marker", "MaxItems");
  var paginateListUserTags = (0, import_core.createPaginator)(IAMClient, ListUserTagsCommand, "Marker", "Marker", "MaxItems");
  var paginateListUsers = (0, import_core.createPaginator)(IAMClient, ListUsersCommand, "Marker", "Marker", "MaxItems");
  var paginateListVirtualMFADevices = (0, import_core.createPaginator)(IAMClient, ListVirtualMFADevicesCommand, "Marker", "Marker", "MaxItems");
  var paginateSimulateCustomPolicy = (0, import_core.createPaginator)(IAMClient, SimulateCustomPolicyCommand, "Marker", "Marker", "MaxItems");
  var paginateSimulatePrincipalPolicy = (0, import_core.createPaginator)(IAMClient, SimulatePrincipalPolicyCommand, "Marker", "Marker", "MaxItems");
  var import_util_waiter = require_dist_cjs61();
  var checkState = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetInstanceProfileCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NoSuchEntityException") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForInstanceProfileExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  }, "waitForInstanceProfileExists");
  var waitUntilInstanceProfileExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilInstanceProfileExists");
  var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetPolicyCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NoSuchEntityException") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForPolicyExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  }, "waitForPolicyExists");
  var waitUntilPolicyExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilPolicyExists");
  var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetRoleCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NoSuchEntityException") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForRoleExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  }, "waitForRoleExists");
  var waitUntilRoleExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilRoleExists");
  var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetUserCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NoSuchEntityException") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForUserExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  }, "waitForUserExists");
  var waitUntilUserExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilUserExists");
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultLambdaHttpAuthSchemeProvider = exports.defaultLambdaHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultLambdaHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultLambdaHttpAuthSchemeParametersProvider = defaultLambdaHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "lambda",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  var defaultLambdaHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultLambdaHttpAuthSchemeProvider = defaultLambdaHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/package.json
var require_package5 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-lambda",
    description: "AWS SDK for JavaScript Lambda Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-lambda",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo lambda"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/eventstream-serde-browser": "^4.0.2",
      "@smithy/eventstream-serde-config-resolver": "^4.1.0",
      "@smithy/eventstream-serde-node": "^4.0.2",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-stream": "^4.2.0",
      "@smithy/util-utf8": "^4.0.0",
      "@smithy/util-waiter": "^4.0.3",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-lambda",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-lambda"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js
var require_ruleset6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var s = "required";
  var t = "fn";
  var u = "argv";
  var v = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = { [s]: false, type: "String" };
  var i = { [s]: true, default: false, type: "Boolean" };
  var j = { [v]: "Endpoint" };
  var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
  var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
  var m = {};
  var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
  var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
  var p = [k];
  var q = [l];
  var r = [{ [v]: "Region" }];
  var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: "https://lambda.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://lambda.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset6();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider6();
  var endpointResolver_1 = require_endpointResolver6();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2015-03-31",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultLambdaHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "Lambda",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js
var require_runtimeConfig6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package5());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var eventstream_serde_node_1 = require_dist_cjs59();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared6();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-lambda@3.787.0/node_modules/@aws-sdk/client-lambda/dist-cjs/index.js
var require_dist_cjs63 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AddLayerVersionPermissionCommand: () => AddLayerVersionPermissionCommand,
    AddPermissionCommand: () => AddPermissionCommand,
    ApplicationLogLevel: () => ApplicationLogLevel,
    Architecture: () => Architecture,
    CodeSigningConfigNotFoundException: () => CodeSigningConfigNotFoundException,
    CodeSigningPolicy: () => CodeSigningPolicy,
    CodeStorageExceededException: () => CodeStorageExceededException,
    CodeVerificationFailedException: () => CodeVerificationFailedException,
    CreateAliasCommand: () => CreateAliasCommand,
    CreateCodeSigningConfigCommand: () => CreateCodeSigningConfigCommand,
    CreateEventSourceMappingCommand: () => CreateEventSourceMappingCommand,
    CreateFunctionCommand: () => CreateFunctionCommand,
    CreateFunctionRequestFilterSensitiveLog: () => CreateFunctionRequestFilterSensitiveLog,
    CreateFunctionUrlConfigCommand: () => CreateFunctionUrlConfigCommand,
    DeleteAliasCommand: () => DeleteAliasCommand,
    DeleteCodeSigningConfigCommand: () => DeleteCodeSigningConfigCommand,
    DeleteEventSourceMappingCommand: () => DeleteEventSourceMappingCommand,
    DeleteFunctionCodeSigningConfigCommand: () => DeleteFunctionCodeSigningConfigCommand,
    DeleteFunctionCommand: () => DeleteFunctionCommand,
    DeleteFunctionConcurrencyCommand: () => DeleteFunctionConcurrencyCommand,
    DeleteFunctionEventInvokeConfigCommand: () => DeleteFunctionEventInvokeConfigCommand,
    DeleteFunctionUrlConfigCommand: () => DeleteFunctionUrlConfigCommand,
    DeleteLayerVersionCommand: () => DeleteLayerVersionCommand,
    DeleteProvisionedConcurrencyConfigCommand: () => DeleteProvisionedConcurrencyConfigCommand,
    EC2AccessDeniedException: () => EC2AccessDeniedException,
    EC2ThrottledException: () => EC2ThrottledException,
    EC2UnexpectedException: () => EC2UnexpectedException,
    EFSIOException: () => EFSIOException,
    EFSMountConnectivityException: () => EFSMountConnectivityException,
    EFSMountFailureException: () => EFSMountFailureException,
    EFSMountTimeoutException: () => EFSMountTimeoutException,
    ENILimitReachedException: () => ENILimitReachedException,
    EndPointType: () => EndPointType,
    EnvironmentErrorFilterSensitiveLog: () => EnvironmentErrorFilterSensitiveLog,
    EnvironmentFilterSensitiveLog: () => EnvironmentFilterSensitiveLog,
    EnvironmentResponseFilterSensitiveLog: () => EnvironmentResponseFilterSensitiveLog,
    EventSourceMappingMetric: () => EventSourceMappingMetric,
    EventSourcePosition: () => EventSourcePosition,
    FullDocument: () => FullDocument,
    FunctionCodeFilterSensitiveLog: () => FunctionCodeFilterSensitiveLog,
    FunctionConfigurationFilterSensitiveLog: () => FunctionConfigurationFilterSensitiveLog,
    FunctionResponseType: () => FunctionResponseType,
    FunctionUrlAuthType: () => FunctionUrlAuthType,
    FunctionVersion: () => FunctionVersion,
    GetAccountSettingsCommand: () => GetAccountSettingsCommand,
    GetAliasCommand: () => GetAliasCommand,
    GetCodeSigningConfigCommand: () => GetCodeSigningConfigCommand,
    GetEventSourceMappingCommand: () => GetEventSourceMappingCommand,
    GetFunctionCodeSigningConfigCommand: () => GetFunctionCodeSigningConfigCommand,
    GetFunctionCommand: () => GetFunctionCommand,
    GetFunctionConcurrencyCommand: () => GetFunctionConcurrencyCommand,
    GetFunctionConfigurationCommand: () => GetFunctionConfigurationCommand,
    GetFunctionEventInvokeConfigCommand: () => GetFunctionEventInvokeConfigCommand,
    GetFunctionRecursionConfigCommand: () => GetFunctionRecursionConfigCommand,
    GetFunctionResponseFilterSensitiveLog: () => GetFunctionResponseFilterSensitiveLog,
    GetFunctionUrlConfigCommand: () => GetFunctionUrlConfigCommand,
    GetLayerVersionByArnCommand: () => GetLayerVersionByArnCommand,
    GetLayerVersionCommand: () => GetLayerVersionCommand,
    GetLayerVersionPolicyCommand: () => GetLayerVersionPolicyCommand,
    GetPolicyCommand: () => GetPolicyCommand,
    GetProvisionedConcurrencyConfigCommand: () => GetProvisionedConcurrencyConfigCommand,
    GetRuntimeManagementConfigCommand: () => GetRuntimeManagementConfigCommand,
    ImageConfigErrorFilterSensitiveLog: () => ImageConfigErrorFilterSensitiveLog,
    ImageConfigResponseFilterSensitiveLog: () => ImageConfigResponseFilterSensitiveLog,
    InvalidCodeSignatureException: () => InvalidCodeSignatureException,
    InvalidParameterValueException: () => InvalidParameterValueException,
    InvalidRequestContentException: () => InvalidRequestContentException,
    InvalidRuntimeException: () => InvalidRuntimeException,
    InvalidSecurityGroupIDException: () => InvalidSecurityGroupIDException,
    InvalidSubnetIDException: () => InvalidSubnetIDException,
    InvalidZipFileException: () => InvalidZipFileException,
    InvocationRequestFilterSensitiveLog: () => InvocationRequestFilterSensitiveLog,
    InvocationResponseFilterSensitiveLog: () => InvocationResponseFilterSensitiveLog,
    InvocationType: () => InvocationType,
    InvokeAsyncCommand: () => InvokeAsyncCommand,
    InvokeAsyncRequestFilterSensitiveLog: () => InvokeAsyncRequestFilterSensitiveLog,
    InvokeCommand: () => InvokeCommand,
    InvokeMode: () => InvokeMode,
    InvokeResponseStreamUpdateFilterSensitiveLog: () => InvokeResponseStreamUpdateFilterSensitiveLog,
    InvokeWithResponseStreamCommand: () => InvokeWithResponseStreamCommand,
    InvokeWithResponseStreamRequestFilterSensitiveLog: () => InvokeWithResponseStreamRequestFilterSensitiveLog,
    InvokeWithResponseStreamResponseEvent: () => InvokeWithResponseStreamResponseEvent,
    InvokeWithResponseStreamResponseEventFilterSensitiveLog: () => InvokeWithResponseStreamResponseEventFilterSensitiveLog,
    InvokeWithResponseStreamResponseFilterSensitiveLog: () => InvokeWithResponseStreamResponseFilterSensitiveLog,
    KMSAccessDeniedException: () => KMSAccessDeniedException,
    KMSDisabledException: () => KMSDisabledException,
    KMSInvalidStateException: () => KMSInvalidStateException,
    KMSNotFoundException: () => KMSNotFoundException,
    Lambda: () => Lambda,
    LambdaClient: () => LambdaClient,
    LambdaServiceException: () => LambdaServiceException,
    LastUpdateStatus: () => LastUpdateStatus,
    LastUpdateStatusReasonCode: () => LastUpdateStatusReasonCode,
    LayerVersionContentInputFilterSensitiveLog: () => LayerVersionContentInputFilterSensitiveLog,
    ListAliasesCommand: () => ListAliasesCommand,
    ListCodeSigningConfigsCommand: () => ListCodeSigningConfigsCommand,
    ListEventSourceMappingsCommand: () => ListEventSourceMappingsCommand,
    ListFunctionEventInvokeConfigsCommand: () => ListFunctionEventInvokeConfigsCommand,
    ListFunctionUrlConfigsCommand: () => ListFunctionUrlConfigsCommand,
    ListFunctionsByCodeSigningConfigCommand: () => ListFunctionsByCodeSigningConfigCommand,
    ListFunctionsCommand: () => ListFunctionsCommand,
    ListFunctionsResponseFilterSensitiveLog: () => ListFunctionsResponseFilterSensitiveLog,
    ListLayerVersionsCommand: () => ListLayerVersionsCommand,
    ListLayersCommand: () => ListLayersCommand,
    ListProvisionedConcurrencyConfigsCommand: () => ListProvisionedConcurrencyConfigsCommand,
    ListTagsCommand: () => ListTagsCommand,
    ListVersionsByFunctionCommand: () => ListVersionsByFunctionCommand,
    ListVersionsByFunctionResponseFilterSensitiveLog: () => ListVersionsByFunctionResponseFilterSensitiveLog,
    LogFormat: () => LogFormat,
    LogType: () => LogType,
    PackageType: () => PackageType,
    PolicyLengthExceededException: () => PolicyLengthExceededException,
    PreconditionFailedException: () => PreconditionFailedException,
    ProvisionedConcurrencyConfigNotFoundException: () => ProvisionedConcurrencyConfigNotFoundException,
    ProvisionedConcurrencyStatusEnum: () => ProvisionedConcurrencyStatusEnum,
    PublishLayerVersionCommand: () => PublishLayerVersionCommand,
    PublishLayerVersionRequestFilterSensitiveLog: () => PublishLayerVersionRequestFilterSensitiveLog,
    PublishVersionCommand: () => PublishVersionCommand,
    PutFunctionCodeSigningConfigCommand: () => PutFunctionCodeSigningConfigCommand,
    PutFunctionConcurrencyCommand: () => PutFunctionConcurrencyCommand,
    PutFunctionEventInvokeConfigCommand: () => PutFunctionEventInvokeConfigCommand,
    PutFunctionRecursionConfigCommand: () => PutFunctionRecursionConfigCommand,
    PutProvisionedConcurrencyConfigCommand: () => PutProvisionedConcurrencyConfigCommand,
    PutRuntimeManagementConfigCommand: () => PutRuntimeManagementConfigCommand,
    RecursiveInvocationException: () => RecursiveInvocationException,
    RecursiveLoop: () => RecursiveLoop,
    RemoveLayerVersionPermissionCommand: () => RemoveLayerVersionPermissionCommand,
    RemovePermissionCommand: () => RemovePermissionCommand,
    RequestTooLargeException: () => RequestTooLargeException,
    ResourceConflictException: () => ResourceConflictException,
    ResourceInUseException: () => ResourceInUseException,
    ResourceNotFoundException: () => ResourceNotFoundException,
    ResourceNotReadyException: () => ResourceNotReadyException,
    ResponseStreamingInvocationType: () => ResponseStreamingInvocationType,
    Runtime: () => Runtime,
    RuntimeVersionConfigFilterSensitiveLog: () => RuntimeVersionConfigFilterSensitiveLog,
    RuntimeVersionErrorFilterSensitiveLog: () => RuntimeVersionErrorFilterSensitiveLog,
    ServiceException: () => ServiceException,
    SnapStartApplyOn: () => SnapStartApplyOn,
    SnapStartException: () => SnapStartException,
    SnapStartNotReadyException: () => SnapStartNotReadyException,
    SnapStartOptimizationStatus: () => SnapStartOptimizationStatus,
    SnapStartTimeoutException: () => SnapStartTimeoutException,
    SourceAccessType: () => SourceAccessType,
    State: () => State,
    StateReasonCode: () => StateReasonCode,
    SubnetIPAddressLimitReachedException: () => SubnetIPAddressLimitReachedException,
    SystemLogLevel: () => SystemLogLevel,
    TagResourceCommand: () => TagResourceCommand,
    ThrottleReason: () => ThrottleReason,
    TooManyRequestsException: () => TooManyRequestsException,
    TracingMode: () => TracingMode,
    UnsupportedMediaTypeException: () => UnsupportedMediaTypeException,
    UntagResourceCommand: () => UntagResourceCommand,
    UpdateAliasCommand: () => UpdateAliasCommand,
    UpdateCodeSigningConfigCommand: () => UpdateCodeSigningConfigCommand,
    UpdateEventSourceMappingCommand: () => UpdateEventSourceMappingCommand,
    UpdateFunctionCodeCommand: () => UpdateFunctionCodeCommand,
    UpdateFunctionCodeRequestFilterSensitiveLog: () => UpdateFunctionCodeRequestFilterSensitiveLog,
    UpdateFunctionConfigurationCommand: () => UpdateFunctionConfigurationCommand,
    UpdateFunctionConfigurationRequestFilterSensitiveLog: () => UpdateFunctionConfigurationRequestFilterSensitiveLog,
    UpdateFunctionEventInvokeConfigCommand: () => UpdateFunctionEventInvokeConfigCommand,
    UpdateFunctionUrlConfigCommand: () => UpdateFunctionUrlConfigCommand,
    UpdateRuntimeOn: () => UpdateRuntimeOn,
    __Client: () => import_smithy_client.Client,
    paginateListAliases: () => paginateListAliases,
    paginateListCodeSigningConfigs: () => paginateListCodeSigningConfigs,
    paginateListEventSourceMappings: () => paginateListEventSourceMappings,
    paginateListFunctionEventInvokeConfigs: () => paginateListFunctionEventInvokeConfigs,
    paginateListFunctionUrlConfigs: () => paginateListFunctionUrlConfigs,
    paginateListFunctions: () => paginateListFunctions,
    paginateListFunctionsByCodeSigningConfig: () => paginateListFunctionsByCodeSigningConfig,
    paginateListLayerVersions: () => paginateListLayerVersions,
    paginateListLayers: () => paginateListLayers,
    paginateListProvisionedConcurrencyConfigs: () => paginateListProvisionedConcurrencyConfigs,
    paginateListVersionsByFunction: () => paginateListVersionsByFunction,
    waitForFunctionActive: () => waitForFunctionActive,
    waitForFunctionActiveV2: () => waitForFunctionActiveV2,
    waitForFunctionExists: () => waitForFunctionExists,
    waitForFunctionUpdated: () => waitForFunctionUpdated,
    waitForFunctionUpdatedV2: () => waitForFunctionUpdatedV2,
    waitForPublishedVersionActive: () => waitForPublishedVersionActive,
    waitUntilFunctionActive: () => waitUntilFunctionActive,
    waitUntilFunctionActiveV2: () => waitUntilFunctionActiveV2,
    waitUntilFunctionExists: () => waitUntilFunctionExists,
    waitUntilFunctionUpdated: () => waitUntilFunctionUpdated,
    waitUntilFunctionUpdatedV2: () => waitUntilFunctionUpdatedV2,
    waitUntilPublishedVersionActive: () => waitUntilPublishedVersionActive
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_eventstream_serde_config_resolver = require_dist_cjs29();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider6();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "lambda"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig6();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var LambdaClient = class extends import_smithy_client.Client {
    static {
      __name(this, "LambdaClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
      const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
      const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
      this.config = _config_9;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultLambdaHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_serde = require_dist_cjs7();
  var import_core2 = require_dist_cjs25();
  var LambdaServiceException = class _LambdaServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "LambdaServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _LambdaServiceException.prototype);
    }
  };
  var InvalidParameterValueException = class _InvalidParameterValueException extends LambdaServiceException {
    static {
      __name(this, "InvalidParameterValueException");
    }
    name = "InvalidParameterValueException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "InvalidParameterValueException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidParameterValueException.prototype);
      this.Type = opts.Type;
    }
  };
  var PolicyLengthExceededException = class _PolicyLengthExceededException extends LambdaServiceException {
    static {
      __name(this, "PolicyLengthExceededException");
    }
    name = "PolicyLengthExceededException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "PolicyLengthExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PolicyLengthExceededException.prototype);
      this.Type = opts.Type;
    }
  };
  var PreconditionFailedException = class _PreconditionFailedException extends LambdaServiceException {
    static {
      __name(this, "PreconditionFailedException");
    }
    name = "PreconditionFailedException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "PreconditionFailedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PreconditionFailedException.prototype);
      this.Type = opts.Type;
    }
  };
  var ResourceConflictException = class _ResourceConflictException extends LambdaServiceException {
    static {
      __name(this, "ResourceConflictException");
    }
    name = "ResourceConflictException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "ResourceConflictException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceConflictException.prototype);
      this.Type = opts.Type;
    }
  };
  var ResourceNotFoundException = class _ResourceNotFoundException extends LambdaServiceException {
    static {
      __name(this, "ResourceNotFoundException");
    }
    name = "ResourceNotFoundException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "ResourceNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var ServiceException = class _ServiceException extends LambdaServiceException {
    static {
      __name(this, "ServiceException");
    }
    name = "ServiceException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "ServiceException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var ThrottleReason = {
    CallerRateLimitExceeded: "CallerRateLimitExceeded",
    ConcurrentInvocationLimitExceeded: "ConcurrentInvocationLimitExceeded",
    ConcurrentSnapshotCreateLimitExceeded: "ConcurrentSnapshotCreateLimitExceeded",
    FunctionInvocationRateLimitExceeded: "FunctionInvocationRateLimitExceeded",
    ReservedFunctionConcurrentInvocationLimitExceeded: "ReservedFunctionConcurrentInvocationLimitExceeded",
    ReservedFunctionInvocationRateLimitExceeded: "ReservedFunctionInvocationRateLimitExceeded"
  };
  var TooManyRequestsException = class _TooManyRequestsException extends LambdaServiceException {
    static {
      __name(this, "TooManyRequestsException");
    }
    name = "TooManyRequestsException";
    $fault = "client";
    retryAfterSeconds;
    Type;
    Reason;
    constructor(opts) {
      super({
        name: "TooManyRequestsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      this.retryAfterSeconds = opts.retryAfterSeconds;
      this.Type = opts.Type;
      this.Reason = opts.Reason;
    }
  };
  var FunctionUrlAuthType = {
    AWS_IAM: "AWS_IAM",
    NONE: "NONE"
  };
  var ApplicationLogLevel = {
    Debug: "DEBUG",
    Error: "ERROR",
    Fatal: "FATAL",
    Info: "INFO",
    Trace: "TRACE",
    Warn: "WARN"
  };
  var Architecture = {
    arm64: "arm64",
    x86_64: "x86_64"
  };
  var CodeSigningPolicy = {
    Enforce: "Enforce",
    Warn: "Warn"
  };
  var FullDocument = {
    Default: "Default",
    UpdateLookup: "UpdateLookup"
  };
  var FunctionResponseType = {
    ReportBatchItemFailures: "ReportBatchItemFailures"
  };
  var EventSourceMappingMetric = {
    EventCount: "EventCount"
  };
  var EndPointType = {
    KAFKA_BOOTSTRAP_SERVERS: "KAFKA_BOOTSTRAP_SERVERS"
  };
  var SourceAccessType = {
    BASIC_AUTH: "BASIC_AUTH",
    CLIENT_CERTIFICATE_TLS_AUTH: "CLIENT_CERTIFICATE_TLS_AUTH",
    SASL_SCRAM_256_AUTH: "SASL_SCRAM_256_AUTH",
    SASL_SCRAM_512_AUTH: "SASL_SCRAM_512_AUTH",
    SERVER_ROOT_CA_CERTIFICATE: "SERVER_ROOT_CA_CERTIFICATE",
    VIRTUAL_HOST: "VIRTUAL_HOST",
    VPC_SECURITY_GROUP: "VPC_SECURITY_GROUP",
    VPC_SUBNET: "VPC_SUBNET"
  };
  var EventSourcePosition = {
    AT_TIMESTAMP: "AT_TIMESTAMP",
    LATEST: "LATEST",
    TRIM_HORIZON: "TRIM_HORIZON"
  };
  var CodeSigningConfigNotFoundException = class _CodeSigningConfigNotFoundException extends LambdaServiceException {
    static {
      __name(this, "CodeSigningConfigNotFoundException");
    }
    name = "CodeSigningConfigNotFoundException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "CodeSigningConfigNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CodeSigningConfigNotFoundException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var CodeStorageExceededException = class _CodeStorageExceededException extends LambdaServiceException {
    static {
      __name(this, "CodeStorageExceededException");
    }
    name = "CodeStorageExceededException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "CodeStorageExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CodeStorageExceededException.prototype);
      this.Type = opts.Type;
    }
  };
  var CodeVerificationFailedException = class _CodeVerificationFailedException extends LambdaServiceException {
    static {
      __name(this, "CodeVerificationFailedException");
    }
    name = "CodeVerificationFailedException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "CodeVerificationFailedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _CodeVerificationFailedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var LogFormat = {
    Json: "JSON",
    Text: "Text"
  };
  var SystemLogLevel = {
    Debug: "DEBUG",
    Info: "INFO",
    Warn: "WARN"
  };
  var PackageType = {
    Image: "Image",
    Zip: "Zip"
  };
  var Runtime = {
    dotnet6: "dotnet6",
    dotnet8: "dotnet8",
    dotnetcore10: "dotnetcore1.0",
    dotnetcore20: "dotnetcore2.0",
    dotnetcore21: "dotnetcore2.1",
    dotnetcore31: "dotnetcore3.1",
    go1x: "go1.x",
    java11: "java11",
    java17: "java17",
    java21: "java21",
    java8: "java8",
    java8al2: "java8.al2",
    nodejs: "nodejs",
    nodejs10x: "nodejs10.x",
    nodejs12x: "nodejs12.x",
    nodejs14x: "nodejs14.x",
    nodejs16x: "nodejs16.x",
    nodejs18x: "nodejs18.x",
    nodejs20x: "nodejs20.x",
    nodejs22x: "nodejs22.x",
    nodejs43: "nodejs4.3",
    nodejs43edge: "nodejs4.3-edge",
    nodejs610: "nodejs6.10",
    nodejs810: "nodejs8.10",
    provided: "provided",
    providedal2: "provided.al2",
    providedal2023: "provided.al2023",
    python27: "python2.7",
    python310: "python3.10",
    python311: "python3.11",
    python312: "python3.12",
    python313: "python3.13",
    python36: "python3.6",
    python37: "python3.7",
    python38: "python3.8",
    python39: "python3.9",
    ruby25: "ruby2.5",
    ruby27: "ruby2.7",
    ruby32: "ruby3.2",
    ruby33: "ruby3.3",
    ruby34: "ruby3.4"
  };
  var SnapStartApplyOn = {
    None: "None",
    PublishedVersions: "PublishedVersions"
  };
  var TracingMode = {
    Active: "Active",
    PassThrough: "PassThrough"
  };
  var LastUpdateStatus = {
    Failed: "Failed",
    InProgress: "InProgress",
    Successful: "Successful"
  };
  var LastUpdateStatusReasonCode = {
    DisabledKMSKey: "DisabledKMSKey",
    EFSIOError: "EFSIOError",
    EFSMountConnectivityError: "EFSMountConnectivityError",
    EFSMountFailure: "EFSMountFailure",
    EFSMountTimeout: "EFSMountTimeout",
    EniLimitExceeded: "EniLimitExceeded",
    FunctionError: "FunctionError",
    ImageAccessDenied: "ImageAccessDenied",
    ImageDeleted: "ImageDeleted",
    InsufficientRolePermissions: "InsufficientRolePermissions",
    InternalError: "InternalError",
    InvalidConfiguration: "InvalidConfiguration",
    InvalidImage: "InvalidImage",
    InvalidRuntime: "InvalidRuntime",
    InvalidSecurityGroup: "InvalidSecurityGroup",
    InvalidStateKMSKey: "InvalidStateKMSKey",
    InvalidSubnet: "InvalidSubnet",
    InvalidZipFileException: "InvalidZipFileException",
    KMSKeyAccessDenied: "KMSKeyAccessDenied",
    KMSKeyNotFound: "KMSKeyNotFound",
    SubnetOutOfIPAddresses: "SubnetOutOfIPAddresses"
  };
  var SnapStartOptimizationStatus = {
    Off: "Off",
    On: "On"
  };
  var State = {
    Active: "Active",
    Failed: "Failed",
    Inactive: "Inactive",
    Pending: "Pending"
  };
  var StateReasonCode = {
    Creating: "Creating",
    DisabledKMSKey: "DisabledKMSKey",
    EFSIOError: "EFSIOError",
    EFSMountConnectivityError: "EFSMountConnectivityError",
    EFSMountFailure: "EFSMountFailure",
    EFSMountTimeout: "EFSMountTimeout",
    EniLimitExceeded: "EniLimitExceeded",
    FunctionError: "FunctionError",
    Idle: "Idle",
    ImageAccessDenied: "ImageAccessDenied",
    ImageDeleted: "ImageDeleted",
    InsufficientRolePermissions: "InsufficientRolePermissions",
    InternalError: "InternalError",
    InvalidConfiguration: "InvalidConfiguration",
    InvalidImage: "InvalidImage",
    InvalidRuntime: "InvalidRuntime",
    InvalidSecurityGroup: "InvalidSecurityGroup",
    InvalidStateKMSKey: "InvalidStateKMSKey",
    InvalidSubnet: "InvalidSubnet",
    InvalidZipFileException: "InvalidZipFileException",
    KMSKeyAccessDenied: "KMSKeyAccessDenied",
    KMSKeyNotFound: "KMSKeyNotFound",
    Restoring: "Restoring",
    SubnetOutOfIPAddresses: "SubnetOutOfIPAddresses"
  };
  var InvalidCodeSignatureException = class _InvalidCodeSignatureException extends LambdaServiceException {
    static {
      __name(this, "InvalidCodeSignatureException");
    }
    name = "InvalidCodeSignatureException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "InvalidCodeSignatureException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidCodeSignatureException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvokeMode = {
    BUFFERED: "BUFFERED",
    RESPONSE_STREAM: "RESPONSE_STREAM"
  };
  var ResourceInUseException = class _ResourceInUseException extends LambdaServiceException {
    static {
      __name(this, "ResourceInUseException");
    }
    name = "ResourceInUseException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "ResourceInUseException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceInUseException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var RecursiveLoop = {
    Allow: "Allow",
    Terminate: "Terminate"
  };
  var ProvisionedConcurrencyStatusEnum = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    READY: "READY"
  };
  var ProvisionedConcurrencyConfigNotFoundException = class _ProvisionedConcurrencyConfigNotFoundException extends LambdaServiceException {
    static {
      __name(this, "ProvisionedConcurrencyConfigNotFoundException");
    }
    name = "ProvisionedConcurrencyConfigNotFoundException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "ProvisionedConcurrencyConfigNotFoundException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ProvisionedConcurrencyConfigNotFoundException.prototype);
      this.Type = opts.Type;
    }
  };
  var UpdateRuntimeOn = {
    Auto: "Auto",
    FunctionUpdate: "FunctionUpdate",
    Manual: "Manual"
  };
  var EC2AccessDeniedException = class _EC2AccessDeniedException extends LambdaServiceException {
    static {
      __name(this, "EC2AccessDeniedException");
    }
    name = "EC2AccessDeniedException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EC2AccessDeniedException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _EC2AccessDeniedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var EC2ThrottledException = class _EC2ThrottledException extends LambdaServiceException {
    static {
      __name(this, "EC2ThrottledException");
    }
    name = "EC2ThrottledException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EC2ThrottledException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _EC2ThrottledException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var EC2UnexpectedException = class _EC2UnexpectedException extends LambdaServiceException {
    static {
      __name(this, "EC2UnexpectedException");
    }
    name = "EC2UnexpectedException";
    $fault = "server";
    Type;
    Message;
    EC2ErrorCode;
    constructor(opts) {
      super({
        name: "EC2UnexpectedException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _EC2UnexpectedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
      this.EC2ErrorCode = opts.EC2ErrorCode;
    }
  };
  var EFSIOException = class _EFSIOException extends LambdaServiceException {
    static {
      __name(this, "EFSIOException");
    }
    name = "EFSIOException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EFSIOException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EFSIOException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var EFSMountConnectivityException = class _EFSMountConnectivityException extends LambdaServiceException {
    static {
      __name(this, "EFSMountConnectivityException");
    }
    name = "EFSMountConnectivityException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EFSMountConnectivityException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EFSMountConnectivityException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var EFSMountFailureException = class _EFSMountFailureException extends LambdaServiceException {
    static {
      __name(this, "EFSMountFailureException");
    }
    name = "EFSMountFailureException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EFSMountFailureException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EFSMountFailureException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var EFSMountTimeoutException = class _EFSMountTimeoutException extends LambdaServiceException {
    static {
      __name(this, "EFSMountTimeoutException");
    }
    name = "EFSMountTimeoutException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "EFSMountTimeoutException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EFSMountTimeoutException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var ENILimitReachedException = class _ENILimitReachedException extends LambdaServiceException {
    static {
      __name(this, "ENILimitReachedException");
    }
    name = "ENILimitReachedException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "ENILimitReachedException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ENILimitReachedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvalidRequestContentException = class _InvalidRequestContentException extends LambdaServiceException {
    static {
      __name(this, "InvalidRequestContentException");
    }
    name = "InvalidRequestContentException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "InvalidRequestContentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidRequestContentException.prototype);
      this.Type = opts.Type;
    }
  };
  var InvalidRuntimeException = class _InvalidRuntimeException extends LambdaServiceException {
    static {
      __name(this, "InvalidRuntimeException");
    }
    name = "InvalidRuntimeException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "InvalidRuntimeException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidRuntimeException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvalidSecurityGroupIDException = class _InvalidSecurityGroupIDException extends LambdaServiceException {
    static {
      __name(this, "InvalidSecurityGroupIDException");
    }
    name = "InvalidSecurityGroupIDException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "InvalidSecurityGroupIDException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidSecurityGroupIDException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvalidSubnetIDException = class _InvalidSubnetIDException extends LambdaServiceException {
    static {
      __name(this, "InvalidSubnetIDException");
    }
    name = "InvalidSubnetIDException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "InvalidSubnetIDException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidSubnetIDException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvalidZipFileException = class _InvalidZipFileException extends LambdaServiceException {
    static {
      __name(this, "InvalidZipFileException");
    }
    name = "InvalidZipFileException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "InvalidZipFileException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidZipFileException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var InvocationType = {
    DryRun: "DryRun",
    Event: "Event",
    RequestResponse: "RequestResponse"
  };
  var LogType = {
    None: "None",
    Tail: "Tail"
  };
  var KMSAccessDeniedException = class _KMSAccessDeniedException extends LambdaServiceException {
    static {
      __name(this, "KMSAccessDeniedException");
    }
    name = "KMSAccessDeniedException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "KMSAccessDeniedException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _KMSAccessDeniedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var KMSDisabledException = class _KMSDisabledException extends LambdaServiceException {
    static {
      __name(this, "KMSDisabledException");
    }
    name = "KMSDisabledException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "KMSDisabledException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _KMSDisabledException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var KMSInvalidStateException = class _KMSInvalidStateException extends LambdaServiceException {
    static {
      __name(this, "KMSInvalidStateException");
    }
    name = "KMSInvalidStateException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "KMSInvalidStateException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _KMSInvalidStateException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var KMSNotFoundException = class _KMSNotFoundException extends LambdaServiceException {
    static {
      __name(this, "KMSNotFoundException");
    }
    name = "KMSNotFoundException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "KMSNotFoundException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _KMSNotFoundException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var RecursiveInvocationException = class _RecursiveInvocationException extends LambdaServiceException {
    static {
      __name(this, "RecursiveInvocationException");
    }
    name = "RecursiveInvocationException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "RecursiveInvocationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _RecursiveInvocationException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var RequestTooLargeException = class _RequestTooLargeException extends LambdaServiceException {
    static {
      __name(this, "RequestTooLargeException");
    }
    name = "RequestTooLargeException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "RequestTooLargeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _RequestTooLargeException.prototype);
      this.Type = opts.Type;
    }
  };
  var ResourceNotReadyException = class _ResourceNotReadyException extends LambdaServiceException {
    static {
      __name(this, "ResourceNotReadyException");
    }
    name = "ResourceNotReadyException";
    $fault = "server";
    Type;
    constructor(opts) {
      super({
        name: "ResourceNotReadyException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceNotReadyException.prototype);
      this.Type = opts.Type;
    }
  };
  var SnapStartException = class _SnapStartException extends LambdaServiceException {
    static {
      __name(this, "SnapStartException");
    }
    name = "SnapStartException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "SnapStartException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SnapStartException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var SnapStartNotReadyException = class _SnapStartNotReadyException extends LambdaServiceException {
    static {
      __name(this, "SnapStartNotReadyException");
    }
    name = "SnapStartNotReadyException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "SnapStartNotReadyException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SnapStartNotReadyException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var SnapStartTimeoutException = class _SnapStartTimeoutException extends LambdaServiceException {
    static {
      __name(this, "SnapStartTimeoutException");
    }
    name = "SnapStartTimeoutException";
    $fault = "client";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "SnapStartTimeoutException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _SnapStartTimeoutException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var SubnetIPAddressLimitReachedException = class _SubnetIPAddressLimitReachedException extends LambdaServiceException {
    static {
      __name(this, "SubnetIPAddressLimitReachedException");
    }
    name = "SubnetIPAddressLimitReachedException";
    $fault = "server";
    Type;
    Message;
    constructor(opts) {
      super({
        name: "SubnetIPAddressLimitReachedException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _SubnetIPAddressLimitReachedException.prototype);
      this.Type = opts.Type;
      this.Message = opts.Message;
    }
  };
  var UnsupportedMediaTypeException = class _UnsupportedMediaTypeException extends LambdaServiceException {
    static {
      __name(this, "UnsupportedMediaTypeException");
    }
    name = "UnsupportedMediaTypeException";
    $fault = "client";
    Type;
    constructor(opts) {
      super({
        name: "UnsupportedMediaTypeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _UnsupportedMediaTypeException.prototype);
      this.Type = opts.Type;
    }
  };
  var ResponseStreamingInvocationType = {
    DryRun: "DryRun",
    RequestResponse: "RequestResponse"
  };
  var InvokeWithResponseStreamResponseEvent;
  ((InvokeWithResponseStreamResponseEvent3) => {
    InvokeWithResponseStreamResponseEvent3.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.PayloadChunk !== undefined)
        return visitor.PayloadChunk(value.PayloadChunk);
      if (value.InvokeComplete !== undefined)
        return visitor.InvokeComplete(value.InvokeComplete);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(InvokeWithResponseStreamResponseEvent || (InvokeWithResponseStreamResponseEvent = {}));
  var FunctionVersion = {
    ALL: "ALL"
  };
  var FunctionCodeFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }
  }), "FunctionCodeFilterSensitiveLog");
  var EnvironmentFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Variables && { Variables: import_smithy_client.SENSITIVE_STRING }
  }), "EnvironmentFilterSensitiveLog");
  var CreateFunctionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Code && { Code: FunctionCodeFilterSensitiveLog(obj.Code) },
    ...obj.Environment && { Environment: EnvironmentFilterSensitiveLog(obj.Environment) }
  }), "CreateFunctionRequestFilterSensitiveLog");
  var EnvironmentErrorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }
  }), "EnvironmentErrorFilterSensitiveLog");
  var EnvironmentResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Variables && { Variables: import_smithy_client.SENSITIVE_STRING },
    ...obj.Error && { Error: EnvironmentErrorFilterSensitiveLog(obj.Error) }
  }), "EnvironmentResponseFilterSensitiveLog");
  var ImageConfigErrorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }
  }), "ImageConfigErrorFilterSensitiveLog");
  var ImageConfigResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Error && { Error: ImageConfigErrorFilterSensitiveLog(obj.Error) }
  }), "ImageConfigResponseFilterSensitiveLog");
  var RuntimeVersionErrorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }
  }), "RuntimeVersionErrorFilterSensitiveLog");
  var RuntimeVersionConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Error && { Error: RuntimeVersionErrorFilterSensitiveLog(obj.Error) }
  }), "RuntimeVersionConfigFilterSensitiveLog");
  var FunctionConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Environment && { Environment: EnvironmentResponseFilterSensitiveLog(obj.Environment) },
    ...obj.ImageConfigResponse && {
      ImageConfigResponse: ImageConfigResponseFilterSensitiveLog(obj.ImageConfigResponse)
    },
    ...obj.RuntimeVersionConfig && {
      RuntimeVersionConfig: RuntimeVersionConfigFilterSensitiveLog(obj.RuntimeVersionConfig)
    }
  }), "FunctionConfigurationFilterSensitiveLog");
  var GetFunctionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Configuration && { Configuration: FunctionConfigurationFilterSensitiveLog(obj.Configuration) }
  }), "GetFunctionResponseFilterSensitiveLog");
  var InvocationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }
  }), "InvocationRequestFilterSensitiveLog");
  var InvocationResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }
  }), "InvocationResponseFilterSensitiveLog");
  var InvokeAsyncRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj
  }), "InvokeAsyncRequestFilterSensitiveLog");
  var InvokeWithResponseStreamRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }
  }), "InvokeWithResponseStreamRequestFilterSensitiveLog");
  var InvokeResponseStreamUpdateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }
  }), "InvokeResponseStreamUpdateFilterSensitiveLog");
  var InvokeWithResponseStreamResponseEventFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
    if (obj.PayloadChunk !== undefined)
      return { PayloadChunk: InvokeResponseStreamUpdateFilterSensitiveLog(obj.PayloadChunk) };
    if (obj.InvokeComplete !== undefined)
      return { InvokeComplete: obj.InvokeComplete };
    if (obj.$unknown !== undefined)
      return { [obj.$unknown[0]]: "UNKNOWN" };
  }, "InvokeWithResponseStreamResponseEventFilterSensitiveLog");
  var InvokeWithResponseStreamResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.EventStream && { EventStream: "STREAMING_CONTENT" }
  }), "InvokeWithResponseStreamResponseFilterSensitiveLog");
  var ListFunctionsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Functions && { Functions: obj.Functions.map((item) => FunctionConfigurationFilterSensitiveLog(item)) }
  }), "ListFunctionsResponseFilterSensitiveLog");
  var ListVersionsByFunctionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Versions && { Versions: obj.Versions.map((item) => FunctionConfigurationFilterSensitiveLog(item)) }
  }), "ListVersionsByFunctionResponseFilterSensitiveLog");
  var LayerVersionContentInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }
  }), "LayerVersionContentInputFilterSensitiveLog");
  var PublishLayerVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Content && { Content: LayerVersionContentInputFilterSensitiveLog(obj.Content) }
  }), "PublishLayerVersionRequestFilterSensitiveLog");
  var UpdateFunctionCodeRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }
  }), "UpdateFunctionCodeRequestFilterSensitiveLog");
  var UpdateFunctionConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Environment && { Environment: EnvironmentFilterSensitiveLog(obj.Environment) }
  }), "UpdateFunctionConfigurationRequestFilterSensitiveLog");
  var se_AddLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    const query = (0, import_smithy_client.map)({
      [_RI]: [, input[_RI]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Action: [],
      OrganizationId: [],
      Principal: [],
      StatementId: []
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_AddLayerVersionPermissionCommand");
  var se_AddPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/policy");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Action: [],
      EventSourceToken: [],
      FunctionUrlAuthType: [],
      Principal: [],
      PrincipalOrgID: [],
      RevisionId: [],
      SourceAccount: [],
      SourceArn: [],
      StatementId: []
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_AddPermissionCommand");
  var se_CreateAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/aliases");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Description: [],
      FunctionVersion: [],
      Name: [],
      RoutingConfig: /* @__PURE__ */ __name((_) => se_AliasRoutingConfiguration(_, context), "RoutingConfig")
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_CreateAliasCommand");
  var se_CreateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2020-04-22/code-signing-configs");
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      AllowedPublishers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "AllowedPublishers"),
      CodeSigningPolicies: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "CodeSigningPolicies"),
      Description: [],
      Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Tags")
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_CreateCodeSigningConfigCommand");
  var se_CreateEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/event-source-mappings");
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      AmazonManagedKafkaEventSourceConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "AmazonManagedKafkaEventSourceConfig"),
      BatchSize: [],
      BisectBatchOnFunctionError: [],
      DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DestinationConfig"),
      DocumentDBEventSourceConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DocumentDBEventSourceConfig"),
      Enabled: [],
      EventSourceArn: [],
      FilterCriteria: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FilterCriteria"),
      FunctionName: [],
      FunctionResponseTypes: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FunctionResponseTypes"),
      KMSKeyArn: [],
      MaximumBatchingWindowInSeconds: [],
      MaximumRecordAgeInSeconds: [],
      MaximumRetryAttempts: [],
      MetricsConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "MetricsConfig"),
      ParallelizationFactor: [],
      ProvisionedPollerConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ProvisionedPollerConfig"),
      Queues: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Queues"),
      ScalingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ScalingConfig"),
      SelfManagedEventSource: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SelfManagedEventSource"),
      SelfManagedKafkaEventSourceConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SelfManagedKafkaEventSourceConfig"),
      SourceAccessConfigurations: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SourceAccessConfigurations"),
      StartingPosition: [],
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => _.getTime() / 1000, "StartingPositionTimestamp"),
      Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Tags"),
      Topics: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Topics"),
      TumblingWindowInSeconds: []
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_CreateEventSourceMappingCommand");
  var se_CreateFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions");
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Architectures: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Architectures"),
      Code: /* @__PURE__ */ __name((_) => se_FunctionCode(_, context), "Code"),
      CodeSigningConfigArn: [],
      DeadLetterConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DeadLetterConfig"),
      Description: [],
      Environment: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Environment"),
      EphemeralStorage: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "EphemeralStorage"),
      FileSystemConfigs: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FileSystemConfigs"),
      FunctionName: [],
      Handler: [],
      ImageConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ImageConfig"),
      KMSKeyArn: [],
      Layers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Layers"),
      LoggingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "LoggingConfig"),
      MemorySize: [],
      PackageType: [],
      Publish: [],
      Role: [],
      Runtime: [],
      SnapStart: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SnapStart"),
      Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Tags"),
      Timeout: [],
      TracingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "TracingConfig"),
      VpcConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "VpcConfig")
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_CreateFunctionCommand");
  var se_CreateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2021-10-31/functions/{FunctionName}/url");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      AuthType: [],
      Cors: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Cors"),
      InvokeMode: []
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateFunctionUrlConfigCommand");
  var se_DeleteAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/aliases/{Name}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteAliasCommand");
  var se_DeleteCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-04-22/code-signing-configs/{CodeSigningConfigArn}");
    b.p("CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteCodeSigningConfigCommand");
  var se_DeleteEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/event-source-mappings/{UUID}");
    b.p("UUID", () => input.UUID, "{UUID}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteEventSourceMappingCommand");
  var se_DeleteFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteFunctionCommand");
  var se_DeleteFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-06-30/functions/{FunctionName}/code-signing-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteFunctionCodeSigningConfigCommand");
  var se_DeleteFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2017-10-31/functions/{FunctionName}/concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteFunctionConcurrencyCommand");
  var se_DeleteFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-25/functions/{FunctionName}/event-invoke-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteFunctionEventInvokeConfigCommand");
  var se_DeleteFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2021-10-31/functions/{FunctionName}/url");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteFunctionUrlConfigCommand");
  var se_DeleteLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers/{LayerName}/versions/{VersionNumber}");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteLayerVersionCommand");
  var se_DeleteProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-30/functions/{FunctionName}/provisioned-concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteProvisionedConcurrencyConfigCommand");
  var se_GetAccountSettingsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2016-08-19/account-settings");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetAccountSettingsCommand");
  var se_GetAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/aliases/{Name}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetAliasCommand");
  var se_GetCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-04-22/code-signing-configs/{CodeSigningConfigArn}");
    b.p("CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetCodeSigningConfigCommand");
  var se_GetEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/event-source-mappings/{UUID}");
    b.p("UUID", () => input.UUID, "{UUID}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetEventSourceMappingCommand");
  var se_GetFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetFunctionCommand");
  var se_GetFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-06-30/functions/{FunctionName}/code-signing-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetFunctionCodeSigningConfigCommand");
  var se_GetFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-30/functions/{FunctionName}/concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetFunctionConcurrencyCommand");
  var se_GetFunctionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/configuration");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetFunctionConfigurationCommand");
  var se_GetFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-25/functions/{FunctionName}/event-invoke-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetFunctionEventInvokeConfigCommand");
  var se_GetFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2024-08-31/functions/{FunctionName}/recursion-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetFunctionRecursionConfigCommand");
  var se_GetFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2021-10-31/functions/{FunctionName}/url");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetFunctionUrlConfigCommand");
  var se_GetLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers/{LayerName}/versions/{VersionNumber}");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetLayerVersionCommand");
  var se_GetLayerVersionByArnCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers");
    const query = (0, import_smithy_client.map)({
      [_f]: [, "LayerVersion"],
      [_A]: [, (0, import_smithy_client.expectNonNull)(input[_A], `Arn`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetLayerVersionByArnCommand");
  var se_GetLayerVersionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_GetLayerVersionPolicyCommand");
  var se_GetPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/policy");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetPolicyCommand");
  var se_GetProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-30/functions/{FunctionName}/provisioned-concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetProvisionedConcurrencyConfigCommand");
  var se_GetRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2021-07-20/functions/{FunctionName}/runtime-management-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetRuntimeManagementConfigCommand");
  var se_InvokeCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/octet-stream",
      [_xait]: input[_IT],
      [_xalt]: input[_LT],
      [_xacc]: input[_CC]
    });
    b.bp("/2015-03-31/functions/{FunctionName}/invocations");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    if (input.Payload !== undefined) {
      body = input.Payload;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_InvokeCommand");
  var se_InvokeAsyncCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/octet-stream"
    };
    b.bp("/2014-11-13/functions/{FunctionName}/invoke-async");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    if (input.InvokeArgs !== undefined) {
      body = input.InvokeArgs;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_InvokeAsyncCommand");
  var se_InvokeWithResponseStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/octet-stream",
      [_xait]: input[_IT],
      [_xalt]: input[_LT],
      [_xacc]: input[_CC]
    });
    b.bp("/2021-11-15/functions/{FunctionName}/response-streaming-invocations");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    if (input.Payload !== undefined) {
      body = input.Payload;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_InvokeWithResponseStreamCommand");
  var se_ListAliasesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/aliases");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_FV]: [, input[_FV]],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListAliasesCommand");
  var se_ListCodeSigningConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-04-22/code-signing-configs");
    const query = (0, import_smithy_client.map)({
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListCodeSigningConfigsCommand");
  var se_ListEventSourceMappingsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/event-source-mappings");
    const query = (0, import_smithy_client.map)({
      [_ESA]: [, input[_ESA]],
      [_FN]: [, input[_FN]],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListEventSourceMappingsCommand");
  var se_ListFunctionEventInvokeConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-25/functions/{FunctionName}/event-invoke-config/list");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListFunctionEventInvokeConfigsCommand");
  var se_ListFunctionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions");
    const query = (0, import_smithy_client.map)({
      [_MR]: [, input[_MR]],
      [_FV]: [, input[_FV]],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListFunctionsCommand");
  var se_ListFunctionsByCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions");
    b.p("CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    const query = (0, import_smithy_client.map)({
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListFunctionsByCodeSigningConfigCommand");
  var se_ListFunctionUrlConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2021-10-31/functions/{FunctionName}/urls");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListFunctionUrlConfigsCommand");
  var se_ListLayersCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers");
    const query = (0, import_smithy_client.map)({
      [_CR]: [, input[_CR]],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()],
      [_CA]: [, input[_CA]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListLayersCommand");
  var se_ListLayerVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers/{LayerName}/versions");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    const query = (0, import_smithy_client.map)({
      [_CR]: [, input[_CR]],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()],
      [_CA]: [, input[_CA]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListLayerVersionsCommand");
  var se_ListProvisionedConcurrencyConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2019-09-30/functions/{FunctionName}/provisioned-concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_L]: [, "ALL"],
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListProvisionedConcurrencyConfigsCommand");
  var se_ListTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2017-03-31/tags/{Resource}");
    b.p("Resource", () => input.Resource, "{Resource}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
  }, "se_ListTagsCommand");
  var se_ListVersionsByFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/versions");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_M]: [, input[_M]],
      [_MI]: [() => input.MaxItems !== undefined, () => input[_MI].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListVersionsByFunctionCommand");
  var se_PublishLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2018-10-31/layers/{LayerName}/versions");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      CompatibleArchitectures: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "CompatibleArchitectures"),
      CompatibleRuntimes: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "CompatibleRuntimes"),
      Content: /* @__PURE__ */ __name((_) => se_LayerVersionContentInput(_, context), "Content"),
      Description: [],
      LicenseInfo: []
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_PublishLayerVersionCommand");
  var se_PublishVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/versions");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      CodeSha256: [],
      Description: [],
      RevisionId: []
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_PublishVersionCommand");
  var se_PutFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2020-06-30/functions/{FunctionName}/code-signing-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      CodeSigningConfigArn: []
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_PutFunctionCodeSigningConfigCommand");
  var se_PutFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2017-10-31/functions/{FunctionName}/concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      ReservedConcurrentExecutions: []
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_PutFunctionConcurrencyCommand");
  var se_PutFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2019-09-25/functions/{FunctionName}/event-invoke-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DestinationConfig"),
      MaximumEventAgeInSeconds: [],
      MaximumRetryAttempts: []
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutFunctionEventInvokeConfigCommand");
  var se_PutFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2024-08-31/functions/{FunctionName}/recursion-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      RecursiveLoop: []
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_PutFunctionRecursionConfigCommand");
  var se_PutProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2019-09-30/functions/{FunctionName}/provisioned-concurrency");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      ProvisionedConcurrentExecutions: []
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutProvisionedConcurrencyConfigCommand");
  var se_PutRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2021-07-20/functions/{FunctionName}/runtime-management-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      RuntimeVersionArn: [],
      UpdateRuntimeOn: []
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutRuntimeManagementConfigCommand");
  var se_RemoveLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}");
    b.p("LayerName", () => input.LayerName, "{LayerName}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    b.p("StatementId", () => input.StatementId, "{StatementId}", false);
    const query = (0, import_smithy_client.map)({
      [_RI]: [, input[_RI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_RemoveLayerVersionPermissionCommand");
  var se_RemovePermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2015-03-31/functions/{FunctionName}/policy/{StatementId}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    b.p("StatementId", () => input.StatementId, "{StatementId}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]],
      [_RI]: [, input[_RI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_RemovePermissionCommand");
  var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2017-03-31/tags/{Resource}");
    b.p("Resource", () => input.Resource, "{Resource}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Tags")
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_TagResourceCommand");
  var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/2017-03-31/tags/{Resource}");
    b.p("Resource", () => input.Resource, "{Resource}", false);
    const query = (0, import_smithy_client.map)({
      [_tK]: [(0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_UntagResourceCommand");
  var se_UpdateAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/aliases/{Name}");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Description: [],
      FunctionVersion: [],
      RevisionId: [],
      RoutingConfig: /* @__PURE__ */ __name((_) => se_AliasRoutingConfiguration(_, context), "RoutingConfig")
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_UpdateAliasCommand");
  var se_UpdateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2020-04-22/code-signing-configs/{CodeSigningConfigArn}");
    b.p("CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      AllowedPublishers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "AllowedPublishers"),
      CodeSigningPolicies: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "CodeSigningPolicies"),
      Description: []
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_UpdateCodeSigningConfigCommand");
  var se_UpdateEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/event-source-mappings/{UUID}");
    b.p("UUID", () => input.UUID, "{UUID}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      BatchSize: [],
      BisectBatchOnFunctionError: [],
      DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DestinationConfig"),
      DocumentDBEventSourceConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DocumentDBEventSourceConfig"),
      Enabled: [],
      FilterCriteria: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FilterCriteria"),
      FunctionName: [],
      FunctionResponseTypes: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FunctionResponseTypes"),
      KMSKeyArn: [],
      MaximumBatchingWindowInSeconds: [],
      MaximumRecordAgeInSeconds: [],
      MaximumRetryAttempts: [],
      MetricsConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "MetricsConfig"),
      ParallelizationFactor: [],
      ProvisionedPollerConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ProvisionedPollerConfig"),
      ScalingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ScalingConfig"),
      SourceAccessConfigurations: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SourceAccessConfigurations"),
      TumblingWindowInSeconds: []
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_UpdateEventSourceMappingCommand");
  var se_UpdateFunctionCodeCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/code");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      Architectures: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Architectures"),
      DryRun: [],
      ImageUri: [],
      Publish: [],
      RevisionId: [],
      S3Bucket: [],
      S3Key: [],
      S3ObjectVersion: [],
      SourceKMSKeyArn: [],
      ZipFile: /* @__PURE__ */ __name((_) => context.base64Encoder(_), "ZipFile")
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_UpdateFunctionCodeCommand");
  var se_UpdateFunctionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2015-03-31/functions/{FunctionName}/configuration");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      DeadLetterConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DeadLetterConfig"),
      Description: [],
      Environment: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Environment"),
      EphemeralStorage: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "EphemeralStorage"),
      FileSystemConfigs: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "FileSystemConfigs"),
      Handler: [],
      ImageConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "ImageConfig"),
      KMSKeyArn: [],
      Layers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Layers"),
      LoggingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "LoggingConfig"),
      MemorySize: [],
      RevisionId: [],
      Role: [],
      Runtime: [],
      SnapStart: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "SnapStart"),
      Timeout: [],
      TracingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "TracingConfig"),
      VpcConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "VpcConfig")
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_UpdateFunctionConfigurationCommand");
  var se_UpdateFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2019-09-25/functions/{FunctionName}/event-invoke-config");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "DestinationConfig"),
      MaximumEventAgeInSeconds: [],
      MaximumRetryAttempts: []
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_UpdateFunctionEventInvokeConfigCommand");
  var se_UpdateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/json"
    };
    b.bp("/2021-10-31/functions/{FunctionName}/url");
    b.p("FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = (0, import_smithy_client.map)({
      [_Q]: [, input[_Q]]
    });
    let body;
    body = JSON.stringify((0, import_smithy_client.take)(input, {
      AuthType: [],
      Cors: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "Cors"),
      InvokeMode: []
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_UpdateFunctionUrlConfigCommand");
  var de_AddLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      RevisionId: import_smithy_client.expectString,
      Statement: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_AddLayerVersionPermissionCommand");
  var de_AddPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Statement: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_AddPermissionCommand");
  var de_CreateAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AliasArn: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      FunctionVersion: import_smithy_client.expectString,
      Name: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), "RoutingConfig")
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateAliasCommand");
  var de_CreateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateCodeSigningConfigCommand");
  var de_CreateEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
      BatchSize: import_smithy_client.expectInt32,
      BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
      DestinationConfig: import_smithy_client._json,
      DocumentDBEventSourceConfig: import_smithy_client._json,
      EventSourceArn: import_smithy_client.expectString,
      EventSourceMappingArn: import_smithy_client.expectString,
      FilterCriteria: import_smithy_client._json,
      FilterCriteriaError: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionResponseTypes: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      LastProcessingResult: import_smithy_client.expectString,
      MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
      MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32,
      MetricsConfig: import_smithy_client._json,
      ParallelizationFactor: import_smithy_client.expectInt32,
      ProvisionedPollerConfig: import_smithy_client._json,
      Queues: import_smithy_client._json,
      ScalingConfig: import_smithy_client._json,
      SelfManagedEventSource: import_smithy_client._json,
      SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
      SourceAccessConfigurations: import_smithy_client._json,
      StartingPosition: import_smithy_client.expectString,
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "StartingPositionTimestamp"),
      State: import_smithy_client.expectString,
      StateTransitionReason: import_smithy_client.expectString,
      Topics: import_smithy_client._json,
      TumblingWindowInSeconds: import_smithy_client.expectInt32,
      UUID: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateEventSourceMappingCommand");
  var de_CreateFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Architectures: import_smithy_client._json,
      CodeSha256: import_smithy_client.expectString,
      CodeSize: import_smithy_client.expectLong,
      DeadLetterConfig: import_smithy_client._json,
      Description: import_smithy_client.expectString,
      Environment: import_smithy_client._json,
      EphemeralStorage: import_smithy_client._json,
      FileSystemConfigs: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString,
      Handler: import_smithy_client.expectString,
      ImageConfigResponse: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: import_smithy_client.expectString,
      LastUpdateStatus: import_smithy_client.expectString,
      LastUpdateStatusReason: import_smithy_client.expectString,
      LastUpdateStatusReasonCode: import_smithy_client.expectString,
      Layers: import_smithy_client._json,
      LoggingConfig: import_smithy_client._json,
      MasterArn: import_smithy_client.expectString,
      MemorySize: import_smithy_client.expectInt32,
      PackageType: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      Role: import_smithy_client.expectString,
      Runtime: import_smithy_client.expectString,
      RuntimeVersionConfig: import_smithy_client._json,
      SigningJobArn: import_smithy_client.expectString,
      SigningProfileVersionArn: import_smithy_client.expectString,
      SnapStart: import_smithy_client._json,
      State: import_smithy_client.expectString,
      StateReason: import_smithy_client.expectString,
      StateReasonCode: import_smithy_client.expectString,
      Timeout: import_smithy_client.expectInt32,
      TracingConfig: import_smithy_client._json,
      Version: import_smithy_client.expectString,
      VpcConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateFunctionCommand");
  var de_CreateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AuthType: import_smithy_client.expectString,
      Cors: import_smithy_client._json,
      CreationTime: import_smithy_client.expectString,
      FunctionArn: import_smithy_client.expectString,
      FunctionUrl: import_smithy_client.expectString,
      InvokeMode: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_CreateFunctionUrlConfigCommand");
  var de_DeleteAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteAliasCommand");
  var de_DeleteCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteCodeSigningConfigCommand");
  var de_DeleteEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
      BatchSize: import_smithy_client.expectInt32,
      BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
      DestinationConfig: import_smithy_client._json,
      DocumentDBEventSourceConfig: import_smithy_client._json,
      EventSourceArn: import_smithy_client.expectString,
      EventSourceMappingArn: import_smithy_client.expectString,
      FilterCriteria: import_smithy_client._json,
      FilterCriteriaError: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionResponseTypes: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      LastProcessingResult: import_smithy_client.expectString,
      MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
      MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32,
      MetricsConfig: import_smithy_client._json,
      ParallelizationFactor: import_smithy_client.expectInt32,
      ProvisionedPollerConfig: import_smithy_client._json,
      Queues: import_smithy_client._json,
      ScalingConfig: import_smithy_client._json,
      SelfManagedEventSource: import_smithy_client._json,
      SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
      SourceAccessConfigurations: import_smithy_client._json,
      StartingPosition: import_smithy_client.expectString,
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "StartingPositionTimestamp"),
      State: import_smithy_client.expectString,
      StateTransitionReason: import_smithy_client.expectString,
      Topics: import_smithy_client._json,
      TumblingWindowInSeconds: import_smithy_client.expectInt32,
      UUID: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_DeleteEventSourceMappingCommand");
  var de_DeleteFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteFunctionCommand");
  var de_DeleteFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteFunctionCodeSigningConfigCommand");
  var de_DeleteFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteFunctionConcurrencyCommand");
  var de_DeleteFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteFunctionEventInvokeConfigCommand");
  var de_DeleteFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteFunctionUrlConfigCommand");
  var de_DeleteLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteLayerVersionCommand");
  var de_DeleteProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteProvisionedConcurrencyConfigCommand");
  var de_GetAccountSettingsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AccountLimit: import_smithy_client._json,
      AccountUsage: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetAccountSettingsCommand");
  var de_GetAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AliasArn: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      FunctionVersion: import_smithy_client.expectString,
      Name: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), "RoutingConfig")
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetAliasCommand");
  var de_GetCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetCodeSigningConfigCommand");
  var de_GetEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
      BatchSize: import_smithy_client.expectInt32,
      BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
      DestinationConfig: import_smithy_client._json,
      DocumentDBEventSourceConfig: import_smithy_client._json,
      EventSourceArn: import_smithy_client.expectString,
      EventSourceMappingArn: import_smithy_client.expectString,
      FilterCriteria: import_smithy_client._json,
      FilterCriteriaError: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionResponseTypes: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      LastProcessingResult: import_smithy_client.expectString,
      MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
      MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32,
      MetricsConfig: import_smithy_client._json,
      ParallelizationFactor: import_smithy_client.expectInt32,
      ProvisionedPollerConfig: import_smithy_client._json,
      Queues: import_smithy_client._json,
      ScalingConfig: import_smithy_client._json,
      SelfManagedEventSource: import_smithy_client._json,
      SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
      SourceAccessConfigurations: import_smithy_client._json,
      StartingPosition: import_smithy_client.expectString,
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "StartingPositionTimestamp"),
      State: import_smithy_client.expectString,
      StateTransitionReason: import_smithy_client.expectString,
      Topics: import_smithy_client._json,
      TumblingWindowInSeconds: import_smithy_client.expectInt32,
      UUID: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetEventSourceMappingCommand");
  var de_GetFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Code: import_smithy_client._json,
      Concurrency: import_smithy_client._json,
      Configuration: import_smithy_client._json,
      Tags: import_smithy_client._json,
      TagsError: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionCommand");
  var de_GetFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfigArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionCodeSigningConfigCommand");
  var de_GetFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      ReservedConcurrentExecutions: import_smithy_client.expectInt32
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionConcurrencyCommand");
  var de_GetFunctionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Architectures: import_smithy_client._json,
      CodeSha256: import_smithy_client.expectString,
      CodeSize: import_smithy_client.expectLong,
      DeadLetterConfig: import_smithy_client._json,
      Description: import_smithy_client.expectString,
      Environment: import_smithy_client._json,
      EphemeralStorage: import_smithy_client._json,
      FileSystemConfigs: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString,
      Handler: import_smithy_client.expectString,
      ImageConfigResponse: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: import_smithy_client.expectString,
      LastUpdateStatus: import_smithy_client.expectString,
      LastUpdateStatusReason: import_smithy_client.expectString,
      LastUpdateStatusReasonCode: import_smithy_client.expectString,
      Layers: import_smithy_client._json,
      LoggingConfig: import_smithy_client._json,
      MasterArn: import_smithy_client.expectString,
      MemorySize: import_smithy_client.expectInt32,
      PackageType: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      Role: import_smithy_client.expectString,
      Runtime: import_smithy_client.expectString,
      RuntimeVersionConfig: import_smithy_client._json,
      SigningJobArn: import_smithy_client.expectString,
      SigningProfileVersionArn: import_smithy_client.expectString,
      SnapStart: import_smithy_client._json,
      State: import_smithy_client.expectString,
      StateReason: import_smithy_client.expectString,
      StateReasonCode: import_smithy_client.expectString,
      Timeout: import_smithy_client.expectInt32,
      TracingConfig: import_smithy_client._json,
      Version: import_smithy_client.expectString,
      VpcConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionConfigurationCommand");
  var de_GetFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      DestinationConfig: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionEventInvokeConfigCommand");
  var de_GetFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      RecursiveLoop: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionRecursionConfigCommand");
  var de_GetFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AuthType: import_smithy_client.expectString,
      Cors: import_smithy_client._json,
      CreationTime: import_smithy_client.expectString,
      FunctionArn: import_smithy_client.expectString,
      FunctionUrl: import_smithy_client.expectString,
      InvokeMode: import_smithy_client.expectString,
      LastModifiedTime: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetFunctionUrlConfigCommand");
  var de_GetLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CompatibleArchitectures: import_smithy_client._json,
      CompatibleRuntimes: import_smithy_client._json,
      Content: import_smithy_client._json,
      CreatedDate: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      LayerArn: import_smithy_client.expectString,
      LayerVersionArn: import_smithy_client.expectString,
      LicenseInfo: import_smithy_client.expectString,
      Version: import_smithy_client.expectLong
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetLayerVersionCommand");
  var de_GetLayerVersionByArnCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CompatibleArchitectures: import_smithy_client._json,
      CompatibleRuntimes: import_smithy_client._json,
      Content: import_smithy_client._json,
      CreatedDate: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      LayerArn: import_smithy_client.expectString,
      LayerVersionArn: import_smithy_client.expectString,
      LicenseInfo: import_smithy_client.expectString,
      Version: import_smithy_client.expectLong
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetLayerVersionByArnCommand");
  var de_GetLayerVersionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Policy: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetLayerVersionPolicyCommand");
  var de_GetPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Policy: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetPolicyCommand");
  var de_GetProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AllocatedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      AvailableProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      LastModified: import_smithy_client.expectString,
      RequestedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      Status: import_smithy_client.expectString,
      StatusReason: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetProvisionedConcurrencyConfigCommand");
  var de_GetRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      FunctionArn: import_smithy_client.expectString,
      RuntimeVersionArn: import_smithy_client.expectString,
      UpdateRuntimeOn: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetRuntimeManagementConfigCommand");
  var de_InvokeCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_FE]: [, output.headers[_xafe]],
      [_LR]: [, output.headers[_xalr]],
      [_EV]: [, output.headers[_xaev]]
    });
    const data = await (0, import_smithy_client.collectBody)(output.body, context);
    contents.Payload = data;
    (0, import_smithy_client.map)(contents, {
      StatusCode: [, output.statusCode]
    });
    return contents;
  }, "de_InvokeCommand");
  var de_InvokeAsyncCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    (0, import_smithy_client.map)(contents, {
      Status: [, output.statusCode]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_InvokeAsyncCommand");
  var de_InvokeWithResponseStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_EV]: [, output.headers[_xaev]],
      [_RSCT]: [, output.headers[_ct]]
    });
    const data = output.body;
    contents.EventStream = de_InvokeWithResponseStreamResponseEvent(data, context);
    (0, import_smithy_client.map)(contents, {
      StatusCode: [, output.statusCode]
    });
    return contents;
  }, "de_InvokeWithResponseStreamCommand");
  var de_ListAliasesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Aliases: /* @__PURE__ */ __name((_) => de_AliasList(_, context), "Aliases"),
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListAliasesCommand");
  var de_ListCodeSigningConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfigs: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListCodeSigningConfigsCommand");
  var de_ListEventSourceMappingsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      EventSourceMappings: /* @__PURE__ */ __name((_) => de_EventSourceMappingsList(_, context), "EventSourceMappings"),
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListEventSourceMappingsCommand");
  var de_ListFunctionEventInvokeConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      FunctionEventInvokeConfigs: /* @__PURE__ */ __name((_) => de_FunctionEventInvokeConfigList(_, context), "FunctionEventInvokeConfigs"),
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListFunctionEventInvokeConfigsCommand");
  var de_ListFunctionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Functions: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListFunctionsCommand");
  var de_ListFunctionsByCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      FunctionArns: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListFunctionsByCodeSigningConfigCommand");
  var de_ListFunctionUrlConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      FunctionUrlConfigs: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListFunctionUrlConfigsCommand");
  var de_ListLayersCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Layers: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListLayersCommand");
  var de_ListLayerVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      LayerVersions: import_smithy_client._json,
      NextMarker: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListLayerVersionsCommand");
  var de_ListProvisionedConcurrencyConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      NextMarker: import_smithy_client.expectString,
      ProvisionedConcurrencyConfigs: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListProvisionedConcurrencyConfigsCommand");
  var de_ListTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Tags: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListTagsCommand");
  var de_ListVersionsByFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      NextMarker: import_smithy_client.expectString,
      Versions: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListVersionsByFunctionCommand");
  var de_PublishLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CompatibleArchitectures: import_smithy_client._json,
      CompatibleRuntimes: import_smithy_client._json,
      Content: import_smithy_client._json,
      CreatedDate: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      LayerArn: import_smithy_client.expectString,
      LayerVersionArn: import_smithy_client.expectString,
      LicenseInfo: import_smithy_client.expectString,
      Version: import_smithy_client.expectLong
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PublishLayerVersionCommand");
  var de_PublishVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Architectures: import_smithy_client._json,
      CodeSha256: import_smithy_client.expectString,
      CodeSize: import_smithy_client.expectLong,
      DeadLetterConfig: import_smithy_client._json,
      Description: import_smithy_client.expectString,
      Environment: import_smithy_client._json,
      EphemeralStorage: import_smithy_client._json,
      FileSystemConfigs: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString,
      Handler: import_smithy_client.expectString,
      ImageConfigResponse: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: import_smithy_client.expectString,
      LastUpdateStatus: import_smithy_client.expectString,
      LastUpdateStatusReason: import_smithy_client.expectString,
      LastUpdateStatusReasonCode: import_smithy_client.expectString,
      Layers: import_smithy_client._json,
      LoggingConfig: import_smithy_client._json,
      MasterArn: import_smithy_client.expectString,
      MemorySize: import_smithy_client.expectInt32,
      PackageType: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      Role: import_smithy_client.expectString,
      Runtime: import_smithy_client.expectString,
      RuntimeVersionConfig: import_smithy_client._json,
      SigningJobArn: import_smithy_client.expectString,
      SigningProfileVersionArn: import_smithy_client.expectString,
      SnapStart: import_smithy_client._json,
      State: import_smithy_client.expectString,
      StateReason: import_smithy_client.expectString,
      StateReasonCode: import_smithy_client.expectString,
      Timeout: import_smithy_client.expectInt32,
      TracingConfig: import_smithy_client._json,
      Version: import_smithy_client.expectString,
      VpcConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PublishVersionCommand");
  var de_PutFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfigArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutFunctionCodeSigningConfigCommand");
  var de_PutFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      ReservedConcurrentExecutions: import_smithy_client.expectInt32
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutFunctionConcurrencyCommand");
  var de_PutFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      DestinationConfig: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutFunctionEventInvokeConfigCommand");
  var de_PutFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      RecursiveLoop: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutFunctionRecursionConfigCommand");
  var de_PutProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AllocatedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      AvailableProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      LastModified: import_smithy_client.expectString,
      RequestedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
      Status: import_smithy_client.expectString,
      StatusReason: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutProvisionedConcurrencyConfigCommand");
  var de_PutRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      FunctionArn: import_smithy_client.expectString,
      RuntimeVersionArn: import_smithy_client.expectString,
      UpdateRuntimeOn: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_PutRuntimeManagementConfigCommand");
  var de_RemoveLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_RemoveLayerVersionPermissionCommand");
  var de_RemovePermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_RemovePermissionCommand");
  var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_TagResourceCommand");
  var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_UntagResourceCommand");
  var de_UpdateAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AliasArn: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      FunctionVersion: import_smithy_client.expectString,
      Name: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), "RoutingConfig")
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateAliasCommand");
  var de_UpdateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      CodeSigningConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateCodeSigningConfigCommand");
  var de_UpdateEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
      BatchSize: import_smithy_client.expectInt32,
      BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
      DestinationConfig: import_smithy_client._json,
      DocumentDBEventSourceConfig: import_smithy_client._json,
      EventSourceArn: import_smithy_client.expectString,
      EventSourceMappingArn: import_smithy_client.expectString,
      FilterCriteria: import_smithy_client._json,
      FilterCriteriaError: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionResponseTypes: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      LastProcessingResult: import_smithy_client.expectString,
      MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
      MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32,
      MetricsConfig: import_smithy_client._json,
      ParallelizationFactor: import_smithy_client.expectInt32,
      ProvisionedPollerConfig: import_smithy_client._json,
      Queues: import_smithy_client._json,
      ScalingConfig: import_smithy_client._json,
      SelfManagedEventSource: import_smithy_client._json,
      SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
      SourceAccessConfigurations: import_smithy_client._json,
      StartingPosition: import_smithy_client.expectString,
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "StartingPositionTimestamp"),
      State: import_smithy_client.expectString,
      StateTransitionReason: import_smithy_client.expectString,
      Topics: import_smithy_client._json,
      TumblingWindowInSeconds: import_smithy_client.expectInt32,
      UUID: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateEventSourceMappingCommand");
  var de_UpdateFunctionCodeCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Architectures: import_smithy_client._json,
      CodeSha256: import_smithy_client.expectString,
      CodeSize: import_smithy_client.expectLong,
      DeadLetterConfig: import_smithy_client._json,
      Description: import_smithy_client.expectString,
      Environment: import_smithy_client._json,
      EphemeralStorage: import_smithy_client._json,
      FileSystemConfigs: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString,
      Handler: import_smithy_client.expectString,
      ImageConfigResponse: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: import_smithy_client.expectString,
      LastUpdateStatus: import_smithy_client.expectString,
      LastUpdateStatusReason: import_smithy_client.expectString,
      LastUpdateStatusReasonCode: import_smithy_client.expectString,
      Layers: import_smithy_client._json,
      LoggingConfig: import_smithy_client._json,
      MasterArn: import_smithy_client.expectString,
      MemorySize: import_smithy_client.expectInt32,
      PackageType: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      Role: import_smithy_client.expectString,
      Runtime: import_smithy_client.expectString,
      RuntimeVersionConfig: import_smithy_client._json,
      SigningJobArn: import_smithy_client.expectString,
      SigningProfileVersionArn: import_smithy_client.expectString,
      SnapStart: import_smithy_client._json,
      State: import_smithy_client.expectString,
      StateReason: import_smithy_client.expectString,
      StateReasonCode: import_smithy_client.expectString,
      Timeout: import_smithy_client.expectInt32,
      TracingConfig: import_smithy_client._json,
      Version: import_smithy_client.expectString,
      VpcConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateFunctionCodeCommand");
  var de_UpdateFunctionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      Architectures: import_smithy_client._json,
      CodeSha256: import_smithy_client.expectString,
      CodeSize: import_smithy_client.expectLong,
      DeadLetterConfig: import_smithy_client._json,
      Description: import_smithy_client.expectString,
      Environment: import_smithy_client._json,
      EphemeralStorage: import_smithy_client._json,
      FileSystemConfigs: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionName: import_smithy_client.expectString,
      Handler: import_smithy_client.expectString,
      ImageConfigResponse: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: import_smithy_client.expectString,
      LastUpdateStatus: import_smithy_client.expectString,
      LastUpdateStatusReason: import_smithy_client.expectString,
      LastUpdateStatusReasonCode: import_smithy_client.expectString,
      Layers: import_smithy_client._json,
      LoggingConfig: import_smithy_client._json,
      MasterArn: import_smithy_client.expectString,
      MemorySize: import_smithy_client.expectInt32,
      PackageType: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      Role: import_smithy_client.expectString,
      Runtime: import_smithy_client.expectString,
      RuntimeVersionConfig: import_smithy_client._json,
      SigningJobArn: import_smithy_client.expectString,
      SigningProfileVersionArn: import_smithy_client.expectString,
      SnapStart: import_smithy_client._json,
      State: import_smithy_client.expectString,
      StateReason: import_smithy_client.expectString,
      StateReasonCode: import_smithy_client.expectString,
      Timeout: import_smithy_client.expectInt32,
      TracingConfig: import_smithy_client._json,
      Version: import_smithy_client.expectString,
      VpcConfig: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateFunctionConfigurationCommand");
  var de_UpdateFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      DestinationConfig: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateFunctionEventInvokeConfigCommand");
  var de_UpdateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      AuthType: import_smithy_client.expectString,
      Cors: import_smithy_client._json,
      CreationTime: import_smithy_client.expectString,
      FunctionArn: import_smithy_client.expectString,
      FunctionUrl: import_smithy_client.expectString,
      InvokeMode: import_smithy_client.expectString,
      LastModifiedTime: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_UpdateFunctionUrlConfigCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidParameterValueException":
      case "com.amazonaws.lambda#InvalidParameterValueException":
        throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
      case "PolicyLengthExceededException":
      case "com.amazonaws.lambda#PolicyLengthExceededException":
        throw await de_PolicyLengthExceededExceptionRes(parsedOutput, context);
      case "PreconditionFailedException":
      case "com.amazonaws.lambda#PreconditionFailedException":
        throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
      case "ResourceConflictException":
      case "com.amazonaws.lambda#ResourceConflictException":
        throw await de_ResourceConflictExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.lambda#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "ServiceException":
      case "com.amazonaws.lambda#ServiceException":
        throw await de_ServiceExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.lambda#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "CodeSigningConfigNotFoundException":
      case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
        throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
      case "CodeStorageExceededException":
      case "com.amazonaws.lambda#CodeStorageExceededException":
        throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
      case "CodeVerificationFailedException":
      case "com.amazonaws.lambda#CodeVerificationFailedException":
        throw await de_CodeVerificationFailedExceptionRes(parsedOutput, context);
      case "InvalidCodeSignatureException":
      case "com.amazonaws.lambda#InvalidCodeSignatureException":
        throw await de_InvalidCodeSignatureExceptionRes(parsedOutput, context);
      case "ResourceInUseException":
      case "com.amazonaws.lambda#ResourceInUseException":
        throw await de_ResourceInUseExceptionRes(parsedOutput, context);
      case "ProvisionedConcurrencyConfigNotFoundException":
      case "com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException":
        throw await de_ProvisionedConcurrencyConfigNotFoundExceptionRes(parsedOutput, context);
      case "EC2AccessDeniedException":
      case "com.amazonaws.lambda#EC2AccessDeniedException":
        throw await de_EC2AccessDeniedExceptionRes(parsedOutput, context);
      case "EC2ThrottledException":
      case "com.amazonaws.lambda#EC2ThrottledException":
        throw await de_EC2ThrottledExceptionRes(parsedOutput, context);
      case "EC2UnexpectedException":
      case "com.amazonaws.lambda#EC2UnexpectedException":
        throw await de_EC2UnexpectedExceptionRes(parsedOutput, context);
      case "EFSIOException":
      case "com.amazonaws.lambda#EFSIOException":
        throw await de_EFSIOExceptionRes(parsedOutput, context);
      case "EFSMountConnectivityException":
      case "com.amazonaws.lambda#EFSMountConnectivityException":
        throw await de_EFSMountConnectivityExceptionRes(parsedOutput, context);
      case "EFSMountFailureException":
      case "com.amazonaws.lambda#EFSMountFailureException":
        throw await de_EFSMountFailureExceptionRes(parsedOutput, context);
      case "EFSMountTimeoutException":
      case "com.amazonaws.lambda#EFSMountTimeoutException":
        throw await de_EFSMountTimeoutExceptionRes(parsedOutput, context);
      case "ENILimitReachedException":
      case "com.amazonaws.lambda#ENILimitReachedException":
        throw await de_ENILimitReachedExceptionRes(parsedOutput, context);
      case "InvalidRequestContentException":
      case "com.amazonaws.lambda#InvalidRequestContentException":
        throw await de_InvalidRequestContentExceptionRes(parsedOutput, context);
      case "InvalidRuntimeException":
      case "com.amazonaws.lambda#InvalidRuntimeException":
        throw await de_InvalidRuntimeExceptionRes(parsedOutput, context);
      case "InvalidSecurityGroupIDException":
      case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
        throw await de_InvalidSecurityGroupIDExceptionRes(parsedOutput, context);
      case "InvalidSubnetIDException":
      case "com.amazonaws.lambda#InvalidSubnetIDException":
        throw await de_InvalidSubnetIDExceptionRes(parsedOutput, context);
      case "InvalidZipFileException":
      case "com.amazonaws.lambda#InvalidZipFileException":
        throw await de_InvalidZipFileExceptionRes(parsedOutput, context);
      case "KMSAccessDeniedException":
      case "com.amazonaws.lambda#KMSAccessDeniedException":
        throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);
      case "KMSDisabledException":
      case "com.amazonaws.lambda#KMSDisabledException":
        throw await de_KMSDisabledExceptionRes(parsedOutput, context);
      case "KMSInvalidStateException":
      case "com.amazonaws.lambda#KMSInvalidStateException":
        throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
      case "KMSNotFoundException":
      case "com.amazonaws.lambda#KMSNotFoundException":
        throw await de_KMSNotFoundExceptionRes(parsedOutput, context);
      case "RecursiveInvocationException":
      case "com.amazonaws.lambda#RecursiveInvocationException":
        throw await de_RecursiveInvocationExceptionRes(parsedOutput, context);
      case "RequestTooLargeException":
      case "com.amazonaws.lambda#RequestTooLargeException":
        throw await de_RequestTooLargeExceptionRes(parsedOutput, context);
      case "ResourceNotReadyException":
      case "com.amazonaws.lambda#ResourceNotReadyException":
        throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
      case "SnapStartException":
      case "com.amazonaws.lambda#SnapStartException":
        throw await de_SnapStartExceptionRes(parsedOutput, context);
      case "SnapStartNotReadyException":
      case "com.amazonaws.lambda#SnapStartNotReadyException":
        throw await de_SnapStartNotReadyExceptionRes(parsedOutput, context);
      case "SnapStartTimeoutException":
      case "com.amazonaws.lambda#SnapStartTimeoutException":
        throw await de_SnapStartTimeoutExceptionRes(parsedOutput, context);
      case "SubnetIPAddressLimitReachedException":
      case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
        throw await de_SubnetIPAddressLimitReachedExceptionRes(parsedOutput, context);
      case "UnsupportedMediaTypeException":
      case "com.amazonaws.lambda#UnsupportedMediaTypeException":
        throw await de_UnsupportedMediaTypeExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(LambdaServiceException);
  var de_CodeSigningConfigNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new CodeSigningConfigNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_CodeSigningConfigNotFoundExceptionRes");
  var de_CodeStorageExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new CodeStorageExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_CodeStorageExceededExceptionRes");
  var de_CodeVerificationFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new CodeVerificationFailedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_CodeVerificationFailedExceptionRes");
  var de_EC2AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EC2AccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EC2AccessDeniedExceptionRes");
  var de_EC2ThrottledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EC2ThrottledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EC2ThrottledExceptionRes");
  var de_EC2UnexpectedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      EC2ErrorCode: import_smithy_client.expectString,
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EC2UnexpectedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EC2UnexpectedExceptionRes");
  var de_EFSIOExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EFSIOException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EFSIOExceptionRes");
  var de_EFSMountConnectivityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EFSMountConnectivityException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EFSMountConnectivityExceptionRes");
  var de_EFSMountFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EFSMountFailureException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EFSMountFailureExceptionRes");
  var de_EFSMountTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new EFSMountTimeoutException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EFSMountTimeoutExceptionRes");
  var de_ENILimitReachedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ENILimitReachedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ENILimitReachedExceptionRes");
  var de_InvalidCodeSignatureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidCodeSignatureException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidCodeSignatureExceptionRes");
  var de_InvalidParameterValueExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterValueException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidParameterValueExceptionRes");
  var de_InvalidRequestContentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestContentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRequestContentExceptionRes");
  var de_InvalidRuntimeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRuntimeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRuntimeExceptionRes");
  var de_InvalidSecurityGroupIDExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidSecurityGroupIDException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidSecurityGroupIDExceptionRes");
  var de_InvalidSubnetIDExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidSubnetIDException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidSubnetIDExceptionRes");
  var de_InvalidZipFileExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidZipFileException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidZipFileExceptionRes");
  var de_KMSAccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new KMSAccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_KMSAccessDeniedExceptionRes");
  var de_KMSDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new KMSDisabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_KMSDisabledExceptionRes");
  var de_KMSInvalidStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new KMSInvalidStateException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_KMSInvalidStateExceptionRes");
  var de_KMSNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new KMSNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_KMSNotFoundExceptionRes");
  var de_PolicyLengthExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new PolicyLengthExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_PolicyLengthExceededExceptionRes");
  var de_PreconditionFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new PreconditionFailedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_PreconditionFailedExceptionRes");
  var de_ProvisionedConcurrencyConfigNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ProvisionedConcurrencyConfigNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ProvisionedConcurrencyConfigNotFoundExceptionRes");
  var de_RecursiveInvocationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new RecursiveInvocationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_RecursiveInvocationExceptionRes");
  var de_RequestTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new RequestTooLargeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_RequestTooLargeExceptionRes");
  var de_ResourceConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceConflictExceptionRes");
  var de_ResourceInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceInUseExceptionRes");
  var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceNotFoundExceptionRes");
  var de_ResourceNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotReadyException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceNotReadyExceptionRes");
  var de_ServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ServiceException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ServiceExceptionRes");
  var de_SnapStartExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new SnapStartException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_SnapStartExceptionRes");
  var de_SnapStartNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new SnapStartNotReadyException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_SnapStartNotReadyExceptionRes");
  var de_SnapStartTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new SnapStartTimeoutException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_SnapStartTimeoutExceptionRes");
  var de_SubnetIPAddressLimitReachedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Message: import_smithy_client.expectString,
      Type: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new SubnetIPAddressLimitReachedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_SubnetIPAddressLimitReachedExceptionRes");
  var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({
      [_rAS]: [, parsedOutput.headers[_ra]]
    });
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Reason: import_smithy_client.expectString,
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_TooManyRequestsExceptionRes");
  var de_UnsupportedMediaTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      Type: import_smithy_client.expectString,
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedMediaTypeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_UnsupportedMediaTypeExceptionRes");
  var de_InvokeWithResponseStreamResponseEvent = /* @__PURE__ */ __name((output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
      if (event["PayloadChunk"] != null) {
        return {
          PayloadChunk: await de_InvokeResponseStreamUpdate_event(event["PayloadChunk"], context)
        };
      }
      if (event["InvokeComplete"] != null) {
        return {
          InvokeComplete: await de_InvokeWithResponseStreamCompleteEvent_event(event["InvokeComplete"], context)
        };
      }
      return { $unknown: output };
    });
  }, "de_InvokeWithResponseStreamResponseEvent");
  var de_InvokeResponseStreamUpdate_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
  }, "de_InvokeResponseStreamUpdate_event");
  var de_InvokeWithResponseStreamCompleteEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    Object.assign(contents, (0, import_smithy_client._json)(data));
    return contents;
  }, "de_InvokeWithResponseStreamCompleteEvent_event");
  var se_AdditionalVersionWeights = /* @__PURE__ */ __name((input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
      if (value === null) {
        return acc;
      }
      acc[key] = (0, import_smithy_client.serializeFloat)(value);
      return acc;
    }, {});
  }, "se_AdditionalVersionWeights");
  var se_AliasRoutingConfiguration = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      AdditionalVersionWeights: /* @__PURE__ */ __name((_) => se_AdditionalVersionWeights(_, context), "AdditionalVersionWeights")
    });
  }, "se_AliasRoutingConfiguration");
  var se_FunctionCode = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      ImageUri: [],
      S3Bucket: [],
      S3Key: [],
      S3ObjectVersion: [],
      SourceKMSKeyArn: [],
      ZipFile: context.base64Encoder
    });
  }, "se_FunctionCode");
  var se_LayerVersionContentInput = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      S3Bucket: [],
      S3Key: [],
      S3ObjectVersion: [],
      ZipFile: context.base64Encoder
    });
  }, "se_LayerVersionContentInput");
  var de_AdditionalVersionWeights = /* @__PURE__ */ __name((output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
      if (value === null) {
        return acc;
      }
      acc[key] = (0, import_smithy_client.limitedParseDouble)(value);
      return acc;
    }, {});
  }, "de_AdditionalVersionWeights");
  var de_AliasConfiguration = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      AliasArn: import_smithy_client.expectString,
      Description: import_smithy_client.expectString,
      FunctionVersion: import_smithy_client.expectString,
      Name: import_smithy_client.expectString,
      RevisionId: import_smithy_client.expectString,
      RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), "RoutingConfig")
    });
  }, "de_AliasConfiguration");
  var de_AliasList = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_AliasConfiguration(entry, context);
    });
    return retVal;
  }, "de_AliasList");
  var de_AliasRoutingConfiguration = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      AdditionalVersionWeights: /* @__PURE__ */ __name((_) => de_AdditionalVersionWeights(_, context), "AdditionalVersionWeights")
    });
  }, "de_AliasRoutingConfiguration");
  var de_EventSourceMappingConfiguration = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
      BatchSize: import_smithy_client.expectInt32,
      BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
      DestinationConfig: import_smithy_client._json,
      DocumentDBEventSourceConfig: import_smithy_client._json,
      EventSourceArn: import_smithy_client.expectString,
      EventSourceMappingArn: import_smithy_client.expectString,
      FilterCriteria: import_smithy_client._json,
      FilterCriteriaError: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      FunctionResponseTypes: import_smithy_client._json,
      KMSKeyArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      LastProcessingResult: import_smithy_client.expectString,
      MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
      MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32,
      MetricsConfig: import_smithy_client._json,
      ParallelizationFactor: import_smithy_client.expectInt32,
      ProvisionedPollerConfig: import_smithy_client._json,
      Queues: import_smithy_client._json,
      ScalingConfig: import_smithy_client._json,
      SelfManagedEventSource: import_smithy_client._json,
      SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
      SourceAccessConfigurations: import_smithy_client._json,
      StartingPosition: import_smithy_client.expectString,
      StartingPositionTimestamp: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "StartingPositionTimestamp"),
      State: import_smithy_client.expectString,
      StateTransitionReason: import_smithy_client.expectString,
      Topics: import_smithy_client._json,
      TumblingWindowInSeconds: import_smithy_client.expectInt32,
      UUID: import_smithy_client.expectString
    });
  }, "de_EventSourceMappingConfiguration");
  var de_EventSourceMappingsList = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_EventSourceMappingConfiguration(entry, context);
    });
    return retVal;
  }, "de_EventSourceMappingsList");
  var de_FunctionEventInvokeConfig = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      DestinationConfig: import_smithy_client._json,
      FunctionArn: import_smithy_client.expectString,
      LastModified: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastModified"),
      MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
      MaximumRetryAttempts: import_smithy_client.expectInt32
    });
  }, "de_FunctionEventInvokeConfig");
  var de_FunctionEventInvokeConfigList = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_FunctionEventInvokeConfig(entry, context);
    });
    return retVal;
  }, "de_FunctionEventInvokeConfigList");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var _A = "Arn";
  var _CA = "CompatibleArchitecture";
  var _CC = "ClientContext";
  var _CR = "CompatibleRuntime";
  var _ESA = "EventSourceArn";
  var _EV = "ExecutedVersion";
  var _FE = "FunctionError";
  var _FN = "FunctionName";
  var _FV = "FunctionVersion";
  var _IT = "InvocationType";
  var _L = "List";
  var _LR = "LogResult";
  var _LT = "LogType";
  var _M = "Marker";
  var _MI = "MaxItems";
  var _MR = "MasterRegion";
  var _Q = "Qualifier";
  var _RI = "RevisionId";
  var _RSCT = "ResponseStreamContentType";
  var _TK = "TagKeys";
  var _ct = "content-type";
  var _f = "find";
  var _rAS = "retryAfterSeconds";
  var _ra = "retry-after";
  var _tK = "tagKeys";
  var _xacc = "x-amz-client-context";
  var _xaev = "x-amz-executed-version";
  var _xafe = "x-amz-function-error";
  var _xait = "x-amz-invocation-type";
  var _xalr = "x-amz-log-result";
  var _xalt = "x-amz-log-type";
  var AddLayerVersionPermissionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "AddLayerVersionPermission", {}).n("LambdaClient", "AddLayerVersionPermissionCommand").f(undefined, undefined).ser(se_AddLayerVersionPermissionCommand).de(de_AddLayerVersionPermissionCommand).build() {
    static {
      __name(this, "AddLayerVersionPermissionCommand");
    }
  };
  var AddPermissionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "AddPermission", {}).n("LambdaClient", "AddPermissionCommand").f(undefined, undefined).ser(se_AddPermissionCommand).de(de_AddPermissionCommand).build() {
    static {
      __name(this, "AddPermissionCommand");
    }
  };
  var CreateAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "CreateAlias", {}).n("LambdaClient", "CreateAliasCommand").f(undefined, undefined).ser(se_CreateAliasCommand).de(de_CreateAliasCommand).build() {
    static {
      __name(this, "CreateAliasCommand");
    }
  };
  var CreateCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "CreateCodeSigningConfig", {}).n("LambdaClient", "CreateCodeSigningConfigCommand").f(undefined, undefined).ser(se_CreateCodeSigningConfigCommand).de(de_CreateCodeSigningConfigCommand).build() {
    static {
      __name(this, "CreateCodeSigningConfigCommand");
    }
  };
  var CreateEventSourceMappingCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "CreateEventSourceMapping", {}).n("LambdaClient", "CreateEventSourceMappingCommand").f(undefined, undefined).ser(se_CreateEventSourceMappingCommand).de(de_CreateEventSourceMappingCommand).build() {
    static {
      __name(this, "CreateEventSourceMappingCommand");
    }
  };
  var CreateFunctionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "CreateFunction", {}).n("LambdaClient", "CreateFunctionCommand").f(CreateFunctionRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog).ser(se_CreateFunctionCommand).de(de_CreateFunctionCommand).build() {
    static {
      __name(this, "CreateFunctionCommand");
    }
  };
  var CreateFunctionUrlConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "CreateFunctionUrlConfig", {}).n("LambdaClient", "CreateFunctionUrlConfigCommand").f(undefined, undefined).ser(se_CreateFunctionUrlConfigCommand).de(de_CreateFunctionUrlConfigCommand).build() {
    static {
      __name(this, "CreateFunctionUrlConfigCommand");
    }
  };
  var DeleteAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteAlias", {}).n("LambdaClient", "DeleteAliasCommand").f(undefined, undefined).ser(se_DeleteAliasCommand).de(de_DeleteAliasCommand).build() {
    static {
      __name(this, "DeleteAliasCommand");
    }
  };
  var DeleteCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteCodeSigningConfig", {}).n("LambdaClient", "DeleteCodeSigningConfigCommand").f(undefined, undefined).ser(se_DeleteCodeSigningConfigCommand).de(de_DeleteCodeSigningConfigCommand).build() {
    static {
      __name(this, "DeleteCodeSigningConfigCommand");
    }
  };
  var DeleteEventSourceMappingCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteEventSourceMapping", {}).n("LambdaClient", "DeleteEventSourceMappingCommand").f(undefined, undefined).ser(se_DeleteEventSourceMappingCommand).de(de_DeleteEventSourceMappingCommand).build() {
    static {
      __name(this, "DeleteEventSourceMappingCommand");
    }
  };
  var DeleteFunctionCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteFunctionCodeSigningConfig", {}).n("LambdaClient", "DeleteFunctionCodeSigningConfigCommand").f(undefined, undefined).ser(se_DeleteFunctionCodeSigningConfigCommand).de(de_DeleteFunctionCodeSigningConfigCommand).build() {
    static {
      __name(this, "DeleteFunctionCodeSigningConfigCommand");
    }
  };
  var DeleteFunctionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteFunction", {}).n("LambdaClient", "DeleteFunctionCommand").f(undefined, undefined).ser(se_DeleteFunctionCommand).de(de_DeleteFunctionCommand).build() {
    static {
      __name(this, "DeleteFunctionCommand");
    }
  };
  var DeleteFunctionConcurrencyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteFunctionConcurrency", {}).n("LambdaClient", "DeleteFunctionConcurrencyCommand").f(undefined, undefined).ser(se_DeleteFunctionConcurrencyCommand).de(de_DeleteFunctionConcurrencyCommand).build() {
    static {
      __name(this, "DeleteFunctionConcurrencyCommand");
    }
  };
  var DeleteFunctionEventInvokeConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteFunctionEventInvokeConfig", {}).n("LambdaClient", "DeleteFunctionEventInvokeConfigCommand").f(undefined, undefined).ser(se_DeleteFunctionEventInvokeConfigCommand).de(de_DeleteFunctionEventInvokeConfigCommand).build() {
    static {
      __name(this, "DeleteFunctionEventInvokeConfigCommand");
    }
  };
  var DeleteFunctionUrlConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteFunctionUrlConfig", {}).n("LambdaClient", "DeleteFunctionUrlConfigCommand").f(undefined, undefined).ser(se_DeleteFunctionUrlConfigCommand).de(de_DeleteFunctionUrlConfigCommand).build() {
    static {
      __name(this, "DeleteFunctionUrlConfigCommand");
    }
  };
  var DeleteLayerVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteLayerVersion", {}).n("LambdaClient", "DeleteLayerVersionCommand").f(undefined, undefined).ser(se_DeleteLayerVersionCommand).de(de_DeleteLayerVersionCommand).build() {
    static {
      __name(this, "DeleteLayerVersionCommand");
    }
  };
  var DeleteProvisionedConcurrencyConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "DeleteProvisionedConcurrencyConfig", {}).n("LambdaClient", "DeleteProvisionedConcurrencyConfigCommand").f(undefined, undefined).ser(se_DeleteProvisionedConcurrencyConfigCommand).de(de_DeleteProvisionedConcurrencyConfigCommand).build() {
    static {
      __name(this, "DeleteProvisionedConcurrencyConfigCommand");
    }
  };
  var GetAccountSettingsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetAccountSettings", {}).n("LambdaClient", "GetAccountSettingsCommand").f(undefined, undefined).ser(se_GetAccountSettingsCommand).de(de_GetAccountSettingsCommand).build() {
    static {
      __name(this, "GetAccountSettingsCommand");
    }
  };
  var GetAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetAlias", {}).n("LambdaClient", "GetAliasCommand").f(undefined, undefined).ser(se_GetAliasCommand).de(de_GetAliasCommand).build() {
    static {
      __name(this, "GetAliasCommand");
    }
  };
  var GetCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetCodeSigningConfig", {}).n("LambdaClient", "GetCodeSigningConfigCommand").f(undefined, undefined).ser(se_GetCodeSigningConfigCommand).de(de_GetCodeSigningConfigCommand).build() {
    static {
      __name(this, "GetCodeSigningConfigCommand");
    }
  };
  var GetEventSourceMappingCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetEventSourceMapping", {}).n("LambdaClient", "GetEventSourceMappingCommand").f(undefined, undefined).ser(se_GetEventSourceMappingCommand).de(de_GetEventSourceMappingCommand).build() {
    static {
      __name(this, "GetEventSourceMappingCommand");
    }
  };
  var GetFunctionCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionCodeSigningConfig", {}).n("LambdaClient", "GetFunctionCodeSigningConfigCommand").f(undefined, undefined).ser(se_GetFunctionCodeSigningConfigCommand).de(de_GetFunctionCodeSigningConfigCommand).build() {
    static {
      __name(this, "GetFunctionCodeSigningConfigCommand");
    }
  };
  var GetFunctionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunction", {}).n("LambdaClient", "GetFunctionCommand").f(undefined, GetFunctionResponseFilterSensitiveLog).ser(se_GetFunctionCommand).de(de_GetFunctionCommand).build() {
    static {
      __name(this, "GetFunctionCommand");
    }
  };
  var GetFunctionConcurrencyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionConcurrency", {}).n("LambdaClient", "GetFunctionConcurrencyCommand").f(undefined, undefined).ser(se_GetFunctionConcurrencyCommand).de(de_GetFunctionConcurrencyCommand).build() {
    static {
      __name(this, "GetFunctionConcurrencyCommand");
    }
  };
  var GetFunctionConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionConfiguration", {}).n("LambdaClient", "GetFunctionConfigurationCommand").f(undefined, FunctionConfigurationFilterSensitiveLog).ser(se_GetFunctionConfigurationCommand).de(de_GetFunctionConfigurationCommand).build() {
    static {
      __name(this, "GetFunctionConfigurationCommand");
    }
  };
  var GetFunctionEventInvokeConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionEventInvokeConfig", {}).n("LambdaClient", "GetFunctionEventInvokeConfigCommand").f(undefined, undefined).ser(se_GetFunctionEventInvokeConfigCommand).de(de_GetFunctionEventInvokeConfigCommand).build() {
    static {
      __name(this, "GetFunctionEventInvokeConfigCommand");
    }
  };
  var GetFunctionRecursionConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionRecursionConfig", {}).n("LambdaClient", "GetFunctionRecursionConfigCommand").f(undefined, undefined).ser(se_GetFunctionRecursionConfigCommand).de(de_GetFunctionRecursionConfigCommand).build() {
    static {
      __name(this, "GetFunctionRecursionConfigCommand");
    }
  };
  var GetFunctionUrlConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetFunctionUrlConfig", {}).n("LambdaClient", "GetFunctionUrlConfigCommand").f(undefined, undefined).ser(se_GetFunctionUrlConfigCommand).de(de_GetFunctionUrlConfigCommand).build() {
    static {
      __name(this, "GetFunctionUrlConfigCommand");
    }
  };
  var GetLayerVersionByArnCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetLayerVersionByArn", {}).n("LambdaClient", "GetLayerVersionByArnCommand").f(undefined, undefined).ser(se_GetLayerVersionByArnCommand).de(de_GetLayerVersionByArnCommand).build() {
    static {
      __name(this, "GetLayerVersionByArnCommand");
    }
  };
  var GetLayerVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetLayerVersion", {}).n("LambdaClient", "GetLayerVersionCommand").f(undefined, undefined).ser(se_GetLayerVersionCommand).de(de_GetLayerVersionCommand).build() {
    static {
      __name(this, "GetLayerVersionCommand");
    }
  };
  var GetLayerVersionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetLayerVersionPolicy", {}).n("LambdaClient", "GetLayerVersionPolicyCommand").f(undefined, undefined).ser(se_GetLayerVersionPolicyCommand).de(de_GetLayerVersionPolicyCommand).build() {
    static {
      __name(this, "GetLayerVersionPolicyCommand");
    }
  };
  var GetPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetPolicy", {}).n("LambdaClient", "GetPolicyCommand").f(undefined, undefined).ser(se_GetPolicyCommand).de(de_GetPolicyCommand).build() {
    static {
      __name(this, "GetPolicyCommand");
    }
  };
  var GetProvisionedConcurrencyConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetProvisionedConcurrencyConfig", {}).n("LambdaClient", "GetProvisionedConcurrencyConfigCommand").f(undefined, undefined).ser(se_GetProvisionedConcurrencyConfigCommand).de(de_GetProvisionedConcurrencyConfigCommand).build() {
    static {
      __name(this, "GetProvisionedConcurrencyConfigCommand");
    }
  };
  var GetRuntimeManagementConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "GetRuntimeManagementConfig", {}).n("LambdaClient", "GetRuntimeManagementConfigCommand").f(undefined, undefined).ser(se_GetRuntimeManagementConfigCommand).de(de_GetRuntimeManagementConfigCommand).build() {
    static {
      __name(this, "GetRuntimeManagementConfigCommand");
    }
  };
  var InvokeAsyncCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "InvokeAsync", {}).n("LambdaClient", "InvokeAsyncCommand").f(InvokeAsyncRequestFilterSensitiveLog, undefined).ser(se_InvokeAsyncCommand).de(de_InvokeAsyncCommand).build() {
    static {
      __name(this, "InvokeAsyncCommand");
    }
  };
  var InvokeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "Invoke", {}).n("LambdaClient", "InvokeCommand").f(InvocationRequestFilterSensitiveLog, InvocationResponseFilterSensitiveLog).ser(se_InvokeCommand).de(de_InvokeCommand).build() {
    static {
      __name(this, "InvokeCommand");
    }
  };
  var InvokeWithResponseStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "InvokeWithResponseStream", {
    eventStream: {
      output: true
    }
  }).n("LambdaClient", "InvokeWithResponseStreamCommand").f(InvokeWithResponseStreamRequestFilterSensitiveLog, InvokeWithResponseStreamResponseFilterSensitiveLog).ser(se_InvokeWithResponseStreamCommand).de(de_InvokeWithResponseStreamCommand).build() {
    static {
      __name(this, "InvokeWithResponseStreamCommand");
    }
  };
  var ListAliasesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListAliases", {}).n("LambdaClient", "ListAliasesCommand").f(undefined, undefined).ser(se_ListAliasesCommand).de(de_ListAliasesCommand).build() {
    static {
      __name(this, "ListAliasesCommand");
    }
  };
  var ListCodeSigningConfigsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListCodeSigningConfigs", {}).n("LambdaClient", "ListCodeSigningConfigsCommand").f(undefined, undefined).ser(se_ListCodeSigningConfigsCommand).de(de_ListCodeSigningConfigsCommand).build() {
    static {
      __name(this, "ListCodeSigningConfigsCommand");
    }
  };
  var ListEventSourceMappingsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListEventSourceMappings", {}).n("LambdaClient", "ListEventSourceMappingsCommand").f(undefined, undefined).ser(se_ListEventSourceMappingsCommand).de(de_ListEventSourceMappingsCommand).build() {
    static {
      __name(this, "ListEventSourceMappingsCommand");
    }
  };
  var ListFunctionEventInvokeConfigsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListFunctionEventInvokeConfigs", {}).n("LambdaClient", "ListFunctionEventInvokeConfigsCommand").f(undefined, undefined).ser(se_ListFunctionEventInvokeConfigsCommand).de(de_ListFunctionEventInvokeConfigsCommand).build() {
    static {
      __name(this, "ListFunctionEventInvokeConfigsCommand");
    }
  };
  var ListFunctionsByCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListFunctionsByCodeSigningConfig", {}).n("LambdaClient", "ListFunctionsByCodeSigningConfigCommand").f(undefined, undefined).ser(se_ListFunctionsByCodeSigningConfigCommand).de(de_ListFunctionsByCodeSigningConfigCommand).build() {
    static {
      __name(this, "ListFunctionsByCodeSigningConfigCommand");
    }
  };
  var ListFunctionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListFunctions", {}).n("LambdaClient", "ListFunctionsCommand").f(undefined, ListFunctionsResponseFilterSensitiveLog).ser(se_ListFunctionsCommand).de(de_ListFunctionsCommand).build() {
    static {
      __name(this, "ListFunctionsCommand");
    }
  };
  var ListFunctionUrlConfigsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListFunctionUrlConfigs", {}).n("LambdaClient", "ListFunctionUrlConfigsCommand").f(undefined, undefined).ser(se_ListFunctionUrlConfigsCommand).de(de_ListFunctionUrlConfigsCommand).build() {
    static {
      __name(this, "ListFunctionUrlConfigsCommand");
    }
  };
  var ListLayersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListLayers", {}).n("LambdaClient", "ListLayersCommand").f(undefined, undefined).ser(se_ListLayersCommand).de(de_ListLayersCommand).build() {
    static {
      __name(this, "ListLayersCommand");
    }
  };
  var ListLayerVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListLayerVersions", {}).n("LambdaClient", "ListLayerVersionsCommand").f(undefined, undefined).ser(se_ListLayerVersionsCommand).de(de_ListLayerVersionsCommand).build() {
    static {
      __name(this, "ListLayerVersionsCommand");
    }
  };
  var ListProvisionedConcurrencyConfigsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListProvisionedConcurrencyConfigs", {}).n("LambdaClient", "ListProvisionedConcurrencyConfigsCommand").f(undefined, undefined).ser(se_ListProvisionedConcurrencyConfigsCommand).de(de_ListProvisionedConcurrencyConfigsCommand).build() {
    static {
      __name(this, "ListProvisionedConcurrencyConfigsCommand");
    }
  };
  var ListTagsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListTags", {}).n("LambdaClient", "ListTagsCommand").f(undefined, undefined).ser(se_ListTagsCommand).de(de_ListTagsCommand).build() {
    static {
      __name(this, "ListTagsCommand");
    }
  };
  var ListVersionsByFunctionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "ListVersionsByFunction", {}).n("LambdaClient", "ListVersionsByFunctionCommand").f(undefined, ListVersionsByFunctionResponseFilterSensitiveLog).ser(se_ListVersionsByFunctionCommand).de(de_ListVersionsByFunctionCommand).build() {
    static {
      __name(this, "ListVersionsByFunctionCommand");
    }
  };
  var PublishLayerVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PublishLayerVersion", {}).n("LambdaClient", "PublishLayerVersionCommand").f(PublishLayerVersionRequestFilterSensitiveLog, undefined).ser(se_PublishLayerVersionCommand).de(de_PublishLayerVersionCommand).build() {
    static {
      __name(this, "PublishLayerVersionCommand");
    }
  };
  var PublishVersionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PublishVersion", {}).n("LambdaClient", "PublishVersionCommand").f(undefined, FunctionConfigurationFilterSensitiveLog).ser(se_PublishVersionCommand).de(de_PublishVersionCommand).build() {
    static {
      __name(this, "PublishVersionCommand");
    }
  };
  var PutFunctionCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutFunctionCodeSigningConfig", {}).n("LambdaClient", "PutFunctionCodeSigningConfigCommand").f(undefined, undefined).ser(se_PutFunctionCodeSigningConfigCommand).de(de_PutFunctionCodeSigningConfigCommand).build() {
    static {
      __name(this, "PutFunctionCodeSigningConfigCommand");
    }
  };
  var PutFunctionConcurrencyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutFunctionConcurrency", {}).n("LambdaClient", "PutFunctionConcurrencyCommand").f(undefined, undefined).ser(se_PutFunctionConcurrencyCommand).de(de_PutFunctionConcurrencyCommand).build() {
    static {
      __name(this, "PutFunctionConcurrencyCommand");
    }
  };
  var PutFunctionEventInvokeConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutFunctionEventInvokeConfig", {}).n("LambdaClient", "PutFunctionEventInvokeConfigCommand").f(undefined, undefined).ser(se_PutFunctionEventInvokeConfigCommand).de(de_PutFunctionEventInvokeConfigCommand).build() {
    static {
      __name(this, "PutFunctionEventInvokeConfigCommand");
    }
  };
  var PutFunctionRecursionConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutFunctionRecursionConfig", {}).n("LambdaClient", "PutFunctionRecursionConfigCommand").f(undefined, undefined).ser(se_PutFunctionRecursionConfigCommand).de(de_PutFunctionRecursionConfigCommand).build() {
    static {
      __name(this, "PutFunctionRecursionConfigCommand");
    }
  };
  var PutProvisionedConcurrencyConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutProvisionedConcurrencyConfig", {}).n("LambdaClient", "PutProvisionedConcurrencyConfigCommand").f(undefined, undefined).ser(se_PutProvisionedConcurrencyConfigCommand).de(de_PutProvisionedConcurrencyConfigCommand).build() {
    static {
      __name(this, "PutProvisionedConcurrencyConfigCommand");
    }
  };
  var PutRuntimeManagementConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "PutRuntimeManagementConfig", {}).n("LambdaClient", "PutRuntimeManagementConfigCommand").f(undefined, undefined).ser(se_PutRuntimeManagementConfigCommand).de(de_PutRuntimeManagementConfigCommand).build() {
    static {
      __name(this, "PutRuntimeManagementConfigCommand");
    }
  };
  var RemoveLayerVersionPermissionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "RemoveLayerVersionPermission", {}).n("LambdaClient", "RemoveLayerVersionPermissionCommand").f(undefined, undefined).ser(se_RemoveLayerVersionPermissionCommand).de(de_RemoveLayerVersionPermissionCommand).build() {
    static {
      __name(this, "RemoveLayerVersionPermissionCommand");
    }
  };
  var RemovePermissionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "RemovePermission", {}).n("LambdaClient", "RemovePermissionCommand").f(undefined, undefined).ser(se_RemovePermissionCommand).de(de_RemovePermissionCommand).build() {
    static {
      __name(this, "RemovePermissionCommand");
    }
  };
  var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "TagResource", {}).n("LambdaClient", "TagResourceCommand").f(undefined, undefined).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    static {
      __name(this, "TagResourceCommand");
    }
  };
  var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UntagResource", {}).n("LambdaClient", "UntagResourceCommand").f(undefined, undefined).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    static {
      __name(this, "UntagResourceCommand");
    }
  };
  var UpdateAliasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateAlias", {}).n("LambdaClient", "UpdateAliasCommand").f(undefined, undefined).ser(se_UpdateAliasCommand).de(de_UpdateAliasCommand).build() {
    static {
      __name(this, "UpdateAliasCommand");
    }
  };
  var UpdateCodeSigningConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateCodeSigningConfig", {}).n("LambdaClient", "UpdateCodeSigningConfigCommand").f(undefined, undefined).ser(se_UpdateCodeSigningConfigCommand).de(de_UpdateCodeSigningConfigCommand).build() {
    static {
      __name(this, "UpdateCodeSigningConfigCommand");
    }
  };
  var UpdateEventSourceMappingCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateEventSourceMapping", {}).n("LambdaClient", "UpdateEventSourceMappingCommand").f(undefined, undefined).ser(se_UpdateEventSourceMappingCommand).de(de_UpdateEventSourceMappingCommand).build() {
    static {
      __name(this, "UpdateEventSourceMappingCommand");
    }
  };
  var UpdateFunctionCodeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateFunctionCode", {}).n("LambdaClient", "UpdateFunctionCodeCommand").f(UpdateFunctionCodeRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog).ser(se_UpdateFunctionCodeCommand).de(de_UpdateFunctionCodeCommand).build() {
    static {
      __name(this, "UpdateFunctionCodeCommand");
    }
  };
  var UpdateFunctionConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateFunctionConfiguration", {}).n("LambdaClient", "UpdateFunctionConfigurationCommand").f(UpdateFunctionConfigurationRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog).ser(se_UpdateFunctionConfigurationCommand).de(de_UpdateFunctionConfigurationCommand).build() {
    static {
      __name(this, "UpdateFunctionConfigurationCommand");
    }
  };
  var UpdateFunctionEventInvokeConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateFunctionEventInvokeConfig", {}).n("LambdaClient", "UpdateFunctionEventInvokeConfigCommand").f(undefined, undefined).ser(se_UpdateFunctionEventInvokeConfigCommand).de(de_UpdateFunctionEventInvokeConfigCommand).build() {
    static {
      __name(this, "UpdateFunctionEventInvokeConfigCommand");
    }
  };
  var UpdateFunctionUrlConfigCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSGirApiService", "UpdateFunctionUrlConfig", {}).n("LambdaClient", "UpdateFunctionUrlConfigCommand").f(undefined, undefined).ser(se_UpdateFunctionUrlConfigCommand).de(de_UpdateFunctionUrlConfigCommand).build() {
    static {
      __name(this, "UpdateFunctionUrlConfigCommand");
    }
  };
  var commands = {
    AddLayerVersionPermissionCommand,
    AddPermissionCommand,
    CreateAliasCommand,
    CreateCodeSigningConfigCommand,
    CreateEventSourceMappingCommand,
    CreateFunctionCommand,
    CreateFunctionUrlConfigCommand,
    DeleteAliasCommand,
    DeleteCodeSigningConfigCommand,
    DeleteEventSourceMappingCommand,
    DeleteFunctionCommand,
    DeleteFunctionCodeSigningConfigCommand,
    DeleteFunctionConcurrencyCommand,
    DeleteFunctionEventInvokeConfigCommand,
    DeleteFunctionUrlConfigCommand,
    DeleteLayerVersionCommand,
    DeleteProvisionedConcurrencyConfigCommand,
    GetAccountSettingsCommand,
    GetAliasCommand,
    GetCodeSigningConfigCommand,
    GetEventSourceMappingCommand,
    GetFunctionCommand,
    GetFunctionCodeSigningConfigCommand,
    GetFunctionConcurrencyCommand,
    GetFunctionConfigurationCommand,
    GetFunctionEventInvokeConfigCommand,
    GetFunctionRecursionConfigCommand,
    GetFunctionUrlConfigCommand,
    GetLayerVersionCommand,
    GetLayerVersionByArnCommand,
    GetLayerVersionPolicyCommand,
    GetPolicyCommand,
    GetProvisionedConcurrencyConfigCommand,
    GetRuntimeManagementConfigCommand,
    InvokeCommand,
    InvokeAsyncCommand,
    InvokeWithResponseStreamCommand,
    ListAliasesCommand,
    ListCodeSigningConfigsCommand,
    ListEventSourceMappingsCommand,
    ListFunctionEventInvokeConfigsCommand,
    ListFunctionsCommand,
    ListFunctionsByCodeSigningConfigCommand,
    ListFunctionUrlConfigsCommand,
    ListLayersCommand,
    ListLayerVersionsCommand,
    ListProvisionedConcurrencyConfigsCommand,
    ListTagsCommand,
    ListVersionsByFunctionCommand,
    PublishLayerVersionCommand,
    PublishVersionCommand,
    PutFunctionCodeSigningConfigCommand,
    PutFunctionConcurrencyCommand,
    PutFunctionEventInvokeConfigCommand,
    PutFunctionRecursionConfigCommand,
    PutProvisionedConcurrencyConfigCommand,
    PutRuntimeManagementConfigCommand,
    RemoveLayerVersionPermissionCommand,
    RemovePermissionCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAliasCommand,
    UpdateCodeSigningConfigCommand,
    UpdateEventSourceMappingCommand,
    UpdateFunctionCodeCommand,
    UpdateFunctionConfigurationCommand,
    UpdateFunctionEventInvokeConfigCommand,
    UpdateFunctionUrlConfigCommand
  };
  var Lambda = class extends LambdaClient {
    static {
      __name(this, "Lambda");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, Lambda);
  var paginateListAliases = (0, import_core.createPaginator)(LambdaClient, ListAliasesCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListCodeSigningConfigs = (0, import_core.createPaginator)(LambdaClient, ListCodeSigningConfigsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListEventSourceMappings = (0, import_core.createPaginator)(LambdaClient, ListEventSourceMappingsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListFunctionEventInvokeConfigs = (0, import_core.createPaginator)(LambdaClient, ListFunctionEventInvokeConfigsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListFunctionUrlConfigs = (0, import_core.createPaginator)(LambdaClient, ListFunctionUrlConfigsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListFunctionsByCodeSigningConfig = (0, import_core.createPaginator)(LambdaClient, ListFunctionsByCodeSigningConfigCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListFunctions = (0, import_core.createPaginator)(LambdaClient, ListFunctionsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListLayerVersions = (0, import_core.createPaginator)(LambdaClient, ListLayerVersionsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListLayers = (0, import_core.createPaginator)(LambdaClient, ListLayersCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListProvisionedConcurrencyConfigs = (0, import_core.createPaginator)(LambdaClient, ListProvisionedConcurrencyConfigsCommand, "Marker", "NextMarker", "MaxItems");
  var paginateListVersionsByFunction = (0, import_core.createPaginator)(LambdaClient, ListVersionsByFunctionCommand, "Marker", "NextMarker", "MaxItems");
  var import_util_waiter = require_dist_cjs61();
  var checkState = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionConfigurationCommand(input));
      reason = result;
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Active") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Pending") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      } catch (e) {}
    } catch (exception) {
      reason = exception;
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForFunctionActive = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  }, "waitForFunctionActive");
  var waitUntilFunctionActive = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilFunctionActive");
  var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionCommand(input));
      reason = result;
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.State;
        }, "returnComparator");
        if (returnComparator() === "Active") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.State;
        }, "returnComparator");
        if (returnComparator() === "Failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.State;
        }, "returnComparator");
        if (returnComparator() === "Pending") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      } catch (e) {}
    } catch (exception) {
      reason = exception;
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForFunctionActiveV2 = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  }, "waitForFunctionActiveV2");
  var waitUntilFunctionActiveV2 = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilFunctionActiveV2");
  var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "ResourceNotFoundException") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForFunctionExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  }, "waitForFunctionExists");
  var waitUntilFunctionExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilFunctionExists");
  var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionConfigurationCommand(input));
      reason = result;
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "Successful") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "Failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "InProgress") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      } catch (e) {}
    } catch (exception) {
      reason = exception;
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForFunctionUpdated = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  }, "waitForFunctionUpdated");
  var waitUntilFunctionUpdated = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilFunctionUpdated");
  var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionCommand(input));
      reason = result;
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "Successful") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "Failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.Configuration.LastUpdateStatus;
        }, "returnComparator");
        if (returnComparator() === "InProgress") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      } catch (e) {}
    } catch (exception) {
      reason = exception;
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForFunctionUpdatedV2 = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
  }, "waitForFunctionUpdatedV2");
  var waitUntilFunctionUpdatedV2 = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilFunctionUpdatedV2");
  var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new GetFunctionConfigurationCommand(input));
      reason = result;
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Active") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      } catch (e) {}
      try {
        const returnComparator = /* @__PURE__ */ __name(() => {
          return result.State;
        }, "returnComparator");
        if (returnComparator() === "Pending") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      } catch (e) {}
    } catch (exception) {
      reason = exception;
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForPublishedVersionActive = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
  }, "waitForPublishedVersionActive");
  var waitUntilPublishedVersionActive = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilPublishedVersionActive");
});

// ../../node_modules/.bun/@aws-sdk+middleware-expect-continue@3.775.0/node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js
var require_dist_cjs64 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    addExpectContinueMiddleware: () => addExpectContinueMiddleware,
    addExpectContinueMiddlewareOptions: () => addExpectContinueMiddlewareOptions,
    getAddExpectContinuePlugin: () => getAddExpectContinuePlugin
  });
  module.exports = __toCommonJS(index_exports);
  var import_protocol_http = require_dist_cjs2();
  function addExpectContinueMiddleware(options) {
    return (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
        if (options.requestHandler?.constructor?.name !== "FetchHttpHandler") {
          request.headers = {
            ...request.headers,
            Expect: "100-continue"
          };
        }
      }
      return next({
        ...args,
        request
      });
    };
  }
  __name(addExpectContinueMiddleware, "addExpectContinueMiddleware");
  var addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
    name: "addExpectContinueMiddleware",
    override: true
  };
  var getAddExpectContinuePlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
    }, "applyToStack")
  }), "getAddExpectContinuePlugin");
});

// ../../node_modules/.bun/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/aws_crc32c.js
var require_aws_crc32c = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32c = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_main();
  var index_1 = require_main3();
  var AwsCrc32c = function() {
    function AwsCrc32c2() {
      this.crc32c = new index_1.Crc32c;
    }
    AwsCrc32c2.prototype.update = function(toHash) {
      if ((0, util_1.isEmptyData)(toHash))
        return;
      this.crc32c.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32c2.prototype.digest = function() {
      return tslib_1.__awaiter(this, undefined, undefined, function() {
        return tslib_1.__generator(this, function(_a) {
          return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
        });
      });
    };
    AwsCrc32c2.prototype.reset = function() {
      this.crc32c = new index_1.Crc32c;
    };
    return AwsCrc32c2;
  }();
  exports.AwsCrc32c = AwsCrc32c;
});

// ../../node_modules/.bun/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/index.js
var require_main3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32c = exports.Crc32c = exports.crc32c = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_main();
  function crc32c(data) {
    return new Crc32c().update(data).digest();
  }
  exports.crc32c = crc32c;
  var Crc32c = function() {
    function Crc32c2() {
      this.checksum = 4294967295;
    }
    Crc32c2.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next();!data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc32c2.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc32c2;
  }();
  exports.Crc32c = Crc32c;
  var a_lookupTable = [
    0,
    4067132163,
    3778769143,
    324072436,
    3348797215,
    904991772,
    648144872,
    3570033899,
    2329499855,
    2024987596,
    1809983544,
    2575936315,
    1296289744,
    3207089363,
    2893594407,
    1578318884,
    274646895,
    3795141740,
    4049975192,
    51262619,
    3619967088,
    632279923,
    922689671,
    3298075524,
    2592579488,
    1760304291,
    2075979607,
    2312596564,
    1562183871,
    2943781820,
    3156637768,
    1313733451,
    549293790,
    3537243613,
    3246849577,
    871202090,
    3878099393,
    357341890,
    102525238,
    4101499445,
    2858735121,
    1477399826,
    1264559846,
    3107202533,
    1845379342,
    2677391885,
    2361733625,
    2125378298,
    820201905,
    3263744690,
    3520608582,
    598981189,
    4151959214,
    85089709,
    373468761,
    3827903834,
    3124367742,
    1213305469,
    1526817161,
    2842354314,
    2107672161,
    2412447074,
    2627466902,
    1861252501,
    1098587580,
    3004210879,
    2688576843,
    1378610760,
    2262928035,
    1955203488,
    1742404180,
    2511436119,
    3416409459,
    969524848,
    714683780,
    3639785095,
    205050476,
    4266873199,
    3976438427,
    526918040,
    1361435347,
    2739821008,
    2954799652,
    1114974503,
    2529119692,
    1691668175,
    2005155131,
    2247081528,
    3690758684,
    697762079,
    986182379,
    3366744552,
    476452099,
    3993867776,
    4250756596,
    255256311,
    1640403810,
    2477592673,
    2164122517,
    1922457750,
    2791048317,
    1412925310,
    1197962378,
    3037525897,
    3944729517,
    427051182,
    170179418,
    4165941337,
    746937522,
    3740196785,
    3451792453,
    1070968646,
    1905808397,
    2213795598,
    2426610938,
    1657317369,
    3053634322,
    1147748369,
    1463399397,
    2773627110,
    4215344322,
    153784257,
    444234805,
    3893493558,
    1021025245,
    3467647198,
    3722505002,
    797665321,
    2197175160,
    1889384571,
    1674398607,
    2443626636,
    1164749927,
    3070701412,
    2757221520,
    1446797203,
    137323447,
    4198817972,
    3910406976,
    461344835,
    3484808360,
    1037989803,
    781091935,
    3705997148,
    2460548119,
    1623424788,
    1939049696,
    2180517859,
    1429367560,
    2807687179,
    3020495871,
    1180866812,
    410100952,
    3927582683,
    4182430767,
    186734380,
    3756733383,
    763408580,
    1053836080,
    3434856499,
    2722870694,
    1344288421,
    1131464017,
    2971354706,
    1708204729,
    2545590714,
    2229949006,
    1988219213,
    680717673,
    3673779818,
    3383336350,
    1002577565,
    4010310262,
    493091189,
    238226049,
    4233660802,
    2987750089,
    1082061258,
    1395524158,
    2705686845,
    1972364758,
    2279892693,
    2494862625,
    1725896226,
    952904198,
    3399985413,
    3656866545,
    731699698,
    4283874585,
    222117402,
    510512622,
    3959836397,
    3280807620,
    837199303,
    582374963,
    3504198960,
    68661723,
    4135334616,
    3844915500,
    390545967,
    1230274059,
    3141532936,
    2825850620,
    1510247935,
    2395924756,
    2091215383,
    1878366691,
    2644384480,
    3553878443,
    565732008,
    854102364,
    3229815391,
    340358836,
    3861050807,
    4117890627,
    119113024,
    1493875044,
    2875275879,
    3090270611,
    1247431312,
    2660249211,
    1828433272,
    2141937292,
    2378227087,
    3811616794,
    291187481,
    34330861,
    4032846830,
    615137029,
    3603020806,
    3314634738,
    939183345,
    1776939221,
    2609017814,
    2295496738,
    2058945313,
    2926798794,
    1545135305,
    1330124605,
    3173225534,
    4084100981,
    17165430,
    307568514,
    3762199681,
    888469610,
    3332340585,
    3587147933,
    665062302,
    2042050490,
    2346497209,
    2559330125,
    1793573966,
    3190661285,
    1279665062,
    1595330642,
    2910671697
  ];
  var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
  var aws_crc32c_1 = require_aws_crc32c();
  Object.defineProperty(exports, "AwsCrc32c", { enumerable: true, get: function() {
    return aws_crc32c_1.AwsCrc32c;
  } });
});

// ../../node_modules/.bun/@aws-sdk+middleware-flexible-checksums@3.787.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js
var require_getCrc32ChecksumAlgorithmFunction = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCrc32ChecksumAlgorithmFunction = undefined;
  var tslib_1 = require_tslib();
  var crc32_1 = require_main2();
  var util_1 = require_main();
  var zlib = tslib_1.__importStar(__require("zlib"));

  class NodeCrc32 {
    checksum = 0;
    update(data) {
      this.checksum = zlib.crc32(data, this.checksum);
    }
    async digest() {
      return (0, util_1.numToUint8)(this.checksum);
    }
    reset() {
      this.checksum = 0;
    }
  }
  var getCrc32ChecksumAlgorithmFunction = () => {
    if (typeof zlib.crc32 === "undefined") {
      return crc32_1.AwsCrc32;
    }
    return NodeCrc32;
  };
  exports.getCrc32ChecksumAlgorithmFunction = getCrc32ChecksumAlgorithmFunction;
});

// ../../node_modules/.bun/@aws-sdk+middleware-flexible-checksums@3.787.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js
var require_dist_cjs65 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    CONFIG_REQUEST_CHECKSUM_CALCULATION: () => CONFIG_REQUEST_CHECKSUM_CALCULATION,
    CONFIG_RESPONSE_CHECKSUM_VALIDATION: () => CONFIG_RESPONSE_CHECKSUM_VALIDATION,
    ChecksumAlgorithm: () => ChecksumAlgorithm,
    ChecksumLocation: () => ChecksumLocation,
    DEFAULT_CHECKSUM_ALGORITHM: () => DEFAULT_CHECKSUM_ALGORITHM,
    DEFAULT_REQUEST_CHECKSUM_CALCULATION: () => DEFAULT_REQUEST_CHECKSUM_CALCULATION,
    DEFAULT_RESPONSE_CHECKSUM_VALIDATION: () => DEFAULT_RESPONSE_CHECKSUM_VALIDATION,
    ENV_REQUEST_CHECKSUM_CALCULATION: () => ENV_REQUEST_CHECKSUM_CALCULATION,
    ENV_RESPONSE_CHECKSUM_VALIDATION: () => ENV_RESPONSE_CHECKSUM_VALIDATION,
    NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS: () => NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS,
    NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS: () => NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS,
    RequestChecksumCalculation: () => RequestChecksumCalculation,
    ResponseChecksumValidation: () => ResponseChecksumValidation,
    crc64NvmeCrtContainer: () => crc64NvmeCrtContainer,
    flexibleChecksumsMiddleware: () => flexibleChecksumsMiddleware,
    flexibleChecksumsMiddlewareOptions: () => flexibleChecksumsMiddlewareOptions,
    getFlexibleChecksumsPlugin: () => getFlexibleChecksumsPlugin,
    resolveFlexibleChecksumsConfig: () => resolveFlexibleChecksumsConfig
  });
  module.exports = __toCommonJS(index_exports);
  var RequestChecksumCalculation = {
    WHEN_SUPPORTED: "WHEN_SUPPORTED",
    WHEN_REQUIRED: "WHEN_REQUIRED"
  };
  var DEFAULT_REQUEST_CHECKSUM_CALCULATION = RequestChecksumCalculation.WHEN_SUPPORTED;
  var ResponseChecksumValidation = {
    WHEN_SUPPORTED: "WHEN_SUPPORTED",
    WHEN_REQUIRED: "WHEN_REQUIRED"
  };
  var DEFAULT_RESPONSE_CHECKSUM_VALIDATION = RequestChecksumCalculation.WHEN_SUPPORTED;
  var ChecksumAlgorithm = /* @__PURE__ */ ((ChecksumAlgorithm3) => {
    ChecksumAlgorithm3["MD5"] = "MD5";
    ChecksumAlgorithm3["CRC32"] = "CRC32";
    ChecksumAlgorithm3["CRC32C"] = "CRC32C";
    ChecksumAlgorithm3["CRC64NVME"] = "CRC64NVME";
    ChecksumAlgorithm3["SHA1"] = "SHA1";
    ChecksumAlgorithm3["SHA256"] = "SHA256";
    return ChecksumAlgorithm3;
  })(ChecksumAlgorithm || {});
  var ChecksumLocation = /* @__PURE__ */ ((ChecksumLocation2) => {
    ChecksumLocation2["HEADER"] = "header";
    ChecksumLocation2["TRAILER"] = "trailer";
    return ChecksumLocation2;
  })(ChecksumLocation || {});
  var DEFAULT_CHECKSUM_ALGORITHM = "CRC32";
  var stringUnionSelector = /* @__PURE__ */ __name((obj, key, union, type) => {
    if (!(key in obj))
      return;
    const value = obj[key].toUpperCase();
    if (!Object.values(union).includes(value)) {
      throw new TypeError(`Cannot load ${type} '${key}'. Expected one of ${Object.values(union)}, got '${obj[key]}'.`);
    }
    return value;
  }, "stringUnionSelector");
  var ENV_REQUEST_CHECKSUM_CALCULATION = "AWS_REQUEST_CHECKSUM_CALCULATION";
  var CONFIG_REQUEST_CHECKSUM_CALCULATION = "request_checksum_calculation";
  var NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => stringUnionSelector(env, ENV_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, "env"), "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => stringUnionSelector(profile, CONFIG_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, "shared config entry"), "configFileSelector"),
    default: DEFAULT_REQUEST_CHECKSUM_CALCULATION
  };
  var ENV_RESPONSE_CHECKSUM_VALIDATION = "AWS_RESPONSE_CHECKSUM_VALIDATION";
  var CONFIG_RESPONSE_CHECKSUM_VALIDATION = "response_checksum_validation";
  var NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => stringUnionSelector(env, ENV_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, "env"), "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => stringUnionSelector(profile, CONFIG_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, "shared config entry"), "configFileSelector"),
    default: DEFAULT_RESPONSE_CHECKSUM_VALIDATION
  };
  var crc64NvmeCrtContainer = {
    CrtCrc64Nvme: null
  };
  var import_core = require_dist_cjs25();
  var import_protocol_http = require_dist_cjs2();
  var import_util_stream = require_dist_cjs17();
  var CLIENT_SUPPORTED_ALGORITHMS = [
    "CRC32",
    "CRC32C",
    "CRC64NVME",
    "SHA1",
    "SHA256"
  ];
  var PRIORITY_ORDER_ALGORITHMS = [
    "SHA256",
    "SHA1",
    "CRC32",
    "CRC32C",
    "CRC64NVME"
  ];
  var getChecksumAlgorithmForRequest = /* @__PURE__ */ __name((input, { requestChecksumRequired, requestAlgorithmMember, requestChecksumCalculation }) => {
    if (!requestAlgorithmMember) {
      return requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired ? DEFAULT_CHECKSUM_ALGORITHM : undefined;
    }
    if (!input[requestAlgorithmMember]) {
      return;
    }
    const checksumAlgorithm = input[requestAlgorithmMember];
    if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
      throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
    }
    return checksumAlgorithm;
  }, "getChecksumAlgorithmForRequest");
  var getChecksumLocationName = /* @__PURE__ */ __name((algorithm) => algorithm === "MD5" ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`, "getChecksumLocationName");
  var hasHeader = /* @__PURE__ */ __name((header, headers) => {
    const soughtHeader = header.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }, "hasHeader");
  var hasHeaderWithPrefix = /* @__PURE__ */ __name((headerPrefix, headers) => {
    const soughtHeaderPrefix = headerPrefix.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (headerName.toLowerCase().startsWith(soughtHeaderPrefix)) {
        return true;
      }
    }
    return false;
  }, "hasHeaderWithPrefix");
  var import_is_array_buffer = require_dist_cjs8();
  var isStreaming = /* @__PURE__ */ __name((body) => body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, import_is_array_buffer.isArrayBuffer)(body), "isStreaming");
  var import_crc32c = require_main3();
  var import_getCrc32ChecksumAlgorithmFunction = require_getCrc32ChecksumAlgorithmFunction();
  var selectChecksumAlgorithmFunction = /* @__PURE__ */ __name((checksumAlgorithm, config) => {
    switch (checksumAlgorithm) {
      case "MD5":
        return config.md5;
      case "CRC32":
        return (0, import_getCrc32ChecksumAlgorithmFunction.getCrc32ChecksumAlgorithmFunction)();
      case "CRC32C":
        return import_crc32c.AwsCrc32c;
      case "CRC64NVME":
        if (typeof crc64NvmeCrtContainer.CrtCrc64Nvme !== "function") {
          throw new Error(`Please check whether you have installed the "@aws-sdk/crc64-nvme-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/crc64-nvme-crt");] or an ESM equivalent such as [import "@aws-sdk/crc64-nvme-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
        }
        return crc64NvmeCrtContainer.CrtCrc64Nvme;
      case "SHA1":
        return config.sha1;
      case "SHA256":
        return config.sha256;
      default:
        throw new Error(`Unsupported checksum algorithm: ${checksumAlgorithm}`);
    }
  }, "selectChecksumAlgorithmFunction");
  var import_util_utf8 = require_dist_cjs10();
  var stringHasher = /* @__PURE__ */ __name((checksumAlgorithmFn, body) => {
    const hash = new checksumAlgorithmFn;
    hash.update((0, import_util_utf8.toUint8Array)(body || ""));
    return hash.digest();
  }, "stringHasher");
  var flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  var flexibleChecksumsMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    if (hasHeaderWithPrefix("x-amz-checksum-", args.request.headers)) {
      return next(args);
    }
    const { request, input } = args;
    const { body: requestBody, headers } = request;
    const { base64Encoder, streamHasher } = config;
    const { requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
    const requestChecksumCalculation = await config.requestChecksumCalculation();
    const requestAlgorithmMemberName = requestAlgorithmMember?.name;
    const requestAlgorithmMemberHttpHeader = requestAlgorithmMember?.httpHeader;
    if (requestAlgorithmMemberName && !input[requestAlgorithmMemberName]) {
      if (requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired) {
        input[requestAlgorithmMemberName] = DEFAULT_CHECKSUM_ALGORITHM;
        if (requestAlgorithmMemberHttpHeader) {
          headers[requestAlgorithmMemberHttpHeader] = DEFAULT_CHECKSUM_ALGORITHM;
        }
      }
    }
    const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
      requestChecksumRequired,
      requestAlgorithmMember: requestAlgorithmMember?.name,
      requestChecksumCalculation
    });
    let updatedBody = requestBody;
    let updatedHeaders = headers;
    if (checksumAlgorithm) {
      switch (checksumAlgorithm) {
        case "CRC32":
          (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32", "U");
          break;
        case "CRC32C":
          (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32C", "V");
          break;
        case "CRC64NVME":
          (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_CRC64", "W");
          break;
        case "SHA1":
          (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_SHA1", "X");
          break;
        case "SHA256":
          (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_SHA256", "Y");
          break;
      }
      const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
      const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);
      if (isStreaming(requestBody)) {
        const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config;
        updatedBody = getAwsChunkedEncodingStream2(typeof config.requestStreamBufferSize === "number" && config.requestStreamBufferSize >= 8 * 1024 ? (0, import_util_stream.createBufferedReadable)(requestBody, config.requestStreamBufferSize, context.logger) : requestBody, {
          base64Encoder,
          bodyLengthChecker,
          checksumLocationName,
          checksumAlgorithmFn,
          streamHasher
        });
        updatedHeaders = {
          ...headers,
          "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
          "transfer-encoding": "chunked",
          "x-amz-decoded-content-length": headers["content-length"],
          "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
          "x-amz-trailer": checksumLocationName
        };
        delete updatedHeaders["content-length"];
      } else if (!hasHeader(checksumLocationName, headers)) {
        const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
        updatedHeaders = {
          ...headers,
          [checksumLocationName]: base64Encoder(rawChecksum)
        };
      }
    }
    const result = await next({
      ...args,
      request: {
        ...request,
        headers: updatedHeaders,
        body: updatedBody
      }
    });
    return result;
  }, "flexibleChecksumsMiddleware");
  var flexibleChecksumsInputMiddlewareOptions = {
    name: "flexibleChecksumsInputMiddleware",
    toMiddleware: "serializerMiddleware",
    relation: "before",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  var flexibleChecksumsInputMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
    const input = args.input;
    const { requestValidationModeMember } = middlewareConfig;
    const requestChecksumCalculation = await config.requestChecksumCalculation();
    const responseChecksumValidation = await config.responseChecksumValidation();
    switch (requestChecksumCalculation) {
      case RequestChecksumCalculation.WHEN_REQUIRED:
        (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED", "a");
        break;
      case RequestChecksumCalculation.WHEN_SUPPORTED:
        (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED", "Z");
        break;
    }
    switch (responseChecksumValidation) {
      case ResponseChecksumValidation.WHEN_REQUIRED:
        (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED", "c");
        break;
      case ResponseChecksumValidation.WHEN_SUPPORTED:
        (0, import_core.setFeature)(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED", "b");
        break;
    }
    if (requestValidationModeMember && !input[requestValidationModeMember]) {
      if (responseChecksumValidation === ResponseChecksumValidation.WHEN_SUPPORTED) {
        input[requestValidationModeMember] = "ENABLED";
      }
    }
    return next(args);
  }, "flexibleChecksumsInputMiddleware");
  var getChecksumAlgorithmListForResponse = /* @__PURE__ */ __name((responseAlgorithms = []) => {
    const validChecksumAlgorithms = [];
    for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
      if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
        continue;
      }
      validChecksumAlgorithms.push(algorithm);
    }
    return validChecksumAlgorithms;
  }, "getChecksumAlgorithmListForResponse");
  var isChecksumWithPartNumber = /* @__PURE__ */ __name((checksum) => {
    const lastHyphenIndex = checksum.lastIndexOf("-");
    if (lastHyphenIndex !== -1) {
      const numberPart = checksum.slice(lastHyphenIndex + 1);
      if (!numberPart.startsWith("0")) {
        const number = parseInt(numberPart, 10);
        if (!isNaN(number) && number >= 1 && number <= 1e4) {
          return true;
        }
      }
    }
    return false;
  }, "isChecksumWithPartNumber");
  var getChecksum = /* @__PURE__ */ __name(async (body, { checksumAlgorithmFn, base64Encoder }) => base64Encoder(await stringHasher(checksumAlgorithmFn, body)), "getChecksum");
  var validateChecksumFromResponse = /* @__PURE__ */ __name(async (response, { config, responseAlgorithms, logger }) => {
    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
    const { body: responseBody, headers: responseHeaders } = response;
    for (const algorithm of checksumAlgorithms) {
      const responseHeader = getChecksumLocationName(algorithm);
      const checksumFromResponse = responseHeaders[responseHeader];
      if (checksumFromResponse) {
        let checksumAlgorithmFn;
        try {
          checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);
        } catch (error) {
          if (algorithm === "CRC64NVME") {
            logger?.warn(`Skipping ${"CRC64NVME"} checksum validation: ${error.message}`);
            continue;
          }
          throw error;
        }
        const { base64Encoder } = config;
        if (isStreaming(responseBody)) {
          response.body = (0, import_util_stream.createChecksumStream)({
            expectedChecksum: checksumFromResponse,
            checksumSourceLocation: responseHeader,
            checksum: new checksumAlgorithmFn,
            source: responseBody,
            base64Encoder
          });
          return;
        }
        const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });
        if (checksum === checksumFromResponse) {
          break;
        }
        throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
      }
    }
  }, "validateChecksumFromResponse");
  var flexibleChecksumsResponseMiddlewareOptions = {
    name: "flexibleChecksumsResponseMiddleware",
    toMiddleware: "deserializerMiddleware",
    relation: "after",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  var flexibleChecksumsResponseMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const input = args.input;
    const result = await next(args);
    const response = result.response;
    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
    if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
      const { clientName, commandName } = context;
      const isS3WholeObjectMultipartGetResponseChecksum = clientName === "S3Client" && commandName === "GetObjectCommand" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = response.headers[responseHeader];
        return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);
      });
      if (isS3WholeObjectMultipartGetResponseChecksum) {
        return result;
      }
      await validateChecksumFromResponse(response, {
        config,
        responseAlgorithms,
        logger: context.logger
      });
    }
    return result;
  }, "flexibleChecksumsResponseMiddleware");
  var getFlexibleChecksumsPlugin = /* @__PURE__ */ __name((config, middlewareConfig) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
      clientStack.addRelativeTo(flexibleChecksumsInputMiddleware(config, middlewareConfig), flexibleChecksumsInputMiddlewareOptions);
      clientStack.addRelativeTo(flexibleChecksumsResponseMiddleware(config, middlewareConfig), flexibleChecksumsResponseMiddlewareOptions);
    }, "applyToStack")
  }), "getFlexibleChecksumsPlugin");
  var import_util_middleware = require_dist_cjs6();
  var resolveFlexibleChecksumsConfig = /* @__PURE__ */ __name((input) => {
    const { requestChecksumCalculation, responseChecksumValidation, requestStreamBufferSize } = input;
    return Object.assign(input, {
      requestChecksumCalculation: (0, import_util_middleware.normalizeProvider)(requestChecksumCalculation ?? DEFAULT_REQUEST_CHECKSUM_CALCULATION),
      responseChecksumValidation: (0, import_util_middleware.normalizeProvider)(responseChecksumValidation ?? DEFAULT_RESPONSE_CHECKSUM_VALIDATION),
      requestStreamBufferSize: Number(requestStreamBufferSize ?? 0)
    });
  }, "resolveFlexibleChecksumsConfig");
});

// ../../node_modules/.bun/@aws-sdk+util-arn-parser@3.723.0/node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js
var require_dist_cjs66 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    build: () => build,
    parse: () => parse,
    validate: () => validate
  });
  module.exports = __toCommonJS(src_exports);
  var validate = /* @__PURE__ */ __name((str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6, "validate");
  var parse = /* @__PURE__ */ __name((arn) => {
    const segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn")
      throw new Error("Malformed ARN");
    const [
      ,
      partition,
      service,
      region,
      accountId,
      ...resource
    ] = segments;
    return {
      partition,
      service,
      region,
      accountId,
      resource: resource.join(":")
    };
  }, "parse");
  var build = /* @__PURE__ */ __name((arnObject) => {
    const { partition = "aws", service, region, accountId, resource } = arnObject;
    if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
      throw new Error("Input ARN object is invalid");
    }
    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
  }, "build");
});

// ../../node_modules/.bun/@aws-sdk+middleware-sdk-s3@3.775.0/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js
var require_dist_cjs67 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS: () => NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS,
    S3ExpressIdentityCache: () => S3ExpressIdentityCache,
    S3ExpressIdentityCacheEntry: () => S3ExpressIdentityCacheEntry,
    S3ExpressIdentityProviderImpl: () => S3ExpressIdentityProviderImpl,
    SignatureV4S3Express: () => SignatureV4S3Express,
    checkContentLengthHeader: () => checkContentLengthHeader,
    checkContentLengthHeaderMiddlewareOptions: () => checkContentLengthHeaderMiddlewareOptions,
    getCheckContentLengthHeaderPlugin: () => getCheckContentLengthHeaderPlugin,
    getRegionRedirectMiddlewarePlugin: () => getRegionRedirectMiddlewarePlugin,
    getS3ExpiresMiddlewarePlugin: () => getS3ExpiresMiddlewarePlugin,
    getS3ExpressHttpSigningPlugin: () => getS3ExpressHttpSigningPlugin,
    getS3ExpressPlugin: () => getS3ExpressPlugin,
    getThrow200ExceptionsPlugin: () => getThrow200ExceptionsPlugin,
    getValidateBucketNamePlugin: () => getValidateBucketNamePlugin,
    regionRedirectEndpointMiddleware: () => regionRedirectEndpointMiddleware,
    regionRedirectEndpointMiddlewareOptions: () => regionRedirectEndpointMiddlewareOptions,
    regionRedirectMiddleware: () => regionRedirectMiddleware,
    regionRedirectMiddlewareOptions: () => regionRedirectMiddlewareOptions,
    resolveS3Config: () => resolveS3Config,
    s3ExpiresMiddleware: () => s3ExpiresMiddleware,
    s3ExpiresMiddlewareOptions: () => s3ExpiresMiddlewareOptions,
    s3ExpressHttpSigningMiddleware: () => s3ExpressHttpSigningMiddleware,
    s3ExpressHttpSigningMiddlewareOptions: () => s3ExpressHttpSigningMiddlewareOptions,
    s3ExpressMiddleware: () => s3ExpressMiddleware,
    s3ExpressMiddlewareOptions: () => s3ExpressMiddlewareOptions,
    throw200ExceptionsMiddleware: () => throw200ExceptionsMiddleware,
    throw200ExceptionsMiddlewareOptions: () => throw200ExceptionsMiddlewareOptions,
    validateBucketNameMiddleware: () => validateBucketNameMiddleware,
    validateBucketNameMiddlewareOptions: () => validateBucketNameMiddlewareOptions
  });
  module.exports = __toCommonJS(index_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var CONTENT_LENGTH_HEADER = "content-length";
  var DECODED_CONTENT_LENGTH_HEADER = "x-amz-decoded-content-length";
  function checkContentLengthHeader() {
    return (next, context) => async (args) => {
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        if (!(CONTENT_LENGTH_HEADER in request.headers) && !(DECODED_CONTENT_LENGTH_HEADER in request.headers)) {
          const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
          if (typeof context?.logger?.warn === "function" && !(context.logger instanceof import_smithy_client.NoOpLogger)) {
            context.logger.warn(message);
          } else {
            console.warn(message);
          }
        }
      }
      return next({ ...args });
    };
  }
  __name(checkContentLengthHeader, "checkContentLengthHeader");
  var checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["CHECK_CONTENT_LENGTH_HEADER"],
    name: "getCheckContentLengthHeaderPlugin",
    override: true
  };
  var getCheckContentLengthHeaderPlugin = /* @__PURE__ */ __name((unused) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
    }, "applyToStack")
  }), "getCheckContentLengthHeaderPlugin");
  var regionRedirectEndpointMiddleware = /* @__PURE__ */ __name((config) => {
    return (next, context) => async (args) => {
      const originalRegion = await config.region();
      const regionProviderRef = config.region;
      let unlock = /* @__PURE__ */ __name(() => {}, "unlock");
      if (context.__s3RegionRedirect) {
        Object.defineProperty(config, "region", {
          writable: false,
          value: /* @__PURE__ */ __name(async () => {
            return context.__s3RegionRedirect;
          }, "value")
        });
        unlock = /* @__PURE__ */ __name(() => Object.defineProperty(config, "region", {
          writable: true,
          value: regionProviderRef
        }), "unlock");
      }
      try {
        const result = await next(args);
        if (context.__s3RegionRedirect) {
          unlock();
          const region = await config.region();
          if (originalRegion !== region) {
            throw new Error("Region was not restored following S3 region redirect.");
          }
        }
        return result;
      } catch (e) {
        unlock();
        throw e;
      }
    };
  }, "regionRedirectEndpointMiddleware");
  var regionRedirectEndpointMiddlewareOptions = {
    tags: ["REGION_REDIRECT", "S3"],
    name: "regionRedirectEndpointMiddleware",
    override: true,
    relation: "before",
    toMiddleware: "endpointV2Middleware"
  };
  function regionRedirectMiddleware(clientConfig) {
    return (next, context) => async (args) => {
      try {
        return await next(args);
      } catch (err) {
        if (clientConfig.followRegionRedirects) {
          if (err?.$metadata?.httpStatusCode === 301 || err?.$metadata?.httpStatusCode === 400 && err?.name === "IllegalLocationConstraintException") {
            try {
              const actualRegion = err.$response.headers["x-amz-bucket-region"];
              context.logger?.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);
              context.__s3RegionRedirect = actualRegion;
            } catch (e) {
              throw new Error("Region redirect failed: " + e);
            }
            return next(args);
          }
        }
        throw err;
      }
    };
  }
  __name(regionRedirectMiddleware, "regionRedirectMiddleware");
  var regionRedirectMiddlewareOptions = {
    step: "initialize",
    tags: ["REGION_REDIRECT", "S3"],
    name: "regionRedirectMiddleware",
    override: true
  };
  var getRegionRedirectMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);
      clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);
    }, "applyToStack")
  }), "getRegionRedirectMiddlewarePlugin");
  var s3ExpiresMiddleware = /* @__PURE__ */ __name((config) => {
    return (next, context) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (import_protocol_http.HttpResponse.isInstance(response)) {
        if (response.headers.expires) {
          response.headers.expiresstring = response.headers.expires;
          try {
            (0, import_smithy_client.parseRfc7231DateTime)(response.headers.expires);
          } catch (e) {
            context.logger?.warn(`AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e}`);
            delete response.headers.expires;
          }
        }
      }
      return result;
    };
  }, "s3ExpiresMiddleware");
  var s3ExpiresMiddlewareOptions = {
    tags: ["S3"],
    name: "s3ExpiresMiddleware",
    override: true,
    relation: "after",
    toMiddleware: "deserializerMiddleware"
  };
  var getS3ExpiresMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);
    }, "applyToStack")
  }), "getS3ExpiresMiddlewarePlugin");
  var S3ExpressIdentityCache = class _S3ExpressIdentityCache {
    constructor(data = {}) {
      this.data = data;
    }
    static {
      __name(this, "S3ExpressIdentityCache");
    }
    lastPurgeTime = Date.now();
    static EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 30000;
    get(key) {
      const entry = this.data[key];
      if (!entry) {
        return;
      }
      return entry;
    }
    set(key, entry) {
      this.data[key] = entry;
      return entry;
    }
    delete(key) {
      delete this.data[key];
    }
    async purgeExpired() {
      const now = Date.now();
      if (this.lastPurgeTime + _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {
        return;
      }
      for (const key in this.data) {
        const entry = this.data[key];
        if (!entry.isRefreshing) {
          const credential = await entry.identity;
          if (credential.expiration) {
            if (credential.expiration.getTime() < now) {
              delete this.data[key];
            }
          }
        }
      }
    }
  };
  var S3ExpressIdentityCacheEntry = class {
    constructor(_identity, isRefreshing = false, accessed = Date.now()) {
      this._identity = _identity;
      this.isRefreshing = isRefreshing;
      this.accessed = accessed;
    }
    static {
      __name(this, "S3ExpressIdentityCacheEntry");
    }
    get identity() {
      this.accessed = Date.now();
      return this._identity;
    }
  };
  var S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl {
    constructor(createSessionFn, cache = new S3ExpressIdentityCache) {
      this.createSessionFn = createSessionFn;
      this.cache = cache;
    }
    static {
      __name(this, "S3ExpressIdentityProviderImpl");
    }
    static REFRESH_WINDOW_MS = 60000;
    async getS3ExpressIdentity(awsIdentity, identityProperties) {
      const key = identityProperties.Bucket;
      const { cache } = this;
      const entry = cache.get(key);
      if (entry) {
        return entry.identity.then((identity) => {
          const isExpired = (identity.expiration?.getTime() ?? 0) < Date.now();
          if (isExpired) {
            return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
          }
          const isExpiringSoon = (identity.expiration?.getTime() ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS;
          if (isExpiringSoon && !entry.isRefreshing) {
            entry.isRefreshing = true;
            this.getIdentity(key).then((id) => {
              cache.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));
            });
          }
          return identity;
        });
      }
      return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
    }
    async getIdentity(key) {
      await this.cache.purgeExpired().catch((error) => {
        console.warn(`Error while clearing expired entries in S3ExpressIdentityCache: 
` + error);
      });
      const session = await this.createSessionFn(key);
      if (!session.Credentials?.AccessKeyId || !session.Credentials?.SecretAccessKey) {
        throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");
      }
      const identity = {
        accessKeyId: session.Credentials.AccessKeyId,
        secretAccessKey: session.Credentials.SecretAccessKey,
        sessionToken: session.Credentials.SessionToken,
        expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : undefined
      };
      return identity;
    }
  };
  var import_signature_v4 = require_dist_cjs22();
  var import_util_config_provider = require_dist_cjs27();
  var S3_EXPRESS_BUCKET_TYPE = "Directory";
  var S3_EXPRESS_BACKEND = "S3Express";
  var S3_EXPRESS_AUTH_SCHEME = "sigv4-s3express";
  var SESSION_TOKEN_QUERY_PARAM = "X-Amz-S3session-Token";
  var SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME = "AWS_S3_DISABLE_EXPRESS_SESSION_AUTH";
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME = "s3_disable_express_session_auth";
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME, import_util_config_provider.SelectorType.ENV), "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME, import_util_config_provider.SelectorType.CONFIG), "configFileSelector"),
    default: false
  };
  var SignatureV4S3Express = class extends import_signature_v4.SignatureV4 {
    static {
      __name(this, "SignatureV4S3Express");
    }
    async signWithCredentials(requestToSign, credentials, options) {
      const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
      requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;
      const privateAccess = this;
      setSingleOverride(privateAccess, credentialsWithoutSessionToken);
      return privateAccess.signRequest(requestToSign, options ?? {});
    }
    async presignWithCredentials(requestToSign, credentials, options) {
      const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
      delete requestToSign.headers[SESSION_TOKEN_HEADER];
      requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
      requestToSign.query = requestToSign.query ?? {};
      requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
      const privateAccess = this;
      setSingleOverride(privateAccess, credentialsWithoutSessionToken);
      return this.presign(requestToSign, options);
    }
  };
  function getCredentialsWithoutSessionToken(credentials) {
    const credentialsWithoutSessionToken = {
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      expiration: credentials.expiration
    };
    return credentialsWithoutSessionToken;
  }
  __name(getCredentialsWithoutSessionToken, "getCredentialsWithoutSessionToken");
  function setSingleOverride(privateAccess, credentialsWithoutSessionToken) {
    const id = setTimeout(() => {
      throw new Error("SignatureV4S3Express credential override was created but not called.");
    }, 10);
    const currentCredentialProvider = privateAccess.credentialProvider;
    const overrideCredentialsProviderOnce = /* @__PURE__ */ __name(() => {
      clearTimeout(id);
      privateAccess.credentialProvider = currentCredentialProvider;
      return Promise.resolve(credentialsWithoutSessionToken);
    }, "overrideCredentialsProviderOnce");
    privateAccess.credentialProvider = overrideCredentialsProviderOnce;
  }
  __name(setSingleOverride, "setSingleOverride");
  var import_core = require_dist_cjs25();
  var s3ExpressMiddleware = /* @__PURE__ */ __name((options) => {
    return (next, context) => async (args) => {
      if (context.endpointV2) {
        const endpoint = context.endpointV2;
        const isS3ExpressAuth = endpoint.properties?.authSchemes?.[0]?.name === S3_EXPRESS_AUTH_SCHEME;
        const isS3ExpressBucket = endpoint.properties?.backend === S3_EXPRESS_BACKEND || endpoint.properties?.bucketType === S3_EXPRESS_BUCKET_TYPE;
        if (isS3ExpressBucket) {
          (0, import_core.setFeature)(context, "S3_EXPRESS_BUCKET", "J");
          context.isS3ExpressBucket = true;
        }
        if (isS3ExpressAuth) {
          const requestBucket = args.input.Bucket;
          if (requestBucket) {
            const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {
              Bucket: requestBucket
            });
            context.s3ExpressIdentity = s3ExpressIdentity;
            if (import_protocol_http.HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {
              args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;
            }
          }
        }
      }
      return next(args);
    };
  }, "s3ExpressMiddleware");
  var s3ExpressMiddlewareOptions = {
    name: "s3ExpressMiddleware",
    step: "build",
    tags: ["S3", "S3_EXPRESS"],
    override: true
  };
  var getS3ExpressPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);
    }, "applyToStack")
  }), "getS3ExpressPlugin");
  var import_core2 = require_dist_cjs18();
  var import_util_middleware = require_dist_cjs6();
  var signS3Express = /* @__PURE__ */ __name(async (s3ExpressIdentity, signingOptions, request, sigV4MultiRegionSigner) => {
    const signedRequest = await sigV4MultiRegionSigner.signWithCredentials(request, s3ExpressIdentity, {});
    if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) {
      throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
    }
    return signedRequest;
  }, "signS3Express");
  var defaultErrorHandler = /* @__PURE__ */ __name((signingProperties) => (error) => {
    throw error;
  }, "defaultErrorHandler");
  var defaultSuccessHandler = /* @__PURE__ */ __name((httpResponse, signingProperties) => {}, "defaultSuccessHandler");
  var s3ExpressHttpSigningMiddlewareOptions = import_core2.httpSigningMiddlewareOptions;
  var s3ExpressHttpSigningMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
      throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const {
      httpAuthOption: { signingProperties = {} },
      identity,
      signer
    } = scheme;
    let request;
    if (context.s3ExpressIdentity) {
      request = await signS3Express(context.s3ExpressIdentity, signingProperties, args.request, await config.signer());
    } else {
      request = await signer.sign(args.request, identity, signingProperties);
    }
    const output = await next({
      ...args,
      request
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
  }, "s3ExpressHttpSigningMiddleware");
  var getS3ExpressHttpSigningPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.addRelativeTo(s3ExpressHttpSigningMiddleware(config), import_core2.httpSigningMiddlewareOptions);
    }, "applyToStack")
  }), "getS3ExpressHttpSigningPlugin");
  var resolveS3Config = /* @__PURE__ */ __name((input, {
    session
  }) => {
    const [s3ClientProvider, CreateSessionCommandCtor] = session;
    const {
      forcePathStyle,
      useAccelerateEndpoint,
      disableMultiregionAccessPoints,
      followRegionRedirects,
      s3ExpressIdentityProvider,
      bucketEndpoint
    } = input;
    return Object.assign(input, {
      forcePathStyle: forcePathStyle ?? false,
      useAccelerateEndpoint: useAccelerateEndpoint ?? false,
      disableMultiregionAccessPoints: disableMultiregionAccessPoints ?? false,
      followRegionRedirects: followRegionRedirects ?? false,
      s3ExpressIdentityProvider: s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async (key) => s3ClientProvider().send(new CreateSessionCommandCtor({
        Bucket: key
      }))),
      bucketEndpoint: bucketEndpoint ?? false
    });
  }, "resolveS3Config");
  var import_util_stream = require_dist_cjs17();
  var THROW_IF_EMPTY_BODY = {
    CopyObjectCommand: true,
    UploadPartCopyCommand: true,
    CompleteMultipartUploadCommand: true
  };
  var MAX_BYTES_TO_INSPECT = 3000;
  var throw200ExceptionsMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
    const result = await next(args);
    const { response } = result;
    if (!import_protocol_http.HttpResponse.isInstance(response)) {
      return result;
    }
    const { statusCode, body: sourceBody } = response;
    if (statusCode < 200 || statusCode >= 300) {
      return result;
    }
    const isSplittableStream = typeof sourceBody?.stream === "function" || typeof sourceBody?.pipe === "function" || typeof sourceBody?.tee === "function";
    if (!isSplittableStream) {
      return result;
    }
    let bodyCopy = sourceBody;
    let body = sourceBody;
    if (sourceBody && typeof sourceBody === "object" && !(sourceBody instanceof Uint8Array)) {
      [bodyCopy, body] = await (0, import_util_stream.splitStream)(sourceBody);
    }
    response.body = body;
    const bodyBytes = await collectBody2(bodyCopy, {
      streamCollector: /* @__PURE__ */ __name(async (stream) => {
        return (0, import_util_stream.headStream)(stream, MAX_BYTES_TO_INSPECT);
      }, "streamCollector")
    });
    if (typeof bodyCopy?.destroy === "function") {
      bodyCopy.destroy();
    }
    const bodyStringTail = config.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));
    if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {
      const err = new Error("S3 aborted request");
      err.name = "InternalError";
      throw err;
    }
    if (bodyStringTail && bodyStringTail.endsWith("</Error>")) {
      response.statusCode = 400;
    }
    return result;
  }, "throw200ExceptionsMiddleware");
  var collectBody2 = /* @__PURE__ */ __name((streamBody = new Uint8Array, context) => {
    if (streamBody instanceof Uint8Array) {
      return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array);
  }, "collectBody");
  var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true
  };
  var getThrow200ExceptionsPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    }, "applyToStack")
  }), "getThrow200ExceptionsPlugin");
  var import_util_arn_parser = require_dist_cjs66();
  function bucketEndpointMiddleware(options) {
    return (next, context) => async (args) => {
      if (options.bucketEndpoint) {
        const endpoint = context.endpointV2;
        if (endpoint) {
          const bucket = args.input.Bucket;
          if (typeof bucket === "string") {
            try {
              const bucketEndpointUrl = new URL(bucket);
              context.endpointV2 = {
                ...endpoint,
                url: bucketEndpointUrl
              };
            } catch (e) {
              const warning = `@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${bucket} could not be parsed as URL.`;
              if (context.logger?.constructor?.name === "NoOpLogger") {
                console.warn(warning);
              } else {
                context.logger?.warn?.(warning);
              }
              throw e;
            }
          }
        }
      }
      return next(args);
    };
  }
  __name(bucketEndpointMiddleware, "bucketEndpointMiddleware");
  var bucketEndpointMiddlewareOptions = {
    name: "bucketEndpointMiddleware",
    override: true,
    relation: "after",
    toMiddleware: "endpointV2Middleware"
  };
  function validateBucketNameMiddleware({ bucketEndpoint }) {
    return (next) => async (args) => {
      const {
        input: { Bucket }
      } = args;
      if (!bucketEndpoint && typeof Bucket === "string" && !(0, import_util_arn_parser.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
        const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
        err.name = "InvalidBucketName";
        throw err;
      }
      return next({ ...args });
    };
  }
  __name(validateBucketNameMiddleware, "validateBucketNameMiddleware");
  var validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware",
    override: true
  };
  var getValidateBucketNamePlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(validateBucketNameMiddleware(options), validateBucketNameMiddlewareOptions);
      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
    }, "applyToStack")
  }), "getValidateBucketNamePlugin");
});

// ../../node_modules/.bun/@aws-sdk+signature-v4-multi-region@3.775.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js
var require_dist_cjs68 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    SignatureV4MultiRegion: () => SignatureV4MultiRegion,
    signatureV4CrtContainer: () => signatureV4CrtContainer
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_sdk_s3 = require_dist_cjs67();
  var signatureV4CrtContainer = {
    CrtSignerV4: null
  };
  var SignatureV4MultiRegion = class {
    static {
      __name(this, "SignatureV4MultiRegion");
    }
    sigv4aSigner;
    sigv4Signer;
    signerOptions;
    constructor(options) {
      this.sigv4Signer = new import_middleware_sdk_s3.SignatureV4S3Express(options);
      this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().sign(requestToSign, options);
      }
      return this.sigv4Signer.sign(requestToSign, options);
    }
    async signWithCredentials(requestToSign, credentials, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().signWithCredentials(requestToSign, credentials, options);
      }
      return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);
    }
    async presign(originalRequest, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().presign(originalRequest, options);
      }
      return this.sigv4Signer.presign(originalRequest, options);
    }
    async presignWithCredentials(originalRequest, credentials, options = {}) {
      if (options.signingRegion === "*") {
        throw new Error("Method presignWithCredentials is not supported for [signingRegion=*].");
      }
      return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);
    }
    getSigv4aSigner() {
      if (!this.sigv4aSigner) {
        let CrtSignerV4 = null;
        try {
          CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (typeof CrtSignerV4 !== "function")
            throw new Error;
        } catch (e) {
          e.message = `${e.message}
Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
          throw e;
        }
        this.sigv4aSigner = new CrtSignerV4({
          ...this.signerOptions,
          signingAlgorithm: 1
        });
      }
      return this.sigv4aSigner;
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/ruleset.js
var require_ruleset7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var cp = "required";
  var cq = "type";
  var cr = "rules";
  var cs = "conditions";
  var ct = "fn";
  var cu = "argv";
  var cv = "ref";
  var cw = "assign";
  var cx = "url";
  var cy = "properties";
  var cz = "backend";
  var cA = "authSchemes";
  var cB = "disableDoubleEncoding";
  var cC = "signingName";
  var cD = "signingRegion";
  var cE = "headers";
  var cF = "signingRegionSet";
  var a = 6;
  var b = false;
  var c = true;
  var d = "isSet";
  var e = "booleanEquals";
  var f = "error";
  var g = "aws.partition";
  var h = "stringEquals";
  var i = "getAttr";
  var j = "name";
  var k = "substring";
  var l = "bucketSuffix";
  var m = "parseURL";
  var n = "endpoint";
  var o = "tree";
  var p = "aws.isVirtualHostableS3Bucket";
  var q = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
  var r = "not";
  var s = "accessPointSuffix";
  var t = "{url#scheme}://{url#authority}{url#path}";
  var u = "hardwareType";
  var v = "regionPrefix";
  var w = "bucketAliasSuffix";
  var x = "outpostId";
  var y = "isValidHostLabel";
  var z = "sigv4a";
  var A = "s3-outposts";
  var B = "s3";
  var C = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
  var D = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
  var E = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
  var F = "aws.parseArn";
  var G = "bucketArn";
  var H = "arnType";
  var I = "";
  var J = "s3-object-lambda";
  var K = "accesspoint";
  var L = "accessPointName";
  var M = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
  var N = "mrapPartition";
  var O = "outpostType";
  var P = "arnPrefix";
  var Q = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
  var R = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
  var S = "https://s3.{partitionResult#dnsSuffix}";
  var T = { [cp]: false, [cq]: "String" };
  var U = { [cp]: true, default: false, [cq]: "Boolean" };
  var V = { [cp]: false, [cq]: "Boolean" };
  var W = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, true] };
  var X = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, true] };
  var Y = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, true] };
  var Z = { [ct]: d, [cu]: [{ [cv]: "Endpoint" }] };
  var aa = { [ct]: g, [cu]: [{ [cv]: "Region" }], [cw]: "partitionResult" };
  var ab = { [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }, "aws-cn"] };
  var ac = { [ct]: d, [cu]: [{ [cv]: "Bucket" }] };
  var ad = { [cv]: "Bucket" };
  var ae = { [cs]: [Y], [f]: "S3Express does not support Dual-stack.", [cq]: f };
  var af = { [cs]: [W], [f]: "S3Express does not support S3 Accelerate.", [cq]: f };
  var ag = { [cs]: [Z, { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" }], [cr]: [{ [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }], [cr]: [{ [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o };
  var ah = { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" };
  var ai = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] };
  var aj = { [cv]: "url" };
  var ak = { [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" };
  var al = { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] };
  var am = {};
  var an = { [ct]: p, [cu]: [ad, false] };
  var ao = { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f };
  var ap = { [ct]: d, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }] };
  var aq = { [ct]: e, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }, true] };
  var ar = { [ct]: r, [cu]: [Z] };
  var as = { [f]: "Unrecognized S3Express bucket name format.", [cq]: f };
  var at = { [ct]: r, [cu]: [ac] };
  var au = { [cv]: u };
  var av = { [cs]: [ar], [f]: "Expected a endpoint to be specified but no endpoint was found", [cq]: f };
  var aw = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{Region}" }] };
  var ax = { [ct]: e, [cu]: [{ [cv]: "ForcePathStyle" }, false] };
  var ay = { [cv]: "ForcePathStyle" };
  var az = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, false] };
  var aA = { [ct]: h, [cu]: [{ [cv]: "Region" }, "aws-global"] };
  var aB = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "us-east-1" }] };
  var aC = { [ct]: r, [cu]: [aA] };
  var aD = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, true] };
  var aE = { [cx]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] }, [cE]: {} };
  var aF = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] };
  var aG = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, false] };
  var aH = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, false] };
  var aI = { [cx]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var aJ = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, false] };
  var aK = { [cx]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var aL = { [cx]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var aM = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [aj, "isIp"] }, false] };
  var aN = { [cx]: C, [cy]: aF, [cE]: {} };
  var aO = { [cx]: q, [cy]: aF, [cE]: {} };
  var aP = { [n]: aO, [cq]: n };
  var aQ = { [cx]: D, [cy]: aF, [cE]: {} };
  var aR = { [cx]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var aS = { [f]: "Invalid region: region was not a valid DNS name.", [cq]: f };
  var aT = { [cv]: G };
  var aU = { [cv]: H };
  var aV = { [ct]: i, [cu]: [aT, "service"] };
  var aW = { [cv]: L };
  var aX = { [cs]: [Y], [f]: "S3 Object Lambda does not support Dual-stack", [cq]: f };
  var aY = { [cs]: [W], [f]: "S3 Object Lambda does not support S3 Accelerate", [cq]: f };
  var aZ = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableAccessPoints" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableAccessPoints" }, true] }], [f]: "Access points are not supported for this operation", [cq]: f };
  var ba = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "UseArnRegion" }] }, { [ct]: e, [cu]: [{ [cv]: "UseArnRegion" }, false] }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, "{Region}"] }] }], [f]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [cq]: f };
  var bb = { [ct]: i, [cu]: [{ [cv]: "bucketPartition" }, j] };
  var bc = { [ct]: i, [cu]: [aT, "accountId"] };
  var bd = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{bucketArn#region}" }] };
  var be = { [f]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [cq]: f };
  var bf = { [f]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [cq]: f };
  var bg = { [f]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [cq]: f };
  var bh = { [f]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [cq]: f };
  var bi = { [f]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [cq]: f };
  var bj = { [f]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [cq]: f };
  var bk = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{bucketArn#region}" }] };
  var bl = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{bucketArn#region}" }] };
  var bm = { [ct]: F, [cu]: [ad] };
  var bn = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
  var bo = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
  var bp = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
  var bq = { [cx]: Q, [cy]: aF, [cE]: {} };
  var br = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
  var bs = { [cv]: "UseObjectLambdaEndpoint" };
  var bt = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{Region}" }] };
  var bu = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var bv = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var bw = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var bx = { [cx]: t, [cy]: aF, [cE]: {} };
  var by = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
  var bz = [{ [cv]: "Region" }];
  var bA = [{ [cv]: "Endpoint" }];
  var bB = [ad];
  var bC = [Y];
  var bD = [W];
  var bE = [Z, ah];
  var bF = [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }];
  var bG = [ak];
  var bH = [an];
  var bI = [aa];
  var bJ = [X];
  var bK = [{ [ct]: k, [cu]: [ad, 6, 14, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 14, 16, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bL = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }];
  var bM = [{ [ct]: k, [cu]: [ad, 6, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bN = [{ [ct]: k, [cu]: [ad, 6, 19, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 19, 21, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bO = [{ [ct]: k, [cu]: [ad, 6, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bP = [{ [ct]: k, [cu]: [ad, 6, 26, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 26, 28, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bQ = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }];
  var bR = [ad, 0, 7, true];
  var bS = [{ [ct]: k, [cu]: [ad, 7, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bT = [{ [ct]: k, [cu]: [ad, 7, 16, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 16, 18, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bU = [{ [ct]: k, [cu]: [ad, 7, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bV = [{ [ct]: k, [cu]: [ad, 7, 21, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 21, 23, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bW = [{ [ct]: k, [cu]: [ad, 7, 27, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 27, 29, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bX = [ac];
  var bY = [{ [ct]: y, [cu]: [{ [cv]: x }, false] }];
  var bZ = [{ [ct]: h, [cu]: [{ [cv]: v }, "beta"] }];
  var ca = ["*"];
  var cb = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, false] }];
  var cc = [{ [ct]: h, [cu]: [{ [cv]: "Region" }, "us-east-1"] }];
  var cd = [{ [ct]: h, [cu]: [aU, K] }];
  var ce = [{ [ct]: i, [cu]: [aT, "resourceId[1]"], [cw]: L }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aW, I] }] }];
  var cf = [aT, "resourceId[1]"];
  var cg = [{ [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, I] }] }];
  var ch = [{ [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[2]"] }] }] }];
  var ci = [aT, "resourceId[2]"];
  var cj = [{ [ct]: g, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }], [cw]: "bucketPartition" }];
  var ck = [{ [ct]: h, [cu]: [bb, { [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }] }];
  var cl = [{ [ct]: y, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, true] }];
  var cm = [{ [ct]: y, [cu]: [bc, false] }];
  var cn = [{ [ct]: y, [cu]: [aW, false] }];
  var co = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, true] }];
  var _data = { version: "1.0", parameters: { Bucket: T, Region: T, UseFIPS: U, UseDualStack: U, Endpoint: T, ForcePathStyle: U, Accelerate: U, UseGlobalEndpoint: U, UseObjectLambdaEndpoint: V, Key: T, Prefix: T, CopySource: T, DisableAccessPoints: V, DisableMultiRegionAccessPoints: U, UseArnRegion: V, UseS3ExpressControlEndpoint: V, DisableS3ExpressSessionAuth: V }, [cr]: [{ [cs]: [{ [ct]: d, [cu]: bz }], [cr]: [{ [cs]: [W, X], error: "Accelerate cannot be used with FIPS", [cq]: f }, { [cs]: [Y, Z], error: "Cannot set dual-stack in combination with a custom endpoint.", [cq]: f }, { [cs]: [Z, X], error: "A custom endpoint cannot be combined with FIPS", [cq]: f }, { [cs]: [Z, W], error: "A custom endpoint cannot be combined with S3 Accelerate", [cq]: f }, { [cs]: [X, aa, ab], error: "Partition does not support FIPS", [cq]: f }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 0, a, c], [cw]: l }, { [ct]: h, [cu]: [{ [cv]: l }, "--x-s3"] }], [cr]: [ae, af, ag, { [cs]: [ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [ak, ar], [cr]: [{ [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bK, [cr]: bL, [cq]: o }, { [cs]: bM, [cr]: bL, [cq]: o }, { [cs]: bN, [cr]: bL, [cq]: o }, { [cs]: bO, [cr]: bL, [cq]: o }, { [cs]: bP, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bK, [cr]: bQ, [cq]: o }, { [cs]: bM, [cr]: bQ, [cq]: o }, { [cs]: bN, [cr]: bQ, [cq]: o }, { [cs]: bO, [cr]: bQ, [cq]: o }, { [cs]: bP, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: bR, [cw]: s }, { [ct]: h, [cu]: [{ [cv]: s }, "--xa-s3"] }], [cr]: [ae, af, ag, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bS, [cr]: bL, [cq]: o }, { [cs]: bT, [cr]: bL, [cq]: o }, { [cs]: bU, [cr]: bL, [cq]: o }, { [cs]: bV, [cr]: bL, [cq]: o }, { [cs]: bW, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bS, [cr]: bQ, [cq]: o }, { [cs]: bT, [cr]: bQ, [cq]: o }, { [cs]: bU, [cr]: bQ, [cq]: o }, { [cs]: bV, [cr]: bQ, [cq]: o }, { [cs]: bW, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [at, ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bE, endpoint: { [cx]: t, [cy]: al, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 49, 50, c], [cw]: u }, { [ct]: k, [cu]: [ad, 8, 12, c], [cw]: v }, { [ct]: k, [cu]: bR, [cw]: w }, { [ct]: k, [cu]: [ad, 32, 49, c], [cw]: x }, { [ct]: g, [cu]: bz, [cw]: "regionPartition" }, { [ct]: h, [cu]: [{ [cv]: w }, "--op-s3"] }], [cr]: [{ [cs]: bY, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [au, "e"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.ec2.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [au, "o"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [cq]: f }], [cq]: o }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [cq]: f }], [cq]: o }, { [cs]: bX, [cr]: [{ [cs]: [Z, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: m, [cu]: bA }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [cq]: f }, { [cs]: [ax, an], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [{ [cs]: [W, ab], error: "S3 Accelerate cannot be used in this region", [cq]: f }, { [cs]: [Y, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, X, az, ar, aC, aD], [cr]: [{ endpoint: aE, [cq]: n }], [cq]: o }, { [cs]: [Y, X, az, ar, aC, aG], endpoint: aE, [cq]: n }, { [cs]: [aH, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, X, az, ar, aC, aD], [cr]: [{ endpoint: aI, [cq]: n }], [cq]: o }, { [cs]: [aH, X, az, ar, aC, aG], endpoint: aI, [cq]: n }, { [cs]: [Y, aJ, W, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, W, ar, aC, aD], [cr]: [{ endpoint: aK, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, W, ar, aC, aG], endpoint: aK, [cq]: n }, { [cs]: [Y, aJ, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, az, ar, aC, aD], [cr]: [{ endpoint: aL, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, az, ar, aC, aG], endpoint: aL, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aA], endpoint: { [cx]: C, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aA], endpoint: { [cx]: q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aD], [cr]: [{ [cs]: cc, endpoint: aN, [cq]: n }, { endpoint: aN, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aD], [cr]: [{ [cs]: cc, endpoint: aO, [cq]: n }, aP], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aG], endpoint: aN, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aG], endpoint: aO, [cq]: n }, { [cs]: [aH, aJ, W, ar, aA], endpoint: { [cx]: D, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, W, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: aQ, [cq]: n }, { endpoint: aQ, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, W, ar, aC, aG], endpoint: aQ, [cq]: n }, { [cs]: [aH, aJ, az, ar, aA], endpoint: { [cx]: E, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: E, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: aR, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, ar, aC, aG], endpoint: aR, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [Z, ah, { [ct]: h, [cu]: [{ [ct]: i, [cu]: [aj, "scheme"] }, "http"] }, { [ct]: p, [cu]: [ad, c] }, ax, aJ, aH, az], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [aP], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [ax, { [ct]: F, [cu]: bB, [cw]: G }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[0]"], [cw]: H }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aU, I] }] }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, J] }], [cr]: [{ [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [aX, aY, { [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bc, I] }], error: "Invalid ARN: Missing account id", [cq]: f }, { [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bE, endpoint: { [cx]: M, [cy]: bd, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }, { error: "Invalid ARN: bucket ARN is missing a region", [cq]: f }], [cq]: o }, bj], [cq]: o }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [cq]: f }], [cq]: o }, { [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [{ [cs]: cg, [cr]: [{ [cs]: cd, [cr]: [{ [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bb, "{partitionResult#name}"] }], [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, B] }], [cr]: [{ [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bD, error: "Access Points do not support S3 Accelerate", [cq]: f }, { [cs]: [X, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [X, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah], endpoint: { [cx]: M, [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [cq]: f }], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: y, [cu]: [aW, c] }], [cr]: [{ [cs]: bC, error: "S3 MRAP does not support dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 MRAP does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 MRAP does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [{ [cv]: "DisableMultiRegionAccessPoints" }, c] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [cq]: f }, { [cs]: [{ [ct]: g, [cu]: bz, [cw]: N }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: N }, j] }, { [ct]: i, [cu]: [aT, "partition"] }] }], [cr]: [{ endpoint: { [cx]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [cy]: { [cA]: [{ [cB]: c, name: z, [cC]: B, [cF]: ca }] }, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [cq]: f }], [cq]: o }], [cq]: o }, { error: "Invalid Access Point Name", [cq]: f }], [cq]: o }, bj], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [aV, A] }], [cr]: [{ [cs]: bC, error: "S3 Outposts does not support Dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 Outposts does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 Outposts does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [cq]: f }, { [cs]: [{ [ct]: i, [cu]: cf, [cw]: x }], [cr]: [{ [cs]: bY, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: cm, [cr]: [{ [cs]: [{ [ct]: i, [cu]: ci, [cw]: O }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[3]"], [cw]: L }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [cv]: O }, K] }], [cr]: [{ [cs]: bE, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [cy]: bl, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bl, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [cq]: f }], [cq]: o }, { error: "Invalid ARN: expected an access point name", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Expected a 4-component resource", [cq]: f }], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [cq]: f }], [cq]: o }, { error: "Invalid ARN: The Outpost Id was not set", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [cq]: f }], [cq]: o }, { error: "Invalid ARN: No ARN type specified", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: k, [cu]: [ad, 0, 4, b], [cw]: P }, { [ct]: h, [cu]: [{ [cv]: P }, "arn:"] }, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [bm] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [ay, c] }, bm], error: "Path-style addressing cannot be used with ARN buckets", [cq]: f }, { [cs]: bG, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [az], [cr]: [{ [cs]: [Y, ar, X, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, X, aC, aD], [cr]: [{ endpoint: bn, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, X, aC, aG], endpoint: bn, [cq]: n }, { [cs]: [aH, ar, X, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, X, aC, aD], [cr]: [{ endpoint: bo, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, X, aC, aG], endpoint: bo, [cq]: n }, { [cs]: [Y, ar, aJ, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, aJ, aC, aD], [cr]: [{ endpoint: bp, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, aJ, aC, aG], endpoint: bp, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aA], endpoint: { [cx]: Q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: bq, [cq]: n }, { endpoint: bq, [cq]: n }], [cq]: o }, { [cs]: [aH, Z, ah, aJ, aC, aG], endpoint: bq, [cq]: n }, { [cs]: [aH, ar, aJ, aA], endpoint: { [cx]: R, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: R, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: br, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, aJ, aC, aG], endpoint: br, [cq]: n }], [cq]: o }, { error: "Path-style addressing cannot be used with S3 Accelerate", [cq]: f }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: d, [cu]: [bs] }, { [ct]: e, [cu]: [bs, c] }], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [aX, aY, { [cs]: bE, endpoint: { [cx]: t, [cy]: bt, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [at], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [{ [cs]: [X, Y, ar, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, Y, ar, aC, aD], [cr]: [{ endpoint: bu, [cq]: n }], [cq]: o }, { [cs]: [X, Y, ar, aC, aG], endpoint: bu, [cq]: n }, { [cs]: [X, aH, ar, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, aH, ar, aC, aD], [cr]: [{ endpoint: bv, [cq]: n }], [cq]: o }, { [cs]: [X, aH, ar, aC, aG], endpoint: bv, [cq]: n }, { [cs]: [aJ, Y, ar, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y, ar, aC, aD], [cr]: [{ endpoint: bw, [cq]: n }], [cq]: o }, { [cs]: [aJ, Y, ar, aC, aG], endpoint: bw, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aA], endpoint: { [cx]: t, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aC, aD], [cr]: [{ [cs]: cc, endpoint: bx, [cq]: n }, { endpoint: bx, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, Z, ah, aC, aG], endpoint: bx, [cq]: n }, { [cs]: [aJ, aH, ar, aA], endpoint: { [cx]: S, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: S, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: by, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, ar, aC, aG], endpoint: by, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }], [cq]: o }, { error: "A region must be set when sending requests to S3.", [cq]: f }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset7();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: [
      "Accelerate",
      "Bucket",
      "DisableAccessPoints",
      "DisableMultiRegionAccessPoints",
      "DisableS3ExpressSessionAuth",
      "Endpoint",
      "ForcePathStyle",
      "Region",
      "UseArnRegion",
      "UseDualStack",
      "UseFIPS",
      "UseGlobalEndpoint",
      "UseObjectLambdaEndpoint",
      "UseS3ExpressControlEndpoint"
    ]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultS3HttpAuthSchemeProvider = exports.defaultS3HttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var signature_v4_multi_region_1 = require_dist_cjs68();
  var middleware_endpoint_1 = require_dist_cjs35();
  var util_middleware_1 = require_dist_cjs6();
  var endpointResolver_1 = require_endpointResolver7();
  var createEndpointRuleSetHttpAuthSchemeParametersProvider = (defaultHttpAuthSchemeParametersProvider) => async (config, context, input) => {
    if (!input) {
      throw new Error(`Could not find \`input\` for \`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\``);
    }
    const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config, context, input);
    const instructionsFn = (0, util_middleware_1.getSmithyContext)(context)?.commandInstance?.constructor?.getEndpointParameterInstructions;
    if (!instructionsFn) {
      throw new Error(`getEndpointParameterInstructions() is not defined on \`${context.commandName}\``);
    }
    const endpointParameters = await (0, middleware_endpoint_1.resolveParams)(input, { getEndpointParameterInstructions: instructionsFn }, config);
    return Object.assign(defaultParameters, endpointParameters);
  };
  var _defaultS3HttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "s3",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  function createAwsAuthSigv4aHttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4a",
      signingProperties: {
        name: "s3",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  var createEndpointRuleSetHttpAuthSchemeProvider = (defaultEndpointResolver, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {
    const endpointRuleSetHttpAuthSchemeProvider = (authParameters) => {
      const endpoint = defaultEndpointResolver(authParameters);
      const authSchemes = endpoint.properties?.authSchemes;
      if (!authSchemes) {
        return defaultHttpAuthSchemeResolver(authParameters);
      }
      const options = [];
      for (const scheme of authSchemes) {
        const { name: resolvedName, properties = {}, ...rest } = scheme;
        const name = resolvedName.toLowerCase();
        if (resolvedName !== name) {
          console.warn(`HttpAuthScheme has been normalized with lowercasing: \`${resolvedName}\` to \`${name}\``);
        }
        let schemeId;
        if (name === "sigv4a") {
          schemeId = "aws.auth#sigv4a";
          const sigv4Present = authSchemes.find((s) => {
            const name2 = s.name.toLowerCase();
            return name2 !== "sigv4a" && name2.startsWith("sigv4");
          });
          if (!signature_v4_multi_region_1.signatureV4CrtContainer.CrtSignerV4 && sigv4Present) {
            continue;
          }
        } else if (name.startsWith("sigv4")) {
          schemeId = "aws.auth#sigv4";
        } else {
          throw new Error(`Unknown HttpAuthScheme found in \`@smithy.rules#endpointRuleSet\`: \`${name}\``);
        }
        const createOption = createHttpAuthOptionFunctions[schemeId];
        if (!createOption) {
          throw new Error(`Could not find HttpAuthOption create function for \`${schemeId}\``);
        }
        const option = createOption(authParameters);
        option.schemeId = schemeId;
        option.signingProperties = { ...option.signingProperties || {}, ...rest, ...properties };
        options.push(option);
      }
      return options;
    };
    return endpointRuleSetHttpAuthSchemeProvider;
  };
  var _defaultS3HttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(endpointResolver_1.defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {
    "aws.auth#sigv4": createAwsAuthSigv4HttpAuthOption,
    "aws.auth#sigv4a": createAwsAuthSigv4aHttpAuthOption
  });
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    const config_1 = (0, core_1.resolveAwsSdkSigV4AConfig)(config_0);
    return Object.assign(config_1, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+xml-builder@3.775.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js
var require_dist_cjs69 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    XmlNode: () => XmlNode,
    XmlText: () => XmlText
  });
  module.exports = __toCommonJS(index_exports);
  function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  }
  __name(escapeAttribute, "escapeAttribute");
  function escapeElement(value) {
    return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
  }
  __name(escapeElement, "escapeElement");
  var XmlText = class {
    constructor(value) {
      this.value = value;
    }
    static {
      __name(this, "XmlText");
    }
    toString() {
      return escapeElement("" + this.value);
    }
  };
  var XmlNode = class _XmlNode {
    constructor(name, children = []) {
      this.name = name;
      this.children = children;
    }
    static {
      __name(this, "XmlNode");
    }
    attributes = {};
    static of(name, childText, withName) {
      const node = new _XmlNode(name);
      if (childText !== undefined) {
        node.addChildNode(new XmlText(childText));
      }
      if (withName !== undefined) {
        node.withName(withName);
      }
      return node;
    }
    withName(name) {
      this.name = name;
      return this;
    }
    addAttribute(name, value) {
      this.attributes[name] = value;
      return this;
    }
    addChildNode(child) {
      this.children.push(child);
      return this;
    }
    removeAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    n(name) {
      this.name = name;
      return this;
    }
    c(child) {
      this.children.push(child);
      return this;
    }
    a(name, value) {
      if (value != null) {
        this.attributes[name] = value;
      }
      return this;
    }
    cc(input, field, withName = field) {
      if (input[field] != null) {
        const node = _XmlNode.of(field, input[field]).withName(withName);
        this.c(node);
      }
    }
    l(input, listName, memberName, valueProvider) {
      if (input[listName] != null) {
        const nodes = valueProvider();
        nodes.map((node) => {
          node.withName(memberName);
          this.c(node);
        });
      }
    }
    lc(input, listName, memberName, valueProvider) {
      if (input[listName] != null) {
        const nodes = valueProvider();
        const containerNode = new _XmlNode(memberName);
        nodes.map((node) => {
          containerNode.c(node);
        });
        this.c(containerNode);
      }
    }
    toString() {
      const hasChildren = Boolean(this.children.length);
      let xmlText = `<${this.name}`;
      const attributes = this.attributes;
      for (const attributeName of Object.keys(attributes)) {
        const attribute = attributes[attributeName];
        if (attribute != null) {
          xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
        }
      }
      return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/package.json
var require_package6 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-s3",
    description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-s3",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
      test: "yarn g:vitest run",
      "test:browser": "node ./test/browser-build/esbuild && yarn g:vitest run -c vitest.config.browser.ts",
      "test:browser:watch": "node ./test/browser-build/esbuild && yarn g:vitest watch -c vitest.config.browser.ts",
      "test:e2e": "yarn g:vitest run -c vitest.config.e2e.ts && yarn test:browser",
      "test:e2e:watch": "yarn g:vitest watch -c vitest.config.e2e.ts",
      "test:watch": "yarn g:vitest watch"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha1-browser": "5.2.0",
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-bucket-endpoint": "3.775.0",
      "@aws-sdk/middleware-expect-continue": "3.775.0",
      "@aws-sdk/middleware-flexible-checksums": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-location-constraint": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-sdk-s3": "3.775.0",
      "@aws-sdk/middleware-ssec": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/signature-v4-multi-region": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@aws-sdk/xml-builder": "3.775.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/eventstream-serde-browser": "^4.0.2",
      "@smithy/eventstream-serde-config-resolver": "^4.1.0",
      "@smithy/eventstream-serde-node": "^4.0.2",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-blob-browser": "^4.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/hash-stream-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/md5-js": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-stream": "^4.2.0",
      "@smithy/util-utf8": "^4.0.0",
      "@smithy/util-waiter": "^4.0.3",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@aws-sdk/signature-v4-crt": "3.787.0",
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-s3"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+middleware-bucket-endpoint@3.775.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js
var require_dist_cjs70 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS,
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME,
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME,
    NODE_USE_ARN_REGION_CONFIG_OPTIONS: () => NODE_USE_ARN_REGION_CONFIG_OPTIONS,
    NODE_USE_ARN_REGION_ENV_NAME: () => NODE_USE_ARN_REGION_ENV_NAME,
    NODE_USE_ARN_REGION_INI_NAME: () => NODE_USE_ARN_REGION_INI_NAME,
    bucketEndpointMiddleware: () => bucketEndpointMiddleware,
    bucketEndpointMiddlewareOptions: () => bucketEndpointMiddlewareOptions,
    bucketHostname: () => bucketHostname,
    getArnResources: () => getArnResources,
    getBucketEndpointPlugin: () => getBucketEndpointPlugin,
    getSuffixForArnEndpoint: () => getSuffixForArnEndpoint,
    resolveBucketEndpointConfig: () => resolveBucketEndpointConfig,
    validateAccountId: () => validateAccountId,
    validateDNSHostLabel: () => validateDNSHostLabel,
    validateNoDualstack: () => validateNoDualstack,
    validateNoFIPS: () => validateNoFIPS,
    validateOutpostService: () => validateOutpostService,
    validatePartition: () => validatePartition,
    validateRegion: () => validateRegion
  });
  module.exports = __toCommonJS(index_exports);
  var import_util_config_provider = require_dist_cjs27();
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, import_util_config_provider.SelectorType.ENV), "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, import_util_config_provider.SelectorType.CONFIG), "configFileSelector"),
    default: false
  };
  var NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
  var NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
  var NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: /* @__PURE__ */ __name((env) => (0, import_util_config_provider.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, import_util_config_provider.SelectorType.ENV), "environmentVariableSelector"),
    configFileSelector: /* @__PURE__ */ __name((profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, import_util_config_provider.SelectorType.CONFIG), "configFileSelector"),
    default: false
  };
  var import_util_arn_parser = require_dist_cjs66();
  var import_protocol_http = require_dist_cjs2();
  var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  var DOTS_PATTERN = /\.\./;
  var DOT_PATTERN = /\./;
  var S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
  var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
  var AWS_PARTITION_SUFFIX = "amazonaws.com";
  var isBucketNameOptions = /* @__PURE__ */ __name((options) => typeof options.bucketName === "string", "isBucketNameOptions");
  var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
  var getRegionalSuffix = /* @__PURE__ */ __name((hostname) => {
    const parts = hostname.match(S3_HOSTNAME_PATTERN);
    return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
  }, "getRegionalSuffix");
  var getSuffix = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffix");
  var getSuffixForArnEndpoint = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffixForArnEndpoint");
  var validateArnEndpointOptions = /* @__PURE__ */ __name((options) => {
    if (options.pathStyleEndpoint) {
      throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
    }
    if (options.accelerateEndpoint) {
      throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
    }
    if (!options.tlsCompatible) {
      throw new Error("HTTPS is required when bucket is an ARN");
    }
  }, "validateArnEndpointOptions");
  var validateService = /* @__PURE__ */ __name((service) => {
    if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
      throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
    }
  }, "validateService");
  var validateS3Service = /* @__PURE__ */ __name((service) => {
    if (service !== "s3") {
      throw new Error("Expect 's3' in Accesspoint ARN service component");
    }
  }, "validateS3Service");
  var validateOutpostService = /* @__PURE__ */ __name((service) => {
    if (service !== "s3-outposts") {
      throw new Error("Expect 's3-posts' in Outpost ARN service component");
    }
  }, "validateOutpostService");
  var validatePartition = /* @__PURE__ */ __name((partition, options) => {
    if (partition !== options.clientPartition) {
      throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
    }
  }, "validatePartition");
  var validateRegion = /* @__PURE__ */ __name((region, options) => {
    if (region === "") {
      throw new Error("ARN region is empty");
    }
    if (options.useFipsEndpoint) {
      if (!options.allowFipsRegion) {
        throw new Error("FIPS region is not supported");
      } else if (!isEqualRegions(region, options.clientRegion)) {
        throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
      }
    }
    if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
      throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
    }
  }, "validateRegion");
  var validateRegionalClient = /* @__PURE__ */ __name((region) => {
    if (["s3-external-1", "aws-global"].includes(region)) {
      throw new Error(`Client region ${region} is not regional`);
    }
  }, "validateRegionalClient");
  var isEqualRegions = /* @__PURE__ */ __name((regionA, regionB) => regionA === regionB, "isEqualRegions");
  var validateAccountId = /* @__PURE__ */ __name((accountId) => {
    if (!/[0-9]{12}/.exec(accountId)) {
      throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
    }
  }, "validateAccountId");
  var validateDNSHostLabel = /* @__PURE__ */ __name((label, options = { tlsCompatible: true }) => {
    if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || options?.tlsCompatible && DOT_PATTERN.test(label)) {
      throw new Error(`Invalid DNS label ${label}`);
    }
  }, "validateDNSHostLabel");
  var validateCustomEndpoint = /* @__PURE__ */ __name((options) => {
    if (options.isCustomEndpoint) {
      if (options.dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with custom endpoint");
      if (options.accelerateEndpoint)
        throw new Error("Accelerate endpoint is not supported with custom endpoint");
    }
  }, "validateCustomEndpoint");
  var getArnResources = /* @__PURE__ */ __name((resource) => {
    const delimiter = resource.includes(":") ? ":" : "/";
    const [resourceType, ...rest] = resource.split(delimiter);
    if (resourceType === "accesspoint") {
      if (rest.length !== 1 || rest[0] === "") {
        throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
      }
      return { accesspointName: rest[0] };
    } else if (resourceType === "outpost") {
      if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
        throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
      }
      const [outpostId, _, accesspointName] = rest;
      return { outpostId, accesspointName };
    } else {
      throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
    }
  }, "getArnResources");
  var validateNoDualstack = /* @__PURE__ */ __name((dualstackEndpoint) => {
    if (dualstackEndpoint)
      throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
  }, "validateNoDualstack");
  var validateNoFIPS = /* @__PURE__ */ __name((useFipsEndpoint) => {
    if (useFipsEndpoint)
      throw new Error(`FIPS region is not supported with Outpost.`);
  }, "validateNoFIPS");
  var validateMrapAlias = /* @__PURE__ */ __name((name) => {
    try {
      name.split(".").forEach((label) => {
        validateDNSHostLabel(label);
      });
    } catch (e) {
      throw new Error(`"${name}" is not a DNS compatible name.`);
    }
  }, "validateMrapAlias");
  var bucketHostname = /* @__PURE__ */ __name((options) => {
    validateCustomEndpoint(options);
    return isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
  }, "bucketHostname");
  var getEndpointFromBucketName = /* @__PURE__ */ __name(({
    accelerateEndpoint = false,
    clientRegion: region,
    baseHostname,
    bucketName,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    pathStyleEndpoint = false,
    tlsCompatible = true,
    isCustomEndpoint = false
  }) => {
    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);
    if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {
      return {
        bucketEndpoint: false,
        hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
      };
    }
    if (accelerateEndpoint) {
      baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
    } else if (dualstackEndpoint) {
      baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
    }
    return {
      bucketEndpoint: true,
      hostname: `${bucketName}.${baseHostname}`
    };
  }, "getEndpointFromBucketName");
  var getEndpointFromArn = /* @__PURE__ */ __name((options) => {
    const { isCustomEndpoint, baseHostname, clientRegion } = options;
    const hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];
    const {
      pathStyleEndpoint,
      accelerateEndpoint = false,
      fipsEndpoint = false,
      tlsCompatible = true,
      bucketName,
      clientPartition = "aws"
    } = options;
    validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
    const { service, partition, accountId, region, resource } = bucketName;
    validateService(service);
    validatePartition(partition, { clientPartition });
    validateAccountId(accountId);
    const { accesspointName, outpostId } = getArnResources(resource);
    if (service === "s3-object-lambda") {
      return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
    }
    if (region === "") {
      return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
    }
    if (outpostId) {
      return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
    }
    return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
  }, "getEndpointFromArn");
  var getEndpointFromObjectLambdaArn = /* @__PURE__ */ __name(({
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    accesspointName,
    bucketName,
    hostnameSuffix
  }) => {
    const { accountId, region, service } = bucketName;
    validateRegionalClient(clientRegion);
    validateRegion(region, {
      useArnRegion,
      clientRegion,
      clientSigningRegion,
      allowFipsRegion: true,
      useFipsEndpoint: fipsEndpoint
    });
    validateNoDualstack(dualstackEndpoint);
    const DNSHostLabel = `${accesspointName}-${accountId}`;
    validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? region : clientRegion;
    const signingRegion = useArnRegion ? region : clientSigningRegion;
    return {
      bucketEndpoint: true,
      hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
      signingRegion,
      signingService: service
    };
  }, "getEndpointFromObjectLambdaArn");
  var getEndpointFromMRAPArn = /* @__PURE__ */ __name(({
    disableMultiregionAccessPoints,
    dualstackEndpoint = false,
    isCustomEndpoint,
    mrapAlias,
    hostnameSuffix
  }) => {
    if (disableMultiregionAccessPoints === true) {
      throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
    }
    validateMrapAlias(mrapAlias);
    validateNoDualstack(dualstackEndpoint);
    return {
      bucketEndpoint: true,
      hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
      signingRegion: "*"
    };
  }, "getEndpointFromMRAPArn");
  var getEndpointFromOutpostArn = /* @__PURE__ */ __name(({
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    bucketName,
    outpostId,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    accesspointName,
    isCustomEndpoint,
    hostnameSuffix
  }) => {
    validateRegionalClient(clientRegion);
    validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
    const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
    validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    validateOutpostService(bucketName.service);
    validateDNSHostLabel(outpostId, { tlsCompatible });
    validateNoDualstack(dualstackEndpoint);
    validateNoFIPS(fipsEndpoint);
    const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
    return {
      bucketEndpoint: true,
      hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
      signingRegion,
      signingService: "s3-outposts"
    };
  }, "getEndpointFromOutpostArn");
  var getEndpointFromAccessPointArn = /* @__PURE__ */ __name(({
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    bucketName,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    accesspointName,
    isCustomEndpoint,
    hostnameSuffix
  }) => {
    validateRegionalClient(clientRegion);
    validateRegion(bucketName.region, {
      useArnRegion,
      clientRegion,
      clientSigningRegion,
      allowFipsRegion: true,
      useFipsEndpoint: fipsEndpoint
    });
    const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
    validateDNSHostLabel(hostnamePrefix, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    validateS3Service(bucketName.service);
    return {
      bucketEndpoint: true,
      hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
      signingRegion
    };
  }, "getEndpointFromAccessPointArn");
  var bucketEndpointMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
    const { Bucket: bucketName } = args.input;
    let replaceBucketInPath = options.bucketEndpoint;
    const request = args.request;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      if (options.bucketEndpoint) {
        request.hostname = bucketName;
      } else if ((0, import_util_arn_parser.validate)(bucketName)) {
        const bucketArn = (0, import_util_arn_parser.parse)(bucketName);
        const clientRegion = await options.region();
        const useDualstackEndpoint = await options.useDualstackEndpoint();
        const useFipsEndpoint = await options.useFipsEndpoint();
        const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};
        const useArnRegion = await options.useArnRegion();
        const {
          hostname,
          bucketEndpoint,
          signingRegion: modifiedSigningRegion,
          signingService
        } = bucketHostname({
          bucketName: bucketArn,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint: useDualstackEndpoint,
          fipsEndpoint: useFipsEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:",
          useArnRegion,
          clientPartition: partition,
          clientSigningRegion: signingRegion,
          clientRegion,
          isCustomEndpoint: options.isCustomEndpoint,
          disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()
        });
        if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
          context["signing_region"] = modifiedSigningRegion;
        }
        if (signingService && signingService !== "s3") {
          context["signing_service"] = signingService;
        }
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      } else {
        const clientRegion = await options.region();
        const dualstackEndpoint = await options.useDualstackEndpoint();
        const fipsEndpoint = await options.useFipsEndpoint();
        const { hostname, bucketEndpoint } = bucketHostname({
          bucketName,
          clientRegion,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint,
          fipsEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:",
          isCustomEndpoint: options.isCustomEndpoint
        });
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      }
      if (replaceBucketInPath) {
        request.path = request.path.replace(/^(\/)?[^\/]+/, "");
        if (request.path === "") {
          request.path = "/";
        }
      }
    }
    return next({ ...args, request });
  }, "bucketEndpointMiddleware");
  var bucketEndpointMiddlewareOptions = {
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
    override: true
  };
  var getBucketEndpointPlugin = /* @__PURE__ */ __name((options) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
    }, "applyToStack")
  }), "getBucketEndpointPlugin");
  function resolveBucketEndpointConfig(input) {
    const {
      bucketEndpoint = false,
      forcePathStyle = false,
      useAccelerateEndpoint = false,
      useArnRegion = false,
      disableMultiregionAccessPoints = false
    } = input;
    return Object.assign(input, {
      bucketEndpoint,
      forcePathStyle,
      useAccelerateEndpoint,
      useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
      disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)
    });
  }
  __name(resolveBucketEndpointConfig, "resolveBucketEndpointConfig");
});

// ../../node_modules/.bun/@smithy+hash-stream-node@4.0.2/node_modules/@smithy/hash-stream-node/dist-cjs/index.js
var require_dist_cjs71 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    fileStreamHasher: () => fileStreamHasher,
    readableStreamHasher: () => readableStreamHasher
  });
  module.exports = __toCommonJS(src_exports);
  var import_fs = __require("fs");
  var import_util_utf8 = require_dist_cjs10();
  var import_stream = __require("stream");
  var HashCalculator = class extends import_stream.Writable {
    constructor(hash, options) {
      super(options);
      this.hash = hash;
    }
    static {
      __name(this, "HashCalculator");
    }
    _write(chunk, encoding, callback) {
      try {
        this.hash.update((0, import_util_utf8.toUint8Array)(chunk));
      } catch (err) {
        return callback(err);
      }
      callback();
    }
  };
  var fileStreamHasher = /* @__PURE__ */ __name((hashCtor, fileStream) => new Promise((resolve, reject) => {
    if (!isReadStream(fileStream)) {
      reject(new Error("Unable to calculate hash for non-file streams."));
      return;
    }
    const fileStreamTee = (0, import_fs.createReadStream)(fileStream.path, {
      start: fileStream.start,
      end: fileStream.end
    });
    const hash = new hashCtor;
    const hashCalculator = new HashCalculator(hash);
    fileStreamTee.pipe(hashCalculator);
    fileStreamTee.on("error", (err) => {
      hashCalculator.end();
      reject(err);
    });
    hashCalculator.on("error", reject);
    hashCalculator.on("finish", function() {
      hash.digest().then(resolve).catch(reject);
    });
  }), "fileStreamHasher");
  var isReadStream = /* @__PURE__ */ __name((stream) => typeof stream.path === "string", "isReadStream");
  var readableStreamHasher = /* @__PURE__ */ __name((hashCtor, readableStream) => {
    if (readableStream.readableFlowing !== null) {
      throw new Error("Unable to calculate hash for flowing readable stream");
    }
    const hash = new hashCtor;
    const hashCalculator = new HashCalculator(hash);
    readableStream.pipe(hashCalculator);
    return new Promise((resolve, reject) => {
      readableStream.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", () => {
        hash.digest().then(resolve).catch(reject);
      });
    });
  }, "readableStreamHasher");
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var signature_v4_multi_region_1 = require_dist_cjs68();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_stream_1 = require_dist_cjs17();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider7();
  var endpointResolver_1 = require_endpointResolver7();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2006-03-01",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? util_stream_1.getAwsChunkedEncodingStream,
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultS3HttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "aws.auth#sigv4a",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4a"),
          signer: new core_1.AwsSdkSigV4ASigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      sdkStreamMixin: config?.sdkStreamMixin ?? util_stream_1.sdkStreamMixin,
      serviceId: config?.serviceId ?? "S3",
      signerConstructor: config?.signerConstructor ?? signature_v4_multi_region_1.SignatureV4MultiRegion,
      signingEscapePath: config?.signingEscapePath ?? false,
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      useArnRegion: config?.useArnRegion ?? false,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js
var require_runtimeConfig7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package6());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var middleware_bucket_endpoint_1 = require_dist_cjs70();
  var middleware_flexible_checksums_1 = require_dist_cjs65();
  var middleware_sdk_s3_1 = require_dist_cjs67();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var eventstream_serde_node_1 = require_dist_cjs59();
  var hash_node_1 = require_dist_cjs43();
  var hash_stream_node_1 = require_dist_cjs71();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared7();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      disableS3ExpressSessionAuth: config?.disableS3ExpressSessionAuth ?? (0, node_config_provider_1.loadConfig)(middleware_sdk_s3_1.NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS, profileConfig),
      eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      md5: config?.md5 ?? hash_node_1.Hash.bind(null, "md5"),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestChecksumCalculation: config?.requestChecksumCalculation ?? (0, node_config_provider_1.loadConfig)(middleware_flexible_checksums_1.NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS, profileConfig),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      responseChecksumValidation: config?.responseChecksumValidation ?? (0, node_config_provider_1.loadConfig)(middleware_flexible_checksums_1.NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS, profileConfig),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha1: config?.sha1 ?? hash_node_1.Hash.bind(null, "sha1"),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      sigv4aSigningRegionSet: config?.sigv4aSigningRegionSet ?? (0, node_config_provider_1.loadConfig)(core_1.NODE_SIGV4A_CONFIG_OPTIONS, profileConfig),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      streamHasher: config?.streamHasher ?? hash_stream_node_1.readableStreamHasher,
      useArnRegion: config?.useArnRegion ?? (0, node_config_provider_1.loadConfig)(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS, profileConfig),
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+middleware-ssec@3.775.0/node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js
var require_dist_cjs72 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    getSsecPlugin: () => getSsecPlugin,
    isValidBase64EncodedSSECustomerKey: () => isValidBase64EncodedSSECustomerKey,
    ssecMiddleware: () => ssecMiddleware,
    ssecMiddlewareOptions: () => ssecMiddlewareOptions
  });
  module.exports = __toCommonJS(index_exports);
  function ssecMiddleware(options) {
    return (next) => async (args) => {
      const input = { ...args.input };
      const properties = [
        {
          target: "SSECustomerKey",
          hash: "SSECustomerKeyMD5"
        },
        {
          target: "CopySourceSSECustomerKey",
          hash: "CopySourceSSECustomerKeyMD5"
        }
      ];
      for (const prop of properties) {
        const value = input[prop.target];
        if (value) {
          let valueForHash;
          if (typeof value === "string") {
            if (isValidBase64EncodedSSECustomerKey(value, options)) {
              valueForHash = options.base64Decoder(value);
            } else {
              valueForHash = options.utf8Decoder(value);
              input[prop.target] = options.base64Encoder(valueForHash);
            }
          } else {
            valueForHash = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : new Uint8Array(value);
            input[prop.target] = options.base64Encoder(valueForHash);
          }
          const hash = new options.md5;
          hash.update(valueForHash);
          input[prop.hash] = options.base64Encoder(await hash.digest());
        }
      }
      return next({
        ...args,
        input
      });
    };
  }
  __name(ssecMiddleware, "ssecMiddleware");
  var ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"],
    override: true
  };
  var getSsecPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    }, "applyToStack")
  }), "getSsecPlugin");
  function isValidBase64EncodedSSECustomerKey(str, options) {
    const base64Regex = /^(?:[A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
    if (!base64Regex.test(str))
      return false;
    try {
      const decodedBytes = options.base64Decoder(str);
      return decodedBytes.length === 32;
    } catch {
      return false;
    }
  }
  __name(isValidBase64EncodedSSECustomerKey, "isValidBase64EncodedSSECustomerKey");
});

// ../../node_modules/.bun/@aws-sdk+middleware-location-constraint@3.775.0/node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js
var require_dist_cjs73 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    getLocationConstraintPlugin: () => getLocationConstraintPlugin,
    locationConstraintMiddleware: () => locationConstraintMiddleware,
    locationConstraintMiddlewareOptions: () => locationConstraintMiddlewareOptions
  });
  module.exports = __toCommonJS(index_exports);
  function locationConstraintMiddleware(options) {
    return (next) => async (args) => {
      const { CreateBucketConfiguration } = args.input;
      const region = await options.region();
      if (!CreateBucketConfiguration?.LocationConstraint && !CreateBucketConfiguration?.Location) {
        args = {
          ...args,
          input: {
            ...args.input,
            CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region }
          }
        };
      }
      return next(args);
    };
  }
  __name(locationConstraintMiddleware, "locationConstraintMiddleware");
  var locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true
  };
  var getLocationConstraintPlugin = /* @__PURE__ */ __name((config) => ({
    applyToStack: /* @__PURE__ */ __name((clientStack) => {
      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    }, "applyToStack")
  }), "getLocationConstraintPlugin");
});

// ../../node_modules/.bun/@aws-sdk+client-s3@3.787.0/node_modules/@aws-sdk/client-s3/dist-cjs/index.js
var require_dist_cjs74 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AbortMultipartUploadCommand: () => AbortMultipartUploadCommand,
    AnalyticsFilter: () => AnalyticsFilter,
    AnalyticsS3ExportFileFormat: () => AnalyticsS3ExportFileFormat,
    ArchiveStatus: () => ArchiveStatus,
    BucketAccelerateStatus: () => BucketAccelerateStatus,
    BucketAlreadyExists: () => BucketAlreadyExists,
    BucketAlreadyOwnedByYou: () => BucketAlreadyOwnedByYou,
    BucketCannedACL: () => BucketCannedACL,
    BucketLocationConstraint: () => BucketLocationConstraint,
    BucketLogsPermission: () => BucketLogsPermission,
    BucketType: () => BucketType,
    BucketVersioningStatus: () => BucketVersioningStatus,
    ChecksumAlgorithm: () => ChecksumAlgorithm,
    ChecksumMode: () => ChecksumMode,
    ChecksumType: () => ChecksumType,
    CompleteMultipartUploadCommand: () => CompleteMultipartUploadCommand,
    CompleteMultipartUploadOutputFilterSensitiveLog: () => CompleteMultipartUploadOutputFilterSensitiveLog,
    CompleteMultipartUploadRequestFilterSensitiveLog: () => CompleteMultipartUploadRequestFilterSensitiveLog,
    CompressionType: () => CompressionType,
    CopyObjectCommand: () => CopyObjectCommand,
    CopyObjectOutputFilterSensitiveLog: () => CopyObjectOutputFilterSensitiveLog,
    CopyObjectRequestFilterSensitiveLog: () => CopyObjectRequestFilterSensitiveLog,
    CreateBucketCommand: () => CreateBucketCommand,
    CreateBucketMetadataTableConfigurationCommand: () => CreateBucketMetadataTableConfigurationCommand,
    CreateMultipartUploadCommand: () => CreateMultipartUploadCommand,
    CreateMultipartUploadOutputFilterSensitiveLog: () => CreateMultipartUploadOutputFilterSensitiveLog,
    CreateMultipartUploadRequestFilterSensitiveLog: () => CreateMultipartUploadRequestFilterSensitiveLog,
    CreateSessionCommand: () => CreateSessionCommand,
    CreateSessionOutputFilterSensitiveLog: () => CreateSessionOutputFilterSensitiveLog,
    CreateSessionRequestFilterSensitiveLog: () => CreateSessionRequestFilterSensitiveLog,
    DataRedundancy: () => DataRedundancy,
    DeleteBucketAnalyticsConfigurationCommand: () => DeleteBucketAnalyticsConfigurationCommand,
    DeleteBucketCommand: () => DeleteBucketCommand,
    DeleteBucketCorsCommand: () => DeleteBucketCorsCommand,
    DeleteBucketEncryptionCommand: () => DeleteBucketEncryptionCommand,
    DeleteBucketIntelligentTieringConfigurationCommand: () => DeleteBucketIntelligentTieringConfigurationCommand,
    DeleteBucketInventoryConfigurationCommand: () => DeleteBucketInventoryConfigurationCommand,
    DeleteBucketLifecycleCommand: () => DeleteBucketLifecycleCommand,
    DeleteBucketMetadataTableConfigurationCommand: () => DeleteBucketMetadataTableConfigurationCommand,
    DeleteBucketMetricsConfigurationCommand: () => DeleteBucketMetricsConfigurationCommand,
    DeleteBucketOwnershipControlsCommand: () => DeleteBucketOwnershipControlsCommand,
    DeleteBucketPolicyCommand: () => DeleteBucketPolicyCommand,
    DeleteBucketReplicationCommand: () => DeleteBucketReplicationCommand,
    DeleteBucketTaggingCommand: () => DeleteBucketTaggingCommand,
    DeleteBucketWebsiteCommand: () => DeleteBucketWebsiteCommand,
    DeleteMarkerReplicationStatus: () => DeleteMarkerReplicationStatus,
    DeleteObjectCommand: () => DeleteObjectCommand,
    DeleteObjectTaggingCommand: () => DeleteObjectTaggingCommand,
    DeleteObjectsCommand: () => DeleteObjectsCommand,
    DeletePublicAccessBlockCommand: () => DeletePublicAccessBlockCommand,
    EncodingType: () => EncodingType,
    EncryptionFilterSensitiveLog: () => EncryptionFilterSensitiveLog,
    EncryptionTypeMismatch: () => EncryptionTypeMismatch,
    Event: () => Event,
    ExistingObjectReplicationStatus: () => ExistingObjectReplicationStatus,
    ExpirationStatus: () => ExpirationStatus,
    ExpressionType: () => ExpressionType,
    FileHeaderInfo: () => FileHeaderInfo,
    FilterRuleName: () => FilterRuleName,
    GetBucketAccelerateConfigurationCommand: () => GetBucketAccelerateConfigurationCommand,
    GetBucketAclCommand: () => GetBucketAclCommand,
    GetBucketAnalyticsConfigurationCommand: () => GetBucketAnalyticsConfigurationCommand,
    GetBucketCorsCommand: () => GetBucketCorsCommand,
    GetBucketEncryptionCommand: () => GetBucketEncryptionCommand,
    GetBucketEncryptionOutputFilterSensitiveLog: () => GetBucketEncryptionOutputFilterSensitiveLog,
    GetBucketIntelligentTieringConfigurationCommand: () => GetBucketIntelligentTieringConfigurationCommand,
    GetBucketInventoryConfigurationCommand: () => GetBucketInventoryConfigurationCommand,
    GetBucketInventoryConfigurationOutputFilterSensitiveLog: () => GetBucketInventoryConfigurationOutputFilterSensitiveLog,
    GetBucketLifecycleConfigurationCommand: () => GetBucketLifecycleConfigurationCommand,
    GetBucketLocationCommand: () => GetBucketLocationCommand,
    GetBucketLoggingCommand: () => GetBucketLoggingCommand,
    GetBucketMetadataTableConfigurationCommand: () => GetBucketMetadataTableConfigurationCommand,
    GetBucketMetricsConfigurationCommand: () => GetBucketMetricsConfigurationCommand,
    GetBucketNotificationConfigurationCommand: () => GetBucketNotificationConfigurationCommand,
    GetBucketOwnershipControlsCommand: () => GetBucketOwnershipControlsCommand,
    GetBucketPolicyCommand: () => GetBucketPolicyCommand,
    GetBucketPolicyStatusCommand: () => GetBucketPolicyStatusCommand,
    GetBucketReplicationCommand: () => GetBucketReplicationCommand,
    GetBucketRequestPaymentCommand: () => GetBucketRequestPaymentCommand,
    GetBucketTaggingCommand: () => GetBucketTaggingCommand,
    GetBucketVersioningCommand: () => GetBucketVersioningCommand,
    GetBucketWebsiteCommand: () => GetBucketWebsiteCommand,
    GetObjectAclCommand: () => GetObjectAclCommand,
    GetObjectAttributesCommand: () => GetObjectAttributesCommand,
    GetObjectAttributesRequestFilterSensitiveLog: () => GetObjectAttributesRequestFilterSensitiveLog,
    GetObjectCommand: () => GetObjectCommand,
    GetObjectLegalHoldCommand: () => GetObjectLegalHoldCommand,
    GetObjectLockConfigurationCommand: () => GetObjectLockConfigurationCommand,
    GetObjectOutputFilterSensitiveLog: () => GetObjectOutputFilterSensitiveLog,
    GetObjectRequestFilterSensitiveLog: () => GetObjectRequestFilterSensitiveLog,
    GetObjectRetentionCommand: () => GetObjectRetentionCommand,
    GetObjectTaggingCommand: () => GetObjectTaggingCommand,
    GetObjectTorrentCommand: () => GetObjectTorrentCommand,
    GetObjectTorrentOutputFilterSensitiveLog: () => GetObjectTorrentOutputFilterSensitiveLog,
    GetPublicAccessBlockCommand: () => GetPublicAccessBlockCommand,
    HeadBucketCommand: () => HeadBucketCommand,
    HeadObjectCommand: () => HeadObjectCommand,
    HeadObjectOutputFilterSensitiveLog: () => HeadObjectOutputFilterSensitiveLog,
    HeadObjectRequestFilterSensitiveLog: () => HeadObjectRequestFilterSensitiveLog,
    IntelligentTieringAccessTier: () => IntelligentTieringAccessTier,
    IntelligentTieringStatus: () => IntelligentTieringStatus,
    InvalidObjectState: () => InvalidObjectState,
    InvalidRequest: () => InvalidRequest,
    InvalidWriteOffset: () => InvalidWriteOffset,
    InventoryConfigurationFilterSensitiveLog: () => InventoryConfigurationFilterSensitiveLog,
    InventoryDestinationFilterSensitiveLog: () => InventoryDestinationFilterSensitiveLog,
    InventoryEncryptionFilterSensitiveLog: () => InventoryEncryptionFilterSensitiveLog,
    InventoryFormat: () => InventoryFormat,
    InventoryFrequency: () => InventoryFrequency,
    InventoryIncludedObjectVersions: () => InventoryIncludedObjectVersions,
    InventoryOptionalField: () => InventoryOptionalField,
    InventoryS3BucketDestinationFilterSensitiveLog: () => InventoryS3BucketDestinationFilterSensitiveLog,
    JSONType: () => JSONType,
    ListBucketAnalyticsConfigurationsCommand: () => ListBucketAnalyticsConfigurationsCommand,
    ListBucketIntelligentTieringConfigurationsCommand: () => ListBucketIntelligentTieringConfigurationsCommand,
    ListBucketInventoryConfigurationsCommand: () => ListBucketInventoryConfigurationsCommand,
    ListBucketInventoryConfigurationsOutputFilterSensitiveLog: () => ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
    ListBucketMetricsConfigurationsCommand: () => ListBucketMetricsConfigurationsCommand,
    ListBucketsCommand: () => ListBucketsCommand,
    ListDirectoryBucketsCommand: () => ListDirectoryBucketsCommand,
    ListMultipartUploadsCommand: () => ListMultipartUploadsCommand,
    ListObjectVersionsCommand: () => ListObjectVersionsCommand,
    ListObjectsCommand: () => ListObjectsCommand,
    ListObjectsV2Command: () => ListObjectsV2Command,
    ListPartsCommand: () => ListPartsCommand,
    ListPartsRequestFilterSensitiveLog: () => ListPartsRequestFilterSensitiveLog,
    LocationType: () => LocationType,
    MFADelete: () => MFADelete,
    MFADeleteStatus: () => MFADeleteStatus,
    MetadataDirective: () => MetadataDirective,
    MetricsFilter: () => MetricsFilter,
    MetricsStatus: () => MetricsStatus,
    NoSuchBucket: () => NoSuchBucket,
    NoSuchKey: () => NoSuchKey,
    NoSuchUpload: () => NoSuchUpload,
    NotFound: () => NotFound,
    ObjectAlreadyInActiveTierError: () => ObjectAlreadyInActiveTierError,
    ObjectAttributes: () => ObjectAttributes,
    ObjectCannedACL: () => ObjectCannedACL,
    ObjectLockEnabled: () => ObjectLockEnabled,
    ObjectLockLegalHoldStatus: () => ObjectLockLegalHoldStatus,
    ObjectLockMode: () => ObjectLockMode,
    ObjectLockRetentionMode: () => ObjectLockRetentionMode,
    ObjectNotInActiveTierError: () => ObjectNotInActiveTierError,
    ObjectOwnership: () => ObjectOwnership,
    ObjectStorageClass: () => ObjectStorageClass,
    ObjectVersionStorageClass: () => ObjectVersionStorageClass,
    OptionalObjectAttributes: () => OptionalObjectAttributes,
    OutputLocationFilterSensitiveLog: () => OutputLocationFilterSensitiveLog,
    OwnerOverride: () => OwnerOverride,
    PartitionDateSource: () => PartitionDateSource,
    Payer: () => Payer,
    Permission: () => Permission,
    Protocol: () => Protocol,
    PutBucketAccelerateConfigurationCommand: () => PutBucketAccelerateConfigurationCommand,
    PutBucketAclCommand: () => PutBucketAclCommand,
    PutBucketAnalyticsConfigurationCommand: () => PutBucketAnalyticsConfigurationCommand,
    PutBucketCorsCommand: () => PutBucketCorsCommand,
    PutBucketEncryptionCommand: () => PutBucketEncryptionCommand,
    PutBucketEncryptionRequestFilterSensitiveLog: () => PutBucketEncryptionRequestFilterSensitiveLog,
    PutBucketIntelligentTieringConfigurationCommand: () => PutBucketIntelligentTieringConfigurationCommand,
    PutBucketInventoryConfigurationCommand: () => PutBucketInventoryConfigurationCommand,
    PutBucketInventoryConfigurationRequestFilterSensitiveLog: () => PutBucketInventoryConfigurationRequestFilterSensitiveLog,
    PutBucketLifecycleConfigurationCommand: () => PutBucketLifecycleConfigurationCommand,
    PutBucketLoggingCommand: () => PutBucketLoggingCommand,
    PutBucketMetricsConfigurationCommand: () => PutBucketMetricsConfigurationCommand,
    PutBucketNotificationConfigurationCommand: () => PutBucketNotificationConfigurationCommand,
    PutBucketOwnershipControlsCommand: () => PutBucketOwnershipControlsCommand,
    PutBucketPolicyCommand: () => PutBucketPolicyCommand,
    PutBucketReplicationCommand: () => PutBucketReplicationCommand,
    PutBucketRequestPaymentCommand: () => PutBucketRequestPaymentCommand,
    PutBucketTaggingCommand: () => PutBucketTaggingCommand,
    PutBucketVersioningCommand: () => PutBucketVersioningCommand,
    PutBucketWebsiteCommand: () => PutBucketWebsiteCommand,
    PutObjectAclCommand: () => PutObjectAclCommand,
    PutObjectCommand: () => PutObjectCommand,
    PutObjectLegalHoldCommand: () => PutObjectLegalHoldCommand,
    PutObjectLockConfigurationCommand: () => PutObjectLockConfigurationCommand,
    PutObjectOutputFilterSensitiveLog: () => PutObjectOutputFilterSensitiveLog,
    PutObjectRequestFilterSensitiveLog: () => PutObjectRequestFilterSensitiveLog,
    PutObjectRetentionCommand: () => PutObjectRetentionCommand,
    PutObjectTaggingCommand: () => PutObjectTaggingCommand,
    PutPublicAccessBlockCommand: () => PutPublicAccessBlockCommand,
    QuoteFields: () => QuoteFields,
    ReplicaModificationsStatus: () => ReplicaModificationsStatus,
    ReplicationRuleStatus: () => ReplicationRuleStatus,
    ReplicationStatus: () => ReplicationStatus,
    ReplicationTimeStatus: () => ReplicationTimeStatus,
    RequestCharged: () => RequestCharged,
    RequestPayer: () => RequestPayer,
    RestoreObjectCommand: () => RestoreObjectCommand,
    RestoreObjectRequestFilterSensitiveLog: () => RestoreObjectRequestFilterSensitiveLog,
    RestoreRequestFilterSensitiveLog: () => RestoreRequestFilterSensitiveLog,
    RestoreRequestType: () => RestoreRequestType,
    S3: () => S3,
    S3Client: () => S3Client,
    S3LocationFilterSensitiveLog: () => S3LocationFilterSensitiveLog,
    S3ServiceException: () => S3ServiceException,
    SSEKMSFilterSensitiveLog: () => SSEKMSFilterSensitiveLog,
    SelectObjectContentCommand: () => SelectObjectContentCommand,
    SelectObjectContentEventStream: () => SelectObjectContentEventStream,
    SelectObjectContentEventStreamFilterSensitiveLog: () => SelectObjectContentEventStreamFilterSensitiveLog,
    SelectObjectContentOutputFilterSensitiveLog: () => SelectObjectContentOutputFilterSensitiveLog,
    SelectObjectContentRequestFilterSensitiveLog: () => SelectObjectContentRequestFilterSensitiveLog,
    ServerSideEncryption: () => ServerSideEncryption,
    ServerSideEncryptionByDefaultFilterSensitiveLog: () => ServerSideEncryptionByDefaultFilterSensitiveLog,
    ServerSideEncryptionConfigurationFilterSensitiveLog: () => ServerSideEncryptionConfigurationFilterSensitiveLog,
    ServerSideEncryptionRuleFilterSensitiveLog: () => ServerSideEncryptionRuleFilterSensitiveLog,
    SessionCredentialsFilterSensitiveLog: () => SessionCredentialsFilterSensitiveLog,
    SessionMode: () => SessionMode,
    SseKmsEncryptedObjectsStatus: () => SseKmsEncryptedObjectsStatus,
    StorageClass: () => StorageClass,
    StorageClassAnalysisSchemaVersion: () => StorageClassAnalysisSchemaVersion,
    TaggingDirective: () => TaggingDirective,
    Tier: () => Tier,
    TooManyParts: () => TooManyParts,
    TransitionDefaultMinimumObjectSize: () => TransitionDefaultMinimumObjectSize,
    TransitionStorageClass: () => TransitionStorageClass,
    Type: () => Type,
    UploadPartCommand: () => UploadPartCommand,
    UploadPartCopyCommand: () => UploadPartCopyCommand,
    UploadPartCopyOutputFilterSensitiveLog: () => UploadPartCopyOutputFilterSensitiveLog,
    UploadPartCopyRequestFilterSensitiveLog: () => UploadPartCopyRequestFilterSensitiveLog,
    UploadPartOutputFilterSensitiveLog: () => UploadPartOutputFilterSensitiveLog,
    UploadPartRequestFilterSensitiveLog: () => UploadPartRequestFilterSensitiveLog,
    WriteGetObjectResponseCommand: () => WriteGetObjectResponseCommand,
    WriteGetObjectResponseRequestFilterSensitiveLog: () => WriteGetObjectResponseRequestFilterSensitiveLog,
    __Client: () => import_smithy_client.Client,
    paginateListBuckets: () => paginateListBuckets,
    paginateListDirectoryBuckets: () => paginateListDirectoryBuckets,
    paginateListObjectsV2: () => paginateListObjectsV2,
    paginateListParts: () => paginateListParts,
    waitForBucketExists: () => waitForBucketExists,
    waitForBucketNotExists: () => waitForBucketNotExists,
    waitForObjectExists: () => waitForObjectExists,
    waitForObjectNotExists: () => waitForObjectNotExists,
    waitUntilBucketExists: () => waitUntilBucketExists,
    waitUntilBucketNotExists: () => waitUntilBucketNotExists,
    waitUntilObjectExists: () => waitUntilObjectExists,
    waitUntilObjectNotExists: () => waitUntilObjectNotExists
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_expect_continue = require_dist_cjs64();
  var import_middleware_flexible_checksums = require_dist_cjs65();
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_sdk_s32 = require_dist_cjs67();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core3 = require_dist_cjs18();
  var import_eventstream_serde_config_resolver = require_dist_cjs29();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider7();
  var import_middleware_sdk_s3 = require_dist_cjs67();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_serde = require_dist_cjs7();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      forcePathStyle: options.forcePathStyle ?? false,
      useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
      defaultSigningName: "s3"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
    UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
    DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
    Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
    DisableS3ExpressSessionAuth: { type: "clientContextParams", name: "disableS3ExpressSessionAuth" },
    UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_smithy_client = require_dist_cjs24();
  var S3ServiceException = class _S3ServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "S3ServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _S3ServiceException.prototype);
    }
  };
  var RequestCharged = {
    requester: "requester"
  };
  var RequestPayer = {
    requester: "requester"
  };
  var NoSuchUpload = class _NoSuchUpload extends S3ServiceException {
    static {
      __name(this, "NoSuchUpload");
    }
    name = "NoSuchUpload";
    $fault = "client";
    constructor(opts) {
      super({
        name: "NoSuchUpload",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoSuchUpload.prototype);
    }
  };
  var BucketAccelerateStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
  };
  var Type = {
    AmazonCustomerByEmail: "AmazonCustomerByEmail",
    CanonicalUser: "CanonicalUser",
    Group: "Group"
  };
  var Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP"
  };
  var OwnerOverride = {
    Destination: "Destination"
  };
  var ChecksumType = {
    COMPOSITE: "COMPOSITE",
    FULL_OBJECT: "FULL_OBJECT"
  };
  var ServerSideEncryption = {
    AES256: "AES256",
    aws_kms: "aws:kms",
    aws_kms_dsse: "aws:kms:dsse"
  };
  var ObjectCannedACL = {
    authenticated_read: "authenticated-read",
    aws_exec_read: "aws-exec-read",
    bucket_owner_full_control: "bucket-owner-full-control",
    bucket_owner_read: "bucket-owner-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
  };
  var ChecksumAlgorithm = {
    CRC32: "CRC32",
    CRC32C: "CRC32C",
    CRC64NVME: "CRC64NVME",
    SHA1: "SHA1",
    SHA256: "SHA256"
  };
  var MetadataDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
  };
  var ObjectLockLegalHoldStatus = {
    OFF: "OFF",
    ON: "ON"
  };
  var ObjectLockMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
  };
  var StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
  };
  var TaggingDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
  };
  var ObjectNotInActiveTierError = class _ObjectNotInActiveTierError extends S3ServiceException {
    static {
      __name(this, "ObjectNotInActiveTierError");
    }
    name = "ObjectNotInActiveTierError";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ObjectNotInActiveTierError",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ObjectNotInActiveTierError.prototype);
    }
  };
  var BucketAlreadyExists = class _BucketAlreadyExists extends S3ServiceException {
    static {
      __name(this, "BucketAlreadyExists");
    }
    name = "BucketAlreadyExists";
    $fault = "client";
    constructor(opts) {
      super({
        name: "BucketAlreadyExists",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
    }
  };
  var BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ServiceException {
    static {
      __name(this, "BucketAlreadyOwnedByYou");
    }
    name = "BucketAlreadyOwnedByYou";
    $fault = "client";
    constructor(opts) {
      super({
        name: "BucketAlreadyOwnedByYou",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
    }
  };
  var BucketCannedACL = {
    authenticated_read: "authenticated-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
  };
  var DataRedundancy = {
    SingleAvailabilityZone: "SingleAvailabilityZone",
    SingleLocalZone: "SingleLocalZone"
  };
  var BucketType = {
    Directory: "Directory"
  };
  var LocationType = {
    AvailabilityZone: "AvailabilityZone",
    LocalZone: "LocalZone"
  };
  var BucketLocationConstraint = {
    EU: "EU",
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ap_southeast_5: "ap-southeast-5",
    ca_central_1: "ca-central-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2"
  };
  var ObjectOwnership = {
    BucketOwnerEnforced: "BucketOwnerEnforced",
    BucketOwnerPreferred: "BucketOwnerPreferred",
    ObjectWriter: "ObjectWriter"
  };
  var SessionMode = {
    ReadOnly: "ReadOnly",
    ReadWrite: "ReadWrite"
  };
  var NoSuchBucket = class _NoSuchBucket extends S3ServiceException {
    static {
      __name(this, "NoSuchBucket");
    }
    name = "NoSuchBucket";
    $fault = "client";
    constructor(opts) {
      super({
        name: "NoSuchBucket",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoSuchBucket.prototype);
    }
  };
  var AnalyticsFilter;
  ((AnalyticsFilter2) => {
    AnalyticsFilter2.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(AnalyticsFilter || (AnalyticsFilter = {}));
  var AnalyticsS3ExportFileFormat = {
    CSV: "CSV"
  };
  var StorageClassAnalysisSchemaVersion = {
    V_1: "V_1"
  };
  var IntelligentTieringStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var IntelligentTieringAccessTier = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
  };
  var InventoryFormat = {
    CSV: "CSV",
    ORC: "ORC",
    Parquet: "Parquet"
  };
  var InventoryIncludedObjectVersions = {
    All: "All",
    Current: "Current"
  };
  var InventoryOptionalField = {
    BucketKeyStatus: "BucketKeyStatus",
    ChecksumAlgorithm: "ChecksumAlgorithm",
    ETag: "ETag",
    EncryptionStatus: "EncryptionStatus",
    IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
    IsMultipartUploaded: "IsMultipartUploaded",
    LastModifiedDate: "LastModifiedDate",
    ObjectAccessControlList: "ObjectAccessControlList",
    ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
    ObjectLockMode: "ObjectLockMode",
    ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
    ObjectOwner: "ObjectOwner",
    ReplicationStatus: "ReplicationStatus",
    Size: "Size",
    StorageClass: "StorageClass"
  };
  var InventoryFrequency = {
    Daily: "Daily",
    Weekly: "Weekly"
  };
  var TransitionStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD_IA: "STANDARD_IA"
  };
  var ExpirationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var TransitionDefaultMinimumObjectSize = {
    all_storage_classes_128K: "all_storage_classes_128K",
    varies_by_storage_class: "varies_by_storage_class"
  };
  var BucketLogsPermission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    WRITE: "WRITE"
  };
  var PartitionDateSource = {
    DeliveryTime: "DeliveryTime",
    EventTime: "EventTime"
  };
  var MetricsFilter;
  ((MetricsFilter2) => {
    MetricsFilter2.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.AccessPointArn !== undefined)
        return visitor.AccessPointArn(value.AccessPointArn);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(MetricsFilter || (MetricsFilter = {}));
  var Event = {
    s3_IntelligentTiering: "s3:IntelligentTiering",
    s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
    s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
    s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
    s3_LifecycleTransition: "s3:LifecycleTransition",
    s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
    s3_ObjectCreated_: "s3:ObjectCreated:*",
    s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
    s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
    s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
    s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
    s3_ObjectRemoved_: "s3:ObjectRemoved:*",
    s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
    s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
    s3_ObjectRestore_: "s3:ObjectRestore:*",
    s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
    s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
    s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
    s3_ObjectTagging_: "s3:ObjectTagging:*",
    s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
    s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
    s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
    s3_Replication_: "s3:Replication:*",
    s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
    s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
    s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
    s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
  };
  var FilterRuleName = {
    prefix: "prefix",
    suffix: "suffix"
  };
  var DeleteMarkerReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var MetricsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicationTimeStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ExistingObjectReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicaModificationsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var SseKmsEncryptedObjectsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicationRuleStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var Payer = {
    BucketOwner: "BucketOwner",
    Requester: "Requester"
  };
  var MFADeleteStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var BucketVersioningStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
  };
  var Protocol = {
    http: "http",
    https: "https"
  };
  var ReplicationStatus = {
    COMPLETE: "COMPLETE",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    REPLICA: "REPLICA"
  };
  var ChecksumMode = {
    ENABLED: "ENABLED"
  };
  var InvalidObjectState = class _InvalidObjectState extends S3ServiceException {
    static {
      __name(this, "InvalidObjectState");
    }
    name = "InvalidObjectState";
    $fault = "client";
    StorageClass;
    AccessTier;
    constructor(opts) {
      super({
        name: "InvalidObjectState",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidObjectState.prototype);
      this.StorageClass = opts.StorageClass;
      this.AccessTier = opts.AccessTier;
    }
  };
  var NoSuchKey = class _NoSuchKey extends S3ServiceException {
    static {
      __name(this, "NoSuchKey");
    }
    name = "NoSuchKey";
    $fault = "client";
    constructor(opts) {
      super({
        name: "NoSuchKey",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoSuchKey.prototype);
    }
  };
  var ObjectAttributes = {
    CHECKSUM: "Checksum",
    ETAG: "ETag",
    OBJECT_PARTS: "ObjectParts",
    OBJECT_SIZE: "ObjectSize",
    STORAGE_CLASS: "StorageClass"
  };
  var ObjectLockEnabled = {
    Enabled: "Enabled"
  };
  var ObjectLockRetentionMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
  };
  var NotFound = class _NotFound extends S3ServiceException {
    static {
      __name(this, "NotFound");
    }
    name = "NotFound";
    $fault = "client";
    constructor(opts) {
      super({
        name: "NotFound",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NotFound.prototype);
    }
  };
  var ArchiveStatus = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
  };
  var EncodingType = {
    url: "url"
  };
  var ObjectStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
  };
  var OptionalObjectAttributes = {
    RESTORE_STATUS: "RestoreStatus"
  };
  var ObjectVersionStorageClass = {
    STANDARD: "STANDARD"
  };
  var CompleteMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "CompleteMultipartUploadOutputFilterSensitiveLog");
  var CompleteMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "CompleteMultipartUploadRequestFilterSensitiveLog");
  var CopyObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CopyObjectOutputFilterSensitiveLog");
  var CopyObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING },
    ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "CopyObjectRequestFilterSensitiveLog");
  var CreateMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CreateMultipartUploadOutputFilterSensitiveLog");
  var CreateMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CreateMultipartUploadRequestFilterSensitiveLog");
  var SessionCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SessionToken && { SessionToken: import_smithy_client.SENSITIVE_STRING }
  }), "SessionCredentialsFilterSensitiveLog");
  var CreateSessionOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING },
    ...obj.Credentials && { Credentials: SessionCredentialsFilterSensitiveLog(obj.Credentials) }
  }), "CreateSessionOutputFilterSensitiveLog");
  var CreateSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CreateSessionRequestFilterSensitiveLog");
  var ServerSideEncryptionByDefaultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.KMSMasterKeyID && { KMSMasterKeyID: import_smithy_client.SENSITIVE_STRING }
  }), "ServerSideEncryptionByDefaultFilterSensitiveLog");
  var ServerSideEncryptionRuleFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ApplyServerSideEncryptionByDefault && {
      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
    }
  }), "ServerSideEncryptionRuleFilterSensitiveLog");
  var ServerSideEncryptionConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }
  }), "ServerSideEncryptionConfigurationFilterSensitiveLog");
  var GetBucketEncryptionOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    }
  }), "GetBucketEncryptionOutputFilterSensitiveLog");
  var SSEKMSFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.KeyId && { KeyId: import_smithy_client.SENSITIVE_STRING }
  }), "SSEKMSFilterSensitiveLog");
  var InventoryEncryptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }
  }), "InventoryEncryptionFilterSensitiveLog");
  var InventoryS3BucketDestinationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }
  }), "InventoryS3BucketDestinationFilterSensitiveLog");
  var InventoryDestinationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.S3BucketDestination && {
      S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
    }
  }), "InventoryDestinationFilterSensitiveLog");
  var InventoryConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }
  }), "InventoryConfigurationFilterSensitiveLog");
  var GetBucketInventoryConfigurationOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    }
  }), "GetBucketInventoryConfigurationOutputFilterSensitiveLog");
  var GetObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectOutputFilterSensitiveLog");
  var GetObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectRequestFilterSensitiveLog");
  var GetObjectAttributesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectAttributesRequestFilterSensitiveLog");
  var GetObjectTorrentOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj
  }), "GetObjectTorrentOutputFilterSensitiveLog");
  var HeadObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "HeadObjectOutputFilterSensitiveLog");
  var HeadObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "HeadObjectRequestFilterSensitiveLog");
  var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.InventoryConfigurationList && {
      InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item))
    }
  }), "ListBucketInventoryConfigurationsOutputFilterSensitiveLog");
  var ListPartsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "ListPartsRequestFilterSensitiveLog");
  var import_core = require_dist_cjs25();
  var import_xml_builder = require_dist_cjs69();
  var import_core2 = require_dist_cjs18();
  var import_protocol_http = require_dist_cjs2();
  var MFADelete = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var EncryptionTypeMismatch = class _EncryptionTypeMismatch extends S3ServiceException {
    static {
      __name(this, "EncryptionTypeMismatch");
    }
    name = "EncryptionTypeMismatch";
    $fault = "client";
    constructor(opts) {
      super({
        name: "EncryptionTypeMismatch",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _EncryptionTypeMismatch.prototype);
    }
  };
  var InvalidRequest = class _InvalidRequest extends S3ServiceException {
    static {
      __name(this, "InvalidRequest");
    }
    name = "InvalidRequest";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidRequest",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidRequest.prototype);
    }
  };
  var InvalidWriteOffset = class _InvalidWriteOffset extends S3ServiceException {
    static {
      __name(this, "InvalidWriteOffset");
    }
    name = "InvalidWriteOffset";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidWriteOffset",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidWriteOffset.prototype);
    }
  };
  var TooManyParts = class _TooManyParts extends S3ServiceException {
    static {
      __name(this, "TooManyParts");
    }
    name = "TooManyParts";
    $fault = "client";
    constructor(opts) {
      super({
        name: "TooManyParts",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyParts.prototype);
    }
  };
  var ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError extends S3ServiceException {
    static {
      __name(this, "ObjectAlreadyInActiveTierError");
    }
    name = "ObjectAlreadyInActiveTierError";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ObjectAlreadyInActiveTierError",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError.prototype);
    }
  };
  var Tier = {
    Bulk: "Bulk",
    Expedited: "Expedited",
    Standard: "Standard"
  };
  var ExpressionType = {
    SQL: "SQL"
  };
  var CompressionType = {
    BZIP2: "BZIP2",
    GZIP: "GZIP",
    NONE: "NONE"
  };
  var FileHeaderInfo = {
    IGNORE: "IGNORE",
    NONE: "NONE",
    USE: "USE"
  };
  var JSONType = {
    DOCUMENT: "DOCUMENT",
    LINES: "LINES"
  };
  var QuoteFields = {
    ALWAYS: "ALWAYS",
    ASNEEDED: "ASNEEDED"
  };
  var RestoreRequestType = {
    SELECT: "SELECT"
  };
  var SelectObjectContentEventStream;
  ((SelectObjectContentEventStream3) => {
    SelectObjectContentEventStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
      if (value.Records !== undefined)
        return visitor.Records(value.Records);
      if (value.Stats !== undefined)
        return visitor.Stats(value.Stats);
      if (value.Progress !== undefined)
        return visitor.Progress(value.Progress);
      if (value.Cont !== undefined)
        return visitor.Cont(value.Cont);
      if (value.End !== undefined)
        return visitor.End(value.End);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
  var PutBucketEncryptionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    }
  }), "PutBucketEncryptionRequestFilterSensitiveLog");
  var PutBucketInventoryConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    }
  }), "PutBucketInventoryConfigurationRequestFilterSensitiveLog");
  var PutObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "PutObjectOutputFilterSensitiveLog");
  var PutObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "PutObjectRequestFilterSensitiveLog");
  var EncryptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.KMSKeyId && { KMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "EncryptionFilterSensitiveLog");
  var S3LocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }
  }), "S3LocationFilterSensitiveLog");
  var OutputLocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }
  }), "OutputLocationFilterSensitiveLog");
  var RestoreRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }
  }), "RestoreRequestFilterSensitiveLog");
  var RestoreObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }
  }), "RestoreObjectRequestFilterSensitiveLog");
  var SelectObjectContentEventStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
    if (obj.Records !== undefined)
      return { Records: obj.Records };
    if (obj.Stats !== undefined)
      return { Stats: obj.Stats };
    if (obj.Progress !== undefined)
      return { Progress: obj.Progress };
    if (obj.Cont !== undefined)
      return { Cont: obj.Cont };
    if (obj.End !== undefined)
      return { End: obj.End };
    if (obj.$unknown !== undefined)
      return { [obj.$unknown[0]]: "UNKNOWN" };
  }, "SelectObjectContentEventStreamFilterSensitiveLog");
  var SelectObjectContentOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: "STREAMING_CONTENT" }
  }), "SelectObjectContentOutputFilterSensitiveLog");
  var SelectObjectContentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "SelectObjectContentRequestFilterSensitiveLog");
  var UploadPartOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartOutputFilterSensitiveLog");
  var UploadPartRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartRequestFilterSensitiveLog");
  var UploadPartCopyOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartCopyOutputFilterSensitiveLog");
  var UploadPartCopyRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartCopyRequestFilterSensitiveLog");
  var WriteGetObjectResponseRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "WriteGetObjectResponseRequestFilterSensitiveLog");
  var se_AbortMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaimit]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IMIT]), () => (0, import_smithy_client.dateToUtcString)(input[_IMIT]).toString()]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "AbortMultipartUpload"],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_AbortMultipartUploadCommand");
  var se_CompleteMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacc__]: input[_CCRCNVME],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_xact]: input[_CT],
      [_xamos]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_MOS]), () => input[_MOS].toString()],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_im]: input[_IM],
      [_inm]: input[_INM],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    let contents;
    if (input.MultipartUpload !== undefined) {
      contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
      contents = contents.n("CompleteMultipartUpload");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CompleteMultipartUploadCommand");
  var se_CopyObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_xaca]: input[_CA],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_ct]: input[_CTo],
      [_xacs__]: input[_CS],
      [_xacsim]: input[_CSIM],
      [_xacsims]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CSIMS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIMS]).toString()],
      [_xacsinm]: input[_CSINM],
      [_xacsius]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CSIUS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIUS]).toString()],
      [_e]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xamd]: input[_MD],
      [_xatd]: input[_TD],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
      [_xacssseca]: input[_CSSSECA],
      [_xacssseck]: input[_CSSSECK],
      [_xacssseckm]: input[_CSSSECKMD],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client.serializeDateTime)(input[_OLRUD]).toString()],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      [_xasebo]: input[_ESBO],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "CopyObject"]
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_CopyObjectCommand");
  var se_CreateBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xabole]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OLEFB]), () => input[_OLEFB].toString()],
      [_xaoo]: input[_OO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    let contents;
    if (input.CreateBucketConfiguration !== undefined) {
      contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_CreateBucketCommand");
  var se_CreateBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_mT]: [, ""]
    });
    let body;
    let contents;
    if (input.MetadataTableConfiguration !== undefined) {
      contents = se_MetadataTableConfiguration(input.MetadataTableConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateBucketMetadataTableConfigurationCommand");
  var se_CreateMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_ct]: input[_CTo],
      [_e]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client.serializeDateTime)(input[_OLRUD]).toString()],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      [_xaca]: input[_CA],
      [_xact]: input[_CT],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_u]: [, ""]
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateMultipartUploadCommand");
  var se_CreateSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xacsm]: input[_SM],
      [_xasse]: input[_SSE],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_s]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateSessionCommand");
  var se_DeleteBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteBucketCommand");
  var se_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketAnalyticsConfigurationCommand");
  var se_DeleteBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketCorsCommand");
  var se_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketEncryptionCommand");
  var se_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketIntelligentTieringConfigurationCommand");
  var se_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketInventoryConfigurationCommand");
  var se_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketLifecycleCommand");
  var se_DeleteBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_mT]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketMetadataTableConfigurationCommand");
  var se_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketMetricsConfigurationCommand");
  var se_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketOwnershipControlsCommand");
  var se_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketPolicyCommand");
  var se_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketReplicationCommand");
  var se_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketTaggingCommand");
  var se_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketWebsiteCommand");
  var se_DeleteObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xam]: input[_MFA],
      [_xarp]: input[_RP],
      [_xabgr]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
      [_xaebo]: input[_EBO],
      [_im]: input[_IM],
      [_xaimlmt]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IMLMT]), () => (0, import_smithy_client.dateToUtcString)(input[_IMLMT]).toString()],
      [_xaims]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IMS]), () => input[_IMS].toString()]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "DeleteObject"],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectCommand");
  var se_DeleteObjectsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xam]: input[_MFA],
      [_xarp]: input[_RP],
      [_xabgr]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
      [_xaebo]: input[_EBO],
      [_xasca]: input[_CA]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_d]: [, ""]
    });
    let body;
    let contents;
    if (input.Delete !== undefined) {
      contents = se_Delete(input.Delete, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectsCommand");
  var se_DeleteObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectTaggingCommand");
  var se_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeletePublicAccessBlockCommand");
  var se_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ac]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAccelerateConfigurationCommand");
  var se_GetBucketAclCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAclCommand");
  var se_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_xi]: [, "GetBucketAnalyticsConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAnalyticsConfigurationCommand");
  var se_GetBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketCorsCommand");
  var se_GetBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketEncryptionCommand");
  var se_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_xi]: [, "GetBucketIntelligentTieringConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketIntelligentTieringConfigurationCommand");
  var se_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_xi]: [, "GetBucketInventoryConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketInventoryConfigurationCommand");
  var se_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLifecycleConfigurationCommand");
  var se_GetBucketLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_lo]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLocationCommand");
  var se_GetBucketLoggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_log]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLoggingCommand");
  var se_GetBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_mT]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketMetadataTableConfigurationCommand");
  var se_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_xi]: [, "GetBucketMetricsConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketMetricsConfigurationCommand");
  var se_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_n]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketNotificationConfigurationCommand");
  var se_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketOwnershipControlsCommand");
  var se_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketPolicyCommand");
  var se_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pS]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketPolicyStatusCommand");
  var se_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketReplicationCommand");
  var se_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_rP]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketRequestPaymentCommand");
  var se_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketTaggingCommand");
  var se_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_v]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketVersioningCommand");
  var se_GetBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketWebsiteCommand");
  var se_GetObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_im]: input[_IM],
      [_ims]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IMSf]), () => (0, import_smithy_client.dateToUtcString)(input[_IMSf]).toString()],
      [_inm]: input[_INM],
      [_ius]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IUS]), () => (0, import_smithy_client.dateToUtcString)(input[_IUS]).toString()],
      [_ra]: input[_R],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xacm]: input[_CM]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "GetObject"],
      [_rcc]: [, input[_RCC]],
      [_rcd]: [, input[_RCD]],
      [_rce]: [, input[_RCE]],
      [_rcl]: [, input[_RCL]],
      [_rct]: [, input[_RCT]],
      [_re]: [() => input.ResponseExpires !== undefined, () => (0, import_smithy_client.dateToUtcString)(input[_RE]).toString()],
      [_vI]: [, input[_VI]],
      [_pN]: [() => input.PartNumber !== undefined, () => input[_PN].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectCommand");
  var se_GetObjectAclCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectAclCommand");
  var se_GetObjectAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xamp]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_MP]), () => input[_MP].toString()],
      [_xapnm]: input[_PNM],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaoa]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OA]), () => (input[_OA] || []).map(import_smithy_client.quoteHeader).join(", ")]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_at]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectAttributesCommand");
  var se_GetObjectLegalHoldCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_lh]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectLegalHoldCommand");
  var se_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ol]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectLockConfigurationCommand");
  var se_GetObjectRetentionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_ret]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectRetentionCommand");
  var se_GetObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectTaggingCommand");
  var se_GetObjectTorrentCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_to]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectTorrentCommand");
  var se_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetPublicAccessBlockCommand");
  var se_HeadBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    b.m("HEAD").h(headers).b(body);
    return b.build();
  }, "se_HeadBucketCommand");
  var se_HeadObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_im]: input[_IM],
      [_ims]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IMSf]), () => (0, import_smithy_client.dateToUtcString)(input[_IMSf]).toString()],
      [_inm]: input[_INM],
      [_ius]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_IUS]), () => (0, import_smithy_client.dateToUtcString)(input[_IUS]).toString()],
      [_ra]: input[_R],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xacm]: input[_CM]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_rcc]: [, input[_RCC]],
      [_rcd]: [, input[_RCD]],
      [_rce]: [, input[_RCE]],
      [_rcl]: [, input[_RCL]],
      [_rct]: [, input[_RCT]],
      [_re]: [() => input.ResponseExpires !== undefined, () => (0, import_smithy_client.dateToUtcString)(input[_RE]).toString()],
      [_vI]: [, input[_VI]],
      [_pN]: [() => input.PartNumber !== undefined, () => input[_PN].toString()]
    });
    let body;
    b.m("HEAD").h(headers).q(query).b(body);
    return b.build();
  }, "se_HeadObjectCommand");
  var se_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_xi]: [, "ListBucketAnalyticsConfigurations"],
      [_ct_]: [, input[_CTon]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketAnalyticsConfigurationsCommand");
  var se_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_xi]: [, "ListBucketIntelligentTieringConfigurations"],
      [_ct_]: [, input[_CTon]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketIntelligentTieringConfigurationsCommand");
  var se_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_xi]: [, "ListBucketInventoryConfigurations"],
      [_ct_]: [, input[_CTon]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketInventoryConfigurationsCommand");
  var se_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_xi]: [, "ListBucketMetricsConfigurations"],
      [_ct_]: [, input[_CTon]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketMetricsConfigurationsCommand");
  var se_ListBucketsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListBuckets"],
      [_mb]: [() => input.MaxBuckets !== undefined, () => input[_MB].toString()],
      [_ct_]: [, input[_CTon]],
      [_pr]: [, input[_P]],
      [_br]: [, input[_BR]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketsCommand");
  var se_ListDirectoryBucketsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListDirectoryBuckets"],
      [_ct_]: [, input[_CTon]],
      [_mdb]: [() => input.MaxDirectoryBuckets !== undefined, () => input[_MDB].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListDirectoryBucketsCommand");
  var se_ListMultipartUploadsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_u]: [, ""],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_km]: [, input[_KM]],
      [_mu]: [() => input.MaxUploads !== undefined, () => input[_MU].toString()],
      [_pr]: [, input[_P]],
      [_uim]: [, input[_UIM]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListMultipartUploadsCommand");
  var se_ListObjectsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaooa]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client.quoteHeader).join(", ")]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_ma]: [, input[_M]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectsCommand");
  var se_ListObjectsV2Command = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaooa]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client.quoteHeader).join(", ")]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_lt]: [, "2"],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]],
      [_ct_]: [, input[_CTon]],
      [_fo]: [() => input.FetchOwner !== undefined, () => input[_FO].toString()],
      [_sa]: [, input[_SA]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectsV2Command");
  var se_ListObjectVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP],
      [_xaooa]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client.quoteHeader).join(", ")]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ver]: [, ""],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_km]: [, input[_KM]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]],
      [_vim]: [, input[_VIM]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectVersionsCommand");
  var se_ListPartsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListParts"],
      [_mp]: [() => input.MaxParts !== undefined, () => input[_MP].toString()],
      [_pnm]: [, input[_PNM]],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListPartsCommand");
  var se_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO],
      [_xasca]: input[_CA]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ac]: [, ""]
    });
    let body;
    let contents;
    if (input.AccelerateConfiguration !== undefined) {
      contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAccelerateConfigurationCommand");
  var se_PutBucketAclCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""]
    });
    let body;
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAclCommand");
  var se_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.AnalyticsConfiguration !== undefined) {
      contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAnalyticsConfigurationCommand");
  var se_PutBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    let contents;
    if (input.CORSConfiguration !== undefined) {
      contents = se_CORSConfiguration(input.CORSConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketCorsCommand");
  var se_PutBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    let contents;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
      contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketEncryptionCommand");
  var se_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/xml"
    };
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.IntelligentTieringConfiguration !== undefined) {
      contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketIntelligentTieringConfigurationCommand");
  var se_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.InventoryConfiguration !== undefined) {
      contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketInventoryConfigurationCommand");
  var se_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO],
      [_xatdmos]: input[_TDMOS]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    let contents;
    if (input.LifecycleConfiguration !== undefined) {
      contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      contents = contents.n("LifecycleConfiguration");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketLifecycleConfigurationCommand");
  var se_PutBucketLoggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_log]: [, ""]
    });
    let body;
    let contents;
    if (input.BucketLoggingStatus !== undefined) {
      contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketLoggingCommand");
  var se_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.MetricsConfiguration !== undefined) {
      contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketMetricsConfigurationCommand");
  var se_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO],
      [_xasdv]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_SDV]), () => input[_SDV].toString()]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_n]: [, ""]
    });
    let body;
    let contents;
    if (input.NotificationConfiguration !== undefined) {
      contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketNotificationConfigurationCommand");
  var se_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    let contents;
    if (input.OwnershipControls !== undefined) {
      contents = se_OwnershipControls(input.OwnershipControls, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketOwnershipControlsCommand");
  var se_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "text/plain",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacrsba]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CRSBA]), () => input[_CRSBA].toString()],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    let contents;
    if (input.Policy !== undefined) {
      contents = input.Policy;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketPolicyCommand");
  var se_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xabolt]: input[_To],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    let contents;
    if (input.ReplicationConfiguration !== undefined) {
      contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketReplicationCommand");
  var se_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_rP]: [, ""]
    });
    let body;
    let contents;
    if (input.RequestPaymentConfiguration !== undefined) {
      contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketRequestPaymentCommand");
  var se_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketTaggingCommand");
  var se_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xam]: input[_MFA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_v]: [, ""]
    });
    let body;
    let contents;
    if (input.VersioningConfiguration !== undefined) {
      contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketVersioningCommand");
  var se_PutBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    let contents;
    if (input.WebsiteConfiguration !== undefined) {
      contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketWebsiteCommand");
  var se_PutObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_ct]: input[_CTo] || "application/octet-stream",
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_cl_]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacc__]: input[_CCRCNVME],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_e]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_im]: input[_IM],
      [_inm]: input[_INM],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xawob]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_WOB]), () => input[_WOB].toString()],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client.serializeDateTime)(input[_OLRUD]).toString()],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "PutObject"]
    });
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectCommand");
  var se_PutObjectAclCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectAclCommand");
  var se_PutObjectLegalHoldCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_lh]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.LegalHold !== undefined) {
      contents = se_ObjectLockLegalHold(input.LegalHold, context);
      contents = contents.n("LegalHold");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectLegalHoldCommand");
  var se_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xabolt]: input[_To],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ol]: [, ""]
    });
    let body;
    let contents;
    if (input.ObjectLockConfiguration !== undefined) {
      contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectLockConfigurationCommand");
  var se_PutObjectRetentionCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xabgr]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_ret]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.Retention !== undefined) {
      contents = se_ObjectLockRetention(input.Retention, context);
      contents = contents.n("Retention");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectRetentionCommand");
  var se_PutObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectTaggingCommand");
  var se_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    let contents;
    if (input.PublicAccessBlockConfiguration !== undefined) {
      contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutPublicAccessBlockCommand");
  var se_RestoreObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_res]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.RestoreRequest !== undefined) {
      contents = se_RestoreRequest(input.RestoreRequest, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_RestoreObjectCommand");
  var se_SelectObjectContentCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_se]: [, ""],
      [_st]: [, "2"]
    });
    let body;
    body = _ve;
    const bn = new import_xml_builder.XmlNode(_SOCR);
    bn.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    bn.cc(input, _Ex);
    bn.cc(input, _ETx);
    if (input[_IS] != null) {
      bn.c(se_InputSerialization(input[_IS], context).n(_IS));
    }
    if (input[_OS] != null) {
      bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
    }
    if (input[_RPe] != null) {
      bn.c(se_RequestProgress(input[_RPe], context).n(_RPe));
    }
    if (input[_SR] != null) {
      bn.c(se_ScanRange(input[_SR], context).n(_SR));
    }
    body += bn.toString();
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_SelectObjectContentCommand");
  var se_UploadPartCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "content-type": "application/octet-stream",
      [_cl_]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacc__]: input[_CCRCNVME],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "UploadPart"],
      [_pN]: [(0, import_smithy_client.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_UploadPartCommand");
  var se_UploadPartCopyCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      [_xacs__]: input[_CS],
      [_xacsim]: input[_CSIM],
      [_xacsims]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CSIMS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIMS]).toString()],
      [_xacsinm]: input[_CSINM],
      [_xacsius]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CSIUS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIUS]).toString()],
      [_xacsr]: input[_CSR],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xacssseca]: input[_CSSSECA],
      [_xacssseck]: input[_CSSSECK],
      [_xacssseckm]: input[_CSSSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xasebo]: input[_ESBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "UploadPartCopy"],
      [_pN]: [(0, import_smithy_client.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_UploadPartCopyCommand");
  var se_WriteGetObjectResponseCommand = /* @__PURE__ */ __name(async (input, context) => {
    const b = (0, import_core2.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
      "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
      "content-type": "application/octet-stream",
      [_xarr]: input[_RR],
      [_xart]: input[_RT],
      [_xafs]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_SCt]), () => input[_SCt].toString()],
      [_xafec]: input[_EC],
      [_xafem]: input[_EM],
      [_xafhar]: input[_AR],
      [_xafhcc]: input[_CC],
      [_xafhcd]: input[_CD],
      [_xafhce]: input[_CE],
      [_xafhcl]: input[_CL],
      [_cl_]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
      [_xafhcr]: input[_CR],
      [_xafhct]: input[_CTo],
      [_xafhxacc]: input[_CCRC],
      [_xafhxacc_]: input[_CCRCC],
      [_xafhxacc__]: input[_CCRCNVME],
      [_xafhxacs]: input[_CSHA],
      [_xafhxacs_]: input[_CSHAh],
      [_xafhxadm]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_DM]), () => input[_DM].toString()],
      [_xafhe]: input[_ETa],
      [_xafhe_]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xafhxae]: input[_Exp],
      [_xafhlm]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_LM]), () => (0, import_smithy_client.dateToUtcString)(input[_LM]).toString()],
      [_xafhxamm]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_MM]), () => input[_MM].toString()],
      [_xafhxaolm]: input[_OLM],
      [_xafhxaollh]: input[_OLLHS],
      [_xafhxaolrud]: [
        () => (0, import_smithy_client.isSerializableHeaderValue)(input[_OLRUD]),
        () => (0, import_smithy_client.serializeDateTime)(input[_OLRUD]).toString()
      ],
      [_xafhxampc]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_PC]), () => input[_PC].toString()],
      [_xafhxars]: input[_RS],
      [_xafhxarc]: input[_RC],
      [_xafhxar]: input[_Re],
      [_xafhxasse]: input[_SSE],
      [_xafhxasseca]: input[_SSECA],
      [_xafhxasseakki]: input[_SSEKMSKI],
      [_xafhxasseckm]: input[_SSECKMD],
      [_xafhxasc]: input[_SC],
      [_xafhxatc]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_TC]), () => input[_TC].toString()],
      [_xafhxavi]: input[_VI],
      [_xafhxassebke]: [() => (0, import_smithy_client.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/WriteGetObjectResponse");
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
      resolvedHostname = "{RequestRoute}." + resolvedHostname;
      if (input.RequestRoute === undefined) {
        throw new Error("Empty value provided for input host prefix: RequestRoute.");
      }
      resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
      if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
        throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
      }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_WriteGetObjectResponseCommand");
  var de_AbortMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_AbortMultipartUploadCommand");
  var de_CompleteMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_SSE]: [, output.headers[_xasse]],
      [_VI]: [, output.headers[_xavi]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(data[_CCRC]);
    }
    if (data[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(data[_CCRCC]);
    }
    if (data[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(data[_CCRCNVME]);
    }
    if (data[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(data[_CSHA]);
    }
    if (data[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(data[_CSHAh]);
    }
    if (data[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(data[_CT]);
    }
    if (data[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(data[_ETa]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_L] != null) {
      contents[_L] = (0, import_smithy_client.expectString)(data[_L]);
    }
    return contents;
  }, "de_CompleteMultipartUploadCommand");
  var de_CopyObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_CSVI]: [, output.headers[_xacsvi]],
      [_VI]: [, output.headers[_xavi]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.CopyObjectResult = de_CopyObjectResult(data, context);
    return contents;
  }, "de_CopyObjectCommand");
  var de_CreateBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_L]: [, output.headers[_lo]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_CreateBucketCommand");
  var de_CreateBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_CreateBucketMetadataTableConfigurationCommand");
  var de_CreateMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_AD]: [
        () => output.headers[_xaad] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_xaad]))
      ],
      [_ARI]: [, output.headers[_xaari]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]],
      [_CA]: [, output.headers[_xaca]],
      [_CT]: [, output.headers[_xact]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(data[_UI]);
    }
    return contents;
  }, "de_CreateMultipartUploadCommand");
  var de_CreateSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_SSE]: [, output.headers[_xasse]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_C] != null) {
      contents[_C] = de_SessionCredentials(data[_C], context);
    }
    return contents;
  }, "de_CreateSessionCommand");
  var de_DeleteBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketCommand");
  var de_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketAnalyticsConfigurationCommand");
  var de_DeleteBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketCorsCommand");
  var de_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketEncryptionCommand");
  var de_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketIntelligentTieringConfigurationCommand");
  var de_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketInventoryConfigurationCommand");
  var de_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketLifecycleCommand");
  var de_DeleteBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketMetadataTableConfigurationCommand");
  var de_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketMetricsConfigurationCommand");
  var de_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketOwnershipControlsCommand");
  var de_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketPolicyCommand");
  var de_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketReplicationCommand");
  var de_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketTaggingCommand");
  var de_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketWebsiteCommand");
  var de_DeleteObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_VI]: [, output.headers[_xavi]],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteObjectCommand");
  var de_DeleteObjectsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.Deleted === "") {
      contents[_De] = [];
    } else if (data[_De] != null) {
      contents[_De] = de_DeletedObjects((0, import_smithy_client.getArrayIfSingleItem)(data[_De]), context);
    }
    if (data.Error === "") {
      contents[_Err] = [];
    } else if (data[_Er] != null) {
      contents[_Err] = de_Errors((0, import_smithy_client.getArrayIfSingleItem)(data[_Er]), context);
    }
    return contents;
  }, "de_DeleteObjectsCommand");
  var de_DeleteObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteObjectTaggingCommand");
  var de_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeletePublicAccessBlockCommand");
  var de_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
    }
    return contents;
  }, "de_GetBucketAccelerateConfigurationCommand");
  var de_GetBucketAclCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents[_Gr] = [];
    } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
      contents[_Gr] = de_Grants((0, import_smithy_client.getArrayIfSingleItem)(data[_ACLc][_G]), context);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    return contents;
  }, "de_GetBucketAclCommand");
  var de_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
    return contents;
  }, "de_GetBucketAnalyticsConfigurationCommand");
  var de_GetBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.CORSRule === "") {
      contents[_CORSRu] = [];
    } else if (data[_CORSR] != null) {
      contents[_CORSRu] = de_CORSRules((0, import_smithy_client.getArrayIfSingleItem)(data[_CORSR]), context);
    }
    return contents;
  }, "de_GetBucketCorsCommand");
  var de_GetBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
    return contents;
  }, "de_GetBucketEncryptionCommand");
  var de_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
    return contents;
  }, "de_GetBucketIntelligentTieringConfigurationCommand");
  var de_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
    return contents;
  }, "de_GetBucketInventoryConfigurationCommand");
  var de_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_TDMOS]: [, output.headers[_xatdmos]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.Rule === "") {
      contents[_Rul] = [];
    } else if (data[_Ru] != null) {
      contents[_Rul] = de_LifecycleRules((0, import_smithy_client.getArrayIfSingleItem)(data[_Ru]), context);
    }
    return contents;
  }, "de_GetBucketLifecycleConfigurationCommand");
  var de_GetBucketLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_LC] != null) {
      contents[_LC] = (0, import_smithy_client.expectString)(data[_LC]);
    }
    return contents;
  }, "de_GetBucketLocationCommand");
  var de_GetBucketLoggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_LE] != null) {
      contents[_LE] = de_LoggingEnabled(data[_LE], context);
    }
    return contents;
  }, "de_GetBucketLoggingCommand");
  var de_GetBucketMetadataTableConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.GetBucketMetadataTableConfigurationResult = de_GetBucketMetadataTableConfigurationResult(data, context);
    return contents;
  }, "de_GetBucketMetadataTableConfigurationCommand");
  var de_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
    return contents;
  }, "de_GetBucketMetricsConfigurationCommand");
  var de_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_EBC] != null) {
      contents[_EBC] = de_EventBridgeConfiguration(data[_EBC], context);
    }
    if (data.CloudFunctionConfiguration === "") {
      contents[_LFC] = [];
    } else if (data[_CFC] != null) {
      contents[_LFC] = de_LambdaFunctionConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_CFC]), context);
    }
    if (data.QueueConfiguration === "") {
      contents[_QCu] = [];
    } else if (data[_QC] != null) {
      contents[_QCu] = de_QueueConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_QC]), context);
    }
    if (data.TopicConfiguration === "") {
      contents[_TCop] = [];
    } else if (data[_TCo] != null) {
      contents[_TCop] = de_TopicConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_TCo]), context);
    }
    return contents;
  }, "de_GetBucketNotificationConfigurationCommand");
  var de_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.OwnershipControls = de_OwnershipControls(data, context);
    return contents;
  }, "de_GetBucketOwnershipControlsCommand");
  var de_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = await collectBodyString(output.body, context);
    contents.Policy = (0, import_smithy_client.expectString)(data);
    return contents;
  }, "de_GetBucketPolicyCommand");
  var de_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.PolicyStatus = de_PolicyStatus(data, context);
    return contents;
  }, "de_GetBucketPolicyStatusCommand");
  var de_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
    return contents;
  }, "de_GetBucketReplicationCommand");
  var de_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_Pa] != null) {
      contents[_Pa] = (0, import_smithy_client.expectString)(data[_Pa]);
    }
    return contents;
  }, "de_GetBucketRequestPaymentCommand");
  var de_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.TagSet === "") {
      contents[_TS] = [];
    } else if (data[_TS] != null && data[_TS][_Ta] != null) {
      contents[_TS] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_TS][_Ta]), context);
    }
    return contents;
  }, "de_GetBucketTaggingCommand");
  var de_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_MDf] != null) {
      contents[_MFAD] = (0, import_smithy_client.expectString)(data[_MDf]);
    }
    if (data[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
    }
    return contents;
  }, "de_GetBucketVersioningCommand");
  var de_GetBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_ED] != null) {
      contents[_ED] = de_ErrorDocument(data[_ED], context);
    }
    if (data[_ID] != null) {
      contents[_ID] = de_IndexDocument(data[_ID], context);
    }
    if (data[_RART] != null) {
      contents[_RART] = de_RedirectAllRequestsTo(data[_RART], context);
    }
    if (data.RoutingRules === "") {
      contents[_RRo] = [];
    } else if (data[_RRo] != null && data[_RRo][_RRou] != null) {
      contents[_RRo] = de_RoutingRules((0, import_smithy_client.getArrayIfSingleItem)(data[_RRo][_RRou]), context);
    }
    return contents;
  }, "de_GetBucketWebsiteCommand");
  var de_GetObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_AR]: [, output.headers[_ar]],
      [_Exp]: [, output.headers[_xae]],
      [_Re]: [, output.headers[_xar]],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_CLo]: [() => output.headers[_cl_] !== undefined, () => (0, import_smithy_client.strictParseLong)(output.headers[_cl_])],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CCRCNVME]: [, output.headers[_xacc__]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_CT]: [, output.headers[_xact]],
      [_MM]: [() => output.headers[_xamm] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xamm])],
      [_VI]: [, output.headers[_xavi]],
      [_CC]: [, output.headers[_cc]],
      [_CD]: [, output.headers[_cd]],
      [_CE]: [, output.headers[_ce]],
      [_CL]: [, output.headers[_cl]],
      [_CR]: [, output.headers[_cr]],
      [_CTo]: [, output.headers[_ct]],
      [_E]: [() => output.headers[_e] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_e]))],
      [_ES]: [, output.headers[_ex]],
      [_WRL]: [, output.headers[_xawrl]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_SC]: [, output.headers[_xasc]],
      [_RC]: [, output.headers[_xarc]],
      [_RS]: [, output.headers[_xars]],
      [_PC]: [() => output.headers[_xampc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xampc])],
      [_TC]: [() => output.headers[_xatc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xatc])],
      [_OLM]: [, output.headers[_xaolm]],
      [_OLRUD]: [
        () => output.headers[_xaolrud] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
      ],
      [_OLLHS]: [, output.headers[_xaollh]],
      Metadata: [
        ,
        Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
          acc[header.substring(11)] = output.headers[header];
          return acc;
        }, {})
      ]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  }, "de_GetObjectCommand");
  var de_GetObjectAclCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents[_Gr] = [];
    } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
      contents[_Gr] = de_Grants((0, import_smithy_client.getArrayIfSingleItem)(data[_ACLc][_G]), context);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    return contents;
  }, "de_GetObjectAclCommand");
  var de_GetObjectAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_VI]: [, output.headers[_xavi]],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_Ch] != null) {
      contents[_Ch] = de_Checksum(data[_Ch], context);
    }
    if (data[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(data[_ETa]);
    }
    if (data[_OP] != null) {
      contents[_OP] = de_GetObjectAttributesParts(data[_OP], context);
    }
    if (data[_OSb] != null) {
      contents[_OSb] = (0, import_smithy_client.strictParseLong)(data[_OSb]);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    return contents;
  }, "de_GetObjectAttributesCommand");
  var de_GetObjectLegalHoldCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.LegalHold = de_ObjectLockLegalHold(data, context);
    return contents;
  }, "de_GetObjectLegalHoldCommand");
  var de_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
    return contents;
  }, "de_GetObjectLockConfigurationCommand");
  var de_GetObjectRetentionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.Retention = de_ObjectLockRetention(data, context);
    return contents;
  }, "de_GetObjectRetentionCommand");
  var de_GetObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.TagSet === "") {
      contents[_TS] = [];
    } else if (data[_TS] != null && data[_TS][_Ta] != null) {
      contents[_TS] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_TS][_Ta]), context);
    }
    return contents;
  }, "de_GetObjectTaggingCommand");
  var de_GetObjectTorrentCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  }, "de_GetObjectTorrentCommand");
  var de_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
    return contents;
  }, "de_GetPublicAccessBlockCommand");
  var de_HeadBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_BLT]: [, output.headers[_xablt]],
      [_BLN]: [, output.headers[_xabln]],
      [_BR]: [, output.headers[_xabr]],
      [_APA]: [() => output.headers[_xaapa] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xaapa])]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_HeadBucketCommand");
  var de_HeadObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_AR]: [, output.headers[_ar]],
      [_Exp]: [, output.headers[_xae]],
      [_Re]: [, output.headers[_xar]],
      [_AS]: [, output.headers[_xaas]],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_CLo]: [() => output.headers[_cl_] !== undefined, () => (0, import_smithy_client.strictParseLong)(output.headers[_cl_])],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CCRCNVME]: [, output.headers[_xacc__]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_CT]: [, output.headers[_xact]],
      [_ETa]: [, output.headers[_eta]],
      [_MM]: [() => output.headers[_xamm] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xamm])],
      [_VI]: [, output.headers[_xavi]],
      [_CC]: [, output.headers[_cc]],
      [_CD]: [, output.headers[_cd]],
      [_CE]: [, output.headers[_ce]],
      [_CL]: [, output.headers[_cl]],
      [_CTo]: [, output.headers[_ct]],
      [_CR]: [, output.headers[_cr]],
      [_E]: [() => output.headers[_e] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_e]))],
      [_ES]: [, output.headers[_ex]],
      [_WRL]: [, output.headers[_xawrl]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_SC]: [, output.headers[_xasc]],
      [_RC]: [, output.headers[_xarc]],
      [_RS]: [, output.headers[_xars]],
      [_PC]: [() => output.headers[_xampc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xampc])],
      [_OLM]: [, output.headers[_xaolm]],
      [_OLRUD]: [
        () => output.headers[_xaolrud] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
      ],
      [_OLLHS]: [, output.headers[_xaollh]],
      Metadata: [
        ,
        Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
          acc[header.substring(11)] = output.headers[header];
          return acc;
        }, {})
      ]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_HeadObjectCommand");
  var de_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.AnalyticsConfiguration === "") {
      contents[_ACLn] = [];
    } else if (data[_AC] != null) {
      contents[_ACLn] = de_AnalyticsConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_AC]), context);
    }
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketAnalyticsConfigurationsCommand");
  var de_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data.IntelligentTieringConfiguration === "") {
      contents[_ITCL] = [];
    } else if (data[_ITC] != null) {
      contents[_ITCL] = de_IntelligentTieringConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_ITC]), context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketIntelligentTieringConfigurationsCommand");
  var de_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data.InventoryConfiguration === "") {
      contents[_ICL] = [];
    } else if (data[_IC] != null) {
      contents[_ICL] = de_InventoryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_IC]), context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketInventoryConfigurationsCommand");
  var de_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data.MetricsConfiguration === "") {
      contents[_MCL] = [];
    } else if (data[_MC] != null) {
      contents[_MCL] = de_MetricsConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_MC]), context);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketMetricsConfigurationsCommand");
  var de_ListBucketsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.Buckets === "") {
      contents[_Bu] = [];
    } else if (data[_Bu] != null && data[_Bu][_B] != null) {
      contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(data[_Bu][_B]), context);
    }
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    return contents;
  }, "de_ListBucketsCommand");
  var de_ListDirectoryBucketsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.Buckets === "") {
      contents[_Bu] = [];
    } else if (data[_Bu] != null && data[_Bu][_B] != null) {
      contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(data[_Bu][_B]), context);
    }
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    return contents;
  }, "de_ListDirectoryBucketsCommand");
  var de_ListMultipartUploadsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KM] != null) {
      contents[_KM] = (0, import_smithy_client.expectString)(data[_KM]);
    }
    if (data[_MU] != null) {
      contents[_MU] = (0, import_smithy_client.strictParseInt32)(data[_MU]);
    }
    if (data[_NKM] != null) {
      contents[_NKM] = (0, import_smithy_client.expectString)(data[_NKM]);
    }
    if (data[_NUIM] != null) {
      contents[_NUIM] = (0, import_smithy_client.expectString)(data[_NUIM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_UIM] != null) {
      contents[_UIM] = (0, import_smithy_client.expectString)(data[_UIM]);
    }
    if (data.Upload === "") {
      contents[_Up] = [];
    } else if (data[_U] != null) {
      contents[_Up] = de_MultipartUploadList((0, import_smithy_client.getArrayIfSingleItem)(data[_U]), context);
    }
    return contents;
  }, "de_ListMultipartUploadsCommand");
  var de_ListObjectsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.Contents === "") {
      contents[_Co] = [];
    } else if (data[_Co] != null) {
      contents[_Co] = de_ObjectList((0, import_smithy_client.getArrayIfSingleItem)(data[_Co]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(data[_M]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NM] != null) {
      contents[_NM] = (0, import_smithy_client.expectString)(data[_NM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    return contents;
  }, "de_ListObjectsCommand");
  var de_ListObjectsV2Command = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.Contents === "") {
      contents[_Co] = [];
    } else if (data[_Co] != null) {
      contents[_Co] = de_ObjectList((0, import_smithy_client.getArrayIfSingleItem)(data[_Co]), context);
    }
    if (data[_CTon] != null) {
      contents[_CTon] = (0, import_smithy_client.expectString)(data[_CTon]);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KC] != null) {
      contents[_KC] = (0, import_smithy_client.strictParseInt32)(data[_KC]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_SA] != null) {
      contents[_SA] = (0, import_smithy_client.expectString)(data[_SA]);
    }
    return contents;
  }, "de_ListObjectsV2Command");
  var de_ListObjectVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.DeleteMarker === "") {
      contents[_DMe] = [];
    } else if (data[_DM] != null) {
      contents[_DMe] = de_DeleteMarkers((0, import_smithy_client.getArrayIfSingleItem)(data[_DM]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KM] != null) {
      contents[_KM] = (0, import_smithy_client.expectString)(data[_KM]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NKM] != null) {
      contents[_NKM] = (0, import_smithy_client.expectString)(data[_NKM]);
    }
    if (data[_NVIM] != null) {
      contents[_NVIM] = (0, import_smithy_client.expectString)(data[_NVIM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_VIM] != null) {
      contents[_VIM] = (0, import_smithy_client.expectString)(data[_VIM]);
    }
    if (data.Version === "") {
      contents[_Ve] = [];
    } else if (data[_V] != null) {
      contents[_Ve] = de_ObjectVersionList((0, import_smithy_client.getArrayIfSingleItem)(data[_V]), context);
    }
    return contents;
  }, "de_ListObjectVersionsCommand");
  var de_ListPartsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_AD]: [
        () => output.headers[_xaad] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_xaad]))
      ],
      [_ARI]: [, output.headers[_xaari]],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_CA] != null) {
      contents[_CA] = (0, import_smithy_client.expectString)(data[_CA]);
    }
    if (data[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(data[_CT]);
    }
    if (data[_In] != null) {
      contents[_In] = de_Initiator(data[_In], context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_MP] != null) {
      contents[_MP] = (0, import_smithy_client.strictParseInt32)(data[_MP]);
    }
    if (data[_NPNM] != null) {
      contents[_NPNM] = (0, import_smithy_client.expectString)(data[_NPNM]);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    if (data[_PNM] != null) {
      contents[_PNM] = (0, import_smithy_client.expectString)(data[_PNM]);
    }
    if (data.Part === "") {
      contents[_Part] = [];
    } else if (data[_Par] != null) {
      contents[_Part] = de_Parts((0, import_smithy_client.getArrayIfSingleItem)(data[_Par]), context);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    if (data[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(data[_UI]);
    }
    return contents;
  }, "de_ListPartsCommand");
  var de_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAccelerateConfigurationCommand");
  var de_PutBucketAclCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAclCommand");
  var de_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAnalyticsConfigurationCommand");
  var de_PutBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketCorsCommand");
  var de_PutBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketEncryptionCommand");
  var de_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketIntelligentTieringConfigurationCommand");
  var de_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketInventoryConfigurationCommand");
  var de_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_TDMOS]: [, output.headers[_xatdmos]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketLifecycleConfigurationCommand");
  var de_PutBucketLoggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketLoggingCommand");
  var de_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketMetricsConfigurationCommand");
  var de_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketNotificationConfigurationCommand");
  var de_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketOwnershipControlsCommand");
  var de_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketPolicyCommand");
  var de_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketReplicationCommand");
  var de_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketRequestPaymentCommand");
  var de_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketTaggingCommand");
  var de_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketVersioningCommand");
  var de_PutBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketWebsiteCommand");
  var de_PutObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CCRCNVME]: [, output.headers[_xacc__]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_CT]: [, output.headers[_xact]],
      [_SSE]: [, output.headers[_xasse]],
      [_VI]: [, output.headers[_xavi]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_Si]: [() => output.headers[_xaos] !== undefined, () => (0, import_smithy_client.strictParseLong)(output.headers[_xaos])],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectCommand");
  var de_PutObjectAclCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectAclCommand");
  var de_PutObjectLegalHoldCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectLegalHoldCommand");
  var de_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectLockConfigurationCommand");
  var de_PutObjectRetentionCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectRetentionCommand");
  var de_PutObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectTaggingCommand");
  var de_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutPublicAccessBlockCommand");
  var de_RestoreObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]],
      [_ROP]: [, output.headers[_xarop]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_RestoreObjectCommand");
  var de_SelectObjectContentCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = output.body;
    contents.Payload = de_SelectObjectContentEventStream(data, context);
    return contents;
  }, "de_SelectObjectContentCommand");
  var de_UploadPartCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_SSE]: [, output.headers[_xasse]],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CCRCNVME]: [, output.headers[_xacc__]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_UploadPartCommand");
  var de_UploadPartCopyCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_CSVI]: [, output.headers[_xacsvi]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectObject)(await (0, import_core.parseXmlBody)(output.body, context));
    contents.CopyPartResult = de_CopyPartResult(data, context);
    return contents;
  }, "de_UploadPartCopyCommand");
  var de_WriteGetObjectResponseCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_WriteGetObjectResponseCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core.parseXmlErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core.loadRestXmlErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchUpload":
      case "com.amazonaws.s3#NoSuchUpload":
        throw await de_NoSuchUploadRes(parsedOutput, context);
      case "ObjectNotInActiveTierError":
      case "com.amazonaws.s3#ObjectNotInActiveTierError":
        throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
      case "BucketAlreadyExists":
      case "com.amazonaws.s3#BucketAlreadyExists":
        throw await de_BucketAlreadyExistsRes(parsedOutput, context);
      case "BucketAlreadyOwnedByYou":
      case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
        throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput, context);
      case "InvalidObjectState":
      case "com.amazonaws.s3#InvalidObjectState":
        throw await de_InvalidObjectStateRes(parsedOutput, context);
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput, context);
      case "NotFound":
      case "com.amazonaws.s3#NotFound":
        throw await de_NotFoundRes(parsedOutput, context);
      case "EncryptionTypeMismatch":
      case "com.amazonaws.s3#EncryptionTypeMismatch":
        throw await de_EncryptionTypeMismatchRes(parsedOutput, context);
      case "InvalidRequest":
      case "com.amazonaws.s3#InvalidRequest":
        throw await de_InvalidRequestRes(parsedOutput, context);
      case "InvalidWriteOffset":
      case "com.amazonaws.s3#InvalidWriteOffset":
        throw await de_InvalidWriteOffsetRes(parsedOutput, context);
      case "TooManyParts":
      case "com.amazonaws.s3#TooManyParts":
        throw await de_TooManyPartsRes(parsedOutput, context);
      case "ObjectAlreadyInActiveTierError":
      case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
        throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(S3ServiceException);
  var de_BucketAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new BucketAlreadyExists({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_BucketAlreadyExistsRes");
  var de_BucketAlreadyOwnedByYouRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new BucketAlreadyOwnedByYou({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_BucketAlreadyOwnedByYouRes");
  var de_EncryptionTypeMismatchRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new EncryptionTypeMismatch({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_EncryptionTypeMismatchRes");
  var de_InvalidObjectStateRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    if (data[_AT] != null) {
      contents[_AT] = (0, import_smithy_client.expectString)(data[_AT]);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    const exception = new InvalidObjectState({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidObjectStateRes");
  var de_InvalidRequestRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new InvalidRequest({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRequestRes");
  var de_InvalidWriteOffsetRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new InvalidWriteOffset({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidWriteOffsetRes");
  var de_NoSuchBucketRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchBucket({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchBucketRes");
  var de_NoSuchKeyRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchKey({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchKeyRes");
  var de_NoSuchUploadRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchUpload({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchUploadRes");
  var de_NotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NotFound({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NotFoundRes");
  var de_ObjectAlreadyInActiveTierErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new ObjectAlreadyInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ObjectAlreadyInActiveTierErrorRes");
  var de_ObjectNotInActiveTierErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new ObjectNotInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ObjectNotInActiveTierErrorRes");
  var de_TooManyPartsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new TooManyParts({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_TooManyPartsRes");
  var de_SelectObjectContentEventStream = /* @__PURE__ */ __name((output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
      if (event["Records"] != null) {
        return {
          Records: await de_RecordsEvent_event(event["Records"], context)
        };
      }
      if (event["Stats"] != null) {
        return {
          Stats: await de_StatsEvent_event(event["Stats"], context)
        };
      }
      if (event["Progress"] != null) {
        return {
          Progress: await de_ProgressEvent_event(event["Progress"], context)
        };
      }
      if (event["Cont"] != null) {
        return {
          Cont: await de_ContinuationEvent_event(event["Cont"], context)
        };
      }
      if (event["End"] != null) {
        return {
          End: await de_EndEvent_event(event["End"], context)
        };
      }
      return { $unknown: output };
    });
  }, "de_SelectObjectContentEventStream");
  var de_ContinuationEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    Object.assign(contents, de_ContinuationEvent(data, context));
    return contents;
  }, "de_ContinuationEvent_event");
  var de_EndEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    Object.assign(contents, de_EndEvent(data, context));
    return contents;
  }, "de_EndEvent_event");
  var de_ProgressEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    contents.Details = de_Progress(data, context);
    return contents;
  }, "de_ProgressEvent_event");
  var de_RecordsEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
  }, "de_RecordsEvent_event");
  var de_StatsEvent_event = /* @__PURE__ */ __name(async (output, context) => {
    const contents = {};
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    contents.Details = de_Stats(data, context);
    return contents;
  }, "de_StatsEvent_event");
  var se_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AIMU);
    if (input[_DAI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_DAI, String(input[_DAI])).n(_DAI));
    }
    return bn;
  }, "se_AbortIncompleteMultipartUpload");
  var se_AccelerateConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACc);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BAS, input[_S]).n(_S));
    }
    return bn;
  }, "se_AccelerateConfiguration");
  var se_AccessControlPolicy = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACP);
    bn.lc(input, "Grants", "AccessControlList", () => se_Grants(input[_Gr], context));
    if (input[_O] != null) {
      bn.c(se_Owner(input[_O], context).n(_O));
    }
    return bn;
  }, "se_AccessControlPolicy");
  var se_AccessControlTranslation = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACT);
    if (input[_O] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OOw, input[_O]).n(_O));
    }
    return bn;
  }, "se_AccessControlTranslation");
  var se_AllowedHeaders = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AH, entry);
      return n.n(_me);
    });
  }, "se_AllowedHeaders");
  var se_AllowedMethods = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AM, entry);
      return n.n(_me);
    });
  }, "se_AllowedMethods");
  var se_AllowedOrigins = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AO, entry);
      return n.n(_me);
    });
  }, "se_AllowedOrigins");
  var se_AnalyticsAndOperator = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_AnalyticsAndOperator");
  var se_AnalyticsConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_AnalyticsFilter(input[_F], context).n(_F));
    }
    if (input[_SCA] != null) {
      bn.c(se_StorageClassAnalysis(input[_SCA], context).n(_SCA));
    }
    return bn;
  }, "se_AnalyticsConfiguration");
  var se_AnalyticsExportDestination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AED);
    if (input[_SBD] != null) {
      bn.c(se_AnalyticsS3BucketDestination(input[_SBD], context).n(_SBD));
    }
    return bn;
  }, "se_AnalyticsExportDestination");
  var se_AnalyticsFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AF);
    AnalyticsFilter.visit(input, {
      Prefix: /* @__PURE__ */ __name((value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      }, "Prefix"),
      Tag: /* @__PURE__ */ __name((value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      }, "Tag"),
      And: /* @__PURE__ */ __name((value) => {
        if (input[_A] != null) {
          bn.c(se_AnalyticsAndOperator(value, context).n(_A));
        }
      }, "And"),
      _: /* @__PURE__ */ __name((name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }, "_")
    });
    return bn;
  }, "se_AnalyticsFilter");
  var se_AnalyticsS3BucketDestination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ASBD);
    if (input[_Fo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ASEFF, input[_Fo]).n(_Fo));
    }
    if (input[_BAI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AIc, input[_BAI]).n(_BAI));
    }
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    bn.cc(input, _P);
    return bn;
  }, "se_AnalyticsS3BucketDestination");
  var se_BucketInfo = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BI);
    bn.cc(input, _DR);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BT, input[_Ty]).n(_Ty));
    }
    return bn;
  }, "se_BucketInfo");
  var se_BucketLifecycleConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BLC);
    bn.l(input, "Rules", "Rule", () => se_LifecycleRules(input[_Rul], context));
    return bn;
  }, "se_BucketLifecycleConfiguration");
  var se_BucketLoggingStatus = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BLS);
    if (input[_LE] != null) {
      bn.c(se_LoggingEnabled(input[_LE], context).n(_LE));
    }
    return bn;
  }, "se_BucketLoggingStatus");
  var se_CompletedMultipartUpload = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CMU);
    bn.l(input, "Parts", "Part", () => se_CompletedPartList(input[_Part], context));
    return bn;
  }, "se_CompletedMultipartUpload");
  var se_CompletedPart = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CPo);
    bn.cc(input, _ETa);
    bn.cc(input, _CCRC);
    bn.cc(input, _CCRCC);
    bn.cc(input, _CCRCNVME);
    bn.cc(input, _CSHA);
    bn.cc(input, _CSHAh);
    if (input[_PN] != null) {
      bn.c(import_xml_builder.XmlNode.of(_PN, String(input[_PN])).n(_PN));
    }
    return bn;
  }, "se_CompletedPart");
  var se_CompletedPartList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_CompletedPart(entry, context);
      return n.n(_me);
    });
  }, "se_CompletedPartList");
  var se_Condition = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Con);
    bn.cc(input, _HECRE);
    bn.cc(input, _KPE);
    return bn;
  }, "se_Condition");
  var se_CORSConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CORSC);
    bn.l(input, "CORSRules", "CORSRule", () => se_CORSRules(input[_CORSRu], context));
    return bn;
  }, "se_CORSConfiguration");
  var se_CORSRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CORSR);
    bn.cc(input, _ID_);
    bn.l(input, "AllowedHeaders", "AllowedHeader", () => se_AllowedHeaders(input[_AHl], context));
    bn.l(input, "AllowedMethods", "AllowedMethod", () => se_AllowedMethods(input[_AMl], context));
    bn.l(input, "AllowedOrigins", "AllowedOrigin", () => se_AllowedOrigins(input[_AOl], context));
    bn.l(input, "ExposeHeaders", "ExposeHeader", () => se_ExposeHeaders(input[_EH], context));
    if (input[_MAS] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MAS, String(input[_MAS])).n(_MAS));
    }
    return bn;
  }, "se_CORSRule");
  var se_CORSRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_CORSRule(entry, context);
      return n.n(_me);
    });
  }, "se_CORSRules");
  var se_CreateBucketConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CBC);
    if (input[_LC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BLCu, input[_LC]).n(_LC));
    }
    if (input[_L] != null) {
      bn.c(se_LocationInfo(input[_L], context).n(_L));
    }
    if (input[_B] != null) {
      bn.c(se_BucketInfo(input[_B], context).n(_B));
    }
    return bn;
  }, "se_CreateBucketConfiguration");
  var se_CSVInput = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CSVIn);
    bn.cc(input, _FHI);
    bn.cc(input, _Com);
    bn.cc(input, _QEC);
    bn.cc(input, _RD);
    bn.cc(input, _FD);
    bn.cc(input, _QCuo);
    if (input[_AQRD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AQRD, String(input[_AQRD])).n(_AQRD));
    }
    return bn;
  }, "se_CSVInput");
  var se_CSVOutput = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CSVO);
    bn.cc(input, _QF);
    bn.cc(input, _QEC);
    bn.cc(input, _RD);
    bn.cc(input, _FD);
    bn.cc(input, _QCuo);
    return bn;
  }, "se_CSVOutput");
  var se_DefaultRetention = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_DRe);
    if (input[_Mo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_Y] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Y, String(input[_Y])).n(_Y));
    }
    return bn;
  }, "se_DefaultRetention");
  var se_Delete = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Del);
    bn.l(input, "Objects", "Object", () => se_ObjectIdentifierList(input[_Ob], context));
    if (input[_Q] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Q, String(input[_Q])).n(_Q));
    }
    return bn;
  }, "se_Delete");
  var se_DeleteMarkerReplication = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_DMR);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_DMRS, input[_S]).n(_S));
    }
    return bn;
  }, "se_DeleteMarkerReplication");
  var se_Destination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Des);
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    if (input[_Ac] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AIc, input[_Ac]).n(_Ac));
    }
    bn.cc(input, _SC);
    if (input[_ACT] != null) {
      bn.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
    }
    if (input[_ECn] != null) {
      bn.c(se_EncryptionConfiguration(input[_ECn], context).n(_ECn));
    }
    if (input[_RTe] != null) {
      bn.c(se_ReplicationTime(input[_RTe], context).n(_RTe));
    }
    if (input[_Me] != null) {
      bn.c(se_Metrics(input[_Me], context).n(_Me));
    }
    return bn;
  }, "se_Destination");
  var se_Encryption = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_En);
    if (input[_ETn] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSE, input[_ETn]).n(_ETn));
    }
    if (input[_KMSKI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSKI]).n(_KMSKI));
    }
    bn.cc(input, _KMSC);
    return bn;
  }, "se_Encryption");
  var se_EncryptionConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ECn);
    bn.cc(input, _RKKID);
    return bn;
  }, "se_EncryptionConfiguration");
  var se_ErrorDocument = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ED);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    return bn;
  }, "se_ErrorDocument");
  var se_EventBridgeConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_EBC);
    return bn;
  }, "se_EventBridgeConfiguration");
  var se_EventList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_Ev, entry);
      return n.n(_me);
    });
  }, "se_EventList");
  var se_ExistingObjectReplication = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_EOR);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_EORS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ExistingObjectReplication");
  var se_ExposeHeaders = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_EHx, entry);
      return n.n(_me);
    });
  }, "se_ExposeHeaders");
  var se_FilterRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_FR);
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_FRN, input[_N]).n(_N));
    }
    if (input[_Va] != null) {
      bn.c(import_xml_builder.XmlNode.of(_FRV, input[_Va]).n(_Va));
    }
    return bn;
  }, "se_FilterRule");
  var se_FilterRuleList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_FilterRule(entry, context);
      return n.n(_me);
    });
  }, "se_FilterRuleList");
  var se_GlacierJobParameters = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_GJP);
    bn.cc(input, _Ti);
    return bn;
  }, "se_GlacierJobParameters");
  var se_Grant = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_G);
    if (input[_Gra] != null) {
      const n = se_Grantee(input[_Gra], context).n(_Gra);
      n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bn.c(n);
    }
    bn.cc(input, _Pe);
    return bn;
  }, "se_Grant");
  var se_Grantee = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Gra);
    bn.cc(input, _DN);
    bn.cc(input, _EA);
    bn.cc(input, _ID_);
    bn.cc(input, _URI);
    bn.a("xsi:type", input[_Ty]);
    return bn;
  }, "se_Grantee");
  var se_Grants = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Grant(entry, context);
      return n.n(_G);
    });
  }, "se_Grants");
  var se_IndexDocument = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ID);
    bn.cc(input, _Su);
    return bn;
  }, "se_IndexDocument");
  var se_InputSerialization = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IS);
    if (input[_CSV] != null) {
      bn.c(se_CSVInput(input[_CSV], context).n(_CSV));
    }
    bn.cc(input, _CTom);
    if (input[_JSON] != null) {
      bn.c(se_JSONInput(input[_JSON], context).n(_JSON));
    }
    if (input[_Parq] != null) {
      bn.c(se_ParquetInput(input[_Parq], context).n(_Parq));
    }
    return bn;
  }, "se_InputSerialization");
  var se_IntelligentTieringAndOperator = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_IntelligentTieringAndOperator");
  var se_IntelligentTieringConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_IntelligentTieringFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITS, input[_S]).n(_S));
    }
    bn.l(input, "Tierings", "Tiering", () => se_TieringList(input[_Tie], context));
    return bn;
  }, "se_IntelligentTieringConfiguration");
  var se_IntelligentTieringFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITF);
    bn.cc(input, _P);
    if (input[_Ta] != null) {
      bn.c(se_Tag(input[_Ta], context).n(_Ta));
    }
    if (input[_A] != null) {
      bn.c(se_IntelligentTieringAndOperator(input[_A], context).n(_A));
    }
    return bn;
  }, "se_IntelligentTieringFilter");
  var se_InventoryConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IC);
    if (input[_Des] != null) {
      bn.c(se_InventoryDestination(input[_Des], context).n(_Des));
    }
    if (input[_IE] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
    }
    if (input[_F] != null) {
      bn.c(se_InventoryFilter(input[_F], context).n(_F));
    }
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_II, input[_I]).n(_I));
    }
    if (input[_IOV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IIOV, input[_IOV]).n(_IOV));
    }
    bn.lc(input, "OptionalFields", "OptionalFields", () => se_InventoryOptionalFields(input[_OF], context));
    if (input[_Sc] != null) {
      bn.c(se_InventorySchedule(input[_Sc], context).n(_Sc));
    }
    return bn;
  }, "se_InventoryConfiguration");
  var se_InventoryDestination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IDn);
    if (input[_SBD] != null) {
      bn.c(se_InventoryS3BucketDestination(input[_SBD], context).n(_SBD));
    }
    return bn;
  }, "se_InventoryDestination");
  var se_InventoryEncryption = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IEn);
    if (input[_SSES] != null) {
      bn.c(se_SSES3(input[_SSES], context).n(_SS));
    }
    if (input[_SSEKMS] != null) {
      bn.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
    }
    return bn;
  }, "se_InventoryEncryption");
  var se_InventoryFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IF);
    bn.cc(input, _P);
    return bn;
  }, "se_InventoryFilter");
  var se_InventoryOptionalFields = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_IOF, entry);
      return n.n(_Fi);
    });
  }, "se_InventoryOptionalFields");
  var se_InventoryS3BucketDestination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ISBD);
    bn.cc(input, _AIc);
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    if (input[_Fo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IFn, input[_Fo]).n(_Fo));
    }
    bn.cc(input, _P);
    if (input[_En] != null) {
      bn.c(se_InventoryEncryption(input[_En], context).n(_En));
    }
    return bn;
  }, "se_InventoryS3BucketDestination");
  var se_InventorySchedule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ISn);
    if (input[_Fr] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IFnv, input[_Fr]).n(_Fr));
    }
    return bn;
  }, "se_InventorySchedule");
  var se_JSONInput = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_JSONI);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_JSONT, input[_Ty]).n(_Ty));
    }
    return bn;
  }, "se_JSONInput");
  var se_JSONOutput = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_JSONO);
    bn.cc(input, _RD);
    return bn;
  }, "se_JSONOutput");
  var se_LambdaFunctionConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LFCa);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_LFA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LFA, input[_LFA]).n(_CF));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_LambdaFunctionConfiguration");
  var se_LambdaFunctionConfigurationList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_LambdaFunctionConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_LambdaFunctionConfigurationList");
  var se_LifecycleExpiration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LEi);
    if (input[_Dat] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client.serializeDateTime)(input[_Dat]).toString()).n(_Dat));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_EODM] != null) {
      bn.c(import_xml_builder.XmlNode.of(_EODM, String(input[_EODM])).n(_EODM));
    }
    return bn;
  }, "se_LifecycleExpiration");
  var se_LifecycleRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LR);
    if (input[_Exp] != null) {
      bn.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
    }
    bn.cc(input, _ID_);
    bn.cc(input, _P);
    if (input[_F] != null) {
      bn.c(se_LifecycleRuleFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ESx, input[_S]).n(_S));
    }
    bn.l(input, "Transitions", "Transition", () => se_TransitionList(input[_Tr], context));
    bn.l(input, "NoncurrentVersionTransitions", "NoncurrentVersionTransition", () => se_NoncurrentVersionTransitionList(input[_NVT], context));
    if (input[_NVE] != null) {
      bn.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
    }
    if (input[_AIMU] != null) {
      bn.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
    }
    return bn;
  }, "se_LifecycleRule");
  var se_LifecycleRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LRAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    if (input[_OSGT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
    }
    if (input[_OSLT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
    }
    return bn;
  }, "se_LifecycleRuleAndOperator");
  var se_LifecycleRuleFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LRF);
    bn.cc(input, _P);
    if (input[_Ta] != null) {
      bn.c(se_Tag(input[_Ta], context).n(_Ta));
    }
    if (input[_OSGT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
    }
    if (input[_OSLT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
    }
    if (input[_A] != null) {
      bn.c(se_LifecycleRuleAndOperator(input[_A], context).n(_A));
    }
    return bn;
  }, "se_LifecycleRuleFilter");
  var se_LifecycleRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_LifecycleRule(entry, context);
      return n.n(_me);
    });
  }, "se_LifecycleRules");
  var se_LocationInfo = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LI);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LT, input[_Ty]).n(_Ty));
    }
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LNAS, input[_N]).n(_N));
    }
    return bn;
  }, "se_LocationInfo");
  var se_LoggingEnabled = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LE);
    bn.cc(input, _TB);
    bn.lc(input, "TargetGrants", "TargetGrants", () => se_TargetGrants(input[_TG], context));
    bn.cc(input, _TP);
    if (input[_TOKF] != null) {
      bn.c(se_TargetObjectKeyFormat(input[_TOKF], context).n(_TOKF));
    }
    return bn;
  }, "se_LoggingEnabled");
  var se_MetadataEntry = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ME);
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MKe, input[_N]).n(_N));
    }
    if (input[_Va] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MV, input[_Va]).n(_Va));
    }
    return bn;
  }, "se_MetadataEntry");
  var se_MetadataTableConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MTC);
    if (input[_STD] != null) {
      bn.c(se_S3TablesDestination(input[_STD], context).n(_STD));
    }
    return bn;
  }, "se_MetadataTableConfiguration");
  var se_Metrics = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Me);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MS, input[_S]).n(_S));
    }
    if (input[_ETv] != null) {
      bn.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
    }
    return bn;
  }, "se_Metrics");
  var se_MetricsAndOperator = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    bn.cc(input, _APAc);
    return bn;
  }, "se_MetricsAndOperator");
  var se_MetricsConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_MetricsFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_MetricsConfiguration");
  var se_MetricsFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MF);
    MetricsFilter.visit(input, {
      Prefix: /* @__PURE__ */ __name((value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      }, "Prefix"),
      Tag: /* @__PURE__ */ __name((value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      }, "Tag"),
      AccessPointArn: /* @__PURE__ */ __name((value) => {
        if (input[_APAc] != null) {
          bn.c(import_xml_builder.XmlNode.of(_APAc, value).n(_APAc));
        }
      }, "AccessPointArn"),
      And: /* @__PURE__ */ __name((value) => {
        if (input[_A] != null) {
          bn.c(se_MetricsAndOperator(value, context).n(_A));
        }
      }, "And"),
      _: /* @__PURE__ */ __name((name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }, "_")
    });
    return bn;
  }, "se_MetricsFilter");
  var se_NoncurrentVersionExpiration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NVE);
    if (input[_ND] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
    }
    if (input[_NNV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
    }
    return bn;
  }, "se_NoncurrentVersionExpiration");
  var se_NoncurrentVersionTransition = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NVTo);
    if (input[_ND] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
    }
    if (input[_SC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
    }
    if (input[_NNV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
    }
    return bn;
  }, "se_NoncurrentVersionTransition");
  var se_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_NoncurrentVersionTransition(entry, context);
      return n.n(_me);
    });
  }, "se_NoncurrentVersionTransitionList");
  var se_NotificationConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NC);
    bn.l(input, "TopicConfigurations", "TopicConfiguration", () => se_TopicConfigurationList(input[_TCop], context));
    bn.l(input, "QueueConfigurations", "QueueConfiguration", () => se_QueueConfigurationList(input[_QCu], context));
    bn.l(input, "LambdaFunctionConfigurations", "CloudFunctionConfiguration", () => se_LambdaFunctionConfigurationList(input[_LFC], context));
    if (input[_EBC] != null) {
      bn.c(se_EventBridgeConfiguration(input[_EBC], context).n(_EBC));
    }
    return bn;
  }, "se_NotificationConfiguration");
  var se_NotificationConfigurationFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NCF);
    if (input[_K] != null) {
      bn.c(se_S3KeyFilter(input[_K], context).n(_SKe));
    }
    return bn;
  }, "se_NotificationConfigurationFilter");
  var se_ObjectIdentifier = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OI);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    if (input[_VI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OVI, input[_VI]).n(_VI));
    }
    bn.cc(input, _ETa);
    if (input[_LMT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LMT, (0, import_smithy_client.dateToUtcString)(input[_LMT]).toString()).n(_LMT));
    }
    if (input[_Si] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Si, String(input[_Si])).n(_Si));
    }
    return bn;
  }, "se_ObjectIdentifier");
  var se_ObjectIdentifierList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ObjectIdentifier(entry, context);
      return n.n(_me);
    });
  }, "se_ObjectIdentifierList");
  var se_ObjectLockConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLC);
    bn.cc(input, _OLE);
    if (input[_Ru] != null) {
      bn.c(se_ObjectLockRule(input[_Ru], context).n(_Ru));
    }
    return bn;
  }, "se_ObjectLockConfiguration");
  var se_ObjectLockLegalHold = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLLH);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLLHS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ObjectLockLegalHold");
  var se_ObjectLockRetention = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLR);
    if (input[_Mo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
    }
    if (input[_RUD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client.serializeDateTime)(input[_RUD]).toString()).n(_RUD));
    }
    return bn;
  }, "se_ObjectLockRetention");
  var se_ObjectLockRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLRb);
    if (input[_DRe] != null) {
      bn.c(se_DefaultRetention(input[_DRe], context).n(_DRe));
    }
    return bn;
  }, "se_ObjectLockRule");
  var se_OutputLocation = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OL);
    if (input[_S_] != null) {
      bn.c(se_S3Location(input[_S_], context).n(_S_));
    }
    return bn;
  }, "se_OutputLocation");
  var se_OutputSerialization = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OS);
    if (input[_CSV] != null) {
      bn.c(se_CSVOutput(input[_CSV], context).n(_CSV));
    }
    if (input[_JSON] != null) {
      bn.c(se_JSONOutput(input[_JSON], context).n(_JSON));
    }
    return bn;
  }, "se_OutputSerialization");
  var se_Owner = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_O);
    bn.cc(input, _DN);
    bn.cc(input, _ID_);
    return bn;
  }, "se_Owner");
  var se_OwnershipControls = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OC);
    bn.l(input, "Rules", "Rule", () => se_OwnershipControlsRules(input[_Rul], context));
    return bn;
  }, "se_OwnershipControls");
  var se_OwnershipControlsRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OCR);
    bn.cc(input, _OO);
    return bn;
  }, "se_OwnershipControlsRule");
  var se_OwnershipControlsRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_OwnershipControlsRule(entry, context);
      return n.n(_me);
    });
  }, "se_OwnershipControlsRules");
  var se_ParquetInput = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PI);
    return bn;
  }, "se_ParquetInput");
  var se_PartitionedPrefix = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PP);
    bn.cc(input, _PDS);
    return bn;
  }, "se_PartitionedPrefix");
  var se_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PABC);
    if (input[_BPA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPA])).n(_BPA));
    }
    if (input[_IPA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_IPA])).n(_IPA));
    }
    if (input[_BPP] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPP])).n(_BPP));
    }
    if (input[_RPB] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_RPB])).n(_RPB));
    }
    return bn;
  }, "se_PublicAccessBlockConfiguration");
  var se_QueueConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_QC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_QA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_QA, input[_QA]).n(_Qu));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_QueueConfiguration");
  var se_QueueConfigurationList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_QueueConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_QueueConfigurationList");
  var se_Redirect = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Red);
    bn.cc(input, _HN);
    bn.cc(input, _HRC);
    bn.cc(input, _Pr);
    bn.cc(input, _RKPW);
    bn.cc(input, _RKW);
    return bn;
  }, "se_Redirect");
  var se_RedirectAllRequestsTo = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RART);
    bn.cc(input, _HN);
    bn.cc(input, _Pr);
    return bn;
  }, "se_RedirectAllRequestsTo");
  var se_ReplicaModifications = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RM);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RMS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ReplicaModifications");
  var se_ReplicationConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RCe);
    bn.cc(input, _Ro);
    bn.l(input, "Rules", "Rule", () => se_ReplicationRules(input[_Rul], context));
    return bn;
  }, "se_ReplicationConfiguration");
  var se_ReplicationRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRe);
    bn.cc(input, _ID_);
    if (input[_Pri] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Pri, String(input[_Pri])).n(_Pri));
    }
    bn.cc(input, _P);
    if (input[_F] != null) {
      bn.c(se_ReplicationRuleFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RRS, input[_S]).n(_S));
    }
    if (input[_SSC] != null) {
      bn.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
    }
    if (input[_EOR] != null) {
      bn.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
    }
    if (input[_Des] != null) {
      bn.c(se_Destination(input[_Des], context).n(_Des));
    }
    if (input[_DMR] != null) {
      bn.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
    }
    return bn;
  }, "se_ReplicationRule");
  var se_ReplicationRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_ReplicationRuleAndOperator");
  var se_ReplicationRuleFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRF);
    bn.cc(input, _P);
    if (input[_Ta] != null) {
      bn.c(se_Tag(input[_Ta], context).n(_Ta));
    }
    if (input[_A] != null) {
      bn.c(se_ReplicationRuleAndOperator(input[_A], context).n(_A));
    }
    return bn;
  }, "se_ReplicationRuleFilter");
  var se_ReplicationRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ReplicationRule(entry, context);
      return n.n(_me);
    });
  }, "se_ReplicationRules");
  var se_ReplicationTime = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RTe);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RTS, input[_S]).n(_S));
    }
    if (input[_Tim] != null) {
      bn.c(se_ReplicationTimeValue(input[_Tim], context).n(_Tim));
    }
    return bn;
  }, "se_ReplicationTime");
  var se_ReplicationTimeValue = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RTV);
    if (input[_Mi] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Mi, String(input[_Mi])).n(_Mi));
    }
    return bn;
  }, "se_ReplicationTimeValue");
  var se_RequestPaymentConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RPC);
    bn.cc(input, _Pa);
    return bn;
  }, "se_RequestPaymentConfiguration");
  var se_RequestProgress = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RPe);
    if (input[_Ena] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ERP, String(input[_Ena])).n(_Ena));
    }
    return bn;
  }, "se_RequestProgress");
  var se_RestoreRequest = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRes);
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_GJP] != null) {
      bn.c(se_GlacierJobParameters(input[_GJP], context).n(_GJP));
    }
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RRT, input[_Ty]).n(_Ty));
    }
    bn.cc(input, _Ti);
    bn.cc(input, _Desc);
    if (input[_SP] != null) {
      bn.c(se_SelectParameters(input[_SP], context).n(_SP));
    }
    if (input[_OL] != null) {
      bn.c(se_OutputLocation(input[_OL], context).n(_OL));
    }
    return bn;
  }, "se_RestoreRequest");
  var se_RoutingRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRou);
    if (input[_Con] != null) {
      bn.c(se_Condition(input[_Con], context).n(_Con));
    }
    if (input[_Red] != null) {
      bn.c(se_Redirect(input[_Red], context).n(_Red));
    }
    return bn;
  }, "se_RoutingRule");
  var se_RoutingRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_RoutingRule(entry, context);
      return n.n(_RRou);
    });
  }, "se_RoutingRules");
  var se_S3KeyFilter = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SKF);
    bn.l(input, "FilterRules", "FilterRule", () => se_FilterRuleList(input[_FRi], context));
    return bn;
  }, "se_S3KeyFilter");
  var se_S3Location = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SL);
    bn.cc(input, _BN);
    if (input[_P] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LP, input[_P]).n(_P));
    }
    if (input[_En] != null) {
      bn.c(se_Encryption(input[_En], context).n(_En));
    }
    if (input[_CACL] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OCACL, input[_CACL]).n(_CACL));
    }
    bn.lc(input, "AccessControlList", "AccessControlList", () => se_Grants(input[_ACLc], context));
    if (input[_T] != null) {
      bn.c(se_Tagging(input[_T], context).n(_T));
    }
    bn.lc(input, "UserMetadata", "UserMetadata", () => se_UserMetadata(input[_UM], context));
    bn.cc(input, _SC);
    return bn;
  }, "se_S3Location");
  var se_S3TablesDestination = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_STD);
    if (input[_TBA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_STBA, input[_TBA]).n(_TBA));
    }
    if (input[_TN] != null) {
      bn.c(import_xml_builder.XmlNode.of(_STN, input[_TN]).n(_TN));
    }
    return bn;
  }, "se_S3TablesDestination");
  var se_ScanRange = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SR);
    if (input[_St] != null) {
      bn.c(import_xml_builder.XmlNode.of(_St, String(input[_St])).n(_St));
    }
    if (input[_End] != null) {
      bn.c(import_xml_builder.XmlNode.of(_End, String(input[_End])).n(_End));
    }
    return bn;
  }, "se_ScanRange");
  var se_SelectParameters = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SP);
    if (input[_IS] != null) {
      bn.c(se_InputSerialization(input[_IS], context).n(_IS));
    }
    bn.cc(input, _ETx);
    bn.cc(input, _Ex);
    if (input[_OS] != null) {
      bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
    }
    return bn;
  }, "se_SelectParameters");
  var se_ServerSideEncryptionByDefault = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSEBD);
    if (input[_SSEA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSE, input[_SSEA]).n(_SSEA));
    }
    if (input[_KMSMKID] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSMKID]).n(_KMSMKID));
    }
    return bn;
  }, "se_ServerSideEncryptionByDefault");
  var se_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSEC);
    bn.l(input, "Rules", "Rule", () => se_ServerSideEncryptionRules(input[_Rul], context));
    return bn;
  }, "se_ServerSideEncryptionConfiguration");
  var se_ServerSideEncryptionRule = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSER);
    if (input[_ASSEBD] != null) {
      bn.c(se_ServerSideEncryptionByDefault(input[_ASSEBD], context).n(_ASSEBD));
    }
    if (input[_BKE] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BKE, String(input[_BKE])).n(_BKE));
    }
    return bn;
  }, "se_ServerSideEncryptionRule");
  var se_ServerSideEncryptionRules = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ServerSideEncryptionRule(entry, context);
      return n.n(_me);
    });
  }, "se_ServerSideEncryptionRules");
  var se_SimplePrefix = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SPi);
    return bn;
  }, "se_SimplePrefix");
  var se_SourceSelectionCriteria = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSC);
    if (input[_SKEO] != null) {
      bn.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
    }
    if (input[_RM] != null) {
      bn.c(se_ReplicaModifications(input[_RM], context).n(_RM));
    }
    return bn;
  }, "se_SourceSelectionCriteria");
  var se_SSEKMS = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SK);
    if (input[_KI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KI]).n(_KI));
    }
    return bn;
  }, "se_SSEKMS");
  var se_SseKmsEncryptedObjects = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SKEO);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SKEOS, input[_S]).n(_S));
    }
    return bn;
  }, "se_SseKmsEncryptedObjects");
  var se_SSES3 = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SS);
    return bn;
  }, "se_SSES3");
  var se_StorageClassAnalysis = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SCA);
    if (input[_DE] != null) {
      bn.c(se_StorageClassAnalysisDataExport(input[_DE], context).n(_DE));
    }
    return bn;
  }, "se_StorageClassAnalysis");
  var se_StorageClassAnalysisDataExport = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SCADE);
    if (input[_OSV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SCASV, input[_OSV]).n(_OSV));
    }
    if (input[_Des] != null) {
      bn.c(se_AnalyticsExportDestination(input[_Des], context).n(_Des));
    }
    return bn;
  }, "se_StorageClassAnalysisDataExport");
  var se_Tag = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Ta);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    bn.cc(input, _Va);
    return bn;
  }, "se_Tag");
  var se_Tagging = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_T);
    bn.lc(input, "TagSet", "TagSet", () => se_TagSet(input[_TS], context));
    return bn;
  }, "se_Tagging");
  var se_TagSet = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Tag(entry, context);
      return n.n(_Ta);
    });
  }, "se_TagSet");
  var se_TargetGrant = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TGa);
    if (input[_Gra] != null) {
      const n = se_Grantee(input[_Gra], context).n(_Gra);
      n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bn.c(n);
    }
    if (input[_Pe] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BLP, input[_Pe]).n(_Pe));
    }
    return bn;
  }, "se_TargetGrant");
  var se_TargetGrants = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_TargetGrant(entry, context);
      return n.n(_G);
    });
  }, "se_TargetGrants");
  var se_TargetObjectKeyFormat = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TOKF);
    if (input[_SPi] != null) {
      bn.c(se_SimplePrefix(input[_SPi], context).n(_SPi));
    }
    if (input[_PP] != null) {
      bn.c(se_PartitionedPrefix(input[_PP], context).n(_PP));
    }
    return bn;
  }, "se_TargetObjectKeyFormat");
  var se_Tiering = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Tier);
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITD, String(input[_Da])).n(_Da));
    }
    if (input[_AT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITAT, input[_AT]).n(_AT));
    }
    return bn;
  }, "se_Tiering");
  var se_TieringList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Tiering(entry, context);
      return n.n(_me);
    });
  }, "se_TieringList");
  var se_TopicConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TCo);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_TA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TA, input[_TA]).n(_Top));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_TopicConfiguration");
  var se_TopicConfigurationList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_TopicConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_TopicConfigurationList");
  var se_Transition = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Tra);
    if (input[_Dat] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client.serializeDateTime)(input[_Dat]).toString()).n(_Dat));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_SC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
    }
    return bn;
  }, "se_Transition");
  var se_TransitionList = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Transition(entry, context);
      return n.n(_me);
    });
  }, "se_TransitionList");
  var se_UserMetadata = /* @__PURE__ */ __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_MetadataEntry(entry, context);
      return n.n(_ME);
    });
  }, "se_UserMetadata");
  var se_VersioningConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_VCe);
    if (input[_MFAD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MFAD, input[_MFAD]).n(_MDf));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BVS, input[_S]).n(_S));
    }
    return bn;
  }, "se_VersioningConfiguration");
  var se_WebsiteConfiguration = /* @__PURE__ */ __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_WC);
    if (input[_ED] != null) {
      bn.c(se_ErrorDocument(input[_ED], context).n(_ED));
    }
    if (input[_ID] != null) {
      bn.c(se_IndexDocument(input[_ID], context).n(_ID));
    }
    if (input[_RART] != null) {
      bn.c(se_RedirectAllRequestsTo(input[_RART], context).n(_RART));
    }
    bn.lc(input, "RoutingRules", "RoutingRules", () => se_RoutingRules(input[_RRo], context));
    return bn;
  }, "se_WebsiteConfiguration");
  var de_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DAI] != null) {
      contents[_DAI] = (0, import_smithy_client.strictParseInt32)(output[_DAI]);
    }
    return contents;
  }, "de_AbortIncompleteMultipartUpload");
  var de_AccessControlTranslation = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_O] != null) {
      contents[_O] = (0, import_smithy_client.expectString)(output[_O]);
    }
    return contents;
  }, "de_AccessControlTranslation");
  var de_AllowedHeaders = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedHeaders");
  var de_AllowedMethods = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedMethods");
  var de_AllowedOrigins = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedOrigins");
  var de_AnalyticsAndOperator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_AnalyticsAndOperator");
  var de_AnalyticsConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output.Filter === "") {} else if (output[_F] != null) {
      contents[_F] = de_AnalyticsFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    if (output[_SCA] != null) {
      contents[_SCA] = de_StorageClassAnalysis(output[_SCA], context);
    }
    return contents;
  }, "de_AnalyticsConfiguration");
  var de_AnalyticsConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_AnalyticsConfiguration(entry, context);
    });
  }, "de_AnalyticsConfigurationList");
  var de_AnalyticsExportDestination = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SBD] != null) {
      contents[_SBD] = de_AnalyticsS3BucketDestination(output[_SBD], context);
    }
    return contents;
  }, "de_AnalyticsExportDestination");
  var de_AnalyticsFilter = /* @__PURE__ */ __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_A] != null) {
      return {
        And: de_AnalyticsAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_AnalyticsFilter");
  var de_AnalyticsS3BucketDestination = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Fo] != null) {
      contents[_Fo] = (0, import_smithy_client.expectString)(output[_Fo]);
    }
    if (output[_BAI] != null) {
      contents[_BAI] = (0, import_smithy_client.expectString)(output[_BAI]);
    }
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_AnalyticsS3BucketDestination");
  var de_Bucket = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
    }
    if (output[_CDr] != null) {
      contents[_CDr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CDr]));
    }
    if (output[_BR] != null) {
      contents[_BR] = (0, import_smithy_client.expectString)(output[_BR]);
    }
    return contents;
  }, "de_Bucket");
  var de_Buckets = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Bucket(entry, context);
    });
  }, "de_Buckets");
  var de_Checksum = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(output[_CCRCNVME]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    if (output[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
    }
    return contents;
  }, "de_Checksum");
  var de_ChecksumAlgorithmList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ChecksumAlgorithmList");
  var de_CommonPrefix = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_CommonPrefix");
  var de_CommonPrefixList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_CommonPrefix(entry, context);
    });
  }, "de_CommonPrefixList");
  var de_Condition = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_HECRE] != null) {
      contents[_HECRE] = (0, import_smithy_client.expectString)(output[_HECRE]);
    }
    if (output[_KPE] != null) {
      contents[_KPE] = (0, import_smithy_client.expectString)(output[_KPE]);
    }
    return contents;
  }, "de_Condition");
  var de_ContinuationEvent = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_ContinuationEvent");
  var de_CopyObjectResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(output[_CCRCNVME]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_CopyObjectResult");
  var de_CopyPartResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(output[_CCRCNVME]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_CopyPartResult");
  var de_CORSRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output.AllowedHeader === "") {
      contents[_AHl] = [];
    } else if (output[_AH] != null) {
      contents[_AHl] = de_AllowedHeaders((0, import_smithy_client.getArrayIfSingleItem)(output[_AH]), context);
    }
    if (output.AllowedMethod === "") {
      contents[_AMl] = [];
    } else if (output[_AM] != null) {
      contents[_AMl] = de_AllowedMethods((0, import_smithy_client.getArrayIfSingleItem)(output[_AM]), context);
    }
    if (output.AllowedOrigin === "") {
      contents[_AOl] = [];
    } else if (output[_AO] != null) {
      contents[_AOl] = de_AllowedOrigins((0, import_smithy_client.getArrayIfSingleItem)(output[_AO]), context);
    }
    if (output.ExposeHeader === "") {
      contents[_EH] = [];
    } else if (output[_EHx] != null) {
      contents[_EH] = de_ExposeHeaders((0, import_smithy_client.getArrayIfSingleItem)(output[_EHx]), context);
    }
    if (output[_MAS] != null) {
      contents[_MAS] = (0, import_smithy_client.strictParseInt32)(output[_MAS]);
    }
    return contents;
  }, "de_CORSRule");
  var de_CORSRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_CORSRule(entry, context);
    });
  }, "de_CORSRules");
  var de_DefaultRetention = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Mo] != null) {
      contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_Y] != null) {
      contents[_Y] = (0, import_smithy_client.strictParseInt32)(output[_Y]);
    }
    return contents;
  }, "de_DefaultRetention");
  var de_DeletedObject = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_DM] != null) {
      contents[_DM] = (0, import_smithy_client.parseBoolean)(output[_DM]);
    }
    if (output[_DMVI] != null) {
      contents[_DMVI] = (0, import_smithy_client.expectString)(output[_DMVI]);
    }
    return contents;
  }, "de_DeletedObject");
  var de_DeletedObjects = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_DeletedObject(entry, context);
    });
  }, "de_DeletedObjects");
  var de_DeleteMarkerEntry = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_IL] != null) {
      contents[_IL] = (0, import_smithy_client.parseBoolean)(output[_IL]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    return contents;
  }, "de_DeleteMarkerEntry");
  var de_DeleteMarkerReplication = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_DeleteMarkerReplication");
  var de_DeleteMarkers = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_DeleteMarkerEntry(entry, context);
    });
  }, "de_DeleteMarkers");
  var de_Destination = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_Ac] != null) {
      contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_ACT] != null) {
      contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
    }
    if (output[_ECn] != null) {
      contents[_ECn] = de_EncryptionConfiguration(output[_ECn], context);
    }
    if (output[_RTe] != null) {
      contents[_RTe] = de_ReplicationTime(output[_RTe], context);
    }
    if (output[_Me] != null) {
      contents[_Me] = de_Metrics(output[_Me], context);
    }
    return contents;
  }, "de_Destination");
  var de_EncryptionConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_RKKID] != null) {
      contents[_RKKID] = (0, import_smithy_client.expectString)(output[_RKKID]);
    }
    return contents;
  }, "de_EncryptionConfiguration");
  var de_EndEvent = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_EndEvent");
  var de__Error = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_Cod] != null) {
      contents[_Cod] = (0, import_smithy_client.expectString)(output[_Cod]);
    }
    if (output[_Mes] != null) {
      contents[_Mes] = (0, import_smithy_client.expectString)(output[_Mes]);
    }
    return contents;
  }, "de__Error");
  var de_ErrorDetails = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_EC] != null) {
      contents[_EC] = (0, import_smithy_client.expectString)(output[_EC]);
    }
    if (output[_EM] != null) {
      contents[_EM] = (0, import_smithy_client.expectString)(output[_EM]);
    }
    return contents;
  }, "de_ErrorDetails");
  var de_ErrorDocument = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    return contents;
  }, "de_ErrorDocument");
  var de_Errors = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de__Error(entry, context);
    });
  }, "de_Errors");
  var de_EventBridgeConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_EventBridgeConfiguration");
  var de_EventList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_EventList");
  var de_ExistingObjectReplication = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ExistingObjectReplication");
  var de_ExposeHeaders = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ExposeHeaders");
  var de_FilterRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
    }
    if (output[_Va] != null) {
      contents[_Va] = (0, import_smithy_client.expectString)(output[_Va]);
    }
    return contents;
  }, "de_FilterRule");
  var de_FilterRuleList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_FilterRule(entry, context);
    });
  }, "de_FilterRuleList");
  var de_GetBucketMetadataTableConfigurationResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_MTCR] != null) {
      contents[_MTCR] = de_MetadataTableConfigurationResult(output[_MTCR], context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_Er] != null) {
      contents[_Er] = de_ErrorDetails(output[_Er], context);
    }
    return contents;
  }, "de_GetBucketMetadataTableConfigurationResult");
  var de_GetObjectAttributesParts = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PC] != null) {
      contents[_TPC] = (0, import_smithy_client.strictParseInt32)(output[_PC]);
    }
    if (output[_PNM] != null) {
      contents[_PNM] = (0, import_smithy_client.expectString)(output[_PNM]);
    }
    if (output[_NPNM] != null) {
      contents[_NPNM] = (0, import_smithy_client.expectString)(output[_NPNM]);
    }
    if (output[_MP] != null) {
      contents[_MP] = (0, import_smithy_client.strictParseInt32)(output[_MP]);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output.Part === "") {
      contents[_Part] = [];
    } else if (output[_Par] != null) {
      contents[_Part] = de_PartsList((0, import_smithy_client.getArrayIfSingleItem)(output[_Par]), context);
    }
    return contents;
  }, "de_GetObjectAttributesParts");
  var de_Grant = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Gra] != null) {
      contents[_Gra] = de_Grantee(output[_Gra], context);
    }
    if (output[_Pe] != null) {
      contents[_Pe] = (0, import_smithy_client.expectString)(output[_Pe]);
    }
    return contents;
  }, "de_Grant");
  var de_Grantee = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    if (output[_EA] != null) {
      contents[_EA] = (0, import_smithy_client.expectString)(output[_EA]);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_URI] != null) {
      contents[_URI] = (0, import_smithy_client.expectString)(output[_URI]);
    }
    if (output[_x] != null) {
      contents[_Ty] = (0, import_smithy_client.expectString)(output[_x]);
    }
    return contents;
  }, "de_Grantee");
  var de_Grants = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Grant(entry, context);
    });
  }, "de_Grants");
  var de_IndexDocument = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Su] != null) {
      contents[_Su] = (0, import_smithy_client.expectString)(output[_Su]);
    }
    return contents;
  }, "de_IndexDocument");
  var de_Initiator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    return contents;
  }, "de_Initiator");
  var de_IntelligentTieringAndOperator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_IntelligentTieringAndOperator");
  var de_IntelligentTieringConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_F] != null) {
      contents[_F] = de_IntelligentTieringFilter(output[_F], context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output.Tiering === "") {
      contents[_Tie] = [];
    } else if (output[_Tier] != null) {
      contents[_Tie] = de_TieringList((0, import_smithy_client.getArrayIfSingleItem)(output[_Tier]), context);
    }
    return contents;
  }, "de_IntelligentTieringConfiguration");
  var de_IntelligentTieringConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_IntelligentTieringConfiguration(entry, context);
    });
  }, "de_IntelligentTieringConfigurationList");
  var de_IntelligentTieringFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_Ta] != null) {
      contents[_Ta] = de_Tag(output[_Ta], context);
    }
    if (output[_A] != null) {
      contents[_A] = de_IntelligentTieringAndOperator(output[_A], context);
    }
    return contents;
  }, "de_IntelligentTieringFilter");
  var de_InventoryConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Des] != null) {
      contents[_Des] = de_InventoryDestination(output[_Des], context);
    }
    if (output[_IE] != null) {
      contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
    }
    if (output[_F] != null) {
      contents[_F] = de_InventoryFilter(output[_F], context);
    }
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_IOV] != null) {
      contents[_IOV] = (0, import_smithy_client.expectString)(output[_IOV]);
    }
    if (output.OptionalFields === "") {
      contents[_OF] = [];
    } else if (output[_OF] != null && output[_OF][_Fi] != null) {
      contents[_OF] = de_InventoryOptionalFields((0, import_smithy_client.getArrayIfSingleItem)(output[_OF][_Fi]), context);
    }
    if (output[_Sc] != null) {
      contents[_Sc] = de_InventorySchedule(output[_Sc], context);
    }
    return contents;
  }, "de_InventoryConfiguration");
  var de_InventoryConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_InventoryConfiguration(entry, context);
    });
  }, "de_InventoryConfigurationList");
  var de_InventoryDestination = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SBD] != null) {
      contents[_SBD] = de_InventoryS3BucketDestination(output[_SBD], context);
    }
    return contents;
  }, "de_InventoryDestination");
  var de_InventoryEncryption = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SS] != null) {
      contents[_SSES] = de_SSES3(output[_SS], context);
    }
    if (output[_SK] != null) {
      contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
    }
    return contents;
  }, "de_InventoryEncryption");
  var de_InventoryFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_InventoryFilter");
  var de_InventoryOptionalFields = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_InventoryOptionalFields");
  var de_InventoryS3BucketDestination = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_AIc] != null) {
      contents[_AIc] = (0, import_smithy_client.expectString)(output[_AIc]);
    }
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_Fo] != null) {
      contents[_Fo] = (0, import_smithy_client.expectString)(output[_Fo]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_En] != null) {
      contents[_En] = de_InventoryEncryption(output[_En], context);
    }
    return contents;
  }, "de_InventoryS3BucketDestination");
  var de_InventorySchedule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Fr] != null) {
      contents[_Fr] = (0, import_smithy_client.expectString)(output[_Fr]);
    }
    return contents;
  }, "de_InventorySchedule");
  var de_LambdaFunctionConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_CF] != null) {
      contents[_LFA] = (0, import_smithy_client.expectString)(output[_CF]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_LambdaFunctionConfiguration");
  var de_LambdaFunctionConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_LambdaFunctionConfiguration(entry, context);
    });
  }, "de_LambdaFunctionConfigurationList");
  var de_LifecycleExpiration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Dat] != null) {
      contents[_Dat] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Dat]));
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_EODM] != null) {
      contents[_EODM] = (0, import_smithy_client.parseBoolean)(output[_EODM]);
    }
    return contents;
  }, "de_LifecycleExpiration");
  var de_LifecycleRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Exp] != null) {
      contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_F] != null) {
      contents[_F] = de_LifecycleRuleFilter(output[_F], context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output.Transition === "") {
      contents[_Tr] = [];
    } else if (output[_Tra] != null) {
      contents[_Tr] = de_TransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_Tra]), context);
    }
    if (output.NoncurrentVersionTransition === "") {
      contents[_NVT] = [];
    } else if (output[_NVTo] != null) {
      contents[_NVT] = de_NoncurrentVersionTransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_NVTo]), context);
    }
    if (output[_NVE] != null) {
      contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
    }
    if (output[_AIMU] != null) {
      contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
    }
    return contents;
  }, "de_LifecycleRule");
  var de_LifecycleRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    if (output[_OSGT] != null) {
      contents[_OSGT] = (0, import_smithy_client.strictParseLong)(output[_OSGT]);
    }
    if (output[_OSLT] != null) {
      contents[_OSLT] = (0, import_smithy_client.strictParseLong)(output[_OSLT]);
    }
    return contents;
  }, "de_LifecycleRuleAndOperator");
  var de_LifecycleRuleFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_Ta] != null) {
      contents[_Ta] = de_Tag(output[_Ta], context);
    }
    if (output[_OSGT] != null) {
      contents[_OSGT] = (0, import_smithy_client.strictParseLong)(output[_OSGT]);
    }
    if (output[_OSLT] != null) {
      contents[_OSLT] = (0, import_smithy_client.strictParseLong)(output[_OSLT]);
    }
    if (output[_A] != null) {
      contents[_A] = de_LifecycleRuleAndOperator(output[_A], context);
    }
    return contents;
  }, "de_LifecycleRuleFilter");
  var de_LifecycleRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_LifecycleRule(entry, context);
    });
  }, "de_LifecycleRules");
  var de_LoggingEnabled = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_TB] != null) {
      contents[_TB] = (0, import_smithy_client.expectString)(output[_TB]);
    }
    if (output.TargetGrants === "") {
      contents[_TG] = [];
    } else if (output[_TG] != null && output[_TG][_G] != null) {
      contents[_TG] = de_TargetGrants((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_G]), context);
    }
    if (output[_TP] != null) {
      contents[_TP] = (0, import_smithy_client.expectString)(output[_TP]);
    }
    if (output[_TOKF] != null) {
      contents[_TOKF] = de_TargetObjectKeyFormat(output[_TOKF], context);
    }
    return contents;
  }, "de_LoggingEnabled");
  var de_MetadataTableConfigurationResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_STDR] != null) {
      contents[_STDR] = de_S3TablesDestinationResult(output[_STDR], context);
    }
    return contents;
  }, "de_MetadataTableConfigurationResult");
  var de_Metrics = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_ETv] != null) {
      contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
    }
    return contents;
  }, "de_Metrics");
  var de_MetricsAndOperator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    if (output[_APAc] != null) {
      contents[_APAc] = (0, import_smithy_client.expectString)(output[_APAc]);
    }
    return contents;
  }, "de_MetricsAndOperator");
  var de_MetricsConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output.Filter === "") {} else if (output[_F] != null) {
      contents[_F] = de_MetricsFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    return contents;
  }, "de_MetricsConfiguration");
  var de_MetricsConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_MetricsConfiguration(entry, context);
    });
  }, "de_MetricsConfigurationList");
  var de_MetricsFilter = /* @__PURE__ */ __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_APAc] != null) {
      return {
        AccessPointArn: (0, import_smithy_client.expectString)(output[_APAc])
      };
    }
    if (output[_A] != null) {
      return {
        And: de_MetricsAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_MetricsFilter");
  var de_MultipartUpload = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_Ini] != null) {
      contents[_Ini] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Ini]));
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_In] != null) {
      contents[_In] = de_Initiator(output[_In], context);
    }
    if (output[_CA] != null) {
      contents[_CA] = (0, import_smithy_client.expectString)(output[_CA]);
    }
    if (output[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
    }
    return contents;
  }, "de_MultipartUpload");
  var de_MultipartUploadList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_MultipartUpload(entry, context);
    });
  }, "de_MultipartUploadList");
  var de_NoncurrentVersionExpiration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ND] != null) {
      contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
    }
    if (output[_NNV] != null) {
      contents[_NNV] = (0, import_smithy_client.strictParseInt32)(output[_NNV]);
    }
    return contents;
  }, "de_NoncurrentVersionExpiration");
  var de_NoncurrentVersionTransition = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ND] != null) {
      contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_NNV] != null) {
      contents[_NNV] = (0, import_smithy_client.strictParseInt32)(output[_NNV]);
    }
    return contents;
  }, "de_NoncurrentVersionTransition");
  var de_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_NoncurrentVersionTransition(entry, context);
    });
  }, "de_NoncurrentVersionTransitionList");
  var de_NotificationConfigurationFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SKe] != null) {
      contents[_K] = de_S3KeyFilter(output[_SKe], context);
    }
    return contents;
  }, "de_NotificationConfigurationFilter");
  var de__Object = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents[_CA] = [];
    } else if (output[_CA] != null) {
      contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client.getArrayIfSingleItem)(output[_CA]), context);
    }
    if (output[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_RSe] != null) {
      contents[_RSe] = de_RestoreStatus(output[_RSe], context);
    }
    return contents;
  }, "de__Object");
  var de_ObjectList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de__Object(entry, context);
    });
  }, "de_ObjectList");
  var de_ObjectLockConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OLE] != null) {
      contents[_OLE] = (0, import_smithy_client.expectString)(output[_OLE]);
    }
    if (output[_Ru] != null) {
      contents[_Ru] = de_ObjectLockRule(output[_Ru], context);
    }
    return contents;
  }, "de_ObjectLockConfiguration");
  var de_ObjectLockLegalHold = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ObjectLockLegalHold");
  var de_ObjectLockRetention = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Mo] != null) {
      contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
    }
    if (output[_RUD] != null) {
      contents[_RUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RUD]));
    }
    return contents;
  }, "de_ObjectLockRetention");
  var de_ObjectLockRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DRe] != null) {
      contents[_DRe] = de_DefaultRetention(output[_DRe], context);
    }
    return contents;
  }, "de_ObjectLockRule");
  var de_ObjectPart = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.strictParseInt32)(output[_PN]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(output[_CCRCNVME]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_ObjectPart");
  var de_ObjectVersion = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents[_CA] = [];
    } else if (output[_CA] != null) {
      contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client.getArrayIfSingleItem)(output[_CA]), context);
    }
    if (output[_CT] != null) {
      contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_IL] != null) {
      contents[_IL] = (0, import_smithy_client.parseBoolean)(output[_IL]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_RSe] != null) {
      contents[_RSe] = de_RestoreStatus(output[_RSe], context);
    }
    return contents;
  }, "de_ObjectVersion");
  var de_ObjectVersionList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ObjectVersion(entry, context);
    });
  }, "de_ObjectVersionList");
  var de_Owner = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    return contents;
  }, "de_Owner");
  var de_OwnershipControls = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_OwnershipControlsRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_OwnershipControls");
  var de_OwnershipControlsRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OO] != null) {
      contents[_OO] = (0, import_smithy_client.expectString)(output[_OO]);
    }
    return contents;
  }, "de_OwnershipControlsRule");
  var de_OwnershipControlsRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_OwnershipControlsRule(entry, context);
    });
  }, "de_OwnershipControlsRules");
  var de_Part = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.strictParseInt32)(output[_PN]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CCRCNVME] != null) {
      contents[_CCRCNVME] = (0, import_smithy_client.expectString)(output[_CCRCNVME]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_Part");
  var de_PartitionedPrefix = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_PDS] != null) {
      contents[_PDS] = (0, import_smithy_client.expectString)(output[_PDS]);
    }
    return contents;
  }, "de_PartitionedPrefix");
  var de_Parts = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Part(entry, context);
    });
  }, "de_Parts");
  var de_PartsList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ObjectPart(entry, context);
    });
  }, "de_PartsList");
  var de_PolicyStatus = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_IP] != null) {
      contents[_IP] = (0, import_smithy_client.parseBoolean)(output[_IP]);
    }
    return contents;
  }, "de_PolicyStatus");
  var de_Progress = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_BS] != null) {
      contents[_BS] = (0, import_smithy_client.strictParseLong)(output[_BS]);
    }
    if (output[_BP] != null) {
      contents[_BP] = (0, import_smithy_client.strictParseLong)(output[_BP]);
    }
    if (output[_BRy] != null) {
      contents[_BRy] = (0, import_smithy_client.strictParseLong)(output[_BRy]);
    }
    return contents;
  }, "de_Progress");
  var de_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_BPA] != null) {
      contents[_BPA] = (0, import_smithy_client.parseBoolean)(output[_BPA]);
    }
    if (output[_IPA] != null) {
      contents[_IPA] = (0, import_smithy_client.parseBoolean)(output[_IPA]);
    }
    if (output[_BPP] != null) {
      contents[_BPP] = (0, import_smithy_client.parseBoolean)(output[_BPP]);
    }
    if (output[_RPB] != null) {
      contents[_RPB] = (0, import_smithy_client.parseBoolean)(output[_RPB]);
    }
    return contents;
  }, "de_PublicAccessBlockConfiguration");
  var de_QueueConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_Qu] != null) {
      contents[_QA] = (0, import_smithy_client.expectString)(output[_Qu]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_QueueConfiguration");
  var de_QueueConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_QueueConfiguration(entry, context);
    });
  }, "de_QueueConfigurationList");
  var de_Redirect = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_HN] != null) {
      contents[_HN] = (0, import_smithy_client.expectString)(output[_HN]);
    }
    if (output[_HRC] != null) {
      contents[_HRC] = (0, import_smithy_client.expectString)(output[_HRC]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
    }
    if (output[_RKPW] != null) {
      contents[_RKPW] = (0, import_smithy_client.expectString)(output[_RKPW]);
    }
    if (output[_RKW] != null) {
      contents[_RKW] = (0, import_smithy_client.expectString)(output[_RKW]);
    }
    return contents;
  }, "de_Redirect");
  var de_RedirectAllRequestsTo = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_HN] != null) {
      contents[_HN] = (0, import_smithy_client.expectString)(output[_HN]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
    }
    return contents;
  }, "de_RedirectAllRequestsTo");
  var de_ReplicaModifications = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ReplicaModifications");
  var de_ReplicationConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = (0, import_smithy_client.expectString)(output[_Ro]);
    }
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_ReplicationRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_ReplicationConfiguration");
  var de_ReplicationRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_Pri] != null) {
      contents[_Pri] = (0, import_smithy_client.strictParseInt32)(output[_Pri]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_F] != null) {
      contents[_F] = de_ReplicationRuleFilter(output[_F], context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_SSC] != null) {
      contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
    }
    if (output[_EOR] != null) {
      contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
    }
    if (output[_Des] != null) {
      contents[_Des] = de_Destination(output[_Des], context);
    }
    if (output[_DMR] != null) {
      contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
    }
    return contents;
  }, "de_ReplicationRule");
  var de_ReplicationRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_ReplicationRuleAndOperator");
  var de_ReplicationRuleFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_Ta] != null) {
      contents[_Ta] = de_Tag(output[_Ta], context);
    }
    if (output[_A] != null) {
      contents[_A] = de_ReplicationRuleAndOperator(output[_A], context);
    }
    return contents;
  }, "de_ReplicationRuleFilter");
  var de_ReplicationRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ReplicationRule(entry, context);
    });
  }, "de_ReplicationRules");
  var de_ReplicationTime = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_Tim] != null) {
      contents[_Tim] = de_ReplicationTimeValue(output[_Tim], context);
    }
    return contents;
  }, "de_ReplicationTime");
  var de_ReplicationTimeValue = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Mi] != null) {
      contents[_Mi] = (0, import_smithy_client.strictParseInt32)(output[_Mi]);
    }
    return contents;
  }, "de_ReplicationTimeValue");
  var de_RestoreStatus = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_IRIP] != null) {
      contents[_IRIP] = (0, import_smithy_client.parseBoolean)(output[_IRIP]);
    }
    if (output[_RED] != null) {
      contents[_RED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RED]));
    }
    return contents;
  }, "de_RestoreStatus");
  var de_RoutingRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Con] != null) {
      contents[_Con] = de_Condition(output[_Con], context);
    }
    if (output[_Red] != null) {
      contents[_Red] = de_Redirect(output[_Red], context);
    }
    return contents;
  }, "de_RoutingRule");
  var de_RoutingRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_RoutingRule(entry, context);
    });
  }, "de_RoutingRules");
  var de_S3KeyFilter = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.FilterRule === "") {
      contents[_FRi] = [];
    } else if (output[_FR] != null) {
      contents[_FRi] = de_FilterRuleList((0, import_smithy_client.getArrayIfSingleItem)(output[_FR]), context);
    }
    return contents;
  }, "de_S3KeyFilter");
  var de_S3TablesDestinationResult = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_TBA] != null) {
      contents[_TBA] = (0, import_smithy_client.expectString)(output[_TBA]);
    }
    if (output[_TN] != null) {
      contents[_TN] = (0, import_smithy_client.expectString)(output[_TN]);
    }
    if (output[_TAa] != null) {
      contents[_TAa] = (0, import_smithy_client.expectString)(output[_TAa]);
    }
    if (output[_TNa] != null) {
      contents[_TNa] = (0, import_smithy_client.expectString)(output[_TNa]);
    }
    return contents;
  }, "de_S3TablesDestinationResult");
  var de_ServerSideEncryptionByDefault = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SSEA] != null) {
      contents[_SSEA] = (0, import_smithy_client.expectString)(output[_SSEA]);
    }
    if (output[_KMSMKID] != null) {
      contents[_KMSMKID] = (0, import_smithy_client.expectString)(output[_KMSMKID]);
    }
    return contents;
  }, "de_ServerSideEncryptionByDefault");
  var de_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_ServerSideEncryptionRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_ServerSideEncryptionConfiguration");
  var de_ServerSideEncryptionRule = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ASSEBD] != null) {
      contents[_ASSEBD] = de_ServerSideEncryptionByDefault(output[_ASSEBD], context);
    }
    if (output[_BKE] != null) {
      contents[_BKE] = (0, import_smithy_client.parseBoolean)(output[_BKE]);
    }
    return contents;
  }, "de_ServerSideEncryptionRule");
  var de_ServerSideEncryptionRules = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ServerSideEncryptionRule(entry, context);
    });
  }, "de_ServerSideEncryptionRules");
  var de_SessionCredentials = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);
    }
    if (output[_ST] != null) {
      contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
    }
    if (output[_Exp] != null) {
      contents[_Exp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Exp]));
    }
    return contents;
  }, "de_SessionCredentials");
  var de_SimplePrefix = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_SimplePrefix");
  var de_SourceSelectionCriteria = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SKEO] != null) {
      contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
    }
    if (output[_RM] != null) {
      contents[_RM] = de_ReplicaModifications(output[_RM], context);
    }
    return contents;
  }, "de_SourceSelectionCriteria");
  var de_SSEKMS = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_KI] != null) {
      contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
    }
    return contents;
  }, "de_SSEKMS");
  var de_SseKmsEncryptedObjects = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_SseKmsEncryptedObjects");
  var de_SSES3 = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_SSES3");
  var de_Stats = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_BS] != null) {
      contents[_BS] = (0, import_smithy_client.strictParseLong)(output[_BS]);
    }
    if (output[_BP] != null) {
      contents[_BP] = (0, import_smithy_client.strictParseLong)(output[_BP]);
    }
    if (output[_BRy] != null) {
      contents[_BRy] = (0, import_smithy_client.strictParseLong)(output[_BRy]);
    }
    return contents;
  }, "de_Stats");
  var de_StorageClassAnalysis = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DE] != null) {
      contents[_DE] = de_StorageClassAnalysisDataExport(output[_DE], context);
    }
    return contents;
  }, "de_StorageClassAnalysis");
  var de_StorageClassAnalysisDataExport = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_OSV] != null) {
      contents[_OSV] = (0, import_smithy_client.expectString)(output[_OSV]);
    }
    if (output[_Des] != null) {
      contents[_Des] = de_AnalyticsExportDestination(output[_Des], context);
    }
    return contents;
  }, "de_StorageClassAnalysisDataExport");
  var de_Tag = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_Va] != null) {
      contents[_Va] = (0, import_smithy_client.expectString)(output[_Va]);
    }
    return contents;
  }, "de_Tag");
  var de_TagSet = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Tag(entry, context);
    });
  }, "de_TagSet");
  var de_TargetGrant = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Gra] != null) {
      contents[_Gra] = de_Grantee(output[_Gra], context);
    }
    if (output[_Pe] != null) {
      contents[_Pe] = (0, import_smithy_client.expectString)(output[_Pe]);
    }
    return contents;
  }, "de_TargetGrant");
  var de_TargetGrants = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_TargetGrant(entry, context);
    });
  }, "de_TargetGrants");
  var de_TargetObjectKeyFormat = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_SPi] != null) {
      contents[_SPi] = de_SimplePrefix(output[_SPi], context);
    }
    if (output[_PP] != null) {
      contents[_PP] = de_PartitionedPrefix(output[_PP], context);
    }
    return contents;
  }, "de_TargetObjectKeyFormat");
  var de_Tiering = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_AT] != null) {
      contents[_AT] = (0, import_smithy_client.expectString)(output[_AT]);
    }
    return contents;
  }, "de_Tiering");
  var de_TieringList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Tiering(entry, context);
    });
  }, "de_TieringList");
  var de_TopicConfiguration = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_Top] != null) {
      contents[_TA] = (0, import_smithy_client.expectString)(output[_Top]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_TopicConfiguration");
  var de_TopicConfigurationList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_TopicConfiguration(entry, context);
    });
  }, "de_TopicConfigurationList");
  var de_Transition = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Dat] != null) {
      contents[_Dat] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Dat]));
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    return contents;
  }, "de_Transition");
  var de_TransitionList = /* @__PURE__ */ __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Transition(entry, context);
    });
  }, "de_TransitionList");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
  var _A = "And";
  var _AAO = "AnalyticsAndOperator";
  var _AC = "AnalyticsConfiguration";
  var _ACL = "ACL";
  var _ACLc = "AccessControlList";
  var _ACLn = "AnalyticsConfigurationList";
  var _ACP = "AccessControlPolicy";
  var _ACT = "AccessControlTranslation";
  var _ACc = "AccelerateConfiguration";
  var _AD = "AbortDate";
  var _AED = "AnalyticsExportDestination";
  var _AF = "AnalyticsFilter";
  var _AH = "AllowedHeader";
  var _AHl = "AllowedHeaders";
  var _AI = "AnalyticsId";
  var _AIMU = "AbortIncompleteMultipartUpload";
  var _AIc = "AccountId";
  var _AKI = "AccessKeyId";
  var _AM = "AllowedMethod";
  var _AMl = "AllowedMethods";
  var _AO = "AllowedOrigin";
  var _AOl = "AllowedOrigins";
  var _APA = "AccessPointAlias";
  var _APAc = "AccessPointArn";
  var _AQRD = "AllowQuotedRecordDelimiter";
  var _AR = "AcceptRanges";
  var _ARI = "AbortRuleId";
  var _AS = "ArchiveStatus";
  var _ASBD = "AnalyticsS3BucketDestination";
  var _ASEFF = "AnalyticsS3ExportFileFormat";
  var _ASSEBD = "ApplyServerSideEncryptionByDefault";
  var _AT = "AccessTier";
  var _Ac = "Account";
  var _B = "Bucket";
  var _BAI = "BucketAccountId";
  var _BAS = "BucketAccelerateStatus";
  var _BGR = "BypassGovernanceRetention";
  var _BI = "BucketInfo";
  var _BKE = "BucketKeyEnabled";
  var _BLC = "BucketLifecycleConfiguration";
  var _BLCu = "BucketLocationConstraint";
  var _BLN = "BucketLocationName";
  var _BLP = "BucketLogsPermission";
  var _BLS = "BucketLoggingStatus";
  var _BLT = "BucketLocationType";
  var _BN = "BucketName";
  var _BP = "BytesProcessed";
  var _BPA = "BlockPublicAcls";
  var _BPP = "BlockPublicPolicy";
  var _BR = "BucketRegion";
  var _BRy = "BytesReturned";
  var _BS = "BytesScanned";
  var _BT = "BucketType";
  var _BVS = "BucketVersioningStatus";
  var _Bu = "Buckets";
  var _C = "Credentials";
  var _CA = "ChecksumAlgorithm";
  var _CACL = "CannedACL";
  var _CBC = "CreateBucketConfiguration";
  var _CC = "CacheControl";
  var _CCRC = "ChecksumCRC32";
  var _CCRCC = "ChecksumCRC32C";
  var _CCRCNVME = "ChecksumCRC64NVME";
  var _CD = "ContentDisposition";
  var _CDr = "CreationDate";
  var _CE = "ContentEncoding";
  var _CF = "CloudFunction";
  var _CFC = "CloudFunctionConfiguration";
  var _CL = "ContentLanguage";
  var _CLo = "ContentLength";
  var _CM = "ChecksumMode";
  var _CMD = "ContentMD5";
  var _CMU = "CompletedMultipartUpload";
  var _CORSC = "CORSConfiguration";
  var _CORSR = "CORSRule";
  var _CORSRu = "CORSRules";
  var _CP = "CommonPrefixes";
  var _CPo = "CompletedPart";
  var _CR = "ContentRange";
  var _CRSBA = "ConfirmRemoveSelfBucketAccess";
  var _CS = "CopySource";
  var _CSHA = "ChecksumSHA1";
  var _CSHAh = "ChecksumSHA256";
  var _CSIM = "CopySourceIfMatch";
  var _CSIMS = "CopySourceIfModifiedSince";
  var _CSINM = "CopySourceIfNoneMatch";
  var _CSIUS = "CopySourceIfUnmodifiedSince";
  var _CSR = "CopySourceRange";
  var _CSSSECA = "CopySourceSSECustomerAlgorithm";
  var _CSSSECK = "CopySourceSSECustomerKey";
  var _CSSSECKMD = "CopySourceSSECustomerKeyMD5";
  var _CSV = "CSV";
  var _CSVI = "CopySourceVersionId";
  var _CSVIn = "CSVInput";
  var _CSVO = "CSVOutput";
  var _CT = "ChecksumType";
  var _CTo = "ContentType";
  var _CTom = "CompressionType";
  var _CTon = "ContinuationToken";
  var _Ch = "Checksum";
  var _Co = "Contents";
  var _Cod = "Code";
  var _Com = "Comments";
  var _Con = "Condition";
  var _D = "Delimiter";
  var _DAI = "DaysAfterInitiation";
  var _DE = "DataExport";
  var _DM = "DeleteMarker";
  var _DMR = "DeleteMarkerReplication";
  var _DMRS = "DeleteMarkerReplicationStatus";
  var _DMVI = "DeleteMarkerVersionId";
  var _DMe = "DeleteMarkers";
  var _DN = "DisplayName";
  var _DR = "DataRedundancy";
  var _DRe = "DefaultRetention";
  var _Da = "Days";
  var _Dat = "Date";
  var _De = "Deleted";
  var _Del = "Delete";
  var _Des = "Destination";
  var _Desc = "Description";
  var _E = "Expires";
  var _EA = "EmailAddress";
  var _EBC = "EventBridgeConfiguration";
  var _EBO = "ExpectedBucketOwner";
  var _EC = "ErrorCode";
  var _ECn = "EncryptionConfiguration";
  var _ED = "ErrorDocument";
  var _EH = "ExposeHeaders";
  var _EHx = "ExposeHeader";
  var _EM = "ErrorMessage";
  var _EODM = "ExpiredObjectDeleteMarker";
  var _EOR = "ExistingObjectReplication";
  var _EORS = "ExistingObjectReplicationStatus";
  var _ERP = "EnableRequestProgress";
  var _ES = "ExpiresString";
  var _ESBO = "ExpectedSourceBucketOwner";
  var _ESx = "ExpirationStatus";
  var _ET = "EncodingType";
  var _ETa = "ETag";
  var _ETn = "EncryptionType";
  var _ETv = "EventThreshold";
  var _ETx = "ExpressionType";
  var _En = "Encryption";
  var _Ena = "Enabled";
  var _End = "End";
  var _Er = "Error";
  var _Err = "Errors";
  var _Ev = "Event";
  var _Eve = "Events";
  var _Ex = "Expression";
  var _Exp = "Expiration";
  var _F = "Filter";
  var _FD = "FieldDelimiter";
  var _FHI = "FileHeaderInfo";
  var _FO = "FetchOwner";
  var _FR = "FilterRule";
  var _FRN = "FilterRuleName";
  var _FRV = "FilterRuleValue";
  var _FRi = "FilterRules";
  var _Fi = "Field";
  var _Fo = "Format";
  var _Fr = "Frequency";
  var _G = "Grant";
  var _GFC = "GrantFullControl";
  var _GJP = "GlacierJobParameters";
  var _GR = "GrantRead";
  var _GRACP = "GrantReadACP";
  var _GW = "GrantWrite";
  var _GWACP = "GrantWriteACP";
  var _Gr = "Grants";
  var _Gra = "Grantee";
  var _HECRE = "HttpErrorCodeReturnedEquals";
  var _HN = "HostName";
  var _HRC = "HttpRedirectCode";
  var _I = "Id";
  var _IC = "InventoryConfiguration";
  var _ICL = "InventoryConfigurationList";
  var _ID = "IndexDocument";
  var _ID_ = "ID";
  var _IDn = "InventoryDestination";
  var _IE = "IsEnabled";
  var _IEn = "InventoryEncryption";
  var _IF = "InventoryFilter";
  var _IFn = "InventoryFormat";
  var _IFnv = "InventoryFrequency";
  var _II = "InventoryId";
  var _IIOV = "InventoryIncludedObjectVersions";
  var _IL = "IsLatest";
  var _IM = "IfMatch";
  var _IMIT = "IfMatchInitiatedTime";
  var _IMLMT = "IfMatchLastModifiedTime";
  var _IMS = "IfMatchSize";
  var _IMSf = "IfModifiedSince";
  var _INM = "IfNoneMatch";
  var _IOF = "InventoryOptionalField";
  var _IOV = "IncludedObjectVersions";
  var _IP = "IsPublic";
  var _IPA = "IgnorePublicAcls";
  var _IRIP = "IsRestoreInProgress";
  var _IS = "InputSerialization";
  var _ISBD = "InventoryS3BucketDestination";
  var _ISn = "InventorySchedule";
  var _IT = "IsTruncated";
  var _ITAO = "IntelligentTieringAndOperator";
  var _ITAT = "IntelligentTieringAccessTier";
  var _ITC = "IntelligentTieringConfiguration";
  var _ITCL = "IntelligentTieringConfigurationList";
  var _ITD = "IntelligentTieringDays";
  var _ITF = "IntelligentTieringFilter";
  var _ITI = "IntelligentTieringId";
  var _ITS = "IntelligentTieringStatus";
  var _IUS = "IfUnmodifiedSince";
  var _In = "Initiator";
  var _Ini = "Initiated";
  var _JSON = "JSON";
  var _JSONI = "JSONInput";
  var _JSONO = "JSONOutput";
  var _JSONT = "JSONType";
  var _K = "Key";
  var _KC = "KeyCount";
  var _KI = "KeyId";
  var _KM = "KeyMarker";
  var _KMSC = "KMSContext";
  var _KMSKI = "KMSKeyId";
  var _KMSMKID = "KMSMasterKeyID";
  var _KPE = "KeyPrefixEquals";
  var _L = "Location";
  var _LC = "LocationConstraint";
  var _LE = "LoggingEnabled";
  var _LEi = "LifecycleExpiration";
  var _LFA = "LambdaFunctionArn";
  var _LFC = "LambdaFunctionConfigurations";
  var _LFCa = "LambdaFunctionConfiguration";
  var _LI = "LocationInfo";
  var _LM = "LastModified";
  var _LMT = "LastModifiedTime";
  var _LNAS = "LocationNameAsString";
  var _LP = "LocationPrefix";
  var _LR = "LifecycleRule";
  var _LRAO = "LifecycleRuleAndOperator";
  var _LRF = "LifecycleRuleFilter";
  var _LT = "LocationType";
  var _M = "Marker";
  var _MAO = "MetricsAndOperator";
  var _MAS = "MaxAgeSeconds";
  var _MB = "MaxBuckets";
  var _MC = "MetricsConfiguration";
  var _MCL = "MetricsConfigurationList";
  var _MD = "MetadataDirective";
  var _MDB = "MaxDirectoryBuckets";
  var _MDf = "MfaDelete";
  var _ME = "MetadataEntry";
  var _MF = "MetricsFilter";
  var _MFA = "MFA";
  var _MFAD = "MFADelete";
  var _MI = "MetricsId";
  var _MK = "MaxKeys";
  var _MKe = "MetadataKey";
  var _MM = "MissingMeta";
  var _MOS = "MpuObjectSize";
  var _MP = "MaxParts";
  var _MS = "MetricsStatus";
  var _MTC = "MetadataTableConfiguration";
  var _MTCR = "MetadataTableConfigurationResult";
  var _MU = "MaxUploads";
  var _MV = "MetadataValue";
  var _Me = "Metrics";
  var _Mes = "Message";
  var _Mi = "Minutes";
  var _Mo = "Mode";
  var _N = "Name";
  var _NC = "NotificationConfiguration";
  var _NCF = "NotificationConfigurationFilter";
  var _NCT = "NextContinuationToken";
  var _ND = "NoncurrentDays";
  var _NI = "NotificationId";
  var _NKM = "NextKeyMarker";
  var _NM = "NextMarker";
  var _NNV = "NewerNoncurrentVersions";
  var _NPNM = "NextPartNumberMarker";
  var _NUIM = "NextUploadIdMarker";
  var _NVE = "NoncurrentVersionExpiration";
  var _NVIM = "NextVersionIdMarker";
  var _NVT = "NoncurrentVersionTransitions";
  var _NVTo = "NoncurrentVersionTransition";
  var _O = "Owner";
  var _OA = "ObjectAttributes";
  var _OC = "OwnershipControls";
  var _OCACL = "ObjectCannedACL";
  var _OCR = "OwnershipControlsRule";
  var _OF = "OptionalFields";
  var _OI = "ObjectIdentifier";
  var _OK = "ObjectKey";
  var _OL = "OutputLocation";
  var _OLC = "ObjectLockConfiguration";
  var _OLE = "ObjectLockEnabled";
  var _OLEFB = "ObjectLockEnabledForBucket";
  var _OLLH = "ObjectLockLegalHold";
  var _OLLHS = "ObjectLockLegalHoldStatus";
  var _OLM = "ObjectLockMode";
  var _OLR = "ObjectLockRetention";
  var _OLRM = "ObjectLockRetentionMode";
  var _OLRUD = "ObjectLockRetainUntilDate";
  var _OLRb = "ObjectLockRule";
  var _OO = "ObjectOwnership";
  var _OOA = "OptionalObjectAttributes";
  var _OOw = "OwnerOverride";
  var _OP = "ObjectParts";
  var _OS = "OutputSerialization";
  var _OSGT = "ObjectSizeGreaterThan";
  var _OSGTB = "ObjectSizeGreaterThanBytes";
  var _OSLT = "ObjectSizeLessThan";
  var _OSLTB = "ObjectSizeLessThanBytes";
  var _OSV = "OutputSchemaVersion";
  var _OSb = "ObjectSize";
  var _OVI = "ObjectVersionId";
  var _Ob = "Objects";
  var _P = "Prefix";
  var _PABC = "PublicAccessBlockConfiguration";
  var _PC = "PartsCount";
  var _PDS = "PartitionDateSource";
  var _PI = "ParquetInput";
  var _PN = "PartNumber";
  var _PNM = "PartNumberMarker";
  var _PP = "PartitionedPrefix";
  var _Pa = "Payer";
  var _Par = "Part";
  var _Parq = "Parquet";
  var _Part = "Parts";
  var _Pe = "Permission";
  var _Pr = "Protocol";
  var _Pri = "Priority";
  var _Q = "Quiet";
  var _QA = "QueueArn";
  var _QC = "QueueConfiguration";
  var _QCu = "QueueConfigurations";
  var _QCuo = "QuoteCharacter";
  var _QEC = "QuoteEscapeCharacter";
  var _QF = "QuoteFields";
  var _Qu = "Queue";
  var _R = "Range";
  var _RART = "RedirectAllRequestsTo";
  var _RC = "RequestCharged";
  var _RCC = "ResponseCacheControl";
  var _RCD = "ResponseContentDisposition";
  var _RCE = "ResponseContentEncoding";
  var _RCL = "ResponseContentLanguage";
  var _RCT = "ResponseContentType";
  var _RCe = "ReplicationConfiguration";
  var _RD = "RecordDelimiter";
  var _RE = "ResponseExpires";
  var _RED = "RestoreExpiryDate";
  var _RKKID = "ReplicaKmsKeyID";
  var _RKPW = "ReplaceKeyPrefixWith";
  var _RKW = "ReplaceKeyWith";
  var _RM = "ReplicaModifications";
  var _RMS = "ReplicaModificationsStatus";
  var _ROP = "RestoreOutputPath";
  var _RP = "RequestPayer";
  var _RPB = "RestrictPublicBuckets";
  var _RPC = "RequestPaymentConfiguration";
  var _RPe = "RequestProgress";
  var _RR = "RequestRoute";
  var _RRAO = "ReplicationRuleAndOperator";
  var _RRF = "ReplicationRuleFilter";
  var _RRS = "ReplicationRuleStatus";
  var _RRT = "RestoreRequestType";
  var _RRe = "ReplicationRule";
  var _RRes = "RestoreRequest";
  var _RRo = "RoutingRules";
  var _RRou = "RoutingRule";
  var _RS = "ReplicationStatus";
  var _RSe = "RestoreStatus";
  var _RT = "RequestToken";
  var _RTS = "ReplicationTimeStatus";
  var _RTV = "ReplicationTimeValue";
  var _RTe = "ReplicationTime";
  var _RUD = "RetainUntilDate";
  var _Re = "Restore";
  var _Red = "Redirect";
  var _Ro = "Role";
  var _Ru = "Rule";
  var _Rul = "Rules";
  var _S = "Status";
  var _SA = "StartAfter";
  var _SAK = "SecretAccessKey";
  var _SBD = "S3BucketDestination";
  var _SC = "StorageClass";
  var _SCA = "StorageClassAnalysis";
  var _SCADE = "StorageClassAnalysisDataExport";
  var _SCASV = "StorageClassAnalysisSchemaVersion";
  var _SCt = "StatusCode";
  var _SDV = "SkipDestinationValidation";
  var _SK = "SSE-KMS";
  var _SKEO = "SseKmsEncryptedObjects";
  var _SKEOS = "SseKmsEncryptedObjectsStatus";
  var _SKF = "S3KeyFilter";
  var _SKe = "S3Key";
  var _SL = "S3Location";
  var _SM = "SessionMode";
  var _SOCR = "SelectObjectContentRequest";
  var _SP = "SelectParameters";
  var _SPi = "SimplePrefix";
  var _SR = "ScanRange";
  var _SS = "SSE-S3";
  var _SSC = "SourceSelectionCriteria";
  var _SSE = "ServerSideEncryption";
  var _SSEA = "SSEAlgorithm";
  var _SSEBD = "ServerSideEncryptionByDefault";
  var _SSEC = "ServerSideEncryptionConfiguration";
  var _SSECA = "SSECustomerAlgorithm";
  var _SSECK = "SSECustomerKey";
  var _SSECKMD = "SSECustomerKeyMD5";
  var _SSEKMS = "SSEKMS";
  var _SSEKMSEC = "SSEKMSEncryptionContext";
  var _SSEKMSKI = "SSEKMSKeyId";
  var _SSER = "ServerSideEncryptionRule";
  var _SSES = "SSES3";
  var _ST = "SessionToken";
  var _STBA = "S3TablesBucketArn";
  var _STD = "S3TablesDestination";
  var _STDR = "S3TablesDestinationResult";
  var _STN = "S3TablesName";
  var _S_ = "S3";
  var _Sc = "Schedule";
  var _Se = "Setting";
  var _Si = "Size";
  var _St = "Start";
  var _Su = "Suffix";
  var _T = "Tagging";
  var _TA = "TopicArn";
  var _TAa = "TableArn";
  var _TB = "TargetBucket";
  var _TBA = "TableBucketArn";
  var _TC = "TagCount";
  var _TCo = "TopicConfiguration";
  var _TCop = "TopicConfigurations";
  var _TD = "TaggingDirective";
  var _TDMOS = "TransitionDefaultMinimumObjectSize";
  var _TG = "TargetGrants";
  var _TGa = "TargetGrant";
  var _TN = "TableName";
  var _TNa = "TableNamespace";
  var _TOKF = "TargetObjectKeyFormat";
  var _TP = "TargetPrefix";
  var _TPC = "TotalPartsCount";
  var _TS = "TagSet";
  var _TSC = "TransitionStorageClass";
  var _Ta = "Tag";
  var _Tag = "Tags";
  var _Ti = "Tier";
  var _Tie = "Tierings";
  var _Tier = "Tiering";
  var _Tim = "Time";
  var _To = "Token";
  var _Top = "Topic";
  var _Tr = "Transitions";
  var _Tra = "Transition";
  var _Ty = "Type";
  var _U = "Upload";
  var _UI = "UploadId";
  var _UIM = "UploadIdMarker";
  var _UM = "UserMetadata";
  var _URI = "URI";
  var _Up = "Uploads";
  var _V = "Version";
  var _VC = "VersionCount";
  var _VCe = "VersioningConfiguration";
  var _VI = "VersionId";
  var _VIM = "VersionIdMarker";
  var _Va = "Value";
  var _Ve = "Versions";
  var _WC = "WebsiteConfiguration";
  var _WOB = "WriteOffsetBytes";
  var _WRL = "WebsiteRedirectLocation";
  var _Y = "Years";
  var _a = "analytics";
  var _ac = "accelerate";
  var _acl = "acl";
  var _ar = "accept-ranges";
  var _at = "attributes";
  var _br = "bucket-region";
  var _c = "cors";
  var _cc = "cache-control";
  var _cd = "content-disposition";
  var _ce = "content-encoding";
  var _cl = "content-language";
  var _cl_ = "content-length";
  var _cm = "content-md5";
  var _cr = "content-range";
  var _ct = "content-type";
  var _ct_ = "continuation-token";
  var _d = "delete";
  var _de = "delimiter";
  var _e = "expires";
  var _en = "encryption";
  var _et = "encoding-type";
  var _eta = "etag";
  var _ex = "expiresstring";
  var _fo = "fetch-owner";
  var _i = "id";
  var _im = "if-match";
  var _ims = "if-modified-since";
  var _in = "inventory";
  var _inm = "if-none-match";
  var _it = "intelligent-tiering";
  var _ius = "if-unmodified-since";
  var _km = "key-marker";
  var _l = "lifecycle";
  var _lh = "legal-hold";
  var _lm = "last-modified";
  var _lo = "location";
  var _log = "logging";
  var _lt = "list-type";
  var _m = "metrics";
  var _mT = "metadataTable";
  var _ma = "marker";
  var _mb = "max-buckets";
  var _mdb = "max-directory-buckets";
  var _me = "member";
  var _mk = "max-keys";
  var _mp = "max-parts";
  var _mu = "max-uploads";
  var _n = "notification";
  var _oC = "ownershipControls";
  var _ol = "object-lock";
  var _p = "policy";
  var _pAB = "publicAccessBlock";
  var _pN = "partNumber";
  var _pS = "policyStatus";
  var _pnm = "part-number-marker";
  var _pr = "prefix";
  var _r = "replication";
  var _rP = "requestPayment";
  var _ra = "range";
  var _rcc = "response-cache-control";
  var _rcd = "response-content-disposition";
  var _rce = "response-content-encoding";
  var _rcl = "response-content-language";
  var _rct = "response-content-type";
  var _re = "response-expires";
  var _res = "restore";
  var _ret = "retention";
  var _s = "session";
  var _sa = "start-after";
  var _se = "select";
  var _st = "select-type";
  var _t = "tagging";
  var _to = "torrent";
  var _u = "uploads";
  var _uI = "uploadId";
  var _uim = "upload-id-marker";
  var _v = "versioning";
  var _vI = "versionId";
  var _ve = '<?xml version="1.0" encoding="UTF-8"?>';
  var _ver = "versions";
  var _vim = "version-id-marker";
  var _w = "website";
  var _x = "xsi:type";
  var _xaa = "x-amz-acl";
  var _xaad = "x-amz-abort-date";
  var _xaapa = "x-amz-access-point-alias";
  var _xaari = "x-amz-abort-rule-id";
  var _xaas = "x-amz-archive-status";
  var _xabgr = "x-amz-bypass-governance-retention";
  var _xabln = "x-amz-bucket-location-name";
  var _xablt = "x-amz-bucket-location-type";
  var _xabole = "x-amz-bucket-object-lock-enabled";
  var _xabolt = "x-amz-bucket-object-lock-token";
  var _xabr = "x-amz-bucket-region";
  var _xaca = "x-amz-checksum-algorithm";
  var _xacc = "x-amz-checksum-crc32";
  var _xacc_ = "x-amz-checksum-crc32c";
  var _xacc__ = "x-amz-checksum-crc64nvme";
  var _xacm = "x-amz-checksum-mode";
  var _xacrsba = "x-amz-confirm-remove-self-bucket-access";
  var _xacs = "x-amz-checksum-sha1";
  var _xacs_ = "x-amz-checksum-sha256";
  var _xacs__ = "x-amz-copy-source";
  var _xacsim = "x-amz-copy-source-if-match";
  var _xacsims = "x-amz-copy-source-if-modified-since";
  var _xacsinm = "x-amz-copy-source-if-none-match";
  var _xacsius = "x-amz-copy-source-if-unmodified-since";
  var _xacsm = "x-amz-create-session-mode";
  var _xacsr = "x-amz-copy-source-range";
  var _xacssseca = "x-amz-copy-source-server-side-encryption-customer-algorithm";
  var _xacssseck = "x-amz-copy-source-server-side-encryption-customer-key";
  var _xacssseckm = "x-amz-copy-source-server-side-encryption-customer-key-md5";
  var _xacsvi = "x-amz-copy-source-version-id";
  var _xact = "x-amz-checksum-type";
  var _xadm = "x-amz-delete-marker";
  var _xae = "x-amz-expiration";
  var _xaebo = "x-amz-expected-bucket-owner";
  var _xafec = "x-amz-fwd-error-code";
  var _xafem = "x-amz-fwd-error-message";
  var _xafhar = "x-amz-fwd-header-accept-ranges";
  var _xafhcc = "x-amz-fwd-header-cache-control";
  var _xafhcd = "x-amz-fwd-header-content-disposition";
  var _xafhce = "x-amz-fwd-header-content-encoding";
  var _xafhcl = "x-amz-fwd-header-content-language";
  var _xafhcr = "x-amz-fwd-header-content-range";
  var _xafhct = "x-amz-fwd-header-content-type";
  var _xafhe = "x-amz-fwd-header-etag";
  var _xafhe_ = "x-amz-fwd-header-expires";
  var _xafhlm = "x-amz-fwd-header-last-modified";
  var _xafhxacc = "x-amz-fwd-header-x-amz-checksum-crc32";
  var _xafhxacc_ = "x-amz-fwd-header-x-amz-checksum-crc32c";
  var _xafhxacc__ = "x-amz-fwd-header-x-amz-checksum-crc64nvme";
  var _xafhxacs = "x-amz-fwd-header-x-amz-checksum-sha1";
  var _xafhxacs_ = "x-amz-fwd-header-x-amz-checksum-sha256";
  var _xafhxadm = "x-amz-fwd-header-x-amz-delete-marker";
  var _xafhxae = "x-amz-fwd-header-x-amz-expiration";
  var _xafhxamm = "x-amz-fwd-header-x-amz-missing-meta";
  var _xafhxampc = "x-amz-fwd-header-x-amz-mp-parts-count";
  var _xafhxaollh = "x-amz-fwd-header-x-amz-object-lock-legal-hold";
  var _xafhxaolm = "x-amz-fwd-header-x-amz-object-lock-mode";
  var _xafhxaolrud = "x-amz-fwd-header-x-amz-object-lock-retain-until-date";
  var _xafhxar = "x-amz-fwd-header-x-amz-restore";
  var _xafhxarc = "x-amz-fwd-header-x-amz-request-charged";
  var _xafhxars = "x-amz-fwd-header-x-amz-replication-status";
  var _xafhxasc = "x-amz-fwd-header-x-amz-storage-class";
  var _xafhxasse = "x-amz-fwd-header-x-amz-server-side-encryption";
  var _xafhxasseakki = "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id";
  var _xafhxassebke = "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled";
  var _xafhxasseca = "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm";
  var _xafhxasseckm = "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5";
  var _xafhxatc = "x-amz-fwd-header-x-amz-tagging-count";
  var _xafhxavi = "x-amz-fwd-header-x-amz-version-id";
  var _xafs = "x-amz-fwd-status";
  var _xagfc = "x-amz-grant-full-control";
  var _xagr = "x-amz-grant-read";
  var _xagra = "x-amz-grant-read-acp";
  var _xagw = "x-amz-grant-write";
  var _xagwa = "x-amz-grant-write-acp";
  var _xaimit = "x-amz-if-match-initiated-time";
  var _xaimlmt = "x-amz-if-match-last-modified-time";
  var _xaims = "x-amz-if-match-size";
  var _xam = "x-amz-mfa";
  var _xamd = "x-amz-metadata-directive";
  var _xamm = "x-amz-missing-meta";
  var _xamos = "x-amz-mp-object-size";
  var _xamp = "x-amz-max-parts";
  var _xampc = "x-amz-mp-parts-count";
  var _xaoa = "x-amz-object-attributes";
  var _xaollh = "x-amz-object-lock-legal-hold";
  var _xaolm = "x-amz-object-lock-mode";
  var _xaolrud = "x-amz-object-lock-retain-until-date";
  var _xaoo = "x-amz-object-ownership";
  var _xaooa = "x-amz-optional-object-attributes";
  var _xaos = "x-amz-object-size";
  var _xapnm = "x-amz-part-number-marker";
  var _xar = "x-amz-restore";
  var _xarc = "x-amz-request-charged";
  var _xarop = "x-amz-restore-output-path";
  var _xarp = "x-amz-request-payer";
  var _xarr = "x-amz-request-route";
  var _xars = "x-amz-replication-status";
  var _xart = "x-amz-request-token";
  var _xasc = "x-amz-storage-class";
  var _xasca = "x-amz-sdk-checksum-algorithm";
  var _xasdv = "x-amz-skip-destination-validation";
  var _xasebo = "x-amz-source-expected-bucket-owner";
  var _xasse = "x-amz-server-side-encryption";
  var _xasseakki = "x-amz-server-side-encryption-aws-kms-key-id";
  var _xassebke = "x-amz-server-side-encryption-bucket-key-enabled";
  var _xassec = "x-amz-server-side-encryption-context";
  var _xasseca = "x-amz-server-side-encryption-customer-algorithm";
  var _xasseck = "x-amz-server-side-encryption-customer-key";
  var _xasseckm = "x-amz-server-side-encryption-customer-key-md5";
  var _xat = "x-amz-tagging";
  var _xatc = "x-amz-tagging-count";
  var _xatd = "x-amz-tagging-directive";
  var _xatdmos = "x-amz-transition-default-minimum-object-size";
  var _xavi = "x-amz-version-id";
  var _xawob = "x-amz-write-offset-bytes";
  var _xawrl = "x-amz-website-redirect-location";
  var _xi = "x-id";
  var CreateSessionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s3.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "CreateSession", {}).n("S3Client", "CreateSessionCommand").f(CreateSessionRequestFilterSensitiveLog, CreateSessionOutputFilterSensitiveLog).ser(se_CreateSessionCommand).de(de_CreateSessionCommand).build() {
    static {
      __name(this, "CreateSessionCommand");
    }
  };
  var import_runtimeConfig = require_runtimeConfig7();
  var import_region_config_resolver = require_dist_cjs46();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var S3Client = class extends import_smithy_client.Client {
    static {
      __name(this, "S3Client");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_flexible_checksums.resolveFlexibleChecksumsConfig)(_config_2);
      const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
      const _config_5 = (0, import_config_resolver.resolveRegionConfig)(_config_4);
      const _config_6 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_5);
      const _config_7 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_6);
      const _config_8 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_7);
      const _config_9 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_8);
      const _config_10 = (0, import_middleware_sdk_s32.resolveS3Config)(_config_9, { session: [() => this, CreateSessionCommand] });
      const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);
      this.config = _config_11;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultS3HttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core3.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials,
          "aws.auth#sigv4a": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s32.getValidateBucketNamePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_expect_continue.getAddExpectContinuePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s32.getRegionRedirectMiddlewarePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s32.getS3ExpressPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s32.getS3ExpressHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_sdk_s33 = require_dist_cjs67();
  var AbortMultipartUploadCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s33.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "AbortMultipartUpload", {}).n("S3Client", "AbortMultipartUploadCommand").f(undefined, undefined).ser(se_AbortMultipartUploadCommand).de(de_AbortMultipartUploadCommand).build() {
    static {
      __name(this, "AbortMultipartUploadCommand");
    }
  };
  var import_middleware_sdk_s34 = require_dist_cjs67();
  var import_middleware_ssec = require_dist_cjs72();
  var CompleteMultipartUploadCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s34.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CompleteMultipartUpload", {}).n("S3Client", "CompleteMultipartUploadCommand").f(CompleteMultipartUploadRequestFilterSensitiveLog, CompleteMultipartUploadOutputFilterSensitiveLog).ser(se_CompleteMultipartUploadCommand).de(de_CompleteMultipartUploadCommand).build() {
    static {
      __name(this, "CompleteMultipartUploadCommand");
    }
  };
  var import_middleware_sdk_s35 = require_dist_cjs67();
  var CopyObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" },
    CopySource: { type: "contextParams", name: "CopySource" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s35.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CopyObject", {}).n("S3Client", "CopyObjectCommand").f(CopyObjectRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog).ser(se_CopyObjectCommand).de(de_CopyObjectCommand).build() {
    static {
      __name(this, "CopyObjectCommand");
    }
  };
  var import_middleware_location_constraint = require_dist_cjs73();
  var import_middleware_sdk_s36 = require_dist_cjs67();
  var CreateBucketCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    DisableAccessPoints: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s36.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_location_constraint.getLocationConstraintPlugin)(config)
    ];
  }).s("AmazonS3", "CreateBucket", {}).n("S3Client", "CreateBucketCommand").f(undefined, undefined).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
    static {
      __name(this, "CreateBucketCommand");
    }
  };
  var CreateBucketMetadataTableConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "CreateBucketMetadataTableConfiguration", {}).n("S3Client", "CreateBucketMetadataTableConfigurationCommand").f(undefined, undefined).ser(se_CreateBucketMetadataTableConfigurationCommand).de(de_CreateBucketMetadataTableConfigurationCommand).build() {
    static {
      __name(this, "CreateBucketMetadataTableConfigurationCommand");
    }
  };
  var import_middleware_sdk_s37 = require_dist_cjs67();
  var CreateMultipartUploadCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s37.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CreateMultipartUpload", {}).n("S3Client", "CreateMultipartUploadCommand").f(CreateMultipartUploadRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog).ser(se_CreateMultipartUploadCommand).de(de_CreateMultipartUploadCommand).build() {
    static {
      __name(this, "CreateMultipartUploadCommand");
    }
  };
  var DeleteBucketAnalyticsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketAnalyticsConfiguration", {}).n("S3Client", "DeleteBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketAnalyticsConfigurationCommand).de(de_DeleteBucketAnalyticsConfigurationCommand).build() {
    static {
      __name(this, "DeleteBucketAnalyticsConfigurationCommand");
    }
  };
  var DeleteBucketCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucket", {}).n("S3Client", "DeleteBucketCommand").f(undefined, undefined).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
    static {
      __name(this, "DeleteBucketCommand");
    }
  };
  var DeleteBucketCorsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketCors", {}).n("S3Client", "DeleteBucketCorsCommand").f(undefined, undefined).ser(se_DeleteBucketCorsCommand).de(de_DeleteBucketCorsCommand).build() {
    static {
      __name(this, "DeleteBucketCorsCommand");
    }
  };
  var DeleteBucketEncryptionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketEncryption", {}).n("S3Client", "DeleteBucketEncryptionCommand").f(undefined, undefined).ser(se_DeleteBucketEncryptionCommand).de(de_DeleteBucketEncryptionCommand).build() {
    static {
      __name(this, "DeleteBucketEncryptionCommand");
    }
  };
  var DeleteBucketIntelligentTieringConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketIntelligentTieringConfiguration", {}).n("S3Client", "DeleteBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketIntelligentTieringConfigurationCommand).de(de_DeleteBucketIntelligentTieringConfigurationCommand).build() {
    static {
      __name(this, "DeleteBucketIntelligentTieringConfigurationCommand");
    }
  };
  var DeleteBucketInventoryConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketInventoryConfiguration", {}).n("S3Client", "DeleteBucketInventoryConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketInventoryConfigurationCommand).de(de_DeleteBucketInventoryConfigurationCommand).build() {
    static {
      __name(this, "DeleteBucketInventoryConfigurationCommand");
    }
  };
  var DeleteBucketLifecycleCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketLifecycle", {}).n("S3Client", "DeleteBucketLifecycleCommand").f(undefined, undefined).ser(se_DeleteBucketLifecycleCommand).de(de_DeleteBucketLifecycleCommand).build() {
    static {
      __name(this, "DeleteBucketLifecycleCommand");
    }
  };
  var DeleteBucketMetadataTableConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketMetadataTableConfiguration", {}).n("S3Client", "DeleteBucketMetadataTableConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketMetadataTableConfigurationCommand).de(de_DeleteBucketMetadataTableConfigurationCommand).build() {
    static {
      __name(this, "DeleteBucketMetadataTableConfigurationCommand");
    }
  };
  var DeleteBucketMetricsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketMetricsConfiguration", {}).n("S3Client", "DeleteBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketMetricsConfigurationCommand).de(de_DeleteBucketMetricsConfigurationCommand).build() {
    static {
      __name(this, "DeleteBucketMetricsConfigurationCommand");
    }
  };
  var DeleteBucketOwnershipControlsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketOwnershipControls", {}).n("S3Client", "DeleteBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_DeleteBucketOwnershipControlsCommand).de(de_DeleteBucketOwnershipControlsCommand).build() {
    static {
      __name(this, "DeleteBucketOwnershipControlsCommand");
    }
  };
  var DeleteBucketPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketPolicy", {}).n("S3Client", "DeleteBucketPolicyCommand").f(undefined, undefined).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
    static {
      __name(this, "DeleteBucketPolicyCommand");
    }
  };
  var DeleteBucketReplicationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketReplication", {}).n("S3Client", "DeleteBucketReplicationCommand").f(undefined, undefined).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
    static {
      __name(this, "DeleteBucketReplicationCommand");
    }
  };
  var DeleteBucketTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketTagging", {}).n("S3Client", "DeleteBucketTaggingCommand").f(undefined, undefined).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
    static {
      __name(this, "DeleteBucketTaggingCommand");
    }
  };
  var DeleteBucketWebsiteCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketWebsite", {}).n("S3Client", "DeleteBucketWebsiteCommand").f(undefined, undefined).ser(se_DeleteBucketWebsiteCommand).de(de_DeleteBucketWebsiteCommand).build() {
    static {
      __name(this, "DeleteBucketWebsiteCommand");
    }
  };
  var import_middleware_sdk_s38 = require_dist_cjs67();
  var DeleteObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s38.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "DeleteObject", {}).n("S3Client", "DeleteObjectCommand").f(undefined, undefined).ser(se_DeleteObjectCommand).de(de_DeleteObjectCommand).build() {
    static {
      __name(this, "DeleteObjectCommand");
    }
  };
  var import_middleware_sdk_s39 = require_dist_cjs67();
  var DeleteObjectsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s39.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "DeleteObjects", {}).n("S3Client", "DeleteObjectsCommand").f(undefined, undefined).ser(se_DeleteObjectsCommand).de(de_DeleteObjectsCommand).build() {
    static {
      __name(this, "DeleteObjectsCommand");
    }
  };
  var import_middleware_sdk_s310 = require_dist_cjs67();
  var DeleteObjectTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s310.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "DeleteObjectTagging", {}).n("S3Client", "DeleteObjectTaggingCommand").f(undefined, undefined).ser(se_DeleteObjectTaggingCommand).de(de_DeleteObjectTaggingCommand).build() {
    static {
      __name(this, "DeleteObjectTaggingCommand");
    }
  };
  var DeletePublicAccessBlockCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeletePublicAccessBlock", {}).n("S3Client", "DeletePublicAccessBlockCommand").f(undefined, undefined).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
    static {
      __name(this, "DeletePublicAccessBlockCommand");
    }
  };
  var import_middleware_sdk_s311 = require_dist_cjs67();
  var GetBucketAccelerateConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s311.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketAccelerateConfiguration", {}).n("S3Client", "GetBucketAccelerateConfigurationCommand").f(undefined, undefined).ser(se_GetBucketAccelerateConfigurationCommand).de(de_GetBucketAccelerateConfigurationCommand).build() {
    static {
      __name(this, "GetBucketAccelerateConfigurationCommand");
    }
  };
  var import_middleware_sdk_s312 = require_dist_cjs67();
  var GetBucketAclCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s312.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketAcl", {}).n("S3Client", "GetBucketAclCommand").f(undefined, undefined).ser(se_GetBucketAclCommand).de(de_GetBucketAclCommand).build() {
    static {
      __name(this, "GetBucketAclCommand");
    }
  };
  var import_middleware_sdk_s313 = require_dist_cjs67();
  var GetBucketAnalyticsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s313.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketAnalyticsConfiguration", {}).n("S3Client", "GetBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_GetBucketAnalyticsConfigurationCommand).de(de_GetBucketAnalyticsConfigurationCommand).build() {
    static {
      __name(this, "GetBucketAnalyticsConfigurationCommand");
    }
  };
  var import_middleware_sdk_s314 = require_dist_cjs67();
  var GetBucketCorsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s314.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketCors", {}).n("S3Client", "GetBucketCorsCommand").f(undefined, undefined).ser(se_GetBucketCorsCommand).de(de_GetBucketCorsCommand).build() {
    static {
      __name(this, "GetBucketCorsCommand");
    }
  };
  var import_middleware_sdk_s315 = require_dist_cjs67();
  var GetBucketEncryptionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s315.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketEncryption", {}).n("S3Client", "GetBucketEncryptionCommand").f(undefined, GetBucketEncryptionOutputFilterSensitiveLog).ser(se_GetBucketEncryptionCommand).de(de_GetBucketEncryptionCommand).build() {
    static {
      __name(this, "GetBucketEncryptionCommand");
    }
  };
  var import_middleware_sdk_s316 = require_dist_cjs67();
  var GetBucketIntelligentTieringConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s316.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketIntelligentTieringConfiguration", {}).n("S3Client", "GetBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_GetBucketIntelligentTieringConfigurationCommand).de(de_GetBucketIntelligentTieringConfigurationCommand).build() {
    static {
      __name(this, "GetBucketIntelligentTieringConfigurationCommand");
    }
  };
  var import_middleware_sdk_s317 = require_dist_cjs67();
  var GetBucketInventoryConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s317.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketInventoryConfiguration", {}).n("S3Client", "GetBucketInventoryConfigurationCommand").f(undefined, GetBucketInventoryConfigurationOutputFilterSensitiveLog).ser(se_GetBucketInventoryConfigurationCommand).de(de_GetBucketInventoryConfigurationCommand).build() {
    static {
      __name(this, "GetBucketInventoryConfigurationCommand");
    }
  };
  var import_middleware_sdk_s318 = require_dist_cjs67();
  var GetBucketLifecycleConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s318.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketLifecycleConfiguration", {}).n("S3Client", "GetBucketLifecycleConfigurationCommand").f(undefined, undefined).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
    static {
      __name(this, "GetBucketLifecycleConfigurationCommand");
    }
  };
  var import_middleware_sdk_s319 = require_dist_cjs67();
  var GetBucketLocationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s319.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketLocation", {}).n("S3Client", "GetBucketLocationCommand").f(undefined, undefined).ser(se_GetBucketLocationCommand).de(de_GetBucketLocationCommand).build() {
    static {
      __name(this, "GetBucketLocationCommand");
    }
  };
  var import_middleware_sdk_s320 = require_dist_cjs67();
  var GetBucketLoggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s320.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketLogging", {}).n("S3Client", "GetBucketLoggingCommand").f(undefined, undefined).ser(se_GetBucketLoggingCommand).de(de_GetBucketLoggingCommand).build() {
    static {
      __name(this, "GetBucketLoggingCommand");
    }
  };
  var import_middleware_sdk_s321 = require_dist_cjs67();
  var GetBucketMetadataTableConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s321.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketMetadataTableConfiguration", {}).n("S3Client", "GetBucketMetadataTableConfigurationCommand").f(undefined, undefined).ser(se_GetBucketMetadataTableConfigurationCommand).de(de_GetBucketMetadataTableConfigurationCommand).build() {
    static {
      __name(this, "GetBucketMetadataTableConfigurationCommand");
    }
  };
  var import_middleware_sdk_s322 = require_dist_cjs67();
  var GetBucketMetricsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s322.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketMetricsConfiguration", {}).n("S3Client", "GetBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_GetBucketMetricsConfigurationCommand).de(de_GetBucketMetricsConfigurationCommand).build() {
    static {
      __name(this, "GetBucketMetricsConfigurationCommand");
    }
  };
  var import_middleware_sdk_s323 = require_dist_cjs67();
  var GetBucketNotificationConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s323.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketNotificationConfiguration", {}).n("S3Client", "GetBucketNotificationConfigurationCommand").f(undefined, undefined).ser(se_GetBucketNotificationConfigurationCommand).de(de_GetBucketNotificationConfigurationCommand).build() {
    static {
      __name(this, "GetBucketNotificationConfigurationCommand");
    }
  };
  var import_middleware_sdk_s324 = require_dist_cjs67();
  var GetBucketOwnershipControlsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s324.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketOwnershipControls", {}).n("S3Client", "GetBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_GetBucketOwnershipControlsCommand).de(de_GetBucketOwnershipControlsCommand).build() {
    static {
      __name(this, "GetBucketOwnershipControlsCommand");
    }
  };
  var import_middleware_sdk_s325 = require_dist_cjs67();
  var GetBucketPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s325.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketPolicy", {}).n("S3Client", "GetBucketPolicyCommand").f(undefined, undefined).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
    static {
      __name(this, "GetBucketPolicyCommand");
    }
  };
  var import_middleware_sdk_s326 = require_dist_cjs67();
  var GetBucketPolicyStatusCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s326.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketPolicyStatus", {}).n("S3Client", "GetBucketPolicyStatusCommand").f(undefined, undefined).ser(se_GetBucketPolicyStatusCommand).de(de_GetBucketPolicyStatusCommand).build() {
    static {
      __name(this, "GetBucketPolicyStatusCommand");
    }
  };
  var import_middleware_sdk_s327 = require_dist_cjs67();
  var GetBucketReplicationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s327.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketReplication", {}).n("S3Client", "GetBucketReplicationCommand").f(undefined, undefined).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
    static {
      __name(this, "GetBucketReplicationCommand");
    }
  };
  var import_middleware_sdk_s328 = require_dist_cjs67();
  var GetBucketRequestPaymentCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s328.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketRequestPayment", {}).n("S3Client", "GetBucketRequestPaymentCommand").f(undefined, undefined).ser(se_GetBucketRequestPaymentCommand).de(de_GetBucketRequestPaymentCommand).build() {
    static {
      __name(this, "GetBucketRequestPaymentCommand");
    }
  };
  var import_middleware_sdk_s329 = require_dist_cjs67();
  var GetBucketTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s329.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketTagging", {}).n("S3Client", "GetBucketTaggingCommand").f(undefined, undefined).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
    static {
      __name(this, "GetBucketTaggingCommand");
    }
  };
  var import_middleware_sdk_s330 = require_dist_cjs67();
  var GetBucketVersioningCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s330.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketVersioning", {}).n("S3Client", "GetBucketVersioningCommand").f(undefined, undefined).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
    static {
      __name(this, "GetBucketVersioningCommand");
    }
  };
  var import_middleware_sdk_s331 = require_dist_cjs67();
  var GetBucketWebsiteCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s331.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetBucketWebsite", {}).n("S3Client", "GetBucketWebsiteCommand").f(undefined, undefined).ser(se_GetBucketWebsiteCommand).de(de_GetBucketWebsiteCommand).build() {
    static {
      __name(this, "GetBucketWebsiteCommand");
    }
  };
  var import_middleware_sdk_s332 = require_dist_cjs67();
  var GetObjectAclCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s332.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectAcl", {}).n("S3Client", "GetObjectAclCommand").f(undefined, undefined).ser(se_GetObjectAclCommand).de(de_GetObjectAclCommand).build() {
    static {
      __name(this, "GetObjectAclCommand");
    }
  };
  var import_middleware_sdk_s333 = require_dist_cjs67();
  var GetObjectAttributesCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s333.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectAttributes", {}).n("S3Client", "GetObjectAttributesCommand").f(GetObjectAttributesRequestFilterSensitiveLog, undefined).ser(se_GetObjectAttributesCommand).de(de_GetObjectAttributesCommand).build() {
    static {
      __name(this, "GetObjectAttributesCommand");
    }
  };
  var import_middleware_sdk_s334 = require_dist_cjs67();
  var GetObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestChecksumRequired: false,
        requestValidationModeMember: "ChecksumMode",
        responseAlgorithms: ["CRC64NVME", "CRC32", "CRC32C", "SHA256", "SHA1"]
      }),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_sdk_s334.getS3ExpiresMiddlewarePlugin)(config)
    ];
  }).s("AmazonS3", "GetObject", {}).n("S3Client", "GetObjectCommand").f(GetObjectRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog).ser(se_GetObjectCommand).de(de_GetObjectCommand).build() {
    static {
      __name(this, "GetObjectCommand");
    }
  };
  var import_middleware_sdk_s335 = require_dist_cjs67();
  var GetObjectLegalHoldCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s335.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectLegalHold", {}).n("S3Client", "GetObjectLegalHoldCommand").f(undefined, undefined).ser(se_GetObjectLegalHoldCommand).de(de_GetObjectLegalHoldCommand).build() {
    static {
      __name(this, "GetObjectLegalHoldCommand");
    }
  };
  var import_middleware_sdk_s336 = require_dist_cjs67();
  var GetObjectLockConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s336.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectLockConfiguration", {}).n("S3Client", "GetObjectLockConfigurationCommand").f(undefined, undefined).ser(se_GetObjectLockConfigurationCommand).de(de_GetObjectLockConfigurationCommand).build() {
    static {
      __name(this, "GetObjectLockConfigurationCommand");
    }
  };
  var import_middleware_sdk_s337 = require_dist_cjs67();
  var GetObjectRetentionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s337.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectRetention", {}).n("S3Client", "GetObjectRetentionCommand").f(undefined, undefined).ser(se_GetObjectRetentionCommand).de(de_GetObjectRetentionCommand).build() {
    static {
      __name(this, "GetObjectRetentionCommand");
    }
  };
  var import_middleware_sdk_s338 = require_dist_cjs67();
  var GetObjectTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s338.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectTagging", {}).n("S3Client", "GetObjectTaggingCommand").f(undefined, undefined).ser(se_GetObjectTaggingCommand).de(de_GetObjectTaggingCommand).build() {
    static {
      __name(this, "GetObjectTaggingCommand");
    }
  };
  var GetObjectTorrentCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectTorrent", {}).n("S3Client", "GetObjectTorrentCommand").f(undefined, GetObjectTorrentOutputFilterSensitiveLog).ser(se_GetObjectTorrentCommand).de(de_GetObjectTorrentCommand).build() {
    static {
      __name(this, "GetObjectTorrentCommand");
    }
  };
  var import_middleware_sdk_s339 = require_dist_cjs67();
  var GetPublicAccessBlockCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s339.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "GetPublicAccessBlock", {}).n("S3Client", "GetPublicAccessBlockCommand").f(undefined, undefined).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
    static {
      __name(this, "GetPublicAccessBlockCommand");
    }
  };
  var import_middleware_sdk_s340 = require_dist_cjs67();
  var HeadBucketCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s340.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "HeadBucket", {}).n("S3Client", "HeadBucketCommand").f(undefined, undefined).ser(se_HeadBucketCommand).de(de_HeadBucketCommand).build() {
    static {
      __name(this, "HeadBucketCommand");
    }
  };
  var import_middleware_sdk_s341 = require_dist_cjs67();
  var HeadObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s341.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_sdk_s341.getS3ExpiresMiddlewarePlugin)(config)
    ];
  }).s("AmazonS3", "HeadObject", {}).n("S3Client", "HeadObjectCommand").f(HeadObjectRequestFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog).ser(se_HeadObjectCommand).de(de_HeadObjectCommand).build() {
    static {
      __name(this, "HeadObjectCommand");
    }
  };
  var import_middleware_sdk_s342 = require_dist_cjs67();
  var ListBucketAnalyticsConfigurationsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s342.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListBucketAnalyticsConfigurations", {}).n("S3Client", "ListBucketAnalyticsConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketAnalyticsConfigurationsCommand).de(de_ListBucketAnalyticsConfigurationsCommand).build() {
    static {
      __name(this, "ListBucketAnalyticsConfigurationsCommand");
    }
  };
  var import_middleware_sdk_s343 = require_dist_cjs67();
  var ListBucketIntelligentTieringConfigurationsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s343.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListBucketIntelligentTieringConfigurations", {}).n("S3Client", "ListBucketIntelligentTieringConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketIntelligentTieringConfigurationsCommand).de(de_ListBucketIntelligentTieringConfigurationsCommand).build() {
    static {
      __name(this, "ListBucketIntelligentTieringConfigurationsCommand");
    }
  };
  var import_middleware_sdk_s344 = require_dist_cjs67();
  var ListBucketInventoryConfigurationsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s344.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListBucketInventoryConfigurations", {}).n("S3Client", "ListBucketInventoryConfigurationsCommand").f(undefined, ListBucketInventoryConfigurationsOutputFilterSensitiveLog).ser(se_ListBucketInventoryConfigurationsCommand).de(de_ListBucketInventoryConfigurationsCommand).build() {
    static {
      __name(this, "ListBucketInventoryConfigurationsCommand");
    }
  };
  var import_middleware_sdk_s345 = require_dist_cjs67();
  var ListBucketMetricsConfigurationsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s345.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListBucketMetricsConfigurations", {}).n("S3Client", "ListBucketMetricsConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketMetricsConfigurationsCommand).de(de_ListBucketMetricsConfigurationsCommand).build() {
    static {
      __name(this, "ListBucketMetricsConfigurationsCommand");
    }
  };
  var import_middleware_sdk_s346 = require_dist_cjs67();
  var ListBucketsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s346.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListBuckets", {}).n("S3Client", "ListBucketsCommand").f(undefined, undefined).ser(se_ListBucketsCommand).de(de_ListBucketsCommand).build() {
    static {
      __name(this, "ListBucketsCommand");
    }
  };
  var import_middleware_sdk_s347 = require_dist_cjs67();
  var ListDirectoryBucketsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s347.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListDirectoryBuckets", {}).n("S3Client", "ListDirectoryBucketsCommand").f(undefined, undefined).ser(se_ListDirectoryBucketsCommand).de(de_ListDirectoryBucketsCommand).build() {
    static {
      __name(this, "ListDirectoryBucketsCommand");
    }
  };
  var import_middleware_sdk_s348 = require_dist_cjs67();
  var ListMultipartUploadsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s348.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListMultipartUploads", {}).n("S3Client", "ListMultipartUploadsCommand").f(undefined, undefined).ser(se_ListMultipartUploadsCommand).de(de_ListMultipartUploadsCommand).build() {
    static {
      __name(this, "ListMultipartUploadsCommand");
    }
  };
  var import_middleware_sdk_s349 = require_dist_cjs67();
  var ListObjectsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s349.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListObjects", {}).n("S3Client", "ListObjectsCommand").f(undefined, undefined).ser(se_ListObjectsCommand).de(de_ListObjectsCommand).build() {
    static {
      __name(this, "ListObjectsCommand");
    }
  };
  var import_middleware_sdk_s350 = require_dist_cjs67();
  var ListObjectsV2Command = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s350.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListObjectsV2", {}).n("S3Client", "ListObjectsV2Command").f(undefined, undefined).ser(se_ListObjectsV2Command).de(de_ListObjectsV2Command).build() {
    static {
      __name(this, "ListObjectsV2Command");
    }
  };
  var import_middleware_sdk_s351 = require_dist_cjs67();
  var ListObjectVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s351.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "ListObjectVersions", {}).n("S3Client", "ListObjectVersionsCommand").f(undefined, undefined).ser(se_ListObjectVersionsCommand).de(de_ListObjectVersionsCommand).build() {
    static {
      __name(this, "ListObjectVersionsCommand");
    }
  };
  var import_middleware_sdk_s352 = require_dist_cjs67();
  var ListPartsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s352.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "ListParts", {}).n("S3Client", "ListPartsCommand").f(ListPartsRequestFilterSensitiveLog, undefined).ser(se_ListPartsCommand).de(de_ListPartsCommand).build() {
    static {
      __name(this, "ListPartsCommand");
    }
  };
  var PutBucketAccelerateConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: false
      })
    ];
  }).s("AmazonS3", "PutBucketAccelerateConfiguration", {}).n("S3Client", "PutBucketAccelerateConfigurationCommand").f(undefined, undefined).ser(se_PutBucketAccelerateConfigurationCommand).de(de_PutBucketAccelerateConfigurationCommand).build() {
    static {
      __name(this, "PutBucketAccelerateConfigurationCommand");
    }
  };
  var PutBucketAclCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketAcl", {}).n("S3Client", "PutBucketAclCommand").f(undefined, undefined).ser(se_PutBucketAclCommand).de(de_PutBucketAclCommand).build() {
    static {
      __name(this, "PutBucketAclCommand");
    }
  };
  var PutBucketAnalyticsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketAnalyticsConfiguration", {}).n("S3Client", "PutBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_PutBucketAnalyticsConfigurationCommand).de(de_PutBucketAnalyticsConfigurationCommand).build() {
    static {
      __name(this, "PutBucketAnalyticsConfigurationCommand");
    }
  };
  var PutBucketCorsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketCors", {}).n("S3Client", "PutBucketCorsCommand").f(undefined, undefined).ser(se_PutBucketCorsCommand).de(de_PutBucketCorsCommand).build() {
    static {
      __name(this, "PutBucketCorsCommand");
    }
  };
  var PutBucketEncryptionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketEncryption", {}).n("S3Client", "PutBucketEncryptionCommand").f(PutBucketEncryptionRequestFilterSensitiveLog, undefined).ser(se_PutBucketEncryptionCommand).de(de_PutBucketEncryptionCommand).build() {
    static {
      __name(this, "PutBucketEncryptionCommand");
    }
  };
  var PutBucketIntelligentTieringConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketIntelligentTieringConfiguration", {}).n("S3Client", "PutBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_PutBucketIntelligentTieringConfigurationCommand).de(de_PutBucketIntelligentTieringConfigurationCommand).build() {
    static {
      __name(this, "PutBucketIntelligentTieringConfigurationCommand");
    }
  };
  var PutBucketInventoryConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketInventoryConfiguration", {}).n("S3Client", "PutBucketInventoryConfigurationCommand").f(PutBucketInventoryConfigurationRequestFilterSensitiveLog, undefined).ser(se_PutBucketInventoryConfigurationCommand).de(de_PutBucketInventoryConfigurationCommand).build() {
    static {
      __name(this, "PutBucketInventoryConfigurationCommand");
    }
  };
  var import_middleware_sdk_s353 = require_dist_cjs67();
  var PutBucketLifecycleConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s353.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutBucketLifecycleConfiguration", {}).n("S3Client", "PutBucketLifecycleConfigurationCommand").f(undefined, undefined).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
    static {
      __name(this, "PutBucketLifecycleConfigurationCommand");
    }
  };
  var PutBucketLoggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketLogging", {}).n("S3Client", "PutBucketLoggingCommand").f(undefined, undefined).ser(se_PutBucketLoggingCommand).de(de_PutBucketLoggingCommand).build() {
    static {
      __name(this, "PutBucketLoggingCommand");
    }
  };
  var PutBucketMetricsConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketMetricsConfiguration", {}).n("S3Client", "PutBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_PutBucketMetricsConfigurationCommand).de(de_PutBucketMetricsConfigurationCommand).build() {
    static {
      __name(this, "PutBucketMetricsConfigurationCommand");
    }
  };
  var PutBucketNotificationConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketNotificationConfiguration", {}).n("S3Client", "PutBucketNotificationConfigurationCommand").f(undefined, undefined).ser(se_PutBucketNotificationConfigurationCommand).de(de_PutBucketNotificationConfigurationCommand).build() {
    static {
      __name(this, "PutBucketNotificationConfigurationCommand");
    }
  };
  var PutBucketOwnershipControlsCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketOwnershipControls", {}).n("S3Client", "PutBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_PutBucketOwnershipControlsCommand).de(de_PutBucketOwnershipControlsCommand).build() {
    static {
      __name(this, "PutBucketOwnershipControlsCommand");
    }
  };
  var PutBucketPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketPolicy", {}).n("S3Client", "PutBucketPolicyCommand").f(undefined, undefined).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
    static {
      __name(this, "PutBucketPolicyCommand");
    }
  };
  var PutBucketReplicationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketReplication", {}).n("S3Client", "PutBucketReplicationCommand").f(undefined, undefined).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
    static {
      __name(this, "PutBucketReplicationCommand");
    }
  };
  var PutBucketRequestPaymentCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketRequestPayment", {}).n("S3Client", "PutBucketRequestPaymentCommand").f(undefined, undefined).ser(se_PutBucketRequestPaymentCommand).de(de_PutBucketRequestPaymentCommand).build() {
    static {
      __name(this, "PutBucketRequestPaymentCommand");
    }
  };
  var PutBucketTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketTagging", {}).n("S3Client", "PutBucketTaggingCommand").f(undefined, undefined).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
    static {
      __name(this, "PutBucketTaggingCommand");
    }
  };
  var PutBucketVersioningCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketVersioning", {}).n("S3Client", "PutBucketVersioningCommand").f(undefined, undefined).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
    static {
      __name(this, "PutBucketVersioningCommand");
    }
  };
  var PutBucketWebsiteCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketWebsite", {}).n("S3Client", "PutBucketWebsiteCommand").f(undefined, undefined).ser(se_PutBucketWebsiteCommand).de(de_PutBucketWebsiteCommand).build() {
    static {
      __name(this, "PutBucketWebsiteCommand");
    }
  };
  var import_middleware_sdk_s354 = require_dist_cjs67();
  var PutObjectAclCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s354.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutObjectAcl", {}).n("S3Client", "PutObjectAclCommand").f(undefined, undefined).ser(se_PutObjectAclCommand).de(de_PutObjectAclCommand).build() {
    static {
      __name(this, "PutObjectAclCommand");
    }
  };
  var import_middleware_sdk_s355 = require_dist_cjs67();
  var PutObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: false
      }),
      (0, import_middleware_sdk_s355.getCheckContentLengthHeaderPlugin)(config),
      (0, import_middleware_sdk_s355.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "PutObject", {}).n("S3Client", "PutObjectCommand").f(PutObjectRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog).ser(se_PutObjectCommand).de(de_PutObjectCommand).build() {
    static {
      __name(this, "PutObjectCommand");
    }
  };
  var import_middleware_sdk_s356 = require_dist_cjs67();
  var PutObjectLegalHoldCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s356.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutObjectLegalHold", {}).n("S3Client", "PutObjectLegalHoldCommand").f(undefined, undefined).ser(se_PutObjectLegalHoldCommand).de(de_PutObjectLegalHoldCommand).build() {
    static {
      __name(this, "PutObjectLegalHoldCommand");
    }
  };
  var import_middleware_sdk_s357 = require_dist_cjs67();
  var PutObjectLockConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s357.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutObjectLockConfiguration", {}).n("S3Client", "PutObjectLockConfigurationCommand").f(undefined, undefined).ser(se_PutObjectLockConfigurationCommand).de(de_PutObjectLockConfigurationCommand).build() {
    static {
      __name(this, "PutObjectLockConfigurationCommand");
    }
  };
  var import_middleware_sdk_s358 = require_dist_cjs67();
  var PutObjectRetentionCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s358.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutObjectRetention", {}).n("S3Client", "PutObjectRetentionCommand").f(undefined, undefined).ser(se_PutObjectRetentionCommand).de(de_PutObjectRetentionCommand).build() {
    static {
      __name(this, "PutObjectRetentionCommand");
    }
  };
  var import_middleware_sdk_s359 = require_dist_cjs67();
  var PutObjectTaggingCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      }),
      (0, import_middleware_sdk_s359.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "PutObjectTagging", {}).n("S3Client", "PutObjectTaggingCommand").f(undefined, undefined).ser(se_PutObjectTaggingCommand).de(de_PutObjectTaggingCommand).build() {
    static {
      __name(this, "PutObjectTaggingCommand");
    }
  };
  var PutPublicAccessBlockCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutPublicAccessBlock", {}).n("S3Client", "PutPublicAccessBlockCommand").f(undefined, undefined).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
    static {
      __name(this, "PutPublicAccessBlockCommand");
    }
  };
  var import_middleware_sdk_s360 = require_dist_cjs67();
  var RestoreObjectCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: false
      }),
      (0, import_middleware_sdk_s360.getThrow200ExceptionsPlugin)(config)
    ];
  }).s("AmazonS3", "RestoreObject", {}).n("S3Client", "RestoreObjectCommand").f(RestoreObjectRequestFilterSensitiveLog, undefined).ser(se_RestoreObjectCommand).de(de_RestoreObjectCommand).build() {
    static {
      __name(this, "RestoreObjectCommand");
    }
  };
  var import_middleware_sdk_s361 = require_dist_cjs67();
  var SelectObjectContentCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s361.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "SelectObjectContent", {
    eventStream: {
      output: true
    }
  }).n("S3Client", "SelectObjectContentCommand").f(SelectObjectContentRequestFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog).ser(se_SelectObjectContentCommand).de(de_SelectObjectContentCommand).build() {
    static {
      __name(this, "SelectObjectContentCommand");
    }
  };
  var import_middleware_sdk_s362 = require_dist_cjs67();
  var UploadPartCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
        requestChecksumRequired: false
      }),
      (0, import_middleware_sdk_s362.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "UploadPart", {}).n("S3Client", "UploadPartCommand").f(UploadPartRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog).ser(se_UploadPartCommand).de(de_UploadPartCommand).build() {
    static {
      __name(this, "UploadPartCommand");
    }
  };
  var import_middleware_sdk_s363 = require_dist_cjs67();
  var UploadPartCopyCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s363.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "UploadPartCopy", {}).n("S3Client", "UploadPartCopyCommand").f(UploadPartCopyRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog).ser(se_UploadPartCopyCommand).de(de_UploadPartCopyCommand).build() {
    static {
      __name(this, "UploadPartCopyCommand");
    }
  };
  var WriteGetObjectResponseCommand = class extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseObjectLambdaEndpoint: { type: "staticContextParams", value: true }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "WriteGetObjectResponse", {}).n("S3Client", "WriteGetObjectResponseCommand").f(WriteGetObjectResponseRequestFilterSensitiveLog, undefined).ser(se_WriteGetObjectResponseCommand).de(de_WriteGetObjectResponseCommand).build() {
    static {
      __name(this, "WriteGetObjectResponseCommand");
    }
  };
  var commands = {
    AbortMultipartUploadCommand,
    CompleteMultipartUploadCommand,
    CopyObjectCommand,
    CreateBucketCommand,
    CreateBucketMetadataTableConfigurationCommand,
    CreateMultipartUploadCommand,
    CreateSessionCommand,
    DeleteBucketCommand,
    DeleteBucketAnalyticsConfigurationCommand,
    DeleteBucketCorsCommand,
    DeleteBucketEncryptionCommand,
    DeleteBucketIntelligentTieringConfigurationCommand,
    DeleteBucketInventoryConfigurationCommand,
    DeleteBucketLifecycleCommand,
    DeleteBucketMetadataTableConfigurationCommand,
    DeleteBucketMetricsConfigurationCommand,
    DeleteBucketOwnershipControlsCommand,
    DeleteBucketPolicyCommand,
    DeleteBucketReplicationCommand,
    DeleteBucketTaggingCommand,
    DeleteBucketWebsiteCommand,
    DeleteObjectCommand,
    DeleteObjectsCommand,
    DeleteObjectTaggingCommand,
    DeletePublicAccessBlockCommand,
    GetBucketAccelerateConfigurationCommand,
    GetBucketAclCommand,
    GetBucketAnalyticsConfigurationCommand,
    GetBucketCorsCommand,
    GetBucketEncryptionCommand,
    GetBucketIntelligentTieringConfigurationCommand,
    GetBucketInventoryConfigurationCommand,
    GetBucketLifecycleConfigurationCommand,
    GetBucketLocationCommand,
    GetBucketLoggingCommand,
    GetBucketMetadataTableConfigurationCommand,
    GetBucketMetricsConfigurationCommand,
    GetBucketNotificationConfigurationCommand,
    GetBucketOwnershipControlsCommand,
    GetBucketPolicyCommand,
    GetBucketPolicyStatusCommand,
    GetBucketReplicationCommand,
    GetBucketRequestPaymentCommand,
    GetBucketTaggingCommand,
    GetBucketVersioningCommand,
    GetBucketWebsiteCommand,
    GetObjectCommand,
    GetObjectAclCommand,
    GetObjectAttributesCommand,
    GetObjectLegalHoldCommand,
    GetObjectLockConfigurationCommand,
    GetObjectRetentionCommand,
    GetObjectTaggingCommand,
    GetObjectTorrentCommand,
    GetPublicAccessBlockCommand,
    HeadBucketCommand,
    HeadObjectCommand,
    ListBucketAnalyticsConfigurationsCommand,
    ListBucketIntelligentTieringConfigurationsCommand,
    ListBucketInventoryConfigurationsCommand,
    ListBucketMetricsConfigurationsCommand,
    ListBucketsCommand,
    ListDirectoryBucketsCommand,
    ListMultipartUploadsCommand,
    ListObjectsCommand,
    ListObjectsV2Command,
    ListObjectVersionsCommand,
    ListPartsCommand,
    PutBucketAccelerateConfigurationCommand,
    PutBucketAclCommand,
    PutBucketAnalyticsConfigurationCommand,
    PutBucketCorsCommand,
    PutBucketEncryptionCommand,
    PutBucketIntelligentTieringConfigurationCommand,
    PutBucketInventoryConfigurationCommand,
    PutBucketLifecycleConfigurationCommand,
    PutBucketLoggingCommand,
    PutBucketMetricsConfigurationCommand,
    PutBucketNotificationConfigurationCommand,
    PutBucketOwnershipControlsCommand,
    PutBucketPolicyCommand,
    PutBucketReplicationCommand,
    PutBucketRequestPaymentCommand,
    PutBucketTaggingCommand,
    PutBucketVersioningCommand,
    PutBucketWebsiteCommand,
    PutObjectCommand,
    PutObjectAclCommand,
    PutObjectLegalHoldCommand,
    PutObjectLockConfigurationCommand,
    PutObjectRetentionCommand,
    PutObjectTaggingCommand,
    PutPublicAccessBlockCommand,
    RestoreObjectCommand,
    SelectObjectContentCommand,
    UploadPartCommand,
    UploadPartCopyCommand,
    WriteGetObjectResponseCommand
  };
  var S3 = class extends S3Client {
    static {
      __name(this, "S3");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, S3);
  var import_core4 = require_dist_cjs18();
  var paginateListBuckets = (0, import_core4.createPaginator)(S3Client, ListBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxBuckets");
  var import_core5 = require_dist_cjs18();
  var paginateListDirectoryBuckets = (0, import_core5.createPaginator)(S3Client, ListDirectoryBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxDirectoryBuckets");
  var import_core6 = require_dist_cjs18();
  var paginateListObjectsV2 = (0, import_core6.createPaginator)(S3Client, ListObjectsV2Command, "ContinuationToken", "NextContinuationToken", "MaxKeys");
  var import_core7 = require_dist_cjs18();
  var paginateListParts = (0, import_core7.createPaginator)(S3Client, ListPartsCommand, "PartNumberMarker", "NextPartNumberMarker", "MaxParts");
  var import_util_waiter = require_dist_cjs61();
  var checkState = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadBucketCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForBucketExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  }, "waitForBucketExists");
  var waitUntilBucketExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilBucketExists");
  var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadBucketCommand(input));
      reason = result;
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForBucketNotExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  }, "waitForBucketNotExists");
  var waitUntilBucketNotExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilBucketNotExists");
  var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadObjectCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForObjectExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  }, "waitForObjectExists");
  var waitUntilObjectExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilObjectExists");
  var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadObjectCommand(input));
      reason = result;
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForObjectNotExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  }, "waitForObjectNotExists");
  var waitUntilObjectNotExists = /* @__PURE__ */ __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilObjectNotExists");
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.defaultServiceQuotasHttpAuthSchemeProvider = exports.defaultServiceQuotasHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var defaultServiceQuotasHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultServiceQuotasHttpAuthSchemeParametersProvider = defaultServiceQuotasHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "servicequotas",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  var defaultServiceQuotasHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultServiceQuotasHttpAuthSchemeProvider = defaultServiceQuotasHttpAuthSchemeProvider;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
    return Object.assign(config_0, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/package.json
var require_package7 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-service-quotas",
    description: "AWS SDK for JavaScript Service Quotas Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-service-quotas",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo service-quotas"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-service-quotas",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-service-quotas"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/endpoint/ruleset.js
var require_ruleset8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var u = "required";
  var v = "fn";
  var w = "argv";
  var x = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "getAttr";
  var i = { [u]: false, type: "String" };
  var j = { [u]: true, default: false, type: "Boolean" };
  var k = { [x]: "Endpoint" };
  var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
  var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
  var n = {};
  var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
  var p = { [x]: g };
  var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
  var r = [l];
  var s = [m];
  var t = [{ [x]: "Region" }];
  var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://servicequotas-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://servicequotas.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://servicequotas-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://servicequotas.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://servicequotas.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset8();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider8();
  var endpointResolver_1 = require_endpointResolver8();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2019-06-24",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultServiceQuotasHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "Service Quotas",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/runtimeConfig.js
var require_runtimeConfig8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package7());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared8();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-service-quotas@3.787.0/node_modules/@aws-sdk/client-service-quotas/dist-cjs/index.js
var require_dist_cjs75 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AWSServiceAccessNotEnabledException: () => AWSServiceAccessNotEnabledException,
    AccessDeniedException: () => AccessDeniedException,
    AppliedLevelEnum: () => AppliedLevelEnum,
    AssociateServiceQuotaTemplateCommand: () => AssociateServiceQuotaTemplateCommand,
    DeleteServiceQuotaIncreaseRequestFromTemplateCommand: () => DeleteServiceQuotaIncreaseRequestFromTemplateCommand,
    DependencyAccessDeniedException: () => DependencyAccessDeniedException,
    DisassociateServiceQuotaTemplateCommand: () => DisassociateServiceQuotaTemplateCommand,
    ErrorCode: () => ErrorCode,
    GetAWSDefaultServiceQuotaCommand: () => GetAWSDefaultServiceQuotaCommand,
    GetAssociationForServiceQuotaTemplateCommand: () => GetAssociationForServiceQuotaTemplateCommand,
    GetRequestedServiceQuotaChangeCommand: () => GetRequestedServiceQuotaChangeCommand,
    GetServiceQuotaCommand: () => GetServiceQuotaCommand,
    GetServiceQuotaIncreaseRequestFromTemplateCommand: () => GetServiceQuotaIncreaseRequestFromTemplateCommand,
    IllegalArgumentException: () => IllegalArgumentException,
    InvalidPaginationTokenException: () => InvalidPaginationTokenException,
    InvalidResourceStateException: () => InvalidResourceStateException,
    ListAWSDefaultServiceQuotasCommand: () => ListAWSDefaultServiceQuotasCommand,
    ListRequestedServiceQuotaChangeHistoryByQuotaCommand: () => ListRequestedServiceQuotaChangeHistoryByQuotaCommand,
    ListRequestedServiceQuotaChangeHistoryCommand: () => ListRequestedServiceQuotaChangeHistoryCommand,
    ListServiceQuotaIncreaseRequestsInTemplateCommand: () => ListServiceQuotaIncreaseRequestsInTemplateCommand,
    ListServiceQuotasCommand: () => ListServiceQuotasCommand,
    ListServicesCommand: () => ListServicesCommand,
    ListTagsForResourceCommand: () => ListTagsForResourceCommand,
    NoAvailableOrganizationException: () => NoAvailableOrganizationException,
    NoSuchResourceException: () => NoSuchResourceException,
    OrganizationNotInAllFeaturesModeException: () => OrganizationNotInAllFeaturesModeException,
    PeriodUnit: () => PeriodUnit,
    PutServiceQuotaIncreaseRequestIntoTemplateCommand: () => PutServiceQuotaIncreaseRequestIntoTemplateCommand,
    QuotaContextScope: () => QuotaContextScope,
    QuotaExceededException: () => QuotaExceededException,
    RequestServiceQuotaIncreaseCommand: () => RequestServiceQuotaIncreaseCommand,
    RequestStatus: () => RequestStatus,
    ResourceAlreadyExistsException: () => ResourceAlreadyExistsException,
    ServiceException: () => ServiceException,
    ServiceQuotaTemplateAssociationStatus: () => ServiceQuotaTemplateAssociationStatus,
    ServiceQuotaTemplateNotInUseException: () => ServiceQuotaTemplateNotInUseException,
    ServiceQuotas: () => ServiceQuotas,
    ServiceQuotasClient: () => ServiceQuotasClient,
    ServiceQuotasServiceException: () => ServiceQuotasServiceException,
    TagPolicyViolationException: () => TagPolicyViolationException,
    TagResourceCommand: () => TagResourceCommand,
    TemplatesNotAvailableInRegionException: () => TemplatesNotAvailableInRegionException,
    TooManyRequestsException: () => TooManyRequestsException,
    TooManyTagsException: () => TooManyTagsException,
    UntagResourceCommand: () => UntagResourceCommand,
    __Client: () => import_smithy_client.Client,
    paginateListAWSDefaultServiceQuotas: () => paginateListAWSDefaultServiceQuotas,
    paginateListRequestedServiceQuotaChangeHistory: () => paginateListRequestedServiceQuotaChangeHistory,
    paginateListRequestedServiceQuotaChangeHistoryByQuota: () => paginateListRequestedServiceQuotaChangeHistoryByQuota,
    paginateListServiceQuotaIncreaseRequestsInTemplate: () => paginateListServiceQuotaIncreaseRequestsInTemplate,
    paginateListServiceQuotas: () => paginateListServiceQuotas,
    paginateListServices: () => paginateListServices
  });
  module.exports = __toCommonJS(index_exports);
  var import_middleware_host_header = require_dist_cjs3();
  var import_middleware_logger = require_dist_cjs4();
  var import_middleware_recursion_detection = require_dist_cjs5();
  var import_middleware_user_agent = require_dist_cjs26();
  var import_config_resolver = require_dist_cjs28();
  var import_core = require_dist_cjs18();
  var import_middleware_content_length = require_dist_cjs30();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_retry = require_dist_cjs38();
  var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider8();
  var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "servicequotas"
    });
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig8();
  var import_region_config_resolver = require_dist_cjs46();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs24();
  var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  }, "getHttpAuthExtensionConfiguration");
  var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  }, "resolveHttpAuthRuntimeConfig");
  var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
  }, "resolveRuntimeExtensions");
  var ServiceQuotasClient = class extends import_smithy_client.Client {
    static {
      __name(this, "ServiceQuotasClient");
    }
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
      const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultServiceQuotasHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      }));
      this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  var import_middleware_serde = require_dist_cjs7();
  var import_core2 = require_dist_cjs25();
  var ServiceQuotasServiceException = class _ServiceQuotasServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "ServiceQuotasServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _ServiceQuotasServiceException.prototype);
    }
  };
  var AccessDeniedException = class _AccessDeniedException extends ServiceQuotasServiceException {
    static {
      __name(this, "AccessDeniedException");
    }
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "AccessDeniedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AccessDeniedException.prototype);
      this.Message = opts.Message;
    }
  };
  var AppliedLevelEnum = {
    ACCOUNT: "ACCOUNT",
    ALL: "ALL",
    RESOURCE: "RESOURCE"
  };
  var AWSServiceAccessNotEnabledException = class _AWSServiceAccessNotEnabledException extends ServiceQuotasServiceException {
    static {
      __name(this, "AWSServiceAccessNotEnabledException");
    }
    name = "AWSServiceAccessNotEnabledException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "AWSServiceAccessNotEnabledException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _AWSServiceAccessNotEnabledException.prototype);
      this.Message = opts.Message;
    }
  };
  var DependencyAccessDeniedException = class _DependencyAccessDeniedException extends ServiceQuotasServiceException {
    static {
      __name(this, "DependencyAccessDeniedException");
    }
    name = "DependencyAccessDeniedException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "DependencyAccessDeniedException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _DependencyAccessDeniedException.prototype);
      this.Message = opts.Message;
    }
  };
  var NoAvailableOrganizationException = class _NoAvailableOrganizationException extends ServiceQuotasServiceException {
    static {
      __name(this, "NoAvailableOrganizationException");
    }
    name = "NoAvailableOrganizationException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "NoAvailableOrganizationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoAvailableOrganizationException.prototype);
      this.Message = opts.Message;
    }
  };
  var OrganizationNotInAllFeaturesModeException = class _OrganizationNotInAllFeaturesModeException extends ServiceQuotasServiceException {
    static {
      __name(this, "OrganizationNotInAllFeaturesModeException");
    }
    name = "OrganizationNotInAllFeaturesModeException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "OrganizationNotInAllFeaturesModeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _OrganizationNotInAllFeaturesModeException.prototype);
      this.Message = opts.Message;
    }
  };
  var ServiceException = class _ServiceException extends ServiceQuotasServiceException {
    static {
      __name(this, "ServiceException");
    }
    name = "ServiceException";
    $fault = "server";
    Message;
    constructor(opts) {
      super({
        name: "ServiceException",
        $fault: "server",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceException.prototype);
      this.Message = opts.Message;
    }
  };
  var TemplatesNotAvailableInRegionException = class _TemplatesNotAvailableInRegionException extends ServiceQuotasServiceException {
    static {
      __name(this, "TemplatesNotAvailableInRegionException");
    }
    name = "TemplatesNotAvailableInRegionException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "TemplatesNotAvailableInRegionException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TemplatesNotAvailableInRegionException.prototype);
      this.Message = opts.Message;
    }
  };
  var TooManyRequestsException = class _TooManyRequestsException extends ServiceQuotasServiceException {
    static {
      __name(this, "TooManyRequestsException");
    }
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "TooManyRequestsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      this.Message = opts.Message;
    }
  };
  var IllegalArgumentException = class _IllegalArgumentException extends ServiceQuotasServiceException {
    static {
      __name(this, "IllegalArgumentException");
    }
    name = "IllegalArgumentException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "IllegalArgumentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _IllegalArgumentException.prototype);
      this.Message = opts.Message;
    }
  };
  var NoSuchResourceException = class _NoSuchResourceException extends ServiceQuotasServiceException {
    static {
      __name(this, "NoSuchResourceException");
    }
    name = "NoSuchResourceException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "NoSuchResourceException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _NoSuchResourceException.prototype);
      this.Message = opts.Message;
    }
  };
  var ServiceQuotaTemplateNotInUseException = class _ServiceQuotaTemplateNotInUseException extends ServiceQuotasServiceException {
    static {
      __name(this, "ServiceQuotaTemplateNotInUseException");
    }
    name = "ServiceQuotaTemplateNotInUseException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "ServiceQuotaTemplateNotInUseException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ServiceQuotaTemplateNotInUseException.prototype);
      this.Message = opts.Message;
    }
  };
  var ErrorCode = {
    DEPENDENCY_ACCESS_DENIED_ERROR: "DEPENDENCY_ACCESS_DENIED_ERROR",
    DEPENDENCY_SERVICE_ERROR: "DEPENDENCY_SERVICE_ERROR",
    DEPENDENCY_THROTTLING_ERROR: "DEPENDENCY_THROTTLING_ERROR",
    SERVICE_QUOTA_NOT_AVAILABLE_ERROR: "SERVICE_QUOTA_NOT_AVAILABLE_ERROR"
  };
  var ServiceQuotaTemplateAssociationStatus = {
    ASSOCIATED: "ASSOCIATED",
    DISASSOCIATED: "DISASSOCIATED"
  };
  var PeriodUnit = {
    DAY: "DAY",
    HOUR: "HOUR",
    MICROSECOND: "MICROSECOND",
    MILLISECOND: "MILLISECOND",
    MINUTE: "MINUTE",
    SECOND: "SECOND",
    WEEK: "WEEK"
  };
  var QuotaContextScope = {
    ACCOUNT: "ACCOUNT",
    RESOURCE: "RESOURCE"
  };
  var RequestStatus = {
    APPROVED: "APPROVED",
    CASE_CLOSED: "CASE_CLOSED",
    CASE_OPENED: "CASE_OPENED",
    DENIED: "DENIED",
    INVALID_REQUEST: "INVALID_REQUEST",
    NOT_APPROVED: "NOT_APPROVED",
    PENDING: "PENDING"
  };
  var InvalidPaginationTokenException = class _InvalidPaginationTokenException extends ServiceQuotasServiceException {
    static {
      __name(this, "InvalidPaginationTokenException");
    }
    name = "InvalidPaginationTokenException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "InvalidPaginationTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidPaginationTokenException.prototype);
      this.Message = opts.Message;
    }
  };
  var InvalidResourceStateException = class _InvalidResourceStateException extends ServiceQuotasServiceException {
    static {
      __name(this, "InvalidResourceStateException");
    }
    name = "InvalidResourceStateException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "InvalidResourceStateException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidResourceStateException.prototype);
      this.Message = opts.Message;
    }
  };
  var QuotaExceededException = class _QuotaExceededException extends ServiceQuotasServiceException {
    static {
      __name(this, "QuotaExceededException");
    }
    name = "QuotaExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "QuotaExceededException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _QuotaExceededException.prototype);
      this.Message = opts.Message;
    }
  };
  var ResourceAlreadyExistsException = class _ResourceAlreadyExistsException extends ServiceQuotasServiceException {
    static {
      __name(this, "ResourceAlreadyExistsException");
    }
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "ResourceAlreadyExistsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ResourceAlreadyExistsException.prototype);
      this.Message = opts.Message;
    }
  };
  var TagPolicyViolationException = class _TagPolicyViolationException extends ServiceQuotasServiceException {
    static {
      __name(this, "TagPolicyViolationException");
    }
    name = "TagPolicyViolationException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "TagPolicyViolationException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TagPolicyViolationException.prototype);
      this.Message = opts.Message;
    }
  };
  var TooManyTagsException = class _TooManyTagsException extends ServiceQuotasServiceException {
    static {
      __name(this, "TooManyTagsException");
    }
    name = "TooManyTagsException";
    $fault = "client";
    Message;
    constructor(opts) {
      super({
        name: "TooManyTagsException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _TooManyTagsException.prototype);
      this.Message = opts.Message;
    }
  };
  var se_AssociateServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("AssociateServiceQuotaTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssociateServiceQuotaTemplateCommand");
  var se_DeleteServiceQuotaIncreaseRequestFromTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DeleteServiceQuotaIncreaseRequestFromTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DeleteServiceQuotaIncreaseRequestFromTemplateCommand");
  var se_DisassociateServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("DisassociateServiceQuotaTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DisassociateServiceQuotaTemplateCommand");
  var se_GetAssociationForServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetAssociationForServiceQuotaTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAssociationForServiceQuotaTemplateCommand");
  var se_GetAWSDefaultServiceQuotaCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetAWSDefaultServiceQuota");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAWSDefaultServiceQuotaCommand");
  var se_GetRequestedServiceQuotaChangeCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetRequestedServiceQuotaChange");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetRequestedServiceQuotaChangeCommand");
  var se_GetServiceQuotaCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetServiceQuota");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServiceQuotaCommand");
  var se_GetServiceQuotaIncreaseRequestFromTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("GetServiceQuotaIncreaseRequestFromTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetServiceQuotaIncreaseRequestFromTemplateCommand");
  var se_ListAWSDefaultServiceQuotasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListAWSDefaultServiceQuotas");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListAWSDefaultServiceQuotasCommand");
  var se_ListRequestedServiceQuotaChangeHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListRequestedServiceQuotaChangeHistory");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListRequestedServiceQuotaChangeHistoryCommand");
  var se_ListRequestedServiceQuotaChangeHistoryByQuotaCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListRequestedServiceQuotaChangeHistoryByQuota");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListRequestedServiceQuotaChangeHistoryByQuotaCommand");
  var se_ListServiceQuotaIncreaseRequestsInTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListServiceQuotaIncreaseRequestsInTemplate");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServiceQuotaIncreaseRequestsInTemplateCommand");
  var se_ListServiceQuotasCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListServiceQuotas");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServiceQuotasCommand");
  var se_ListServicesCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListServicesCommand");
  var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_ListTagsForResourceCommand");
  var se_PutServiceQuotaIncreaseRequestIntoTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("PutServiceQuotaIncreaseRequestIntoTemplate");
    let body;
    body = JSON.stringify(se_PutServiceQuotaIncreaseRequestIntoTemplateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_PutServiceQuotaIncreaseRequestIntoTemplateCommand");
  var se_RequestServiceQuotaIncreaseCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("RequestServiceQuotaIncrease");
    let body;
    body = JSON.stringify(se_RequestServiceQuotaIncreaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_RequestServiceQuotaIncreaseCommand");
  var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_TagResourceCommand");
  var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, import_smithy_client._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_UntagResourceCommand");
  var de_AssociateServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssociateServiceQuotaTemplateCommand");
  var de_DeleteServiceQuotaIncreaseRequestFromTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DeleteServiceQuotaIncreaseRequestFromTemplateCommand");
  var de_DisassociateServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DisassociateServiceQuotaTemplateCommand");
  var de_GetAssociationForServiceQuotaTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAssociationForServiceQuotaTemplateCommand");
  var de_GetAWSDefaultServiceQuotaCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetAWSDefaultServiceQuotaResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAWSDefaultServiceQuotaCommand");
  var de_GetRequestedServiceQuotaChangeCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetRequestedServiceQuotaChangeResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetRequestedServiceQuotaChangeCommand");
  var de_GetServiceQuotaCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetServiceQuotaResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServiceQuotaCommand");
  var de_GetServiceQuotaIncreaseRequestFromTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_GetServiceQuotaIncreaseRequestFromTemplateResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetServiceQuotaIncreaseRequestFromTemplateCommand");
  var de_ListAWSDefaultServiceQuotasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListAWSDefaultServiceQuotasResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListAWSDefaultServiceQuotasCommand");
  var de_ListRequestedServiceQuotaChangeHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListRequestedServiceQuotaChangeHistoryResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListRequestedServiceQuotaChangeHistoryCommand");
  var de_ListRequestedServiceQuotaChangeHistoryByQuotaCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListRequestedServiceQuotaChangeHistoryByQuotaResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListRequestedServiceQuotaChangeHistoryByQuotaCommand");
  var de_ListServiceQuotaIncreaseRequestsInTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListServiceQuotaIncreaseRequestsInTemplateResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServiceQuotaIncreaseRequestsInTemplateCommand");
  var de_ListServiceQuotasCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_ListServiceQuotasResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServiceQuotasCommand");
  var de_ListServicesCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListServicesCommand");
  var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_ListTagsForResourceCommand");
  var de_PutServiceQuotaIncreaseRequestIntoTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_PutServiceQuotaIncreaseRequestIntoTemplateResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_PutServiceQuotaIncreaseRequestIntoTemplateCommand");
  var de_RequestServiceQuotaIncreaseCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = de_RequestServiceQuotaIncreaseResponse(data, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_RequestServiceQuotaIncreaseCommand");
  var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_TagResourceCommand");
  var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core2.parseJsonBody)(output.body, context);
    let contents = {};
    contents = (0, import_smithy_client._json)(data);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_UntagResourceCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
    };
    const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
      case "AWSServiceAccessNotEnabledException":
      case "com.amazonaws.servicequotas#AWSServiceAccessNotEnabledException":
        throw await de_AWSServiceAccessNotEnabledExceptionRes(parsedOutput, context);
      case "AccessDeniedException":
      case "com.amazonaws.servicequotas#AccessDeniedException":
        throw await de_AccessDeniedExceptionRes(parsedOutput, context);
      case "DependencyAccessDeniedException":
      case "com.amazonaws.servicequotas#DependencyAccessDeniedException":
        throw await de_DependencyAccessDeniedExceptionRes(parsedOutput, context);
      case "NoAvailableOrganizationException":
      case "com.amazonaws.servicequotas#NoAvailableOrganizationException":
        throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
      case "OrganizationNotInAllFeaturesModeException":
      case "com.amazonaws.servicequotas#OrganizationNotInAllFeaturesModeException":
        throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput, context);
      case "ServiceException":
      case "com.amazonaws.servicequotas#ServiceException":
        throw await de_ServiceExceptionRes(parsedOutput, context);
      case "TemplatesNotAvailableInRegionException":
      case "com.amazonaws.servicequotas#TemplatesNotAvailableInRegionException":
        throw await de_TemplatesNotAvailableInRegionExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.servicequotas#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "IllegalArgumentException":
      case "com.amazonaws.servicequotas#IllegalArgumentException":
        throw await de_IllegalArgumentExceptionRes(parsedOutput, context);
      case "NoSuchResourceException":
      case "com.amazonaws.servicequotas#NoSuchResourceException":
        throw await de_NoSuchResourceExceptionRes(parsedOutput, context);
      case "ServiceQuotaTemplateNotInUseException":
      case "com.amazonaws.servicequotas#ServiceQuotaTemplateNotInUseException":
        throw await de_ServiceQuotaTemplateNotInUseExceptionRes(parsedOutput, context);
      case "InvalidPaginationTokenException":
      case "com.amazonaws.servicequotas#InvalidPaginationTokenException":
        throw await de_InvalidPaginationTokenExceptionRes(parsedOutput, context);
      case "QuotaExceededException":
      case "com.amazonaws.servicequotas#QuotaExceededException":
        throw await de_QuotaExceededExceptionRes(parsedOutput, context);
      case "InvalidResourceStateException":
      case "com.amazonaws.servicequotas#InvalidResourceStateException":
        throw await de_InvalidResourceStateExceptionRes(parsedOutput, context);
      case "ResourceAlreadyExistsException":
      case "com.amazonaws.servicequotas#ResourceAlreadyExistsException":
        throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
      case "TagPolicyViolationException":
      case "com.amazonaws.servicequotas#TagPolicyViolationException":
        throw await de_TagPolicyViolationExceptionRes(parsedOutput, context);
      case "TooManyTagsException":
      case "com.amazonaws.servicequotas#TooManyTagsException":
        throw await de_TooManyTagsExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CommandError");
  var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new AccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_AccessDeniedExceptionRes");
  var de_AWSServiceAccessNotEnabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new AWSServiceAccessNotEnabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_AWSServiceAccessNotEnabledExceptionRes");
  var de_DependencyAccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new DependencyAccessDeniedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_DependencyAccessDeniedExceptionRes");
  var de_IllegalArgumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new IllegalArgumentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_IllegalArgumentExceptionRes");
  var de_InvalidPaginationTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new InvalidPaginationTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidPaginationTokenExceptionRes");
  var de_InvalidResourceStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new InvalidResourceStateException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidResourceStateExceptionRes");
  var de_NoAvailableOrganizationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new NoAvailableOrganizationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_NoAvailableOrganizationExceptionRes");
  var de_NoSuchResourceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new NoSuchResourceException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_NoSuchResourceExceptionRes");
  var de_OrganizationNotInAllFeaturesModeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new OrganizationNotInAllFeaturesModeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_OrganizationNotInAllFeaturesModeExceptionRes");
  var de_QuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new QuotaExceededException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_QuotaExceededExceptionRes");
  var de_ResourceAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ResourceAlreadyExistsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ResourceAlreadyExistsExceptionRes");
  var de_ServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ServiceException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceExceptionRes");
  var de_ServiceQuotaTemplateNotInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new ServiceQuotaTemplateNotInUseException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ServiceQuotaTemplateNotInUseExceptionRes");
  var de_TagPolicyViolationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new TagPolicyViolationException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_TagPolicyViolationExceptionRes");
  var de_TemplatesNotAvailableInRegionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new TemplatesNotAvailableInRegionException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_TemplatesNotAvailableInRegionExceptionRes");
  var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new TooManyRequestsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_TooManyRequestsExceptionRes");
  var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, import_smithy_client._json)(body);
    const exception = new TooManyTagsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_TooManyTagsExceptionRes");
  var se_PutServiceQuotaIncreaseRequestIntoTemplateRequest = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      AwsRegion: [],
      DesiredValue: import_smithy_client.serializeFloat,
      QuotaCode: [],
      ServiceCode: []
    });
  }, "se_PutServiceQuotaIncreaseRequestIntoTemplateRequest");
  var se_RequestServiceQuotaIncreaseRequest = /* @__PURE__ */ __name((input, context) => {
    return (0, import_smithy_client.take)(input, {
      ContextId: [],
      DesiredValue: import_smithy_client.serializeFloat,
      QuotaCode: [],
      ServiceCode: []
    });
  }, "se_RequestServiceQuotaIncreaseRequest");
  var de_GetAWSDefaultServiceQuotaResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      Quota: /* @__PURE__ */ __name((_) => de_ServiceQuota(_, context), "Quota")
    });
  }, "de_GetAWSDefaultServiceQuotaResponse");
  var de_GetRequestedServiceQuotaChangeResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      RequestedQuota: /* @__PURE__ */ __name((_) => de_RequestedServiceQuotaChange(_, context), "RequestedQuota")
    });
  }, "de_GetRequestedServiceQuotaChangeResponse");
  var de_GetServiceQuotaIncreaseRequestFromTemplateResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      ServiceQuotaIncreaseRequestInTemplate: /* @__PURE__ */ __name((_) => de_ServiceQuotaIncreaseRequestInTemplate(_, context), "ServiceQuotaIncreaseRequestInTemplate")
    });
  }, "de_GetServiceQuotaIncreaseRequestFromTemplateResponse");
  var de_GetServiceQuotaResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      Quota: /* @__PURE__ */ __name((_) => de_ServiceQuota(_, context), "Quota")
    });
  }, "de_GetServiceQuotaResponse");
  var de_ListAWSDefaultServiceQuotasResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      NextToken: import_smithy_client.expectString,
      Quotas: /* @__PURE__ */ __name((_) => de_ServiceQuotaListDefinition(_, context), "Quotas")
    });
  }, "de_ListAWSDefaultServiceQuotasResponse");
  var de_ListRequestedServiceQuotaChangeHistoryByQuotaResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      NextToken: import_smithy_client.expectString,
      RequestedQuotas: /* @__PURE__ */ __name((_) => de_RequestedServiceQuotaChangeHistoryListDefinition(_, context), "RequestedQuotas")
    });
  }, "de_ListRequestedServiceQuotaChangeHistoryByQuotaResponse");
  var de_ListRequestedServiceQuotaChangeHistoryResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      NextToken: import_smithy_client.expectString,
      RequestedQuotas: /* @__PURE__ */ __name((_) => de_RequestedServiceQuotaChangeHistoryListDefinition(_, context), "RequestedQuotas")
    });
  }, "de_ListRequestedServiceQuotaChangeHistoryResponse");
  var de_ListServiceQuotaIncreaseRequestsInTemplateResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      NextToken: import_smithy_client.expectString,
      ServiceQuotaIncreaseRequestInTemplateList: /* @__PURE__ */ __name((_) => de_ServiceQuotaIncreaseRequestInTemplateList(_, context), "ServiceQuotaIncreaseRequestInTemplateList")
    });
  }, "de_ListServiceQuotaIncreaseRequestsInTemplateResponse");
  var de_ListServiceQuotasResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      NextToken: import_smithy_client.expectString,
      Quotas: /* @__PURE__ */ __name((_) => de_ServiceQuotaListDefinition(_, context), "Quotas")
    });
  }, "de_ListServiceQuotasResponse");
  var de_PutServiceQuotaIncreaseRequestIntoTemplateResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      ServiceQuotaIncreaseRequestInTemplate: /* @__PURE__ */ __name((_) => de_ServiceQuotaIncreaseRequestInTemplate(_, context), "ServiceQuotaIncreaseRequestInTemplate")
    });
  }, "de_PutServiceQuotaIncreaseRequestIntoTemplateResponse");
  var de_RequestedServiceQuotaChange = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      CaseId: import_smithy_client.expectString,
      Created: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "Created"),
      DesiredValue: import_smithy_client.limitedParseDouble,
      GlobalQuota: import_smithy_client.expectBoolean,
      Id: import_smithy_client.expectString,
      LastUpdated: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastUpdated"),
      QuotaArn: import_smithy_client.expectString,
      QuotaCode: import_smithy_client.expectString,
      QuotaContext: import_smithy_client._json,
      QuotaName: import_smithy_client.expectString,
      QuotaRequestedAtLevel: import_smithy_client.expectString,
      Requester: import_smithy_client.expectString,
      ServiceCode: import_smithy_client.expectString,
      ServiceName: import_smithy_client.expectString,
      Status: import_smithy_client.expectString,
      Unit: import_smithy_client.expectString
    });
  }, "de_RequestedServiceQuotaChange");
  var de_RequestedServiceQuotaChangeHistoryListDefinition = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_RequestedServiceQuotaChange(entry, context);
    });
    return retVal;
  }, "de_RequestedServiceQuotaChangeHistoryListDefinition");
  var de_RequestServiceQuotaIncreaseResponse = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      RequestedQuota: /* @__PURE__ */ __name((_) => de_RequestedServiceQuotaChange(_, context), "RequestedQuota")
    });
  }, "de_RequestServiceQuotaIncreaseResponse");
  var de_ServiceQuota = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      Adjustable: import_smithy_client.expectBoolean,
      ErrorReason: import_smithy_client._json,
      GlobalQuota: import_smithy_client.expectBoolean,
      Period: import_smithy_client._json,
      QuotaAppliedAtLevel: import_smithy_client.expectString,
      QuotaArn: import_smithy_client.expectString,
      QuotaCode: import_smithy_client.expectString,
      QuotaContext: import_smithy_client._json,
      QuotaName: import_smithy_client.expectString,
      ServiceCode: import_smithy_client.expectString,
      ServiceName: import_smithy_client.expectString,
      Unit: import_smithy_client.expectString,
      UsageMetric: import_smithy_client._json,
      Value: import_smithy_client.limitedParseDouble
    });
  }, "de_ServiceQuota");
  var de_ServiceQuotaIncreaseRequestInTemplate = /* @__PURE__ */ __name((output, context) => {
    return (0, import_smithy_client.take)(output, {
      AwsRegion: import_smithy_client.expectString,
      DesiredValue: import_smithy_client.limitedParseDouble,
      GlobalQuota: import_smithy_client.expectBoolean,
      QuotaCode: import_smithy_client.expectString,
      QuotaName: import_smithy_client.expectString,
      ServiceCode: import_smithy_client.expectString,
      ServiceName: import_smithy_client.expectString,
      Unit: import_smithy_client.expectString
    });
  }, "de_ServiceQuotaIncreaseRequestInTemplate");
  var de_ServiceQuotaIncreaseRequestInTemplateList = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_ServiceQuotaIncreaseRequestInTemplate(entry, context);
    });
    return retVal;
  }, "de_ServiceQuotaIncreaseRequestInTemplateList");
  var de_ServiceQuotaListDefinition = /* @__PURE__ */ __name((output, context) => {
    const retVal = (output || []).filter((e) => e != null).map((entry) => {
      return de_ServiceQuota(entry, context);
    });
    return retVal;
  }, "de_ServiceQuotaListDefinition");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(ServiceQuotasServiceException);
  var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new import_protocol_http.HttpRequest(contents);
  }, "buildHttpRpcRequest");
  function sharedHeaders(operation) {
    return {
      "content-type": "application/x-amz-json-1.1",
      "x-amz-target": `ServiceQuotasV20190624.${operation}`
    };
  }
  __name(sharedHeaders, "sharedHeaders");
  var AssociateServiceQuotaTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "AssociateServiceQuotaTemplate", {}).n("ServiceQuotasClient", "AssociateServiceQuotaTemplateCommand").f(undefined, undefined).ser(se_AssociateServiceQuotaTemplateCommand).de(de_AssociateServiceQuotaTemplateCommand).build() {
    static {
      __name(this, "AssociateServiceQuotaTemplateCommand");
    }
  };
  var DeleteServiceQuotaIncreaseRequestFromTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "DeleteServiceQuotaIncreaseRequestFromTemplate", {}).n("ServiceQuotasClient", "DeleteServiceQuotaIncreaseRequestFromTemplateCommand").f(undefined, undefined).ser(se_DeleteServiceQuotaIncreaseRequestFromTemplateCommand).de(de_DeleteServiceQuotaIncreaseRequestFromTemplateCommand).build() {
    static {
      __name(this, "DeleteServiceQuotaIncreaseRequestFromTemplateCommand");
    }
  };
  var DisassociateServiceQuotaTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "DisassociateServiceQuotaTemplate", {}).n("ServiceQuotasClient", "DisassociateServiceQuotaTemplateCommand").f(undefined, undefined).ser(se_DisassociateServiceQuotaTemplateCommand).de(de_DisassociateServiceQuotaTemplateCommand).build() {
    static {
      __name(this, "DisassociateServiceQuotaTemplateCommand");
    }
  };
  var GetAssociationForServiceQuotaTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "GetAssociationForServiceQuotaTemplate", {}).n("ServiceQuotasClient", "GetAssociationForServiceQuotaTemplateCommand").f(undefined, undefined).ser(se_GetAssociationForServiceQuotaTemplateCommand).de(de_GetAssociationForServiceQuotaTemplateCommand).build() {
    static {
      __name(this, "GetAssociationForServiceQuotaTemplateCommand");
    }
  };
  var GetAWSDefaultServiceQuotaCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "GetAWSDefaultServiceQuota", {}).n("ServiceQuotasClient", "GetAWSDefaultServiceQuotaCommand").f(undefined, undefined).ser(se_GetAWSDefaultServiceQuotaCommand).de(de_GetAWSDefaultServiceQuotaCommand).build() {
    static {
      __name(this, "GetAWSDefaultServiceQuotaCommand");
    }
  };
  var GetRequestedServiceQuotaChangeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "GetRequestedServiceQuotaChange", {}).n("ServiceQuotasClient", "GetRequestedServiceQuotaChangeCommand").f(undefined, undefined).ser(se_GetRequestedServiceQuotaChangeCommand).de(de_GetRequestedServiceQuotaChangeCommand).build() {
    static {
      __name(this, "GetRequestedServiceQuotaChangeCommand");
    }
  };
  var GetServiceQuotaCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "GetServiceQuota", {}).n("ServiceQuotasClient", "GetServiceQuotaCommand").f(undefined, undefined).ser(se_GetServiceQuotaCommand).de(de_GetServiceQuotaCommand).build() {
    static {
      __name(this, "GetServiceQuotaCommand");
    }
  };
  var GetServiceQuotaIncreaseRequestFromTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "GetServiceQuotaIncreaseRequestFromTemplate", {}).n("ServiceQuotasClient", "GetServiceQuotaIncreaseRequestFromTemplateCommand").f(undefined, undefined).ser(se_GetServiceQuotaIncreaseRequestFromTemplateCommand).de(de_GetServiceQuotaIncreaseRequestFromTemplateCommand).build() {
    static {
      __name(this, "GetServiceQuotaIncreaseRequestFromTemplateCommand");
    }
  };
  var ListAWSDefaultServiceQuotasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListAWSDefaultServiceQuotas", {}).n("ServiceQuotasClient", "ListAWSDefaultServiceQuotasCommand").f(undefined, undefined).ser(se_ListAWSDefaultServiceQuotasCommand).de(de_ListAWSDefaultServiceQuotasCommand).build() {
    static {
      __name(this, "ListAWSDefaultServiceQuotasCommand");
    }
  };
  var ListRequestedServiceQuotaChangeHistoryByQuotaCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListRequestedServiceQuotaChangeHistoryByQuota", {}).n("ServiceQuotasClient", "ListRequestedServiceQuotaChangeHistoryByQuotaCommand").f(undefined, undefined).ser(se_ListRequestedServiceQuotaChangeHistoryByQuotaCommand).de(de_ListRequestedServiceQuotaChangeHistoryByQuotaCommand).build() {
    static {
      __name(this, "ListRequestedServiceQuotaChangeHistoryByQuotaCommand");
    }
  };
  var ListRequestedServiceQuotaChangeHistoryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListRequestedServiceQuotaChangeHistory", {}).n("ServiceQuotasClient", "ListRequestedServiceQuotaChangeHistoryCommand").f(undefined, undefined).ser(se_ListRequestedServiceQuotaChangeHistoryCommand).de(de_ListRequestedServiceQuotaChangeHistoryCommand).build() {
    static {
      __name(this, "ListRequestedServiceQuotaChangeHistoryCommand");
    }
  };
  var ListServiceQuotaIncreaseRequestsInTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListServiceQuotaIncreaseRequestsInTemplate", {}).n("ServiceQuotasClient", "ListServiceQuotaIncreaseRequestsInTemplateCommand").f(undefined, undefined).ser(se_ListServiceQuotaIncreaseRequestsInTemplateCommand).de(de_ListServiceQuotaIncreaseRequestsInTemplateCommand).build() {
    static {
      __name(this, "ListServiceQuotaIncreaseRequestsInTemplateCommand");
    }
  };
  var ListServiceQuotasCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListServiceQuotas", {}).n("ServiceQuotasClient", "ListServiceQuotasCommand").f(undefined, undefined).ser(se_ListServiceQuotasCommand).de(de_ListServiceQuotasCommand).build() {
    static {
      __name(this, "ListServiceQuotasCommand");
    }
  };
  var ListServicesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListServices", {}).n("ServiceQuotasClient", "ListServicesCommand").f(undefined, undefined).ser(se_ListServicesCommand).de(de_ListServicesCommand).build() {
    static {
      __name(this, "ListServicesCommand");
    }
  };
  var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "ListTagsForResource", {}).n("ServiceQuotasClient", "ListTagsForResourceCommand").f(undefined, undefined).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    static {
      __name(this, "ListTagsForResourceCommand");
    }
  };
  var PutServiceQuotaIncreaseRequestIntoTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "PutServiceQuotaIncreaseRequestIntoTemplate", {}).n("ServiceQuotasClient", "PutServiceQuotaIncreaseRequestIntoTemplateCommand").f(undefined, undefined).ser(se_PutServiceQuotaIncreaseRequestIntoTemplateCommand).de(de_PutServiceQuotaIncreaseRequestIntoTemplateCommand).build() {
    static {
      __name(this, "PutServiceQuotaIncreaseRequestIntoTemplateCommand");
    }
  };
  var RequestServiceQuotaIncreaseCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "RequestServiceQuotaIncrease", {}).n("ServiceQuotasClient", "RequestServiceQuotaIncreaseCommand").f(undefined, undefined).ser(se_RequestServiceQuotaIncreaseCommand).de(de_RequestServiceQuotaIncreaseCommand).build() {
    static {
      __name(this, "RequestServiceQuotaIncreaseCommand");
    }
  };
  var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "TagResource", {}).n("ServiceQuotasClient", "TagResourceCommand").f(undefined, undefined).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    static {
      __name(this, "TagResourceCommand");
    }
  };
  var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("ServiceQuotasV20190624", "UntagResource", {}).n("ServiceQuotasClient", "UntagResourceCommand").f(undefined, undefined).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    static {
      __name(this, "UntagResourceCommand");
    }
  };
  var commands = {
    AssociateServiceQuotaTemplateCommand,
    DeleteServiceQuotaIncreaseRequestFromTemplateCommand,
    DisassociateServiceQuotaTemplateCommand,
    GetAssociationForServiceQuotaTemplateCommand,
    GetAWSDefaultServiceQuotaCommand,
    GetRequestedServiceQuotaChangeCommand,
    GetServiceQuotaCommand,
    GetServiceQuotaIncreaseRequestFromTemplateCommand,
    ListAWSDefaultServiceQuotasCommand,
    ListRequestedServiceQuotaChangeHistoryCommand,
    ListRequestedServiceQuotaChangeHistoryByQuotaCommand,
    ListServiceQuotaIncreaseRequestsInTemplateCommand,
    ListServiceQuotasCommand,
    ListServicesCommand,
    ListTagsForResourceCommand,
    PutServiceQuotaIncreaseRequestIntoTemplateCommand,
    RequestServiceQuotaIncreaseCommand,
    TagResourceCommand,
    UntagResourceCommand
  };
  var ServiceQuotas = class extends ServiceQuotasClient {
    static {
      __name(this, "ServiceQuotas");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, ServiceQuotas);
  var paginateListAWSDefaultServiceQuotas = (0, import_core.createPaginator)(ServiceQuotasClient, ListAWSDefaultServiceQuotasCommand, "NextToken", "NextToken", "MaxResults");
  var paginateListRequestedServiceQuotaChangeHistoryByQuota = (0, import_core.createPaginator)(ServiceQuotasClient, ListRequestedServiceQuotaChangeHistoryByQuotaCommand, "NextToken", "NextToken", "MaxResults");
  var paginateListRequestedServiceQuotaChangeHistory = (0, import_core.createPaginator)(ServiceQuotasClient, ListRequestedServiceQuotaChangeHistoryCommand, "NextToken", "NextToken", "MaxResults");
  var paginateListServiceQuotaIncreaseRequestsInTemplate = (0, import_core.createPaginator)(ServiceQuotasClient, ListServiceQuotaIncreaseRequestsInTemplateCommand, "NextToken", "NextToken", "MaxResults");
  var paginateListServiceQuotas = (0, import_core.createPaginator)(ServiceQuotasClient, ListServiceQuotasCommand, "NextToken", "NextToken", "MaxResults");
  var paginateListServices = (0, import_core.createPaginator)(ServiceQuotasClient, ListServicesCommand, "NextToken", "NextToken", "MaxResults");
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider9 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.resolveStsAuthConfig = exports.defaultSTSHttpAuthSchemeProvider = exports.defaultSTSHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs25();
  var util_middleware_1 = require_dist_cjs6();
  var STSClient_1 = require_STSClient2();
  var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
  function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "sts",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  }
  function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
      schemeId: "smithy.api#noAuth"
    };
  }
  var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      case "AssumeRoleWithSAML": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      case "AssumeRoleWithWebIdentity": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
  var resolveStsAuthConfig = (input) => Object.assign(input, {
    stsClientCtor: STSClient_1.STSClient
  });
  exports.resolveStsAuthConfig = resolveStsAuthConfig;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, exports.resolveStsAuthConfig)(config);
    const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
    return Object.assign(config_1, {});
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.commonParams = exports.resolveClientEndpointParameters = undefined;
  var resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      defaultSigningName: "sts"
    });
  };
  exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  exports.commonParams = {
    UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/package.json
var require_package8 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-sts",
    description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
    version: "3.787.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-sts",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
      test: "yarn g:vitest run",
      "test:watch": "yarn g:vitest watch"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "5.2.0",
      "@aws-crypto/sha256-js": "5.2.0",
      "@aws-sdk/core": "3.775.0",
      "@aws-sdk/credential-provider-node": "3.787.0",
      "@aws-sdk/middleware-host-header": "3.775.0",
      "@aws-sdk/middleware-logger": "3.775.0",
      "@aws-sdk/middleware-recursion-detection": "3.775.0",
      "@aws-sdk/middleware-user-agent": "3.787.0",
      "@aws-sdk/region-config-resolver": "3.775.0",
      "@aws-sdk/types": "3.775.0",
      "@aws-sdk/util-endpoints": "3.787.0",
      "@aws-sdk/util-user-agent-browser": "3.775.0",
      "@aws-sdk/util-user-agent-node": "3.787.0",
      "@smithy/config-resolver": "^4.1.0",
      "@smithy/core": "^3.2.0",
      "@smithy/fetch-http-handler": "^5.0.2",
      "@smithy/hash-node": "^4.0.2",
      "@smithy/invalid-dependency": "^4.0.2",
      "@smithy/middleware-content-length": "^4.0.2",
      "@smithy/middleware-endpoint": "^4.1.0",
      "@smithy/middleware-retry": "^4.1.0",
      "@smithy/middleware-serde": "^4.0.3",
      "@smithy/middleware-stack": "^4.0.2",
      "@smithy/node-config-provider": "^4.0.2",
      "@smithy/node-http-handler": "^4.0.4",
      "@smithy/protocol-http": "^5.1.0",
      "@smithy/smithy-client": "^4.2.0",
      "@smithy/types": "^4.2.0",
      "@smithy/url-parser": "^4.0.2",
      "@smithy/util-base64": "^4.0.0",
      "@smithy/util-body-length-browser": "^4.0.0",
      "@smithy/util-body-length-node": "^4.0.0",
      "@smithy/util-defaults-mode-browser": "^4.0.8",
      "@smithy/util-defaults-mode-node": "^4.0.8",
      "@smithy/util-endpoints": "^3.0.2",
      "@smithy/util-middleware": "^4.0.2",
      "@smithy/util-retry": "^4.0.2",
      "@smithy/util-utf8": "^4.0.0",
      tslib: "^2.6.2"
    },
    devDependencies: {
      "@tsconfig/node18": "18.2.4",
      "@types/node": "^18.19.69",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~5.2.2"
    },
    engines: {
      node: ">=18.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-sts"
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset9 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var F = "required";
  var G = "type";
  var H = "fn";
  var I = "argv";
  var J = "ref";
  var a = false;
  var b = true;
  var c = "booleanEquals";
  var d = "stringEquals";
  var e = "sigv4";
  var f = "sts";
  var g = "us-east-1";
  var h = "endpoint";
  var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
  var j = "tree";
  var k = "error";
  var l = "getAttr";
  var m = { [F]: false, [G]: "String" };
  var n = { [F]: true, default: false, [G]: "Boolean" };
  var o = { [J]: "Endpoint" };
  var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
  var q = { [J]: "Region" };
  var r = { [H]: "aws.partition", [I]: [q], assign: "PartitionResult" };
  var s = { [J]: "UseFIPS" };
  var t = { [J]: "UseDualStack" };
  var u = { url: "https://sts.amazonaws.com", properties: { authSchemes: [{ name: e, signingName: f, signingRegion: g }] }, headers: {} };
  var v = {};
  var w = { conditions: [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
  var x = { [H]: c, [I]: [s, true] };
  var y = { [H]: c, [I]: [t, true] };
  var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
  var A = { [J]: "PartitionResult" };
  var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
  var C = [{ [H]: "isSet", [I]: [o] }];
  var D = [x];
  var E = [y];
  var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
  exports.ruleSet = _data;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver9 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs20();
  var util_endpoints_2 = require_dist_cjs19();
  var ruleset_1 = require_ruleset9();
  var cache = new util_endpoints_2.EndpointCache({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
  });
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    }));
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
  util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared9 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs25();
  var core_2 = require_dist_cjs18();
  var smithy_client_1 = require_dist_cjs24();
  var url_parser_1 = require_dist_cjs34();
  var util_base64_1 = require_dist_cjs11();
  var util_utf8_1 = require_dist_cjs10();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider9();
  var endpointResolver_1 = require_endpointResolver9();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig9 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package8());
  var core_1 = require_dist_cjs25();
  var credential_provider_node_1 = require_dist_cjs53();
  var util_user_agent_node_1 = require_dist_cjs42();
  var config_resolver_1 = require_dist_cjs28();
  var core_2 = require_dist_cjs18();
  var hash_node_1 = require_dist_cjs43();
  var middleware_retry_1 = require_dist_cjs38();
  var node_config_provider_1 = require_dist_cjs32();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs44();
  var util_retry_1 = require_dist_cjs37();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared9();
  var smithy_client_1 = require_dist_cjs24();
  var util_defaults_mode_node_1 = require_dist_cjs45();
  var smithy_client_2 = require_dist_cjs24();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    const profileConfig = { profile: config?.profile };
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
      requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }, config),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
      userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = undefined;
  var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  };
  exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
  var resolveHttpAuthRuntimeConfig = (config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  };
  exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveRuntimeExtensions = undefined;
  var region_config_resolver_1 = require_dist_cjs46();
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_1 = require_dist_cjs24();
  var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration2();
  var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig), (0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig), (0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, (0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), (0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration));
  };
  exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.STSClient = exports.__Client = undefined;
  var middleware_host_header_1 = require_dist_cjs3();
  var middleware_logger_1 = require_dist_cjs4();
  var middleware_recursion_detection_1 = require_dist_cjs5();
  var middleware_user_agent_1 = require_dist_cjs26();
  var config_resolver_1 = require_dist_cjs28();
  var core_1 = require_dist_cjs18();
  var middleware_content_length_1 = require_dist_cjs30();
  var middleware_endpoint_1 = require_dist_cjs35();
  var middleware_retry_1 = require_dist_cjs38();
  var smithy_client_1 = require_dist_cjs24();
  Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
    return smithy_client_1.Client;
  } });
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider9();
  var EndpointParameters_1 = require_EndpointParameters2();
  var runtimeConfig_1 = require_runtimeConfig9();
  var runtimeExtensions_1 = require_runtimeExtensions2();

  class STSClient2 extends smithy_client_1.Client {
    config;
    constructor(...[configuration]) {
      const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
      super(_config_0);
      this.initConfig = _config_0;
      const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
      const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
      const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
      const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
      const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
      const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
      this.config = _config_8;
      this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new core_1.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      }));
      this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  }
  exports.STSClient = STSClient2;
});

// ../../node_modules/.bun/@aws-sdk+client-sts@3.787.0/node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs76 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    AssumeRoleCommand: () => AssumeRoleCommand,
    AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
    AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
    AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
    AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
    AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
    AssumeRootCommand: () => AssumeRootCommand,
    AssumeRootResponseFilterSensitiveLog: () => AssumeRootResponseFilterSensitiveLog,
    ClientInputEndpointParameters: () => import_EndpointParameters10.ClientInputEndpointParameters,
    CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
    DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
    ExpiredTokenException: () => ExpiredTokenException,
    GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
    GetCallerIdentityCommand: () => GetCallerIdentityCommand,
    GetFederationTokenCommand: () => GetFederationTokenCommand,
    GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
    GetSessionTokenCommand: () => GetSessionTokenCommand,
    GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
    IDPCommunicationErrorException: () => IDPCommunicationErrorException,
    IDPRejectedClaimException: () => IDPRejectedClaimException,
    InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
    InvalidIdentityTokenException: () => InvalidIdentityTokenException,
    MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
    PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
    RegionDisabledException: () => RegionDisabledException,
    STS: () => STS,
    STSServiceException: () => STSServiceException,
    decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
    getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
    getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
  });
  module.exports = __toCommonJS(index_exports);
  __reExport(index_exports, require_STSClient2(), module.exports);
  var import_middleware_endpoint = require_dist_cjs35();
  var import_middleware_serde = require_dist_cjs7();
  var import_EndpointParameters = require_EndpointParameters2();
  var import_smithy_client = require_dist_cjs24();
  var STSServiceException = class _STSServiceException extends import_smithy_client.ServiceException {
    static {
      __name(this, "STSServiceException");
    }
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _STSServiceException.prototype);
    }
  };
  var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException {
    static {
      __name(this, "ExpiredTokenException");
    }
    name = "ExpiredTokenException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "ExpiredTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
    }
  };
  var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
    static {
      __name(this, "MalformedPolicyDocumentException");
    }
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "MalformedPolicyDocumentException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
    }
  };
  var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
    static {
      __name(this, "PackedPolicyTooLargeException");
    }
    name = "PackedPolicyTooLargeException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "PackedPolicyTooLargeException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
    }
  };
  var RegionDisabledException = class _RegionDisabledException extends STSServiceException {
    static {
      __name(this, "RegionDisabledException");
    }
    name = "RegionDisabledException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "RegionDisabledException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _RegionDisabledException.prototype);
    }
  };
  var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
    static {
      __name(this, "IDPRejectedClaimException");
    }
    name = "IDPRejectedClaimException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "IDPRejectedClaimException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
    }
  };
  var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
    static {
      __name(this, "InvalidIdentityTokenException");
    }
    name = "InvalidIdentityTokenException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidIdentityTokenException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
    }
  };
  var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
    static {
      __name(this, "IDPCommunicationErrorException");
    }
    name = "IDPCommunicationErrorException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "IDPCommunicationErrorException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
    }
  };
  var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException {
    static {
      __name(this, "InvalidAuthorizationMessageException");
    }
    name = "InvalidAuthorizationMessageException";
    $fault = "client";
    constructor(opts) {
      super({
        name: "InvalidAuthorizationMessageException",
        $fault: "client",
        ...opts
      });
      Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
    }
  };
  var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING }
  }), "CredentialsFilterSensitiveLog");
  var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRoleResponseFilterSensitiveLog");
  var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.SAMLAssertion && { SAMLAssertion: import_smithy_client.SENSITIVE_STRING }
  }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
  var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
  var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client.SENSITIVE_STRING }
  }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
  var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
  var AssumeRootResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "AssumeRootResponseFilterSensitiveLog");
  var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "GetFederationTokenResponseFilterSensitiveLog");
  var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
  }), "GetSessionTokenResponseFilterSensitiveLog");
  var import_core = require_dist_cjs25();
  var import_protocol_http = require_dist_cjs2();
  var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleRequest(input, context),
      [_A]: _AR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRoleCommand");
  var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleWithSAMLRequest(input, context),
      [_A]: _ARWSAML,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRoleWithSAMLCommand");
  var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleWithWebIdentityRequest(input, context),
      [_A]: _ARWWI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRoleWithWebIdentityCommand");
  var se_AssumeRootCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRootRequest(input, context),
      [_A]: _ARs,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_AssumeRootCommand");
  var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DecodeAuthorizationMessageRequest(input, context),
      [_A]: _DAM,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_DecodeAuthorizationMessageCommand");
  var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetAccessKeyInfoRequest(input, context),
      [_A]: _GAKI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetAccessKeyInfoCommand");
  var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetCallerIdentityRequest(input, context),
      [_A]: _GCI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetCallerIdentityCommand");
  var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetFederationTokenRequest(input, context),
      [_A]: _GFT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetFederationTokenCommand");
  var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetSessionTokenRequest(input, context),
      [_A]: _GST,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  }, "se_GetSessionTokenCommand");
  var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRoleCommand");
  var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRoleWithSAMLCommand");
  var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRoleWithWebIdentityCommand");
  var de_AssumeRootCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_AssumeRootResponse(data.AssumeRootResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_AssumeRootCommand");
  var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_DecodeAuthorizationMessageCommand");
  var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetAccessKeyInfoCommand");
  var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetCallerIdentityCommand");
  var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetFederationTokenCommand");
  var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
    if (output.statusCode >= 300) {
      return de_CommandError(output, context);
    }
    const data = await (0, import_core.parseXmlBody)(output.body, context);
    let contents = {};
    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  }, "de_GetSessionTokenCommand");
  var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await (0, import_core.parseXmlErrorBody)(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ExpiredTokenException":
      case "com.amazonaws.sts#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      case "IDPRejectedClaim":
      case "com.amazonaws.sts#IDPRejectedClaimException":
        throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
      case "InvalidIdentityToken":
      case "com.amazonaws.sts#InvalidIdentityTokenException":
        throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
      case "IDPCommunicationError":
      case "com.amazonaws.sts#IDPCommunicationErrorException":
        throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
      case "InvalidAuthorizationMessageException":
      case "com.amazonaws.sts#InvalidAuthorizationMessageException":
        throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  }, "de_CommandError");
  var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ExpiredTokenException(body.Error, context);
    const exception = new ExpiredTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_ExpiredTokenExceptionRes");
  var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPCommunicationErrorException(body.Error, context);
    const exception = new IDPCommunicationErrorException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_IDPCommunicationErrorExceptionRes");
  var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPRejectedClaimException(body.Error, context);
    const exception = new IDPRejectedClaimException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_IDPRejectedClaimExceptionRes");
  var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
    const exception = new InvalidAuthorizationMessageException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidAuthorizationMessageExceptionRes");
  var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidIdentityTokenException(body.Error, context);
    const exception = new InvalidIdentityTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_InvalidIdentityTokenExceptionRes");
  var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new MalformedPolicyDocumentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_MalformedPolicyDocumentExceptionRes");
  var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
    const exception = new PackedPolicyTooLargeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_PackedPolicyTooLargeExceptionRes");
  var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_RegionDisabledException(body.Error, context);
    const exception = new RegionDisabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, import_smithy_client.decorateServiceException)(exception, body);
  }, "de_RegionDisabledExceptionRes");
  var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_TTK] != null) {
      const memberEntries = se_tagKeyListType(input[_TTK], context);
      if (input[_TTK]?.length === 0) {
        entries.TransitiveTagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TransitiveTagKeys.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_EI] != null) {
      entries[_EI] = input[_EI];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
      entries[_TC] = input[_TC];
    }
    if (input[_SI] != null) {
      entries[_SI] = input[_SI];
    }
    if (input[_PC] != null) {
      const memberEntries = se_ProvidedContextsListType(input[_PC], context);
      if (input[_PC]?.length === 0) {
        entries.ProvidedContexts = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ProvidedContexts.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_AssumeRoleRequest");
  var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_PAr] != null) {
      entries[_PAr] = input[_PAr];
    }
    if (input[_SAMLA] != null) {
      entries[_SAMLA] = input[_SAMLA];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  }, "se_AssumeRoleWithSAMLRequest");
  var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_WIT] != null) {
      entries[_WIT] = input[_WIT];
    }
    if (input[_PI] != null) {
      entries[_PI] = input[_PI];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  }, "se_AssumeRoleWithWebIdentityRequest");
  var se_AssumeRootRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_TP] != null) {
      entries[_TP] = input[_TP];
    }
    if (input[_TPA] != null) {
      const memberEntries = se_PolicyDescriptorType(input[_TPA], context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TaskPolicyArn.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  }, "se_AssumeRootRequest");
  var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_EM] != null) {
      entries[_EM] = input[_EM];
    }
    return entries;
  }, "se_DecodeAuthorizationMessageRequest");
  var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_AKI] != null) {
      entries[_AKI] = input[_AKI];
    }
    return entries;
  }, "se_GetAccessKeyInfoRequest");
  var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    return entries;
  }, "se_GetCallerIdentityRequest");
  var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_N] != null) {
      entries[_N] = input[_N];
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  }, "se_GetFederationTokenRequest");
  var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
      entries[_TC] = input[_TC];
    }
    return entries;
  }, "se_GetSessionTokenRequest");
  var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_PolicyDescriptorType(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_policyDescriptorListType");
  var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_a] != null) {
      entries[_a] = input[_a];
    }
    return entries;
  }, "se_PolicyDescriptorType");
  var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_PAro] != null) {
      entries[_PAro] = input[_PAro];
    }
    if (input[_CA] != null) {
      entries[_CA] = input[_CA];
    }
    return entries;
  }, "se_ProvidedContext");
  var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_ProvidedContext(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_ProvidedContextsListType");
  var se_Tag = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    if (input[_K] != null) {
      entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
      entries[_Va] = input[_Va];
    }
    return entries;
  }, "se_Tag");
  var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  }, "se_tagKeyListType");
  var se_tagListType = /* @__PURE__ */ __name((input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_Tag(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  }, "se_tagListType");
  var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_ARI] != null) {
      contents[_ARI] = (0, import_smithy_client.expectString)(output[_ARI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    return contents;
  }, "de_AssumedRoleUser");
  var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRoleResponse");
  var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_ST] != null) {
      contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
    }
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_Au] != null) {
      contents[_Au] = (0, import_smithy_client.expectString)(output[_Au]);
    }
    if (output[_NQ] != null) {
      contents[_NQ] = (0, import_smithy_client.expectString)(output[_NQ]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRoleWithSAMLResponse");
  var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_SFWIT] != null) {
      contents[_SFWIT] = (0, import_smithy_client.expectString)(output[_SFWIT]);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
    }
    if (output[_Au] != null) {
      contents[_Au] = (0, import_smithy_client.expectString)(output[_Au]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRoleWithWebIdentityResponse");
  var de_AssumeRootResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
    }
    return contents;
  }, "de_AssumeRootResponse");
  var de_Credentials = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);
    }
    if (output[_STe] != null) {
      contents[_STe] = (0, import_smithy_client.expectString)(output[_STe]);
    }
    if (output[_E] != null) {
      contents[_E] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_E]));
    }
    return contents;
  }, "de_Credentials");
  var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_DM] != null) {
      contents[_DM] = (0, import_smithy_client.expectString)(output[_DM]);
    }
    return contents;
  }, "de_DecodeAuthorizationMessageResponse");
  var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_ExpiredTokenException");
  var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_FUI] != null) {
      contents[_FUI] = (0, import_smithy_client.expectString)(output[_FUI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    return contents;
  }, "de_FederatedUser");
  var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_Ac] != null) {
      contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);
    }
    return contents;
  }, "de_GetAccessKeyInfoResponse");
  var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    if (output[_Ac] != null) {
      contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
    }
    return contents;
  }, "de_GetCallerIdentityResponse");
  var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_FU] != null) {
      contents[_FU] = de_FederatedUser(output[_FU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);
    }
    return contents;
  }, "de_GetFederationTokenResponse");
  var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    return contents;
  }, "de_GetSessionTokenResponse");
  var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_IDPCommunicationErrorException");
  var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_IDPRejectedClaimException");
  var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidAuthorizationMessageException");
  var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_InvalidIdentityTokenException");
  var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_MalformedPolicyDocumentException");
  var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_PackedPolicyTooLargeException");
  var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, import_smithy_client.expectString)(output[_m]);
    }
    return contents;
  }, "de_RegionDisabledException");
  var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(STSServiceException);
  var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new import_protocol_http.HttpRequest(contents);
  }, "buildHttpRpcRequest");
  var SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
  };
  var _ = "2011-06-15";
  var _A = "Action";
  var _AKI = "AccessKeyId";
  var _AR = "AssumeRole";
  var _ARI = "AssumedRoleId";
  var _ARU = "AssumedRoleUser";
  var _ARWSAML = "AssumeRoleWithSAML";
  var _ARWWI = "AssumeRoleWithWebIdentity";
  var _ARs = "AssumeRoot";
  var _Ac = "Account";
  var _Ar = "Arn";
  var _Au = "Audience";
  var _C = "Credentials";
  var _CA = "ContextAssertion";
  var _DAM = "DecodeAuthorizationMessage";
  var _DM = "DecodedMessage";
  var _DS = "DurationSeconds";
  var _E = "Expiration";
  var _EI = "ExternalId";
  var _EM = "EncodedMessage";
  var _FU = "FederatedUser";
  var _FUI = "FederatedUserId";
  var _GAKI = "GetAccessKeyInfo";
  var _GCI = "GetCallerIdentity";
  var _GFT = "GetFederationToken";
  var _GST = "GetSessionToken";
  var _I = "Issuer";
  var _K = "Key";
  var _N = "Name";
  var _NQ = "NameQualifier";
  var _P = "Policy";
  var _PA = "PolicyArns";
  var _PAr = "PrincipalArn";
  var _PAro = "ProviderArn";
  var _PC = "ProvidedContexts";
  var _PI = "ProviderId";
  var _PPS = "PackedPolicySize";
  var _Pr = "Provider";
  var _RA = "RoleArn";
  var _RSN = "RoleSessionName";
  var _S = "Subject";
  var _SAK = "SecretAccessKey";
  var _SAMLA = "SAMLAssertion";
  var _SFWIT = "SubjectFromWebIdentityToken";
  var _SI = "SourceIdentity";
  var _SN = "SerialNumber";
  var _ST = "SubjectType";
  var _STe = "SessionToken";
  var _T = "Tags";
  var _TC = "TokenCode";
  var _TP = "TargetPrincipal";
  var _TPA = "TaskPolicyArn";
  var _TTK = "TransitiveTagKeys";
  var _UI = "UserId";
  var _V = "Version";
  var _Va = "Value";
  var _WIT = "WebIdentityToken";
  var _a = "arn";
  var _m = "message";
  var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
  var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
    if (data.Error?.Code !== undefined) {
      return data.Error.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  }, "loadQueryErrorCode");
  var AssumeRoleCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(undefined, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    static {
      __name(this, "AssumeRoleCommand");
    }
  };
  var import_EndpointParameters2 = require_EndpointParameters2();
  var AssumeRoleWithSAMLCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters2.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    static {
      __name(this, "AssumeRoleWithSAMLCommand");
    }
  };
  var import_EndpointParameters3 = require_EndpointParameters2();
  var AssumeRoleWithWebIdentityCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters3.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    static {
      __name(this, "AssumeRoleWithWebIdentityCommand");
    }
  };
  var import_EndpointParameters4 = require_EndpointParameters2();
  var AssumeRootCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters4.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoot", {}).n("STSClient", "AssumeRootCommand").f(undefined, AssumeRootResponseFilterSensitiveLog).ser(se_AssumeRootCommand).de(de_AssumeRootCommand).build() {
    static {
      __name(this, "AssumeRootCommand");
    }
  };
  var import_EndpointParameters5 = require_EndpointParameters2();
  var DecodeAuthorizationMessageCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters5.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(undefined, undefined).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    static {
      __name(this, "DecodeAuthorizationMessageCommand");
    }
  };
  var import_EndpointParameters6 = require_EndpointParameters2();
  var GetAccessKeyInfoCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters6.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(undefined, undefined).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    static {
      __name(this, "GetAccessKeyInfoCommand");
    }
  };
  var import_EndpointParameters7 = require_EndpointParameters2();
  var GetCallerIdentityCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters7.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(undefined, undefined).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    static {
      __name(this, "GetCallerIdentityCommand");
    }
  };
  var import_EndpointParameters8 = require_EndpointParameters2();
  var GetFederationTokenCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters8.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(undefined, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    static {
      __name(this, "GetFederationTokenCommand");
    }
  };
  var import_EndpointParameters9 = require_EndpointParameters2();
  var GetSessionTokenCommand = class extends import_smithy_client.Command.classBuilder().ep(import_EndpointParameters9.commonParams).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(undefined, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    static {
      __name(this, "GetSessionTokenCommand");
    }
  };
  var import_STSClient = require_STSClient2();
  var commands = {
    AssumeRoleCommand,
    AssumeRoleWithSAMLCommand,
    AssumeRoleWithWebIdentityCommand,
    AssumeRootCommand,
    DecodeAuthorizationMessageCommand,
    GetAccessKeyInfoCommand,
    GetCallerIdentityCommand,
    GetFederationTokenCommand,
    GetSessionTokenCommand
  };
  var STS = class extends import_STSClient.STSClient {
    static {
      __name(this, "STS");
    }
  };
  (0, import_smithy_client.createAggregatedClient)(commands, STS);
  var import_EndpointParameters10 = require_EndpointParameters2();
  var import_client = require_client();
  var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
  var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
    if (typeof assumedRoleUser?.Arn === "string") {
      const arnComponents = assumedRoleUser.Arn.split(":");
      if (arnComponents.length > 4 && arnComponents[4] !== "") {
        return arnComponents[4];
      }
    }
    return;
  }, "getAccountIdFromAssumedRoleUser");
  var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
    const region = typeof _region === "function" ? await _region() : _region;
    const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
    credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion", "accepting first of:", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);
    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
  }, "resolveRegion");
  var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
    let stsClient;
    let closureSourceCreds;
    return async (sourceCreds, params) => {
      closureSourceCreds = sourceCreds;
      if (!stsClient) {
        const {
          logger = stsOptions?.parentClientConfig?.logger,
          region,
          requestHandler = stsOptions?.parentClientConfig?.requestHandler,
          credentialProviderLogger
        } = stsOptions;
        const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
        const isCompatibleRequestHandler = !isH2(requestHandler);
        stsClient = new STSClient3({
          profile: stsOptions?.parentClientConfig?.profile,
          credentialDefaultProvider: /* @__PURE__ */ __name(() => async () => closureSourceCreds, "credentialDefaultProvider"),
          region: resolvedRegion,
          requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,
          logger
        });
      }
      const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleCommand(params));
      if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
      }
      const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
      const credentials = {
        accessKeyId: Credentials2.AccessKeyId,
        secretAccessKey: Credentials2.SecretAccessKey,
        sessionToken: Credentials2.SessionToken,
        expiration: Credentials2.Expiration,
        ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
      return credentials;
    };
  }, "getDefaultRoleAssumer");
  var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
    let stsClient;
    return async (params) => {
      if (!stsClient) {
        const {
          logger = stsOptions?.parentClientConfig?.logger,
          region,
          requestHandler = stsOptions?.parentClientConfig?.requestHandler,
          credentialProviderLogger
        } = stsOptions;
        const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
        const isCompatibleRequestHandler = !isH2(requestHandler);
        stsClient = new STSClient3({
          profile: stsOptions?.parentClientConfig?.profile,
          region: resolvedRegion,
          requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,
          logger
        });
      }
      const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
      if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
      }
      const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
      const credentials = {
        accessKeyId: Credentials2.AccessKeyId,
        secretAccessKey: Credentials2.SecretAccessKey,
        sessionToken: Credentials2.SessionToken,
        expiration: Credentials2.Expiration,
        ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
        ...accountId && { accountId }
      };
      if (accountId) {
        (0, import_client.setCredentialFeature)(credentials, "RESOLVED_ACCOUNT_ID", "T");
      }
      (0, import_client.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
      return credentials;
    };
  }, "getDefaultRoleAssumerWithWebIdentity");
  var isH2 = /* @__PURE__ */ __name((requestHandler) => {
    return requestHandler?.metadata?.handlerProtocol === "h2";
  }, "isH2");
  var import_STSClient2 = require_STSClient2();
  var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
    if (!customizations)
      return baseCtor;
    else
      return class CustomizableSTSClient extends baseCtor {
        static {
          __name(this, "CustomizableSTSClient");
        }
        constructor(config) {
          super(config);
          for (const customization of customizations) {
            this.middlewareStack.use(customization);
          }
        }
      };
  }, "getCustomizableStsClientCtor");
  var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
  var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
  var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
    roleAssumer: getDefaultRoleAssumer2(input),
    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
    ...input
  }), "decorateDefaultCredentialProvider");
});

// ../../node_modules/.bun/@smithy+abort-controller@4.0.2/node_modules/@smithy/abort-controller/dist-cjs/index.js
var require_dist_cjs77 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export(src_exports, {
    AbortController: () => AbortController2,
    AbortHandler: () => import_types.AbortHandler,
    AbortSignal: () => AbortSignal,
    IAbortController: () => import_types.AbortController,
    IAbortSignal: () => import_types.AbortSignal
  });
  module.exports = __toCommonJS(src_exports);
  var import_types = require_dist_cjs();
  var AbortSignal = class {
    constructor() {
      this.onabort = null;
      this._aborted = false;
      Object.defineProperty(this, "_aborted", {
        value: false,
        writable: true
      });
    }
    static {
      __name(this, "AbortSignal");
    }
    get aborted() {
      return this._aborted;
    }
    abort() {
      this._aborted = true;
      if (this.onabort) {
        this.onabort(this);
        this.onabort = null;
      }
    }
  };
  var AbortController2 = class {
    constructor() {
      this.signal = new AbortSignal;
    }
    static {
      __name(this, "AbortController");
    }
    abort() {
      this.signal.abort();
    }
  };
});

// ../../node_modules/.bun/@aws-sdk+lib-storage@3.787.0+759f9bef093e3716/node_modules/@aws-sdk/lib-storage/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared10 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ClientSharedValues = undefined;
  exports.ClientSharedValues = {
    lstatSync: () => {}
  };
});

// ../../node_modules/.bun/@aws-sdk+lib-storage@3.787.0+759f9bef093e3716/node_modules/@aws-sdk/lib-storage/dist-cjs/runtimeConfig.js
var require_runtimeConfig10 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ClientDefaultValues = undefined;
  var fs_1 = __require("fs");
  var runtimeConfig_shared_1 = require_runtimeConfig_shared10();
  exports.ClientDefaultValues = {
    ...runtimeConfig_shared_1.ClientSharedValues,
    runtime: "node",
    lstatSync: fs_1.lstatSync
  };
});

// ../../node_modules/.bun/@aws-sdk+lib-storage@3.787.0+759f9bef093e3716/node_modules/@aws-sdk/lib-storage/dist-cjs/index.js
var require_dist_cjs78 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    Upload: () => Upload
  });
  module.exports = __toCommonJS(index_exports);
  var import_client_s310 = require_dist_cjs74();
  var import_abort_controller = require_dist_cjs77();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_smithy_client = require_dist_cjs24();
  var import_events = __require("events");
  var import_buffer = __require("buffer");
  var import_runtimeConfig = require_runtimeConfig10();
  var byteLength = /* @__PURE__ */ __name((input) => {
    if (input === null || input === undefined)
      return 0;
    if (typeof input === "string") {
      return import_buffer.Buffer.byteLength(input);
    }
    if (typeof input.byteLength === "number") {
      return input.byteLength;
    } else if (typeof input.length === "number") {
      return input.length;
    } else if (typeof input.size === "number") {
      return input.size;
    } else if (typeof input.path === "string") {
      try {
        return import_runtimeConfig.ClientDefaultValues.lstatSync(input.path).size;
      } catch (error) {
        return;
      }
    }
    return;
  }, "byteLength");
  var import_stream = __require("stream");
  async function* getChunkStream(data, partSize, getNextData) {
    let partNumber = 1;
    const currentBuffer = { chunks: [], length: 0 };
    for await (const datum of getNextData(data)) {
      currentBuffer.chunks.push(datum);
      currentBuffer.length += datum.byteLength;
      while (currentBuffer.length > partSize) {
        const dataChunk = currentBuffer.chunks.length > 1 ? import_buffer.Buffer.concat(currentBuffer.chunks) : currentBuffer.chunks[0];
        yield {
          partNumber,
          data: dataChunk.subarray(0, partSize)
        };
        currentBuffer.chunks = [dataChunk.subarray(partSize)];
        currentBuffer.length = currentBuffer.chunks[0].byteLength;
        partNumber += 1;
      }
    }
    yield {
      partNumber,
      data: currentBuffer.chunks.length !== 1 ? import_buffer.Buffer.concat(currentBuffer.chunks) : currentBuffer.chunks[0],
      lastPart: true
    };
  }
  __name(getChunkStream, "getChunkStream");
  async function* getChunkUint8Array(data, partSize) {
    let partNumber = 1;
    let startByte = 0;
    let endByte = partSize;
    while (endByte < data.byteLength) {
      yield {
        partNumber,
        data: data.subarray(startByte, endByte)
      };
      partNumber += 1;
      startByte = endByte;
      endByte = startByte + partSize;
    }
    yield {
      partNumber,
      data: data.subarray(startByte),
      lastPart: true
    };
  }
  __name(getChunkUint8Array, "getChunkUint8Array");
  async function* getDataReadable(data) {
    for await (const chunk of data) {
      if (import_buffer.Buffer.isBuffer(chunk) || chunk instanceof Uint8Array) {
        yield chunk;
      } else {
        yield import_buffer.Buffer.from(chunk);
      }
    }
  }
  __name(getDataReadable, "getDataReadable");
  async function* getDataReadableStream(data) {
    const reader = data.getReader();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          return;
        }
        if (import_buffer.Buffer.isBuffer(value) || value instanceof Uint8Array) {
          yield value;
        } else {
          yield import_buffer.Buffer.from(value);
        }
      }
    } catch (e) {
      throw e;
    } finally {
      reader.releaseLock();
    }
  }
  __name(getDataReadableStream, "getDataReadableStream");
  var getChunk = /* @__PURE__ */ __name((data, partSize) => {
    if (data instanceof Uint8Array) {
      return getChunkUint8Array(data, partSize);
    }
    if (data instanceof import_stream.Readable) {
      return getChunkStream(data, partSize, getDataReadable);
    }
    if (data instanceof String || typeof data === "string") {
      return getChunkUint8Array(import_buffer.Buffer.from(data), partSize);
    }
    if (typeof data.stream === "function") {
      return getChunkStream(data.stream(), partSize, getDataReadableStream);
    }
    if (data instanceof ReadableStream) {
      return getChunkStream(data, partSize, getDataReadableStream);
    }
    throw new Error("Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.");
  }, "getChunk");
  var Upload = class _Upload extends import_events.EventEmitter {
    static {
      __name(this, "Upload");
    }
    static MIN_PART_SIZE = 1024 * 1024 * 5;
    MAX_PARTS = 1e4;
    queueSize = 4;
    partSize = _Upload.MIN_PART_SIZE;
    leavePartsOnError = false;
    tags = [];
    client;
    params;
    totalBytes;
    bytesUploadedSoFar;
    abortController;
    concurrentUploaders = [];
    createMultiPartPromise;
    abortMultipartUploadCommand = null;
    uploadedParts = [];
    uploadEnqueuedPartsCount = 0;
    uploadId;
    uploadEvent;
    isMultiPart = true;
    singleUploadResult;
    sent = false;
    constructor(options) {
      super();
      this.queueSize = options.queueSize || this.queueSize;
      this.partSize = options.partSize || this.partSize;
      this.leavePartsOnError = options.leavePartsOnError || this.leavePartsOnError;
      this.tags = options.tags || this.tags;
      this.client = options.client;
      this.params = options.params;
      this.__validateInput();
      this.totalBytes = byteLength(this.params.Body);
      this.bytesUploadedSoFar = 0;
      this.abortController = options.abortController ?? new import_abort_controller.AbortController;
    }
    async abort() {
      this.abortController.abort();
    }
    async done() {
      if (this.sent) {
        throw new Error("@aws-sdk/lib-storage: this instance of Upload has already executed .done(). Create a new instance.");
      }
      this.sent = true;
      return await Promise.race([this.__doMultipartUpload(), this.__abortTimeout(this.abortController.signal)]);
    }
    on(event, listener) {
      this.uploadEvent = event;
      return super.on(event, listener);
    }
    async __uploadUsingPut(dataPart) {
      this.isMultiPart = false;
      const params = { ...this.params, Body: dataPart.data };
      const clientConfig = this.client.config;
      const requestHandler = clientConfig.requestHandler;
      const eventEmitter = requestHandler instanceof import_events.EventEmitter ? requestHandler : null;
      const uploadEventListener = /* @__PURE__ */ __name((event) => {
        this.bytesUploadedSoFar = event.loaded;
        this.totalBytes = event.total;
        this.__notifyProgress({
          loaded: this.bytesUploadedSoFar,
          total: this.totalBytes,
          part: dataPart.partNumber,
          Key: this.params.Key,
          Bucket: this.params.Bucket
        });
      }, "uploadEventListener");
      if (eventEmitter !== null) {
        eventEmitter.on("xhr.upload.progress", uploadEventListener);
      }
      const resolved = await Promise.all([this.client.send(new import_client_s310.PutObjectCommand(params)), clientConfig?.endpoint?.()]);
      const putResult = resolved[0];
      let endpoint = resolved[1];
      if (!endpoint) {
        endpoint = (0, import_middleware_endpoint.toEndpointV1)(await (0, import_middleware_endpoint.getEndpointFromInstructions)(params, import_client_s310.PutObjectCommand, {
          ...clientConfig
        }));
      }
      if (!endpoint) {
        throw new Error('Could not resolve endpoint from S3 "client.config.endpoint()" nor EndpointsV2.');
      }
      if (eventEmitter !== null) {
        eventEmitter.off("xhr.upload.progress", uploadEventListener);
      }
      const locationKey = this.params.Key.split("/").map((segment) => (0, import_smithy_client.extendedEncodeURIComponent)(segment)).join("/");
      const locationBucket = (0, import_smithy_client.extendedEncodeURIComponent)(this.params.Bucket);
      const Location = (() => {
        const endpointHostnameIncludesBucket = endpoint.hostname.startsWith(`${locationBucket}.`);
        const forcePathStyle = this.client.config.forcePathStyle;
        const optionalPort = endpoint.port ? `:${endpoint.port}` : ``;
        if (forcePathStyle) {
          return `${endpoint.protocol}//${endpoint.hostname}${optionalPort}/${locationBucket}/${locationKey}`;
        }
        if (endpointHostnameIncludesBucket) {
          return `${endpoint.protocol}//${endpoint.hostname}${optionalPort}/${locationKey}`;
        }
        return `${endpoint.protocol}//${locationBucket}.${endpoint.hostname}${optionalPort}/${locationKey}`;
      })();
      this.singleUploadResult = {
        ...putResult,
        Bucket: this.params.Bucket,
        Key: this.params.Key,
        Location
      };
      const totalSize = byteLength(dataPart.data);
      this.__notifyProgress({
        loaded: totalSize,
        total: totalSize,
        part: 1,
        Key: this.params.Key,
        Bucket: this.params.Bucket
      });
    }
    async __createMultipartUpload() {
      const requestChecksumCalculation = await this.client.config.requestChecksumCalculation();
      if (!this.createMultiPartPromise) {
        const createCommandParams = { ...this.params, Body: undefined };
        if (requestChecksumCalculation === "WHEN_SUPPORTED") {
          createCommandParams.ChecksumAlgorithm = this.params.ChecksumAlgorithm || import_client_s310.ChecksumAlgorithm.CRC32;
        }
        this.createMultiPartPromise = this.client.send(new import_client_s310.CreateMultipartUploadCommand(createCommandParams)).then((createMpuResponse) => {
          this.abortMultipartUploadCommand = new import_client_s310.AbortMultipartUploadCommand({
            Bucket: this.params.Bucket,
            Key: this.params.Key,
            UploadId: createMpuResponse.UploadId
          });
          return createMpuResponse;
        });
      }
      return this.createMultiPartPromise;
    }
    async __doConcurrentUpload(dataFeeder) {
      for await (const dataPart of dataFeeder) {
        if (this.uploadEnqueuedPartsCount > this.MAX_PARTS) {
          throw new Error(`Exceeded ${this.MAX_PARTS} parts in multipart upload to Bucket: ${this.params.Bucket} Key: ${this.params.Key}.`);
        }
        if (this.abortController.signal.aborted) {
          return;
        }
        if (dataPart.partNumber === 1 && dataPart.lastPart) {
          return await this.__uploadUsingPut(dataPart);
        }
        if (!this.uploadId) {
          const { UploadId } = await this.__createMultipartUpload();
          this.uploadId = UploadId;
          if (this.abortController.signal.aborted) {
            return;
          }
        }
        const partSize = byteLength(dataPart.data) || 0;
        const requestHandler = this.client.config.requestHandler;
        const eventEmitter = requestHandler instanceof import_events.EventEmitter ? requestHandler : null;
        let lastSeenBytes = 0;
        const uploadEventListener = /* @__PURE__ */ __name((event, request) => {
          const requestPartSize = Number(request.query["partNumber"]) || -1;
          if (requestPartSize !== dataPart.partNumber) {
            return;
          }
          if (event.total && partSize) {
            this.bytesUploadedSoFar += event.loaded - lastSeenBytes;
            lastSeenBytes = event.loaded;
          }
          this.__notifyProgress({
            loaded: this.bytesUploadedSoFar,
            total: this.totalBytes,
            part: dataPart.partNumber,
            Key: this.params.Key,
            Bucket: this.params.Bucket
          });
        }, "uploadEventListener");
        if (eventEmitter !== null) {
          eventEmitter.on("xhr.upload.progress", uploadEventListener);
        }
        this.uploadEnqueuedPartsCount += 1;
        const partResult = await this.client.send(new import_client_s310.UploadPartCommand({
          ...this.params,
          ContentLength: undefined,
          UploadId: this.uploadId,
          Body: dataPart.data,
          PartNumber: dataPart.partNumber
        }));
        if (eventEmitter !== null) {
          eventEmitter.off("xhr.upload.progress", uploadEventListener);
        }
        if (this.abortController.signal.aborted) {
          return;
        }
        if (!partResult.ETag) {
          throw new Error(`Part ${dataPart.partNumber} is missing ETag in UploadPart response. Missing Bucket CORS configuration for ETag header?`);
        }
        this.uploadedParts.push({
          PartNumber: dataPart.partNumber,
          ETag: partResult.ETag,
          ...partResult.ChecksumCRC32 && { ChecksumCRC32: partResult.ChecksumCRC32 },
          ...partResult.ChecksumCRC32C && { ChecksumCRC32C: partResult.ChecksumCRC32C },
          ...partResult.ChecksumSHA1 && { ChecksumSHA1: partResult.ChecksumSHA1 },
          ...partResult.ChecksumSHA256 && { ChecksumSHA256: partResult.ChecksumSHA256 }
        });
        if (eventEmitter === null) {
          this.bytesUploadedSoFar += partSize;
        }
        this.__notifyProgress({
          loaded: this.bytesUploadedSoFar,
          total: this.totalBytes,
          part: dataPart.partNumber,
          Key: this.params.Key,
          Bucket: this.params.Bucket
        });
      }
    }
    async __doMultipartUpload() {
      const dataFeeder = getChunk(this.params.Body, this.partSize);
      const concurrentUploaderFailures = [];
      for (let index = 0;index < this.queueSize; index++) {
        const currentUpload = this.__doConcurrentUpload(dataFeeder).catch((err) => {
          concurrentUploaderFailures.push(err);
        });
        this.concurrentUploaders.push(currentUpload);
      }
      await Promise.all(this.concurrentUploaders);
      if (concurrentUploaderFailures.length >= 1) {
        await this.markUploadAsAborted();
        throw concurrentUploaderFailures[0];
      }
      if (this.abortController.signal.aborted) {
        await this.markUploadAsAborted();
        throw Object.assign(new Error("Upload aborted."), { name: "AbortError" });
      }
      let result;
      if (this.isMultiPart) {
        this.uploadedParts.sort((a, b) => a.PartNumber - b.PartNumber);
        const uploadCompleteParams = {
          ...this.params,
          Body: undefined,
          UploadId: this.uploadId,
          MultipartUpload: {
            Parts: this.uploadedParts
          }
        };
        result = await this.client.send(new import_client_s310.CompleteMultipartUploadCommand(uploadCompleteParams));
        if (typeof result?.Location === "string" && result.Location.includes("%2F")) {
          result.Location = result.Location.replace(/%2F/g, "/");
        }
      } else {
        result = this.singleUploadResult;
      }
      this.abortMultipartUploadCommand = null;
      if (this.tags.length) {
        await this.client.send(new import_client_s310.PutObjectTaggingCommand({
          ...this.params,
          Tagging: {
            TagSet: this.tags
          }
        }));
      }
      return result;
    }
    async markUploadAsAborted() {
      if (this.uploadId && !this.leavePartsOnError && this.abortMultipartUploadCommand !== null) {
        await this.client.send(this.abortMultipartUploadCommand);
        this.abortMultipartUploadCommand = null;
      }
    }
    __notifyProgress(progress) {
      if (this.uploadEvent) {
        this.emit(this.uploadEvent, progress);
      }
    }
    async __abortTimeout(abortSignal) {
      return new Promise((resolve, reject) => {
        abortSignal.onabort = () => {
          const abortError = new Error("Upload aborted.");
          abortError.name = "AbortError";
          reject(abortError);
        };
      });
    }
    __validateInput() {
      if (!this.params) {
        throw new Error(`InputError: Upload requires params to be passed to upload.`);
      }
      if (!this.client) {
        throw new Error(`InputError: Upload requires a AWS client to do uploads with.`);
      }
      if (this.partSize < _Upload.MIN_PART_SIZE) {
        throw new Error(`EntityTooSmall: Your proposed upload partsize [${this.partSize}] is smaller than the minimum allowed size [${_Upload.MIN_PART_SIZE}] (5MB)`);
      }
      if (this.queueSize < 1) {
        throw new Error(`Queue size: Must have at least one uploading queue.`);
      }
    }
  };
});

// ../../node_modules/.bun/mime-db@1.51.0/node_modules/mime-db/db.json
var require_db = __commonJS((exports, module) => {
  module.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/3gpphal+json": {
      source: "iana",
      compressible: true
    },
    "application/3gpphalforms+json": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/ace+cbor": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/at+jwt": {
      source: "iana"
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/captive+json": {
      source: "iana",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/clr": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["es", "ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/elm+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/elm+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/express": {
      source: "iana",
      extensions: ["exp"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/jscalendar+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/missing-blocks+cbor-seq": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/oauth-authz-req+jwt": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/opc-nodeset+xml": {
      source: "iana",
      compressible: true
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p21": {
      source: "iana"
    },
    "application/p21+zip": {
      source: "iana",
      compressible: false
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana"
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.cyn": {
      source: "iana",
      charset: "7-BIT"
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sarif+json": {
      source: "iana",
      compressible: true
    },
    "application/sarif-external-properties+json": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spdx+json": {
      source: "iana",
      compressible: true
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/token-introspection+jwt": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana",
      extensions: ["trig"]
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ubjson": {
      compressible: false,
      extensions: ["ubj"]
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["td"]
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.5gnas": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gtpc": {
      source: "iana"
    },
    "application/vnd.3gpp.interworking-data": {
      source: "iana"
    },
    "application/vnd.3gpp.lpp": {
      source: "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ngap": {
      source: "iana"
    },
    "application/vnd.3gpp.pfcp": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.s1ap": {
      source: "iana"
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.age": {
      source: "iana",
      extensions: ["age"]
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.arrow.file": {
      source: "iana"
    },
    "application/vnd.apache.arrow.stream": {
      source: "iana"
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["key"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.cryptomator.encrypted": {
      source: "iana"
    },
    "application/vnd.cryptomator.vault": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.cyclonedx+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cyclonedx+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.d3m-dataset": {
      source: "iana"
    },
    "application/vnd.d3m-problem": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana",
      extensions: ["dbf"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujifilm.fb.docuworks": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.slides": {
      source: "iana"
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana",
      extensions: ["mvt"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.nacamar.ybrid+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nebumind.line": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+cbor": {
      source: "iana"
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.opentimestamps.ots": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana",
      extensions: ["rar"]
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.resilient.logic": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.seis+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.sycle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veritone.aion+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.dpp": {
      source: "iana"
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      source: "iana",
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-iwork-keynote-sffkey": {
      extensions: ["key"]
    },
    "application/x-iwork-numbers-sffnumbers": {
      extensions: ["numbers"]
    },
    "application/x-iwork-pages-sffpages": {
      extensions: ["pages"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xsl", "xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana",
      extensions: ["amr"]
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx", "opus"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/scip": {
      source: "iana"
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sofa": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/tsvcis": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana"
    },
    "image/avcs": {
      source: "iana"
    },
    "image/avif": {
      source: "iana",
      compressible: false,
      extensions: ["avif"]
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/ktx2": {
      source: "iana",
      extensions: ["ktx2"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      compressible: true,
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      compressible: true,
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.pco.b16": {
      source: "iana",
      extensions: ["b16"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/e57": {
      source: "iana"
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/step": {
      source: "iana"
    },
    "model/step+xml": {
      source: "iana",
      compressible: true,
      extensions: ["stpx"]
    },
    "model/step+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpz"]
    },
    "model/step-xml+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpxz"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.pytha.pyox": {
      source: "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.sap.vds": {
      source: "iana",
      extensions: ["vds"]
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/cql": {
      source: "iana"
    },
    "text/cql-expression": {
      source: "iana"
    },
    "text/cql-identifier": {
      source: "iana"
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fhirpath": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/gff3": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shaclc": {
      source: "iana"
    },
    "text/shex": {
      source: "iana",
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/spdx": {
      source: "iana",
      extensions: ["spdx"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
      source: "iana",
      extensions: ["ged"]
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hans": {
      source: "iana"
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      compressible: true,
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/av1": {
      source: "iana"
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/ffv1": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana",
      extensions: ["m4s"]
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/jxsv": {
      source: "iana"
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/scip": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/vp9": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// ../../node_modules/.bun/mime-db@1.51.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports, module) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  module.exports = require_db();
});

// ../../node_modules/.bun/mime-types@2.1.34/node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports) => {
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var db = require_mime_db();
  var extname = __require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
  function charset(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf("charset") === -1) {
      var charset2 = exports.charset(mime);
      if (charset2)
        mime += "; charset=" + charset2.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path) {
    if (!path || typeof path !== "string") {
      return false;
    }
    var extension2 = extname("x." + path).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports.types[extension2] || false;
  }
  function populateMaps(extensions, types) {
    var preference = ["nginx", "apache", undefined, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0;i < exts.length; i++) {
        var extension2 = exts[i];
        if (types[extension2]) {
          var from = preference.indexOf(db[types[extension2]].source);
          var to = preference.indexOf(mime.source);
          if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types[extension2] = type;
      }
    });
  }
});

// ../../node_modules/.bun/@aws-sdk+util-format-url@3.775.0/node_modules/@aws-sdk/util-format-url/dist-cjs/index.js
var require_dist_cjs79 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    formatUrl: () => formatUrl
  });
  module.exports = __toCommonJS(index_exports);
  var import_querystring_builder = require_dist_cjs13();
  function formatUrl(request) {
    const { port, query } = request;
    let { protocol, path, hostname } = request;
    if (protocol && protocol.slice(-1) !== ":") {
      protocol += ":";
    }
    if (port) {
      hostname += `:${port}`;
    }
    if (path && path.charAt(0) !== "/") {
      path = `/${path}`;
    }
    let queryString = query ? (0, import_querystring_builder.buildQueryString)(query) : "";
    if (queryString && queryString[0] !== "?") {
      queryString = `?${queryString}`;
    }
    let auth = "";
    if (request.username != null || request.password != null) {
      const username = request.username ?? "";
      const password = request.password ?? "";
      auth = `${username}:${password}@`;
    }
    let fragment = "";
    if (request.fragment) {
      fragment = `#${request.fragment}`;
    }
    return `${protocol}//${auth}${hostname}${path}${queryString}${fragment}`;
  }
  __name(formatUrl, "formatUrl");
});

// ../../node_modules/.bun/@aws-sdk+s3-request-presigner@3.787.0/node_modules/@aws-sdk/s3-request-presigner/dist-cjs/index.js
var require_dist_cjs80 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var index_exports = {};
  __export(index_exports, {
    S3RequestPresigner: () => S3RequestPresigner,
    getSignedUrl: () => getSignedUrl
  });
  module.exports = __toCommonJS(index_exports);
  var import_util_format_url = require_dist_cjs79();
  var import_middleware_endpoint = require_dist_cjs35();
  var import_protocol_http = require_dist_cjs2();
  var import_signature_v4_multi_region = require_dist_cjs68();
  var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  var SHA256_HEADER = "X-Amz-Content-Sha256";
  var S3RequestPresigner = class {
    static {
      __name(this, "S3RequestPresigner");
    }
    signer;
    constructor(options) {
      const resolvedOptions = {
        service: options.signingName || options.service || "s3",
        uriEscapePath: options.uriEscapePath || false,
        applyChecksum: options.applyChecksum || false,
        ...options
      };
      this.signer = new import_signature_v4_multi_region.SignatureV4MultiRegion(resolvedOptions);
    }
    presign(requestToSign, {
      unsignableHeaders = /* @__PURE__ */ new Set,
      hoistableHeaders = /* @__PURE__ */ new Set,
      unhoistableHeaders = /* @__PURE__ */ new Set,
      ...options
    } = {}) {
      this.prepareRequest(requestToSign, {
        unsignableHeaders,
        unhoistableHeaders,
        hoistableHeaders
      });
      return this.signer.presign(requestToSign, {
        expiresIn: 900,
        unsignableHeaders,
        unhoistableHeaders,
        ...options
      });
    }
    presignWithCredentials(requestToSign, credentials, {
      unsignableHeaders = /* @__PURE__ */ new Set,
      hoistableHeaders = /* @__PURE__ */ new Set,
      unhoistableHeaders = /* @__PURE__ */ new Set,
      ...options
    } = {}) {
      this.prepareRequest(requestToSign, {
        unsignableHeaders,
        unhoistableHeaders,
        hoistableHeaders
      });
      return this.signer.presignWithCredentials(requestToSign, credentials, {
        expiresIn: 900,
        unsignableHeaders,
        unhoistableHeaders,
        ...options
      });
    }
    prepareRequest(requestToSign, {
      unsignableHeaders = /* @__PURE__ */ new Set,
      unhoistableHeaders = /* @__PURE__ */ new Set,
      hoistableHeaders = /* @__PURE__ */ new Set
    } = {}) {
      unsignableHeaders.add("content-type");
      Object.keys(requestToSign.headers).map((header) => header.toLowerCase()).filter((header) => header.startsWith("x-amz-server-side-encryption")).forEach((header) => {
        if (!hoistableHeaders.has(header)) {
          unhoistableHeaders.add(header);
        }
      });
      requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;
      const currentHostHeader = requestToSign.headers.host;
      const port = requestToSign.port;
      const expectedHostHeader = `${requestToSign.hostname}${requestToSign.port != null ? ":" + port : ""}`;
      if (!currentHostHeader || currentHostHeader === requestToSign.hostname && requestToSign.port != null) {
        requestToSign.headers.host = expectedHostHeader;
      }
    }
  };
  var getSignedUrl = /* @__PURE__ */ __name(async (client, command, options = {}) => {
    let s3Presigner;
    let region;
    if (typeof client.config.endpointProvider === "function") {
      const endpointV2 = await (0, import_middleware_endpoint.getEndpointFromInstructions)(command.input, command.constructor, client.config);
      const authScheme = endpointV2.properties?.authSchemes?.[0];
      if (authScheme?.name === "sigv4a") {
        region = authScheme?.signingRegionSet?.join(",");
      } else {
        region = authScheme?.signingRegion;
      }
      s3Presigner = new S3RequestPresigner({
        ...client.config,
        signingName: authScheme?.signingName,
        region: /* @__PURE__ */ __name(async () => region, "region")
      });
    } else {
      s3Presigner = new S3RequestPresigner(client.config);
    }
    const presignInterceptMiddleware = /* @__PURE__ */ __name((next, context) => async (args) => {
      const { request } = args;
      if (!import_protocol_http.HttpRequest.isInstance(request)) {
        throw new Error("Request to be presigned is not an valid HTTP request.");
      }
      delete request.headers["amz-sdk-invocation-id"];
      delete request.headers["amz-sdk-request"];
      delete request.headers["x-amz-user-agent"];
      let presigned2;
      const presignerOptions = {
        ...options,
        signingRegion: options.signingRegion ?? context["signing_region"] ?? region,
        signingService: options.signingService ?? context["signing_service"]
      };
      if (context.s3ExpressIdentity) {
        presigned2 = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);
      } else {
        presigned2 = await s3Presigner.presign(request, presignerOptions);
      }
      return {
        response: {},
        output: {
          $metadata: { httpStatusCode: 200 },
          presigned: presigned2
        }
      };
    }, "presignInterceptMiddleware");
    const middlewareName = "presignInterceptMiddleware";
    const clientStack = client.middlewareStack.clone();
    clientStack.addRelativeTo(presignInterceptMiddleware, {
      name: middlewareName,
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    });
    const handler = command.resolveMiddleware(clientStack, client.config, {});
    const { output } = await handler({ input: command.input });
    const { presigned } = output;
    return (0, import_util_format_url.formatUrl)(presigned);
  }, "getSignedUrl");
});

// src/get-service-client.ts
var import_client_cloudwatch_logs = __toESM(require_dist_cjs60(), 1);
var import_client_iam = __toESM(require_dist_cjs62(), 1);
var import_client_lambda = __toESM(require_dist_cjs63(), 1);
var import_client_s3 = __toESM(require_dist_cjs74(), 1);
var import_client_service_quotas = __toESM(require_dist_cjs75(), 1);
var import_client_sts = __toESM(require_dist_cjs76(), 1);

// ../serverless-client/dist/esm/index.mjs
import * as tty from "tty";
function interpolateFunction(input, inputRange, outputRange, options) {
  const { extrapolateLeft, extrapolateRight, easing } = options;
  let result = input;
  const [inputMin, inputMax] = inputRange;
  const [outputMin, outputMax] = outputRange;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") {
      return result;
    }
    if (extrapolateLeft === "clamp") {
      result = inputMin;
    } else if (extrapolateLeft === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateLeft === "extend") {}
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") {
      return result;
    }
    if (extrapolateRight === "clamp") {
      result = inputMax;
    } else if (extrapolateRight === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateRight === "extend") {}
  }
  if (outputMin === outputMax) {
    return outputMin;
  }
  result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  let i;
  for (i = 1;i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}
function checkValidInputRange(arr) {
  for (let i = 1;i < arr.length; ++i) {
    if (!(arr[i] > arr[i - 1])) {
      throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(",")}]`);
    }
  }
}
function checkInfiniteRange(name, arr) {
  if (arr.length < 2) {
    throw new Error(name + " must have at least 2 elements");
  }
  for (const element of arr) {
    if (typeof element !== "number") {
      throw new Error(`${name} must contain only numbers`);
    }
    if (!Number.isFinite(element)) {
      throw new Error(`${name} must contain only finite numbers, but got [${arr.join(",")}]`);
    }
  }
}
function interpolate(input, inputRange, outputRange, options) {
  if (typeof input === "undefined") {
    throw new Error("input can not be undefined");
  }
  if (typeof inputRange === "undefined") {
    throw new Error("inputRange can not be undefined");
  }
  if (typeof outputRange === "undefined") {
    throw new Error("outputRange can not be undefined");
  }
  if (inputRange.length !== outputRange.length) {
    throw new Error("inputRange (" + inputRange.length + ") and outputRange (" + outputRange.length + ") must have the same length");
  }
  checkInfiniteRange("inputRange", inputRange);
  checkInfiniteRange("outputRange", outputRange);
  checkValidInputRange(inputRange);
  const easing = options?.easing ?? ((num) => num);
  let extrapolateLeft = "extend";
  if (options?.extrapolateLeft !== undefined) {
    extrapolateLeft = options.extrapolateLeft;
  }
  let extrapolateRight = "extend";
  if (options?.extrapolateRight !== undefined) {
    extrapolateRight = options.extrapolateRight;
  }
  if (typeof input !== "number") {
    throw new TypeError("Cannot interpolate an input which is not a number");
  }
  const range = findRange(input, inputRange);
  return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {
    easing,
    extrapolateLeft,
    extrapolateRight
  });
}
function mulberry32(a) {
  let t = a + 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function hashCode(str) {
  let i = 0;
  let chr = 0;
  let hash = 0;
  for (i = 0;i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
}
var random = (seed, dummy) => {
  if (dummy !== undefined) {
    throw new TypeError("random() takes only one argument");
  }
  if (seed === null) {
    return Math.random();
  }
  if (typeof seed === "string") {
    return mulberry32(hashCode(seed));
  }
  if (typeof seed === "number") {
    return mulberry32(seed * 10000000000);
  }
  throw new Error("random() argument must be a number or a string");
};
function truthy(value) {
  return Boolean(value);
}
if (typeof window !== "undefined") {
  window.remotion_renderReady = false;
  if (!window.remotion_delayRenderTimeouts) {
    window.remotion_delayRenderTimeouts = {};
  }
}
var DELAY_RENDER_CALLSTACK_TOKEN = "The delayRender was called:";
var DELAY_RENDER_RETRIES_LEFT = "Retries left: ";
var DELAY_RENDER_RETRY_TOKEN = "- Rendering the frame will be retried.";
var DELAY_RENDER_CLEAR_TOKEN = "handle was cleared after";
var DATE_TOKEN = "remotion-date:";
var FILE_TOKEN = "remotion-file:";
var serializeJSONWithSpecialTypes = ({
  data,
  indent,
  staticBase
}) => {
  let customDateUsed = false;
  let customFileUsed = false;
  let mapUsed = false;
  let setUsed = false;
  try {
    const serializedString = JSON.stringify(data, function(key, value) {
      const item = this[key];
      if (item instanceof Date) {
        customDateUsed = true;
        return `${DATE_TOKEN}${item.toISOString()}`;
      }
      if (item instanceof Map) {
        mapUsed = true;
        return value;
      }
      if (item instanceof Set) {
        setUsed = true;
        return value;
      }
      if (typeof item === "string" && staticBase !== null && item.startsWith(staticBase)) {
        customFileUsed = true;
        return `${FILE_TOKEN}${item.replace(staticBase + "/", "")}`;
      }
      return value;
    }, indent);
    return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };
  } catch (err) {
    throw new Error("Could not serialize the passed input props to JSON: " + err.message);
  }
};
var deserializeJSONWithSpecialTypes = (data) => {
  return JSON.parse(data, (_, value) => {
    if (typeof value === "string" && value.startsWith(DATE_TOKEN)) {
      return new Date(value.replace(DATE_TOKEN, ""));
    }
    if (typeof value === "string" && value.startsWith(FILE_TOKEN)) {
      return `${window.remotion_staticBase}/${value.replace(FILE_TOKEN, "")}`;
    }
    return value;
  });
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...args) {
  return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
}
function getMatchers() {
  const cachedMatchers = {
    rgb: undefined,
    rgba: undefined,
    hsl: undefined,
    hsla: undefined,
    hex3: undefined,
    hex4: undefined,
    hex5: undefined,
    hex6: undefined,
    hex8: undefined
  };
  if (cachedMatchers.rgb === undefined) {
    cachedMatchers.rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
    cachedMatchers.rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
    cachedMatchers.hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
    cachedMatchers.hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;
    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;
  }
  return cachedMatchers;
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = Number.parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}
function parse360(str) {
  const int = Number.parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = Number.parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = Number.parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}
var colorNames = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
function normalizeColor(color) {
  const matchers = getMatchers();
  let match;
  if (matchers.hex6) {
    if (match = matchers.hex6.exec(color)) {
      return Number.parseInt(match[1] + "ff", 16) >>> 0;
    }
  }
  if (colorNames[color] !== undefined) {
    return colorNames[color];
  }
  if (matchers.rgb) {
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
  }
  if (matchers.rgba) {
    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
  }
  if (matchers.hex3) {
    if (match = matchers.hex3.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
  }
  if (matchers.hex8) {
    if (match = matchers.hex8.exec(color)) {
      return Number.parseInt(match[1], 16) >>> 0;
    }
  }
  if (matchers.hex4) {
    if (match = matchers.hex4.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
  }
  if (matchers.hsl) {
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
    }
  }
  if (matchers.hsla) {
    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }
  }
  throw new Error(`invalid color string ${color} provided`);
}
function processColor(color) {
  const normalizedColor = normalizeColor(color);
  return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
}
var ENABLE_V5_BREAKING_CHANGES = false;
var validateFrame = ({
  allowFloats,
  durationInFrames,
  frame
}) => {
  if (typeof frame === "undefined") {
    throw new TypeError(`Argument missing for parameter "frame"`);
  }
  if (typeof frame !== "number") {
    throw new TypeError(`Argument passed for "frame" is not a number: ${frame}`);
  }
  if (!Number.isFinite(frame)) {
    throw new RangeError(`Frame ${frame} is not finite`);
  }
  if (frame % 1 !== 0 && !allowFloats) {
    throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);
  }
  if (frame < 0 && frame < -durationInFrames) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);
  }
  if (frame > durationInFrames - 1) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);
  }
};
var validCodecs = [
  "h264",
  "h265",
  "vp8",
  "vp9",
  "mp3",
  "aac",
  "wav",
  "prores",
  "h264-mkv",
  "h264-ts",
  "gif"
];
function validateCodec(defaultCodec, location, name) {
  if (typeof defaultCodec === "undefined") {
    return;
  }
  if (typeof defaultCodec !== "string") {
    throw new TypeError(`The "${name}" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);
  }
  if (!validCodecs.includes(defaultCodec)) {
    throw new Error(`The "${name}" prop ${location} must be one of ${validCodecs.join(", ")}, but you passed ${defaultCodec}.`);
  }
}
var validateDefaultAndInputProps = (defaultProps, name, compositionId) => {
  if (!defaultProps) {
    return;
  }
  if (typeof defaultProps !== "object") {
    throw new Error(`"${name}" must be an object, but you passed a value of type ${typeof defaultProps}`);
  }
  if (Array.isArray(defaultProps)) {
    throw new Error(`"${name}" must be an object, an array was passed ${compositionId ? `for composition "${compositionId}"` : ""}`);
  }
};
function validateDimension(amount, nameOfProp, location) {
  if (typeof amount !== "number") {
    throw new Error(`The "${nameOfProp}" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);
  }
  if (isNaN(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must not be NaN, but is NaN.`);
  }
  if (!Number.isFinite(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be finite, but is ${amount}.`);
  }
  if (amount % 1 !== 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be an integer, but is ${amount}.`);
  }
  if (amount <= 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be positive, but got ${amount}.`);
  }
}
function validateDurationInFrames(durationInFrames, options) {
  const { allowFloats, component } = options;
  if (typeof durationInFrames === "undefined") {
    throw new Error(`The "durationInFrames" prop ${component} is missing.`);
  }
  if (typeof durationInFrames !== "number") {
    throw new Error(`The "durationInFrames" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);
  }
  if (durationInFrames <= 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be positive, but got ${durationInFrames}.`);
  }
  if (!allowFloats && durationInFrames % 1 !== 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be an integer, but got ${durationInFrames}.`);
  }
  if (!Number.isFinite(durationInFrames)) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be finite, but got ${durationInFrames}.`);
  }
}
function validateFps(fps, location, isGif) {
  if (typeof fps !== "number") {
    throw new Error(`"fps" must be a number, but you passed a value of type ${typeof fps} ${location}`);
  }
  if (!Number.isFinite(fps)) {
    throw new Error(`"fps" must be a finite, but you passed ${fps} ${location}`);
  }
  if (isNaN(fps)) {
    throw new Error(`"fps" must not be NaN, but got ${fps} ${location}`);
  }
  if (fps <= 0) {
    throw new TypeError(`"fps" must be positive, but got ${fps} ${location}`);
  }
  if (isGif && fps > 50) {
    throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);
  }
}
var getExpectedMediaFrameUncorrected = ({
  frame,
  playbackRate,
  startFrom
}) => {
  return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);
};
var getAbsoluteSrc = (relativeSrc) => {
  if (typeof window === "undefined") {
    return relativeSrc;
  }
  if (relativeSrc.startsWith("http://") || relativeSrc.startsWith("https://") || relativeSrc.startsWith("file://") || relativeSrc.startsWith("blob:") || relativeSrc.startsWith("data:")) {
    return relativeSrc;
  }
  return new URL(relativeSrc, window.origin).href;
};
var getOffthreadVideoSource = ({
  src,
  transparent,
  currentTime,
  toneMapped
}) => {
  return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(Math.max(0, currentTime))}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;
};
var NoReactInternals = {
  processColor,
  truthy,
  validateFps,
  validateDimension,
  validateDurationInFrames,
  validateDefaultAndInputProps,
  validateFrame,
  serializeJSONWithSpecialTypes,
  bundleName: "bundle.js",
  bundleMapName: "bundle.js.map",
  deserializeJSONWithSpecialTypes,
  DELAY_RENDER_CALLSTACK_TOKEN,
  DELAY_RENDER_RETRY_TOKEN,
  DELAY_RENDER_CLEAR_TOKEN,
  DELAY_RENDER_ATTEMPT_TOKEN: DELAY_RENDER_RETRIES_LEFT,
  getOffthreadVideoSource,
  getExpectedMediaFrameUncorrected,
  ENABLE_V5_BREAKING_CHANGES,
  MIN_NODE_VERSION: ENABLE_V5_BREAKING_CHANGES ? 18 : 16,
  MIN_BUN_VERSION: ENABLE_V5_BREAKING_CHANGES ? "1.1.3" : "1.0.3",
  colorNames,
  DATE_TOKEN,
  FILE_TOKEN,
  validateCodec
};
var COMMAND_NOT_FOUND = "Command not found";
var expiryDays = {
  "1-day": 1,
  "3-days": 3,
  "7-days": 7,
  "30-days": 30
};
var ServerlessRoutines;
((ServerlessRoutines2) => {
  ServerlessRoutines2["info"] = "info";
  ServerlessRoutines2["start"] = "start";
  ServerlessRoutines2["launch"] = "launch";
  ServerlessRoutines2["status"] = "status";
  ServerlessRoutines2["renderer"] = "renderer";
  ServerlessRoutines2["still"] = "still";
  ServerlessRoutines2["compositions"] = "compositions";
})(ServerlessRoutines ||= {});
var serverlessCodecs = [
  "h264",
  "h265",
  "vp8",
  "vp9",
  "mp3",
  "aac",
  "wav",
  "gif",
  "prores"
];
var rendersPrefix = (renderId) => `renders/${renderId}`;
var outStillName = (renderId, imageFormat) => `${rendersPrefix(renderId)}/out.${imageFormat}`;
var outName = (renderId, extension) => `${rendersPrefix(renderId)}/out.${extension}`;
var customOutName = (renderId, bucketName, name) => {
  if (typeof name === "string") {
    return {
      renderBucketName: bucketName,
      key: `${rendersPrefix(renderId)}/${name}`,
      customCredentials: null
    };
  }
  return {
    key: name.key,
    renderBucketName: name.bucketName,
    customCredentials: name.s3OutputProvider ?? null
  };
};
var overallProgressKey = (renderId) => `${rendersPrefix(renderId)}/progress.json`;
var MAX_FUNCTIONS_PER_RENDER = 200;
var validateDownloadBehavior = (downloadBehavior) => {
  if (downloadBehavior === null || downloadBehavior === undefined) {
    return null;
  }
  if (typeof downloadBehavior !== "object") {
    throw new Error("downloadBehavior must be null or an object");
  }
  const behavior = downloadBehavior;
  if (behavior.type !== "download" && behavior.type !== "play-in-browser") {
    throw new Error('Download behavior must be either "download" or "play-in-browser"');
  }
  if (behavior.type === "download") {
    if (typeof behavior.fileName !== "string" && behavior.fileName !== null) {
      throw new Error('If "downloadBehavior.type" is "download", then fileName must be "null" or a string');
    }
  }
};
var VERSION = "4.0.366";
var isColorSupported = () => {
  const env = process.env || {};
  const isForceDisabled = "NO_COLOR" in env;
  if (isForceDisabled) {
    return false;
  }
  const isForced = "FORCE_COLOR" in env;
  if (isForced) {
    return true;
  }
  const isWindows = process.platform === "win32";
  const isCompatibleTerminal = tty?.isatty?.(1) && env.TERM && env.TERM !== "dumb";
  const isCI = "CI" in env && (("GITHUB_ACTIONS" in env) || ("GITLAB_CI" in env) || ("CIRCLECI" in env));
  return isWindows || isCompatibleTerminal || isCI;
};
var chalk = (() => {
  const colors = {
    enabled: () => isColorSupported(),
    visible: true,
    styles: {},
    keys: {}
  };
  const ansi = (st) => {
    const open = `\x1B[${st.codes[0]}m`;
    const close = `\x1B[${st.codes[1]}m`;
    const regex = new RegExp(`\\u001b\\[${st.codes[1]}m`, "g");
    st.wrap = (input, newline) => {
      if (input.includes(close))
        input = input.replace(regex, close + open);
      const output = open + input + close;
      return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
    };
    return st;
  };
  const wrap = (sty, input, newline) => {
    return sty.wrap?.(input, newline);
  };
  const style = (input, stack) => {
    if (input === "" || input === null || input === undefined)
      return "";
    if (colors.enabled() === false)
      return input;
    if (colors.visible === false)
      return "";
    let str = String(input);
    const nl = str.includes(`
`);
    let n = stack.length;
    while (n-- > 0)
      str = wrap(colors.styles[stack[n]], str, nl);
    return str;
  };
  const define2 = (name, codes, type) => {
    colors.styles[name] = ansi({ name, codes });
    const keys = colors.keys[type] || (colors.keys[type] = []);
    keys.push(name);
    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias?.(name, value);
      },
      get() {
        const color = (input) => style(input, color.stack);
        Reflect.setPrototypeOf(color, colors);
        color.stack = this.stack ? this.stack.concat(name) : [name];
        return color;
      }
    });
  };
  define2("reset", [0, 0], "modifier");
  define2("bold", [1, 22], "modifier");
  define2("dim", [2, 22], "modifier");
  define2("italic", [3, 23], "modifier");
  define2("underline", [4, 24], "modifier");
  define2("inverse", [7, 27], "modifier");
  define2("hidden", [8, 28], "modifier");
  define2("strikethrough", [9, 29], "modifier");
  define2("black", [30, 39], "color");
  define2("red", [31, 39], "color");
  define2("green", [32, 39], "color");
  define2("yellow", [33, 39], "color");
  define2("blue", [34, 39], "color");
  define2("magenta", [35, 39], "color");
  define2("cyan", [36, 39], "color");
  define2("white", [37, 39], "color");
  define2("gray", [90, 39], "color");
  define2("grey", [90, 39], "color");
  define2("bgBlack", [40, 49], "bg");
  define2("bgRed", [41, 49], "bg");
  define2("bgGreen", [42, 49], "bg");
  define2("bgYellow", [43, 49], "bg");
  define2("bgBlue", [44, 49], "bg");
  define2("bgMagenta", [45, 49], "bg");
  define2("bgWhite", [47, 49], "bg");
  define2("blackBright", [90, 39], "bright");
  define2("redBright", [91, 39], "bright");
  define2("greenBright", [92, 39], "bright");
  define2("yellowBright", [93, 39], "bright");
  define2("blueBright", [94, 39], "bright");
  define2("magentaBright", [95, 39], "bright");
  define2("whiteBright", [97, 39], "bright");
  define2("bgBlackBright", [100, 49], "bgBright");
  define2("bgRedBright", [101, 49], "bgBright");
  define2("bgGreenBright", [102, 49], "bgBright");
  define2("bgYellowBright", [103, 49], "bgBright");
  define2("bgBlueBright", [104, 49], "bgBright");
  define2("bgMagentaBright", [105, 49], "bgBright");
  define2("bgWhiteBright", [107, 49], "bgBright");
  colors.alias = (name, color) => {
    const fn = colors[color];
    if (typeof fn !== "function") {
      throw new TypeError("Expected alias to be the name of an existing color (string) or a function");
    }
    if (!fn.stack) {
      Reflect.defineProperty(fn, "name", { value: name });
      colors.styles[name] = fn;
      fn.stack = [name];
    }
    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias?.(name, value);
      },
      get() {
        const col = (input) => style(input, col.stack);
        Reflect.setPrototypeOf(col, colors);
        col.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
        return col;
      }
    });
  };
  return colors;
})();
var logLevels = ["trace", "verbose", "info", "warn", "error"];
var getNumberForLogLevel = (level) => {
  return logLevels.indexOf(level);
};
var isEqualOrBelowLogLevel = (currentLevel, level) => {
  return getNumberForLogLevel(currentLevel) <= getNumberForLogLevel(level);
};
var reproWriteInstance = null;
var getReproWriter = () => {
  if (!reproWriteInstance) {
    throw new Error("reproWriteInstance is not initialized");
  }
  return reproWriteInstance;
};
var writeInRepro = (level, ...args) => {
  if (isReproEnabled()) {
    getReproWriter().writeLine(level, ...args);
  }
};
var shouldRepro = false;
var isReproEnabled = () => shouldRepro;
function truthy2(value) {
  return Boolean(value);
}
var INDENT_TOKEN = chalk.gray("│");
var verboseTag = (str) => {
  return isColorSupported() ? chalk.bgBlack(` ${str} `) : `[${str}]`;
};
var Log = {
  formatLogs: (logLevel, options, args) => {
    return [
      options.indent ? INDENT_TOKEN : null,
      options.tag ? verboseTag(options.tag) : null
    ].filter(truthy2).concat(args.map((a) => {
      if (logLevel === "warn") {
        return chalk.yellow(a);
      }
      if (logLevel === "error") {
        return chalk.red(a);
      }
      if (logLevel === "verbose" || logLevel === "trace") {
        return chalk.gray(a);
      }
      return a;
    }));
  },
  trace: (options, ...args) => {
    writeInRepro("trace", ...args);
    if (isEqualOrBelowLogLevel(options.logLevel, "trace")) {
      if (args.length === 0) {
        return process.stdout.write(`
`);
      }
      return console.log(...Log.formatLogs("trace", options, args));
    }
  },
  verbose: (options, ...args) => {
    writeInRepro("verbose", ...args);
    if (isEqualOrBelowLogLevel(options.logLevel, "verbose")) {
      if (args.length === 0) {
        return process.stdout.write(`
`);
      }
      return console.log(...Log.formatLogs("verbose", options, args));
    }
  },
  info: (options, ...args) => {
    writeInRepro("info", ...args);
    if (isEqualOrBelowLogLevel(options.logLevel, "info")) {
      if (args.length === 0) {
        return process.stdout.write(`
`);
      }
      return console.log(...Log.formatLogs("info", options, args));
    }
  },
  warn: (options, ...args) => {
    writeInRepro("warn", ...args);
    if (isEqualOrBelowLogLevel(options.logLevel, "warn")) {
      if (args.length === 0) {
        return process.stdout.write(`
`);
      }
      return console.warn(...Log.formatLogs("warn", options, args));
    }
  },
  error: (options, ...args) => {
    writeInRepro("error", ...args);
    if (isEqualOrBelowLogLevel(options.logLevel, "error")) {
      if (args.length === 0) {
        return process.stdout.write(`
`);
      }
      return console.error(...Log.formatLogs("error", options, args));
    }
  }
};
var alreadyPrintedCache = [];
var printUsefulErrorMessage = (err, logLevel, indent) => {
  const errorStack = err.stack;
  if (errorStack && alreadyPrintedCache.includes(errorStack)) {
    return;
  }
  if (errorStack) {
    alreadyPrintedCache.push(errorStack);
    alreadyPrintedCache = alreadyPrintedCache.slice(-10);
  }
  if (err.message.includes("Could not play video with")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/media-playback-error");
  }
  if (err.message.includes("A delayRender()") && err.message.includes("was called but not cleared after")) {
    Log.info({ indent, logLevel });
    if (err.message.includes("/proxy")) {
      Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/troubleshooting/delay-render-proxy");
    }
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/timeout");
  }
  if (err.message.includes("Target closed")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/target-closed");
  }
  if (err.message.includes("Timed out evaluating")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/troubleshooting/timed-out-page-function");
  }
  if (err.message.includes("ENAMETOOLONG")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue at https://remotion.dev/docs/enametoolong");
  }
  if (err.message.includes("Member must have value less than or equal to 3008")) {
    Log.warn({ indent, logLevel });
    Log.warn({ indent, logLevel }, "\uD83D\uDCA1 This error indicates that you have a AWS account on the free or basic tier or have been limited by your organization.");
    Log.warn({ indent, logLevel }, "Often times this can be solved by adding a credit card, or if already done, by contacting AWS support.");
    Log.warn({
      indent,
      logLevel
    }, "Alternatively, you can decrease the memory size of your Lambda function to a value below 3008 MB. See: https://www.remotion.dev/docs/lambda/runtime#core-count--vcpus");
    Log.warn({ indent, logLevel }, "See also: https://repost.aws/questions/QUKruWYNDYTSmP17jCnIz6IQ/questions/QUKruWYNDYTSmP17jCnIz6IQ/unable-to-set-lambda-memory-over-3008mb");
  }
  if (err.stack?.includes("TooManyRequestsException: Rate Exceeded.") || err.message?.includes("ConcurrentInvocationLimitExceeded")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 This error indicates that your Lambda concurrency limit is too low. See: https://www.remotion.dev/docs/lambda/troubleshooting/rate-limit");
  }
  if (err.message.includes("Error creating WebGL context")) {
    Log.info({ indent, logLevel });
    Log.warn({
      indent,
      logLevel
    }, '\uD83D\uDCA1 You might need to set the OpenGL renderer to "angle-egl", "angle" (or "swangle" if rendering on lambda). Learn why at https://www.remotion.dev/docs/three');
    Log.warn({
      indent,
      logLevel
    }, "\uD83D\uDCA1 Check how it's done at https://www.remotion.dev/docs/chromium-flags#--gl");
  }
  if (err.message.includes("The bucket does not allow ACLs")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Fix for this issue: https://remotion.dev/docs/lambda/troubleshooting/bucket-disallows-acl");
  }
  if (err.message.includes("Minified React error #306")) {
    const componentName = err.message.match(/<\w+>/)?.[0];
    Log.info({ indent, logLevel }, [
      "\uD83D\uDCA1 This error indicates that the component",
      componentName ? `(${componentName})` : null,
      "you are trying to render is not imported correctly."
    ].filter(truthy2).join(" "));
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "   Check the root file and ensure that the component is not undefined.");
    Log.info({ indent, logLevel }, "   Oftentimes, this happens if the component is missing the `export` keyword");
    Log.info({ indent, logLevel }, "   or if the component was renamed and the import statement not properly adjusted.");
  }
  if (err.message.includes("GLIBC_")) {
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Remotion requires at least Libc 2.35.");
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 Get help for this issue: https://github.com/remotion-dev/remotion/issues/2439");
  }
  if (err.message.includes("EBADF")) {
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 This error might be fixed by changing your Node version:");
    Log.info({ indent, logLevel }, "   https://github.com/remotion-dev/remotion/issues/2452");
  }
  if (err.message.includes("routines::unsupported")) {
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 This error might happen if using Cloud Run with credentials that have a newline at the end or are otherwise badly encoded.");
    Log.info({ indent, logLevel }, "   https://github.com/remotion-dev/remotion/issues/3864");
  }
  if (err.message.includes("Failed to fetch")) {
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 On Lambda, one reason this could happen is that Chrome is rejecting an asset to be loaded when it is running low on disk space.");
    Log.info({ indent, logLevel }, "Try increasing the disk size of your Lambda function.");
  }
  if (err.message.includes("Invalid value specified for cpu")) {
    Log.info({ indent, logLevel });
    Log.info({ indent, logLevel }, "\uD83D\uDCA1 This error indicates that your GCP account does have a limit. Try setting `--maxInstances=5` / `maxInstances: 5` when deploying this service.");
    Log.info({
      indent,
      logLevel
    });
  }
};
var wrapWithErrorHandling = (fn) => {
  return async (...args) => {
    try {
      return await fn(...args);
    } catch (err) {
      const { indent } = args[0];
      const { logLevel } = args[0];
      printUsefulErrorMessage(err, logLevel, indent);
      throw err;
    }
  };
};
var streamingKey = "remotion_buffer:";
var makeStreamer = (onMessage) => {
  const separator = new Uint8Array(streamingKey.length);
  for (let i = 0;i < streamingKey.length; i++) {
    separator[i] = streamingKey.charCodeAt(i);
  }
  let unprocessedBuffers = [];
  let outputBuffer = new Uint8Array(0);
  let missingData = null;
  const findSeparatorIndex = () => {
    let searchIndex = 0;
    while (true) {
      const separatorIndex = outputBuffer.indexOf(separator[0], searchIndex);
      if (separatorIndex === -1) {
        return -1;
      }
      if (outputBuffer.subarray(separatorIndex, separatorIndex + separator.length).toString() !== separator.toString()) {
        searchIndex = separatorIndex + 1;
        continue;
      }
      return separatorIndex;
    }
  };
  const processInput = () => {
    let separatorIndex = findSeparatorIndex();
    if (separatorIndex === -1) {
      return;
    }
    separatorIndex += separator.length;
    let nonceString = "";
    let lengthString = "";
    let statusString = "";
    while (true) {
      if (separatorIndex > outputBuffer.length - 1) {
        return;
      }
      const nextDigit = outputBuffer[separatorIndex];
      separatorIndex++;
      if (nextDigit === 58) {
        break;
      }
      nonceString += String.fromCharCode(nextDigit);
    }
    while (true) {
      if (separatorIndex > outputBuffer.length - 1) {
        return;
      }
      const nextDigit = outputBuffer[separatorIndex];
      separatorIndex++;
      if (nextDigit === 58) {
        break;
      }
      lengthString += String.fromCharCode(nextDigit);
    }
    while (true) {
      if (separatorIndex > outputBuffer.length - 1) {
        return;
      }
      const nextDigit = outputBuffer[separatorIndex];
      if (nextDigit === 58) {
        break;
      }
      separatorIndex++;
      statusString += String.fromCharCode(nextDigit);
    }
    const length = Number(lengthString);
    const status = Number(statusString);
    const dataLength = outputBuffer.length - separatorIndex - 1;
    if (dataLength < length) {
      missingData = {
        dataMissing: length - dataLength
      };
      return;
    }
    const data = outputBuffer.subarray(separatorIndex + 1, separatorIndex + 1 + Number(lengthString));
    onMessage(status === 1 ? "error" : "success", nonceString, data);
    missingData = null;
    outputBuffer = outputBuffer.subarray(separatorIndex + Number(lengthString) + 1);
    processInput();
  };
  const onData = (data) => {
    unprocessedBuffers.push(data);
    if (missingData) {
      missingData.dataMissing -= data.length;
    }
    if (missingData && missingData.dataMissing > 0) {
      return;
    }
    const newBuffer = new Uint8Array(outputBuffer.length + unprocessedBuffers.reduce((acc, val2) => acc + val2.length, 0));
    newBuffer.set(outputBuffer, 0);
    let offset = outputBuffer.length;
    for (const buf of unprocessedBuffers) {
      newBuffer.set(buf, offset);
      offset += buf.length;
    }
    outputBuffer = newBuffer;
    unprocessedBuffers = [];
    processInput();
  };
  return {
    onData,
    getOutputBuffer: () => outputBuffer,
    clear: () => {
      unprocessedBuffers = [];
      outputBuffer = new Uint8Array(0);
    }
  };
};
var min = (arr) => {
  if (arr.length === 0) {
    throw new Error("Array of 0 length");
  }
  let smallest = arr[0];
  for (let i = 0;i < arr.length; i++) {
    const elem = arr[i];
    if (elem < smallest) {
      smallest = elem;
    }
  }
  return smallest;
};
var max = (arr) => {
  if (arr.length === 0) {
    throw new Error("Array of 0 length");
  }
  let biggest = arr[0];
  for (let i = 0;i < arr.length; i++) {
    const elem = arr[i];
    if (elem > biggest) {
      biggest = elem;
    }
  }
  return biggest;
};
var getAbsoluteTime = (parsedTimings) => {
  if (parsedTimings.length === 0) {
    return 0;
  }
  const allEnds = parsedTimings.map((p) => p.rendered);
  const allStarts = parsedTimings.map((p) => p.start);
  const biggestEnd = max(allEnds);
  const smallestStart = min(allStarts);
  return Math.max(0, biggestEnd - smallestStart);
};
var calculateChunkTimes = ({
  type,
  timings
}) => {
  const parsedTimings = timings;
  const absoluteTime = getAbsoluteTime(parsedTimings);
  if (type === "combined-time-for-cost-calculation") {
    const totalEncodingTimings = parsedTimings.map((p) => Math.max(0, p.rendered - p.start)).reduce((a, b) => a + b, 0);
    return totalEncodingTimings + absoluteTime;
  }
  if (type === "absolute-time") {
    return absoluteTime;
  }
  throw new Error("invalid time for calculate chunk times");
};
var makeBucketName = (region, providerSpecifics) => {
  return `${providerSpecifics.getBucketPrefix()}${region.replace(/-/g, "")}-${providerSpecifics.randomHash()}`;
};
var internalGetOrCreateBucket = async (params) => {
  const remotionBuckets = await params.providerSpecifics.getBuckets({
    region: params.region,
    forceBucketName: null,
    forcePathStyle: params.forcePathStyle,
    requestHandler: params.requestHandler
  });
  if (remotionBuckets.length > 1) {
    throw new Error(`You have multiple buckets (${remotionBuckets.map((b) => b.name)}) in your S3 region (${params.region}) starting with "${params.providerSpecifics.getBucketPrefix()}". Please see https://remotion.dev/docs/lambda/multiple-buckets.`);
  }
  const { enableFolderExpiry, region } = params;
  if (remotionBuckets.length === 1) {
    const existingBucketName = remotionBuckets[0].name;
    await params.providerSpecifics.applyLifeCycle({
      enableFolderExpiry: enableFolderExpiry ?? null,
      bucketName: existingBucketName,
      region,
      customCredentials: params.customCredentials,
      forcePathStyle: params.forcePathStyle,
      requestHandler: params.requestHandler
    });
    return { bucketName: remotionBuckets[0].name, alreadyExisted: true };
  }
  const bucketName = makeBucketName(params.region, params.providerSpecifics);
  await params.providerSpecifics.createBucket({
    bucketName,
    region: params.region,
    forcePathStyle: params.forcePathStyle,
    skipPutAcl: params.skipPutAcl,
    requestHandler: params.requestHandler
  });
  await params.providerSpecifics.applyLifeCycle({
    enableFolderExpiry: enableFolderExpiry ?? null,
    bucketName,
    region,
    customCredentials: params.customCredentials,
    forcePathStyle: params.forcePathStyle,
    requestHandler: params.requestHandler
  });
  return { bucketName, alreadyExisted: false };
};
var inputPropsKey = (hash) => {
  return `input-props/${hash}.json`;
};
var resolvedPropsKey = (hash) => {
  return `resolved-props/${hash}.json`;
};
function streamToString(stream) {
  if (Buffer.isBuffer(stream)) {
    return stream.toString("utf-8");
  }
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on("data", (chunk) => chunks.push(new Uint8Array(chunk)));
    stream.on("error", (err) => reject(err));
    stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
  });
}
var MAX_WEBHOOK_CUSTOM_DATA_SIZE = 1024;
var validateWebhook = (webhook) => {
  if (typeof webhook === "undefined" || webhook === null) {
    return;
  }
  if (webhook.customData) {
    const size = JSON.stringify(webhook.customData).length;
    if (size > MAX_WEBHOOK_CUSTOM_DATA_SIZE) {
      throw new Error(`Webhook "customData" must be less than ${MAX_WEBHOOK_CUSTOM_DATA_SIZE} bytes. Current size: ${size} bytes.`);
    }
  }
};
var makeKey = (type, hash) => {
  if (type === "input-props") {
    return inputPropsKey(hash);
  }
  return resolvedPropsKey(hash);
};
var serializeOrThrow = (inputProps, propsType) => {
  try {
    const payload = NoReactInternals.serializeJSONWithSpecialTypes({
      indent: undefined,
      staticBase: null,
      data: inputProps
    });
    return payload.serializedString;
  } catch {
    throw new Error(`Error serializing ${propsType}. Check it has no circular references or reduce the size if the object is big.`);
  }
};
var getNeedsToUpload = ({
  type,
  sizes,
  providerSpecifics
}) => {
  const MARGIN = 5000 + MAX_WEBHOOK_CUSTOM_DATA_SIZE;
  const MAX_INLINE_PAYLOAD_SIZE = (type === "still" ? providerSpecifics.getMaxStillInlinePayloadSize() : providerSpecifics.getMaxNonInlinePayloadSizePerFunction()) - MARGIN;
  const sizesAlreadyUsed = sizes.reduce((a, b) => a + b);
  if (sizesAlreadyUsed > MAX_INLINE_PAYLOAD_SIZE) {
    console.warn(`Warning: The props are over ${Math.round(MAX_INLINE_PAYLOAD_SIZE / 1000)}KB (${Math.ceil(sizesAlreadyUsed / 1024)}KB) in size. Uploading them to ${providerSpecifics.serverStorageProductName()} to circumvent AWS Lambda payload size, which may lead to slowdown.`);
    return true;
  }
  return false;
};
var compressInputProps = async ({
  stringifiedInputProps,
  region,
  userSpecifiedBucketName,
  propsType,
  needsToUpload,
  providerSpecifics,
  forcePathStyle,
  skipPutAcl,
  requestHandler
}) => {
  const hash = providerSpecifics.randomHash();
  if (needsToUpload) {
    const bucketName = userSpecifiedBucketName ?? (await internalGetOrCreateBucket({
      region,
      enableFolderExpiry: null,
      customCredentials: null,
      providerSpecifics,
      forcePathStyle,
      skipPutAcl,
      requestHandler
    })).bucketName;
    await providerSpecifics.writeFile({
      body: stringifiedInputProps,
      bucketName,
      region,
      customCredentials: null,
      downloadBehavior: null,
      expectedBucketOwner: null,
      key: makeKey(propsType, hash),
      privacy: "private",
      forcePathStyle,
      storageClass: null,
      requestHandler
    });
    return {
      type: "bucket-url",
      hash,
      bucketName
    };
  }
  return {
    type: "payload",
    payload: stringifiedInputProps
  };
};
var DOCS_URL = "https://remotion.dev";
var errorIsOutOfSpaceError = (err) => {
  return err.includes("ENOSPC") || err.toLowerCase().includes("no space left on device");
};
var isErrInsufficientResourcesErr = (err) => {
  return err.includes("net::ERR_INSUFFICIENT_RESOURCES");
};
var isBrowserCrashedError = (err) => {
  return err.includes("Target closed.") || err.includes("Session closed");
};
var estimatePriceFromMetadata = ({
  renderMetadata,
  memorySizeInMb,
  diskSizeInMb,
  functionsInvoked,
  timings,
  region,
  providerSpecifics
}) => {
  if (!renderMetadata) {
    return null;
  }
  const elapsedTime = Math.max(0, Date.now() - (renderMetadata?.startedDate ?? 0));
  const unfinished = Math.max(0, (renderMetadata?.totalChunks ?? 0) - timings.length);
  const timeElapsedOfUnfinished = new Array(unfinished).fill(true).map(() => elapsedTime).reduce((a, b) => a + b, 0);
  const estimatedBillingDurationInMilliseconds = calculateChunkTimes({
    type: "combined-time-for-cost-calculation",
    timings
  }) + timeElapsedOfUnfinished;
  const accruedSoFar = Number(providerSpecifics.estimatePrice({
    region,
    durationInMilliseconds: estimatedBillingDurationInMilliseconds,
    memorySizeInMb,
    diskSizeInMb,
    lambdasInvoked: functionsInvoked
  }).toPrecision(5));
  return { accruedSoFar, estimatedBillingDurationInMilliseconds };
};
var isAudioCodec = (codec) => {
  return codec === "mp3" || codec === "aac" || codec === "wav";
};
var support = {
  "h264-mkv": {
    audio: true,
    video: true
  },
  aac: {
    audio: true,
    video: false
  },
  gif: {
    video: true,
    audio: false
  },
  h264: {
    video: true,
    audio: true
  },
  "h264-ts": {
    video: true,
    audio: true
  },
  h265: {
    video: true,
    audio: true
  },
  mp3: {
    audio: true,
    video: false
  },
  prores: {
    audio: true,
    video: true
  },
  vp8: {
    audio: true,
    video: true
  },
  vp9: {
    audio: true,
    video: true
  },
  wav: {
    audio: true,
    video: false
  }
};
var codecSupportsMedia = (codec) => {
  return support[codec];
};
var getFramesToRender = (frameRange, everyNthFrame) => {
  if (everyNthFrame === 0) {
    throw new Error("everyNthFrame cannot be 0");
  }
  return new Array(frameRange[1] - frameRange[0] + 1).fill(true).map((_, index) => {
    return index + frameRange[0];
  }).filter((index) => {
    return index % everyNthFrame === 0;
  });
};
var validCodecs2 = [
  "h264",
  "h265",
  "vp8",
  "vp9",
  "mp3",
  "aac",
  "wav",
  "prores",
  "h264-mkv",
  "h264-ts",
  "gif"
];
var defaultFileExtensionMap = {
  "h264-mkv": {
    default: "mkv",
    forAudioCodec: {
      "pcm-16": { possible: ["mkv"], default: "mkv" },
      mp3: { possible: ["mkv"], default: "mkv" }
    }
  },
  "h264-ts": {
    default: "ts",
    forAudioCodec: {
      "pcm-16": { possible: ["ts"], default: "ts" },
      aac: { possible: ["ts"], default: "ts" }
    }
  },
  aac: {
    default: "aac",
    forAudioCodec: {
      aac: {
        possible: ["aac", "3gp", "m4a", "m4b", "mpg", "mpeg"],
        default: "aac"
      },
      "pcm-16": {
        possible: ["wav"],
        default: "wav"
      }
    }
  },
  gif: {
    default: "gif",
    forAudioCodec: {}
  },
  h264: {
    default: "mp4",
    forAudioCodec: {
      "pcm-16": { possible: ["mkv", "mov"], default: "mkv" },
      aac: { possible: ["mp4", "mkv", "mov"], default: "mp4" },
      mp3: { possible: ["mp4", "mkv", "mov"], default: "mp4" }
    }
  },
  h265: {
    default: "mp4",
    forAudioCodec: {
      aac: { possible: ["mp4", "mkv", "hevc"], default: "mp4" },
      "pcm-16": { possible: ["mkv"], default: "mkv" }
    }
  },
  mp3: {
    default: "mp3",
    forAudioCodec: {
      mp3: { possible: ["mp3"], default: "mp3" },
      "pcm-16": { possible: ["wav"], default: "wav" }
    }
  },
  prores: {
    default: "mov",
    forAudioCodec: {
      aac: { possible: ["mov", "mkv", "mxf"], default: "mov" },
      "pcm-16": { possible: ["mov", "mkv", "mxf"], default: "mov" }
    }
  },
  vp8: {
    default: "webm",
    forAudioCodec: {
      "pcm-16": { possible: ["mkv"], default: "mkv" },
      opus: { possible: ["webm"], default: "webm" }
    }
  },
  vp9: {
    default: "webm",
    forAudioCodec: {
      "pcm-16": { possible: ["mkv"], default: "mkv" },
      opus: { possible: ["webm"], default: "webm" }
    }
  },
  wav: {
    default: "wav",
    forAudioCodec: {
      "pcm-16": { possible: ["wav"], default: "wav" }
    }
  }
};
var getFileExtensionFromCodec = (codec, audioCodec) => {
  if (!validCodecs2.includes(codec)) {
    throw new Error(`Codec must be one of the following: ${validCodecs2.join(", ")}, but got ${codec}`);
  }
  const map = defaultFileExtensionMap[codec];
  if (audioCodec === null) {
    return map.default;
  }
  const typedAudioCodec = audioCodec;
  if (!(typedAudioCodec in map.forAudioCodec)) {
    throw new Error(`Audio codec ${typedAudioCodec} is not supported for codec ${codec}`);
  }
  return map.forAudioCodec[audioCodec].default;
};
var SLASH = 47;
var DOT = 46;
var assertPath = (path) => {
  const t = typeof path;
  if (t !== "string") {
    throw new TypeError(`Expected a string, got a ${t}`);
  }
};
var posixNormalize = (path, allowAboveRoot) => {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i = 0;i <= path.length; ++i) {
    if (i < path.length) {
      code = path.charCodeAt(i);
    } else if (code === SLASH) {
      break;
    } else {
      code = SLASH;
    }
    if (code === SLASH) {
      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== DOT || res.charCodeAt(res.length - 2) !== DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf("/");
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) {
            res += "/..";
          } else {
            res = "..";
          }
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) {
          res += "/" + path.slice(lastSlash + 1, i);
        } else {
          res = path.slice(lastSlash + 1, i);
        }
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
};
var decode = (s) => {
  try {
    return decodeURIComponent(s);
  } catch {
    return s;
  }
};
var pathNormalize = (p) => {
  assertPath(p);
  let path = p;
  if (path.length === 0) {
    return ".";
  }
  const isAbsolute = path.charCodeAt(0) === SLASH;
  const trailingSeparator = path.charCodeAt(path.length - 1) === SLASH;
  path = decode(path);
  path = posixNormalize(path, !isAbsolute);
  if (path.length === 0 && !isAbsolute) {
    path = ".";
  }
  if (path.length > 0 && trailingSeparator) {
    path += "/";
  }
  if (isAbsolute) {
    return "/" + path;
  }
  return path;
};
var getExtensionOfFilename = (filename) => {
  if (filename === null) {
    return null;
  }
  const filenameArr = pathNormalize(filename).split(".");
  const hasExtension = filenameArr.length >= 2;
  const filenameArrLength = filenameArr.length;
  const extension = hasExtension ? filenameArr[filenameArrLength - 1] : null;
  return extension;
};
var DEFAULT = null;
var cliFlag = "separate-audio-to";
var separateAudioOption = {
  cliFlag,
  description: () => `If set, the audio will not be included in the main output but rendered as a separate file at the location you pass. It is recommended to use an absolute path. If a relative path is passed, it is relative to the Remotion Root.`,
  docLink: "https://remotion.dev/docs/renderer/render-media",
  getValue: ({ commandLine }) => {
    if (commandLine[cliFlag]) {
      return {
        source: "cli",
        value: commandLine[cliFlag]
      };
    }
    return {
      source: "default",
      value: DEFAULT
    };
  },
  name: "Separate audio to",
  setConfig: () => {
    throw new Error("Not implemented");
  },
  ssrName: "separateAudioTo",
  type: "string"
};
var validAudioCodecs = ["pcm-16", "aac", "mp3", "opus"];
var supportedAudioCodecs = {
  h264: ["aac", "pcm-16", "mp3"],
  "h264-mkv": ["pcm-16", "mp3"],
  "h264-ts": ["pcm-16", "aac"],
  aac: ["aac", "pcm-16"],
  avi: [],
  gif: [],
  h265: ["aac", "pcm-16"],
  mp3: ["mp3", "pcm-16"],
  prores: ["aac", "pcm-16"],
  vp8: ["opus", "pcm-16"],
  vp9: ["opus", "pcm-16"],
  wav: ["pcm-16"]
};
var _satisfies = supportedAudioCodecs;
if (_satisfies) {}
var cliFlag2 = "audio-codec";
var ssrName = "audioCodec";
var defaultAudioCodecs = {
  "h264-mkv": {
    lossless: "pcm-16",
    compressed: "pcm-16"
  },
  "h264-ts": {
    lossless: "pcm-16",
    compressed: "aac"
  },
  aac: {
    lossless: "pcm-16",
    compressed: "aac"
  },
  gif: {
    lossless: null,
    compressed: null
  },
  h264: {
    lossless: "pcm-16",
    compressed: "aac"
  },
  h265: {
    lossless: "pcm-16",
    compressed: "aac"
  },
  mp3: {
    lossless: "pcm-16",
    compressed: "mp3"
  },
  prores: {
    lossless: "pcm-16",
    compressed: "pcm-16"
  },
  vp8: {
    lossless: "pcm-16",
    compressed: "opus"
  },
  vp9: {
    lossless: "pcm-16",
    compressed: "opus"
  },
  wav: {
    lossless: "pcm-16",
    compressed: "pcm-16"
  }
};
var extensionMap = {
  aac: "aac",
  mp3: "mp3",
  opus: "opus",
  "pcm-16": "wav"
};
var resolveAudioCodec = ({
  codec,
  setting,
  preferLossless,
  separateAudioTo
}) => {
  let derivedFromSeparateAudioToExtension = null;
  if (separateAudioTo) {
    const extension = separateAudioTo.split(".").pop();
    for (const [key, value] of Object.entries(extensionMap)) {
      if (value === extension) {
        derivedFromSeparateAudioToExtension = key;
        if (!supportedAudioCodecs[codec].includes(derivedFromSeparateAudioToExtension) && derivedFromSeparateAudioToExtension) {
          throw new Error(`The codec is ${codec} but the audio codec derived from --${separateAudioOption.cliFlag} is ${derivedFromSeparateAudioToExtension}. The only supported codecs are: ${supportedAudioCodecs[codec].join(", ")}`);
        }
      }
    }
  }
  if (preferLossless) {
    const selected = getDefaultAudioCodec({ codec, preferLossless });
    if (derivedFromSeparateAudioToExtension && selected !== derivedFromSeparateAudioToExtension) {
      throw new Error(`The audio codec derived from --${separateAudioOption.cliFlag} is ${derivedFromSeparateAudioToExtension}, but does not match the audio codec derived from the "Prefer lossless" option (${selected}). Remove any conflicting options.`);
    }
    return selected;
  }
  if (setting === null) {
    if (derivedFromSeparateAudioToExtension) {
      return derivedFromSeparateAudioToExtension;
    }
    return getDefaultAudioCodec({ codec, preferLossless });
  }
  if (derivedFromSeparateAudioToExtension !== setting && derivedFromSeparateAudioToExtension) {
    throw new Error(`The audio codec derived from --${separateAudioOption.cliFlag} is ${derivedFromSeparateAudioToExtension}, but does not match the audio codec derived from your ${audioCodecOption.name} setting (${setting}). Remove any conflicting options.`);
  }
  return setting;
};
var getDefaultAudioCodec = ({
  codec,
  preferLossless
}) => {
  return defaultAudioCodecs[codec][preferLossless ? "lossless" : "compressed"];
};
var _audioCodec = null;
var audioCodecOption = {
  cliFlag: cliFlag2,
  setConfig: (audioCodec) => {
    if (audioCodec === null) {
      _audioCodec = null;
      return;
    }
    if (!validAudioCodecs.includes(audioCodec)) {
      throw new Error(`Audio codec must be one of the following: ${validAudioCodecs.join(", ")}, but got ${audioCodec}`);
    }
    _audioCodec = audioCodec;
  },
  getValue: ({ commandLine }) => {
    if (commandLine[cliFlag2]) {
      const codec = commandLine[cliFlag2];
      if (!validAudioCodecs.includes(commandLine[cliFlag2])) {
        throw new Error(`Audio codec must be one of the following: ${validAudioCodecs.join(", ")}, but got ${codec}`);
      }
      return {
        source: "cli",
        value: commandLine[cliFlag2]
      };
    }
    if (_audioCodec !== null) {
      return {
        source: "config",
        value: _audioCodec
      };
    }
    return {
      source: "default",
      value: null
    };
  },
  description: () => `Set the format of the audio that is embedded in the video. Not all codec and audio codec combinations are supported and certain combinations require a certain file extension and container format. See the table in the docs to see possible combinations.`,
  docLink: "https://www.remotion.dev/docs/encoding/#audio-codec",
  name: "Audio Codec",
  ssrName,
  type: "aac"
};
var validateOutputFilename = ({
  codec,
  audioCodecSetting,
  extension,
  preferLossless,
  separateAudioTo
}) => {
  if (!defaultFileExtensionMap[codec]) {
    throw new TypeError(`The codec "${codec}" is not supported. Supported codecs are: ${Object.keys(defaultFileExtensionMap).join(", ")}`);
  }
  const map = defaultFileExtensionMap[codec];
  const resolvedAudioCodec = resolveAudioCodec({
    codec,
    preferLossless,
    setting: audioCodecSetting,
    separateAudioTo
  });
  if (resolvedAudioCodec === null) {
    if (extension !== map.default) {
      throw new TypeError(`When using the ${codec} codec, the output filename must end in .${map.default}.`);
    }
    return;
  }
  if (!(resolvedAudioCodec in map.forAudioCodec)) {
    throw new Error(`Audio codec ${resolvedAudioCodec} is not supported for codec ${codec}`);
  }
  const acceptableExtensions = map.forAudioCodec[resolvedAudioCodec].possible;
  if (!acceptableExtensions.includes(extension) && !separateAudioTo) {
    throw new TypeError(`When using the ${codec} codec with the ${resolvedAudioCodec} audio codec, the output filename must end in one of the following: ${acceptableExtensions.join(", ")}.`);
  }
};
var NoReactAPIs = {
  getExtensionOfFilename,
  getFileExtensionFromCodec,
  validateOutputFilename,
  getFramesToRender,
  codecSupportsMedia,
  isAudioCodec
};
var getCustomOutName = ({
  renderMetadata,
  customCredentials
}) => {
  if (!renderMetadata.outName) {
    return null;
  }
  if (typeof renderMetadata.outName === "string") {
    return renderMetadata.outName;
  }
  if (renderMetadata.outName.s3OutputProvider) {
    if (!customCredentials && renderMetadata.privacy === "private") {
      throw new TypeError(`The file was rendered with a custom S3 implementation and is not public, but no custom credentials were passed to downloadMedia().`);
    }
    return {
      bucketName: renderMetadata.outName.bucketName,
      key: renderMetadata.outName.key,
      s3OutputProvider: {
        endpoint: renderMetadata.outName.s3OutputProvider.endpoint,
        accessKeyId: customCredentials?.accessKeyId ?? null,
        secretAccessKey: customCredentials?.secretAccessKey ?? null,
        region: customCredentials?.region,
        forcePathStyle: customCredentials?.forcePathStyle ?? false
      }
    };
  }
  return {
    bucketName: renderMetadata.outName.bucketName,
    key: renderMetadata.outName.key
  };
};
var validateBucketName = ({
  bucketName,
  bucketNamePrefix,
  options
}) => {
  if (typeof bucketName !== "string") {
    throw new TypeError(`'bucketName' must be a string, but is ${JSON.stringify(bucketName)}`);
  }
  if (options.mustStartWithRemotion && !bucketName.startsWith(bucketNamePrefix)) {
    throw new Error(`The bucketName parameter must start with ${bucketNamePrefix}.`);
  }
  if (!bucketName.match(/^(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$)/)) {
    throw new Error(`The bucket ${bucketName} `);
  }
};
var validateS3Key = (s3Key) => {
  if (typeof s3Key !== "string") {
    throw new TypeError("The S3 key must be a string. Passed an object of type " + typeof s3Key);
  }
  if (!s3Key.match(/^([0-9a-zA-Z-!_.*'()/:&$@=;+,?]+)/g)) {
    throw new Error("The S3 Key must match the RegExp `/^([0-9a-zA-Z-!_.*'()/:&$@=;+,?]+)/g`. You passed: " + s3Key + ". Check for invalid characters.");
  }
};
var validateOutname = ({
  outName: outName2,
  codec,
  audioCodecSetting,
  separateAudioTo,
  bucketNamePrefix
}) => {
  if (typeof outName2 === "undefined" || outName2 === null) {
    return;
  }
  if (typeof outName2 !== "string") {
    validateS3Key(outName2.key);
    validateBucketName({
      bucketName: outName2.bucketName,
      bucketNamePrefix,
      options: {
        mustStartWithRemotion: false
      }
    });
    return;
  }
  if (codec) {
    NoReactAPIs.validateOutputFilename({
      codec,
      audioCodecSetting,
      extension: NoReactAPIs.getExtensionOfFilename(outName2),
      preferLossless: false,
      separateAudioTo
    });
  }
  validateS3Key(outName2);
};
var getExpectedOutName = ({
  renderMetadata,
  bucketName,
  customCredentials,
  bucketNamePrefix
}) => {
  const outNameValue = getCustomOutName({
    customCredentials,
    renderMetadata
  });
  if (outNameValue) {
    validateOutname({
      outName: outNameValue,
      codec: renderMetadata.codec,
      audioCodecSetting: renderMetadata.audioCodec,
      separateAudioTo: null,
      bucketNamePrefix
    });
    return customOutName(renderMetadata.renderId, bucketName, outNameValue);
  }
  if (renderMetadata.type === "still") {
    return {
      renderBucketName: bucketName,
      key: outStillName(renderMetadata.renderId, renderMetadata.imageFormat),
      customCredentials: null
    };
  }
  if (renderMetadata.type === "video") {
    return {
      renderBucketName: bucketName,
      key: outName(renderMetadata.renderId, NoReactAPIs.getFileExtensionFromCodec(renderMetadata.codec, renderMetadata.audioCodec)),
      customCredentials: null
    };
  }
  throw new TypeError("no type passed");
};
var display = (accrued) => {
  if (accrued < 0.001) {
    return "<$0.001";
  }
  return new Intl.NumberFormat("en-US", {
    currency: "USD",
    style: "currency",
    currencyDisplay: "narrowSymbol",
    minimumFractionDigits: 3
  }).format(accrued);
};
var formatCostsInfo = (accrued) => {
  return {
    accruedSoFar: accrued,
    displayCost: display(accrued),
    currency: "USD",
    disclaimer: "Estimated cost only. Does not include charges for other AWS services."
  };
};
var getOverallProgressFromStorage = async ({
  renderId,
  bucketName,
  expectedBucketOwner,
  region,
  providerSpecifics,
  forcePathStyle,
  requestHandler
}) => {
  try {
    const Body = await providerSpecifics.readFile({
      bucketName,
      key: overallProgressKey(renderId),
      expectedBucketOwner,
      region,
      forcePathStyle,
      requestHandler
    });
    const str = await streamToString(Body);
    return JSON.parse(str);
  } catch (err) {
    if (err.name === "NotFound") {
      throw new TypeError(`No render with ID "${renderId}" found in bucket ${bucketName} and region ${region}`);
    }
    throw err;
  }
};
var FAILED_TO_LAUNCH_TOKEN = "Failed to launch browser.";
var getExplanation = (stack) => {
  if (stack.includes("FATAL:zygote_communication_linux.cc")) {
    return FAILED_TO_LAUNCH_TOKEN + " Will be retried - you can probably ignore this error.";
  }
  if (stack.includes("error while loading shared libraries: libnss3.so")) {
    return FAILED_TO_LAUNCH_TOKEN + " Will be retried - you can probably ignore this error.";
  }
  if (stack.includes("TooManyRequestsException") || stack.includes("ConcurrentInvocationLimitExceeded")) {
    return `AWS returned an "TooManyRequestsException" error message which could mean you reached the concurrency limit of AWS Lambda. You can increase the limit - read this troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/rate-limit`;
  }
  if (errorIsOutOfSpaceError(stack)) {
    return `Your lambda function reached the storage limit. Reduce the amount of space needed per lambda function or increase the storage limit: ${DOCS_URL}/docs/lambda/disk-size.`;
  }
  if (isErrInsufficientResourcesErr(stack)) {
    return "The lambda ran out of memory. Deploy a new function with more memory.";
  }
  if (isBrowserCrashedError(stack)) {
    return "The browser crashed while rendering the video. Deploy a new function with memory to give the browser more resources.";
  }
  return null;
};
var inspectErrors = ({
  errors
}) => {
  return errors.map((e) => {
    return {
      ...e,
      explanation: getExplanation(e.stack),
      s3Location: ""
    };
  });
};
var weights = {
  evaluating: 0.1,
  encoding: 0.1,
  frames: 0.6,
  invoking: 0.1,
  combining: 0.1
};
var getOverallProgress = ({
  encoding,
  invoking,
  frames,
  invokedLambda,
  visitedServeUrl,
  gotComposition,
  combining
}) => {
  const evaluationProgress = [
    Boolean(invokedLambda),
    Boolean(visitedServeUrl),
    Boolean(gotComposition)
  ].reduce((a, b) => Number(a) + Number(b), 0) / 3;
  return evaluationProgress * weights.evaluating + encoding * weights.encoding + invoking * weights.invoking + frames * weights.frames + combining * weights.combining;
};
var MAX_MISSING_CHUNKS = 5;
var makeChunkMissingMessage = ({
  missingChunks,
  renderMetadata,
  region,
  providerSpecifics,
  functionName
}) => {
  if (missingChunks.length === 0) {
    return "All chunks have been successfully rendered, but the main function has timed out.";
  }
  return [
    `The following chunks are missing (showing ${Math.min(MAX_MISSING_CHUNKS, missingChunks.length)} out of ${missingChunks.length}):`,
    ...missingChunks.map((ch) => {
      const isLastChunk = ch === renderMetadata.totalChunks - 1;
      const start = ch * renderMetadata.framesPerLambda;
      const end = renderMetadata.type === "still" ? 0 : isLastChunk ? renderMetadata.frameRange[1] : (ch + 1) * renderMetadata.framesPerLambda - 1;
      const msg = `Chunk ${ch} (Frames ${start} - ${end})`;
      return [
        msg,
        `▸ Logs for chunk ${ch}: ${providerSpecifics.getLoggingUrlForRendererFunction({
          functionName,
          region,
          rendererFunctionName: null,
          renderId: renderMetadata.renderId,
          chunk: ch
        })}`
      ].join(`
`);
    }).slice(0, 5)
  ].join(`
`);
};
var makeTimeoutMessage = ({
  timeoutInMilliseconds,
  missingChunks,
  renderMetadata,
  renderId,
  functionName,
  region,
  providerSpecifics
}) => {
  const cloudWatchRendererUrl = providerSpecifics.getLoggingUrlForRendererFunction({
    renderId,
    functionName,
    region,
    rendererFunctionName: functionName,
    chunk: null
  });
  const cloudWatchLaunchUrl = providerSpecifics.getLoggingUrlForMethod({
    renderId,
    functionName,
    method: "launch",
    region,
    rendererFunctionName: functionName
  });
  const message = [
    `The main function timed out after ${timeoutInMilliseconds}ms.`,
    makeChunkMissingMessage({
      missingChunks,
      renderMetadata,
      region,
      providerSpecifics,
      functionName
    }),
    "",
    `Consider increasing the timeout of your function.`,
    `▸ You can use the "--timeout" parameter when deploying a function via CLI, or the "timeoutInSeconds" parameter when using the deployFunction() API.`,
    `${DOCS_URL}/docs/lambda/cli/functions/deploy`,
    "",
    "▸ Visit the logs for the main function:",
    cloudWatchLaunchUrl,
    "▸ Visit the logs for the renderer functions:",
    cloudWatchRendererUrl,
    "",
    "▸ Get help on debugging this error:",
    `${DOCS_URL}/docs/lambda/troubleshooting/debug`
  ].join(`
`);
  return message;
};
var makeTimeoutError = ({
  timeoutInMilliseconds,
  missingChunks,
  renderMetadata,
  renderId,
  functionName,
  region,
  providerSpecifics
}) => {
  const message = makeTimeoutMessage({
    missingChunks,
    renderMetadata,
    timeoutInMilliseconds,
    renderId,
    functionName,
    region,
    providerSpecifics
  });
  const error = new Error(message);
  return {
    attempt: 1,
    chunk: null,
    explanation: null,
    frame: null,
    isFatal: true,
    s3Location: "",
    stack: error.stack,
    tmpDir: null,
    totalAttempts: 1,
    type: "stitcher",
    willRetry: false,
    message,
    name: "TimeoutError"
  };
};
var lambdaRenderHasAudioVideo = (renderMetadata) => {
  if (renderMetadata.type === "still") {
    throw new Error("Cannot merge stills");
  }
  const support2 = NoReactAPIs.codecSupportsMedia(renderMetadata.codec);
  const hasVideo = renderMetadata ? !NoReactAPIs.isAudioCodec(renderMetadata.codec) : false;
  const hasAudio = renderMetadata ? !renderMetadata.muted && support2.audio : false;
  return {
    hasAudio,
    hasVideo
  };
};
function truthy3(value) {
  return Boolean(value);
}
var getProgress = async ({
  bucketName,
  renderId,
  expectedBucketOwner,
  region,
  memorySizeInMb,
  timeoutInMilliseconds,
  customCredentials,
  providerSpecifics,
  forcePathStyle,
  functionName,
  requestHandler
}) => {
  const overallProgress = await getOverallProgressFromStorage({
    renderId,
    bucketName,
    expectedBucketOwner,
    region,
    providerSpecifics,
    forcePathStyle,
    requestHandler
  });
  if (overallProgress.postRenderData) {
    if (!overallProgress.renderMetadata) {
      throw new Error("No render metadata found even though render is finished");
    }
    if (overallProgress.renderMetadata.type === "still") {
      throw new Error("You don't need to call getRenderProgress() on a still render. Once you have obtained the `renderId`, the render is already done! \uD83D\uDE09");
    }
    const outData = getExpectedOutName({
      renderMetadata: overallProgress.renderMetadata,
      bucketName,
      customCredentials,
      bucketNamePrefix: providerSpecifics.getBucketPrefix()
    });
    const totalFrameCount = NoReactAPIs.getFramesToRender(overallProgress.renderMetadata.frameRange, overallProgress.renderMetadata.everyNthFrame).length;
    return {
      framesRendered: totalFrameCount,
      bucket: bucketName,
      renderSize: overallProgress.postRenderData.renderSize,
      chunks: overallProgress.renderMetadata.totalChunks,
      cleanup: {
        doneIn: overallProgress.postRenderData.timeToCleanUp,
        filesDeleted: overallProgress.postRenderData.filesCleanedUp,
        minFilesToDelete: overallProgress.postRenderData.filesCleanedUp
      },
      costs: {
        accruedSoFar: overallProgress.postRenderData.cost.estimatedCost,
        displayCost: overallProgress.postRenderData.cost.estimatedDisplayCost,
        currency: overallProgress.postRenderData.cost.currency,
        disclaimer: overallProgress.postRenderData.cost.disclaimer
      },
      currentTime: Date.now(),
      done: true,
      encodingStatus: {
        framesEncoded: totalFrameCount,
        combinedFrames: totalFrameCount,
        timeToCombine: overallProgress.postRenderData.timeToCombine
      },
      errors: overallProgress.postRenderData.errors,
      fatalErrorEncountered: false,
      lambdasInvoked: overallProgress.renderMetadata.totalChunks,
      outputFile: overallProgress.postRenderData.outputFile,
      renderId,
      timeToFinish: overallProgress.postRenderData.timeToFinish,
      timeToFinishChunks: overallProgress.postRenderData.timeToRenderChunks,
      timeToRenderFrames: overallProgress.postRenderData.timeToRenderFrames,
      overallProgress: 1,
      retriesInfo: overallProgress.postRenderData.retriesInfo,
      outKey: outData.key,
      outBucket: outData.renderBucketName,
      mostExpensiveFrameRanges: overallProgress.postRenderData.mostExpensiveFrameRanges ?? null,
      timeToEncode: overallProgress.postRenderData.timeToEncode,
      outputSizeInBytes: overallProgress.postRenderData.outputSize,
      type: "success",
      estimatedBillingDurationInMilliseconds: overallProgress.postRenderData.estimatedBillingDurationInMilliseconds,
      timeToCombine: overallProgress.postRenderData.timeToCombine,
      combinedFrames: totalFrameCount,
      renderMetadata: overallProgress.renderMetadata,
      timeoutTimestamp: overallProgress.timeoutTimestamp,
      compositionValidated: overallProgress.compositionValidated,
      functionLaunched: overallProgress.functionLaunched,
      serveUrlOpened: overallProgress.serveUrlOpened,
      artifacts: overallProgress.receivedArtifact
    };
  }
  const { renderMetadata } = overallProgress;
  const errorExplanations = inspectErrors({
    errors: overallProgress.errors
  });
  const { hasAudio, hasVideo } = renderMetadata ? lambdaRenderHasAudioVideo(renderMetadata) : { hasAudio: false, hasVideo: false };
  const chunkCount = overallProgress.chunks.length ?? 0;
  const cleanup = {
    doneIn: null,
    minFilesToDelete: 0,
    filesDeleted: 0
  };
  if (renderMetadata === null) {
    return {
      framesRendered: overallProgress.framesRendered ?? 0,
      chunks: chunkCount,
      done: false,
      encodingStatus: {
        framesEncoded: overallProgress.framesEncoded,
        combinedFrames: overallProgress.combinedFrames,
        timeToCombine: overallProgress.timeToCombine
      },
      timeToRenderFrames: overallProgress.timeToRenderFrames,
      costs: formatCostsInfo(0),
      renderId,
      renderMetadata,
      bucket: bucketName,
      outputFile: null,
      timeToFinish: null,
      errors: errorExplanations,
      fatalErrorEncountered: errorExplanations.some((f) => f.isFatal && !f.willRetry),
      currentTime: Date.now(),
      renderSize: 0,
      lambdasInvoked: overallProgress.lambdasInvoked ?? 0,
      cleanup,
      timeToFinishChunks: null,
      overallProgress: getOverallProgress({
        encoding: 0,
        invoking: 0,
        frames: 0,
        gotComposition: overallProgress.compositionValidated,
        visitedServeUrl: overallProgress.serveUrlOpened,
        invokedLambda: overallProgress.lambdasInvoked,
        combining: 0
      }),
      retriesInfo: overallProgress.retries ?? [],
      outKey: null,
      outBucket: null,
      mostExpensiveFrameRanges: null,
      timeToEncode: overallProgress.timeToEncode,
      outputSizeInBytes: null,
      estimatedBillingDurationInMilliseconds: null,
      combinedFrames: overallProgress.combinedFrames ?? 0,
      timeToCombine: overallProgress.timeToCombine ?? null,
      timeoutTimestamp: overallProgress.timeoutTimestamp,
      type: "success",
      compositionValidated: overallProgress.compositionValidated,
      functionLaunched: overallProgress.functionLaunched,
      serveUrlOpened: overallProgress.serveUrlOpened,
      artifacts: overallProgress.receivedArtifact
    };
  }
  const priceFromBucket = estimatePriceFromMetadata({
    renderMetadata,
    memorySizeInMb: providerSpecifics.parseFunctionName(renderMetadata.rendererFunctionName)?.memorySizeInMb ?? memorySizeInMb,
    functionsInvoked: renderMetadata.estimatedRenderLambdaInvokations ?? 0,
    diskSizeInMb: providerSpecifics.getEphemeralStorageForPriceCalculation(),
    timings: overallProgress.timings ?? [],
    region,
    providerSpecifics
  });
  const chunkMultiplier = [hasAudio, hasVideo].filter(truthy3).length;
  if (renderMetadata.type === "still") {
    throw new Error("You don't need to call getRenderProgress() on a still render. Once you have obtained the `renderId`, the render is already done! \uD83D\uDE09");
  }
  const allChunks = (overallProgress.chunks ?? []).length / chunkMultiplier === (renderMetadata.totalChunks ?? Infinity);
  const frameCount = NoReactAPIs.getFramesToRender(renderMetadata.frameRange, renderMetadata.everyNthFrame).length;
  const missingChunks = new Array(renderMetadata.totalChunks).fill(true).map((_, i) => i).filter((index) => {
    return typeof (overallProgress.chunks ?? []).find((c) => c === index) === "undefined";
  });
  const isBeyondTimeoutAndMissingChunks = Date.now() > renderMetadata.startedDate + timeoutInMilliseconds + 20000 && missingChunks && missingChunks.length > 0;
  const isBeyondTimeoutAndHasStitchTimeout = Date.now() > renderMetadata.startedDate + timeoutInMilliseconds * 2 + 20000;
  const allErrors = [
    isBeyondTimeoutAndMissingChunks || isBeyondTimeoutAndHasStitchTimeout ? makeTimeoutError({
      timeoutInMilliseconds,
      renderMetadata,
      renderId,
      missingChunks: missingChunks ?? [],
      region,
      functionName,
      providerSpecifics
    }) : null,
    ...errorExplanations
  ].filter(truthy3);
  return {
    framesRendered: overallProgress.framesRendered ?? 0,
    chunks: chunkCount,
    done: false,
    encodingStatus: {
      framesEncoded: overallProgress.framesEncoded,
      combinedFrames: overallProgress.combinedFrames,
      timeToCombine: overallProgress.timeToCombine
    },
    timeToRenderFrames: overallProgress.timeToRenderFrames,
    costs: priceFromBucket ? formatCostsInfo(priceFromBucket.accruedSoFar) : formatCostsInfo(0),
    renderId,
    renderMetadata,
    bucket: bucketName,
    outputFile: null,
    timeToFinish: null,
    errors: allErrors,
    fatalErrorEncountered: allErrors.some((f) => f.isFatal && !f.willRetry),
    currentTime: Date.now(),
    renderSize: 0,
    lambdasInvoked: overallProgress.lambdasInvoked ?? 0,
    cleanup,
    timeToFinishChunks: allChunks && overallProgress ? calculateChunkTimes({
      type: "absolute-time",
      timings: overallProgress.timings
    }) : null,
    overallProgress: getOverallProgress({
      encoding: frameCount ? (overallProgress.framesEncoded ?? 0) / frameCount : 0,
      invoking: (overallProgress.lambdasInvoked ?? 0) / renderMetadata.estimatedRenderLambdaInvokations,
      frames: (overallProgress.framesRendered ?? 0) / (frameCount ?? 1),
      gotComposition: overallProgress.compositionValidated,
      visitedServeUrl: overallProgress.serveUrlOpened,
      invokedLambda: overallProgress.lambdasInvoked,
      combining: overallProgress.combinedFrames / (frameCount ?? 1)
    }),
    retriesInfo: overallProgress.retries ?? [],
    outKey: null,
    outBucket: null,
    mostExpensiveFrameRanges: null,
    timeToEncode: overallProgress.timeToEncode,
    outputSizeInBytes: null,
    estimatedBillingDurationInMilliseconds: priceFromBucket ? priceFromBucket.estimatedBillingDurationInMilliseconds : null,
    combinedFrames: overallProgress.combinedFrames ?? 0,
    timeToCombine: overallProgress.timeToCombine ?? null,
    timeoutTimestamp: overallProgress.timeoutTimestamp,
    type: "success",
    compositionValidated: overallProgress.compositionValidated,
    functionLaunched: overallProgress.functionLaunched,
    serveUrlOpened: overallProgress.serveUrlOpened,
    artifacts: overallProgress.receivedArtifact
  };
};
var framesRendered = "frames-rendered";
var errorOccurred = "error-occurred";
var renderIdDetermined = "render-id-determined";
var videoChunkRendered = "video-chunk-rendered";
var audioChunkRendered = "audio-chunk-rendered";
var chunkComplete = "chunk-complete";
var stillRendered = "still-rendered";
var functionInvoked = "lambda-invoked";
var artifactEmitted = "artifact-emitted";
var messageTypes = {
  "1": { type: framesRendered },
  "2": { type: errorOccurred },
  "3": { type: renderIdDetermined },
  "4": { type: videoChunkRendered },
  "5": { type: audioChunkRendered },
  "6": { type: stillRendered },
  "7": { type: chunkComplete },
  "8": { type: functionInvoked },
  "9": { type: artifactEmitted }
};
var formatMap = {
  [framesRendered]: "json",
  [errorOccurred]: "json",
  [renderIdDetermined]: "json",
  [videoChunkRendered]: "binary",
  [audioChunkRendered]: "binary",
  [stillRendered]: "json",
  [chunkComplete]: "json",
  [functionInvoked]: "json",
  [artifactEmitted]: "json"
};
var messageTypeIdToMessageType = (messageTypeId) => {
  const types = messageTypes[messageTypeId];
  if (!types) {
    throw new Error(`Unknown message type id ${messageTypeId}`);
  }
  return types.type;
};
var {
  ENABLE_V5_BREAKING_CHANGES: ENABLE_V5_BREAKING_CHANGES2,
  serializeJSONWithSpecialTypes: serializeJSONWithSpecialTypes2,
  validateFps: validateFps2,
  validateDimension: validateDimension2,
  validateDurationInFrames: validateDurationInFrames2,
  validateCodec: validateCodec2
} = NoReactInternals;

// src/get-env-variable.ts
var getEnvVariable = (name) => {
  if (typeof process !== "undefined" && typeof process.env !== "undefined" && process.env[name]) {
    return process.env[name];
  }
  if (typeof Deno !== "undefined" && Deno.env.has(name)) {
    return Deno.env.get(name);
  }
  return;
};

// src/is-cli.ts
var isCli = false;
var getIsCli = () => isCli;

// src/is-likely-to-have-aws-profile.ts
import { readFileSync } from "fs";
import { homedir } from "os";
import { join, sep } from "path";
var homeDirCache = {};
var getHomeDirCacheKey = () => {
  if (process && process.geteuid) {
    return `${process.geteuid()}`;
  }
  return "DEFAULT";
};
var getHomeDir2 = () => {
  const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep}` } = process.env;
  if (HOME)
    return HOME;
  if (USERPROFILE)
    return USERPROFILE;
  if (HOMEPATH)
    return `${HOMEDRIVE}${HOMEPATH}`;
  const homeDirCacheKey = getHomeDirCacheKey();
  if (!homeDirCache[homeDirCacheKey])
    homeDirCache[homeDirCacheKey] = homedir();
  return homeDirCache[homeDirCacheKey];
};
var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
var pathOfCredentialsFile = () => {
  return getEnvVariable(ENV_CREDENTIALS_PATH) || join(getHomeDir2(), ".aws", "credentials");
};
var isLikelyToHaveAwsProfile = () => {
  if (typeof Deno !== "undefined") {
    return false;
  }
  const credentialsFile = pathOfCredentialsFile();
  try {
    const content = readFileSync(credentialsFile, "utf-8");
    return content.includes("[default]");
  } catch {
    return false;
  }
};

// src/check-credentials.ts
var messageForVariable = (variable) => {
  return [
    `You have tried to call a Remotion Lambda function, but have not set the environment variable ${variable}.`,
    getIsCli() ? null : `- Environment variables from a '.env' file are not automatically read if you are calling the Node.JS APIs, in that case you need to load the file yourself or set the environment variables manually.`,
    `- Please refer to the Remotion Lambda docs (${DOCS_URL}/docs/lambda/setup) to see how to generate the credentials for your AWS account and then set the environment variables.`,
    `- For more reasons see the troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/permissions`
  ].filter(truthy3).join(`
`);
};
var checkCredentials = () => {
  if (getEnvVariable("REMOTION_SKIP_AWS_CREDENTIALS_CHECK")) {
    return;
  }
  if (getEnvVariable("REMOTION_AWS_PROFILE") || getEnvVariable("AWS_PROFILE")) {
    return;
  }
  if (isLikelyToHaveAwsProfile()) {
    return;
  }
  if (!getEnvVariable("AWS_ACCESS_KEY_ID") && !getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID")) {
    throw new Error(messageForVariable("AWS_ACCESS_KEY_ID or REMOTION_AWS_ACCESS_KEY_ID"));
  }
  if (!getEnvVariable("AWS_SECRET_ACCESS_KEY") && !getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY")) {
    throw new Error(messageForVariable("AWS_SECRET_ACCESS_KEY or REMOTION_AWS_SECRET_ACCESS_KEY"));
  }
};

// src/get-credentials.ts
var import_credential_provider_ini = __toESM(require_dist_cjs52(), 1);

// src/is-in-lambda.ts
var isInsideLambda = () => Boolean(typeof process !== "undefined" && process?.env?.__RESERVED_IS_INSIDE_REMOTION_LAMBDA);

// src/get-credentials.ts
var getCredentials = () => {
  if (isInsideLambda()) {
    return;
  }
  if (getEnvVariable("REMOTION_AWS_PROFILE")) {
    return import_credential_provider_ini.fromIni({
      profile: getEnvVariable("REMOTION_AWS_PROFILE")
    });
  }
  if (getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID") && getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY") && getEnvVariable("REMOTION_AWS_SESSION_TOKEN")) {
    return {
      accessKeyId: getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY"),
      sessionToken: getEnvVariable("REMOTION_AWS_SESSION_TOKEN")
    };
  }
  if (getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID") && getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY")) {
    return {
      accessKeyId: getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY")
    };
  }
  if (getEnvVariable("AWS_PROFILE")) {
    return import_credential_provider_ini.fromIni({
      profile: getEnvVariable("AWS_PROFILE")
    });
  }
  if (getEnvVariable("AWS_ACCESS_KEY_ID") && getEnvVariable("AWS_SECRET_ACCESS_KEY") && getEnvVariable("AWS_SESSION_TOKEN")) {
    return {
      accessKeyId: getEnvVariable("AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("AWS_SECRET_ACCESS_KEY"),
      sessionToken: getEnvVariable("AWS_SESSION_TOKEN")
    };
  }
  if (getEnvVariable("AWS_ACCESS_KEY_ID") && getEnvVariable("AWS_SECRET_ACCESS_KEY")) {
    return {
      accessKeyId: getEnvVariable("AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("AWS_SECRET_ACCESS_KEY")
    };
  }
  return;
};

// src/get-service-client.ts
var getCredentialsHash = ({
  customCredentials,
  region,
  service,
  forcePathStyle,
  requestHandler
}) => {
  const hashComponents = {};
  if (getEnvVariable("REMOTION_SKIP_AWS_CREDENTIALS_CHECK")) {
    hashComponents.credentials = {
      credentialsSkipped: true
    };
  } else if (getEnvVariable("REMOTION_AWS_PROFILE")) {
    hashComponents.credentials = {
      awsProfile: getEnvVariable("REMOTION_AWS_PROFILE")
    };
  } else if (getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID") && getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY")) {
    hashComponents.credentials = {
      accessKeyId: getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("REMOTION_AWS_SECRET_ACCESS_KEY")
    };
  } else if (getEnvVariable("AWS_PROFILE")) {
    hashComponents.credentials = {
      awsProfile: getEnvVariable("AWS_PROFILE")
    };
  } else if (getEnvVariable("AWS_ACCESS_KEY_ID") && getEnvVariable("AWS_SECRET_ACCESS_KEY")) {
    hashComponents.credentials = {
      accessKeyId: getEnvVariable("AWS_ACCESS_KEY_ID"),
      secretAccessKey: getEnvVariable("AWS_SECRET_ACCESS_KEY")
    };
  }
  hashComponents.customCredentials = customCredentials;
  hashComponents.region = region;
  hashComponents.service = service;
  hashComponents.forcePathStyle = forcePathStyle;
  hashComponents.requestHandler = requestHandler;
  return random(JSON.stringify(hashComponents)).toString().replace("0.", "");
};
var _clients = {};
var getServiceClient = ({
  region,
  service,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  const Client = (() => {
    if (service === "cloudwatch") {
      return import_client_cloudwatch_logs.CloudWatchLogsClient;
    }
    if (service === "lambda") {
      return import_client_lambda.LambdaClient;
    }
    if (service === "s3") {
      return import_client_s3.S3Client;
    }
    if (service === "iam") {
      return import_client_iam.IAMClient;
    }
    if (service === "servicequotas") {
      return import_client_service_quotas.ServiceQuotasClient;
    }
    if (service === "sts") {
      return import_client_sts.STSClient;
    }
    throw new TypeError("unknown client " + service);
  })();
  const key = getCredentialsHash({
    region,
    customCredentials,
    service,
    forcePathStyle,
    requestHandler
  });
  if (!_clients[key]) {
    checkCredentials();
    const lambdaOptions = service === "lambda" ? {
      httpsAgent: {
        maxSockets: MAX_FUNCTIONS_PER_RENDER * 2
      }
    } : undefined;
    const finalRequestHandler = requestHandler ? lambdaOptions ? { ...requestHandler, ...lambdaOptions } : requestHandler : lambdaOptions;
    const client = customCredentials ? new Client({
      region: customCredentials.region ?? "us-east-1",
      credentials: customCredentials.accessKeyId && customCredentials.secretAccessKey ? {
        accessKeyId: customCredentials.accessKeyId,
        secretAccessKey: customCredentials.secretAccessKey
      } : undefined,
      endpoint: customCredentials.endpoint,
      requestHandler: finalRequestHandler,
      forcePathStyle: customCredentials.forcePathStyle,
      maxAttempts: service === "lambda" ? 1 : undefined
    }) : getEnvVariable("REMOTION_SKIP_AWS_CREDENTIALS_CHECK") ? new Client({
      region,
      requestHandler: finalRequestHandler,
      maxAttempts: service === "lambda" ? 1 : undefined
    }) : new Client({
      region,
      credentials: getCredentials(),
      requestHandler: finalRequestHandler,
      maxAttempts: service === "lambda" ? 1 : undefined
    });
    if (getEnvVariable("REMOTION_DISABLE_AWS_CLIENT_CACHE")) {
      return client;
    }
    _clients[key] = client;
  }
  return _clients[key];
};

// src/aws-clients.ts
var getCloudWatchLogsClient = (region, requestHandler) => {
  return getServiceClient({
    region,
    service: "cloudwatch",
    customCredentials: null,
    forcePathStyle: false,
    requestHandler
  });
};
var getLambdaClient = (region, _timeoutInTest, requestHandler) => {
  return getServiceClient({
    region,
    service: "lambda",
    customCredentials: null,
    forcePathStyle: false,
    requestHandler
  });
};
var getIamClient = (region, requestHandler) => {
  return getServiceClient({
    region,
    service: "iam",
    customCredentials: null,
    forcePathStyle: false,
    requestHandler
  });
};
var getServiceQuotasClient = (region, requestHandler) => {
  return getServiceClient({
    region,
    service: "servicequotas",
    customCredentials: null,
    forcePathStyle: false,
    requestHandler
  });
};
var getStsClient = (region, requestHandler) => {
  return getServiceClient({
    region,
    service: "sts",
    customCredentials: null,
    forcePathStyle: false,
    requestHandler
  });
};

// src/aws-provider.ts
import { EventEmitter } from "node:events";

// src/bucket-exists.ts
var import_client_s32 = __toESM(require_dist_cjs74(), 1);

// src/get-s3-client.ts
var getS3Client = ({
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  return getServiceClient({
    region: customCredentials?.region ?? region,
    service: "s3",
    customCredentials,
    forcePathStyle,
    requestHandler
  });
};

// src/bucket-exists.ts
var bucketExistsInRegionImplementation = async ({
  bucketName,
  region,
  expectedBucketOwner,
  forcePathStyle,
  requestHandler
}) => {
  try {
    const bucket = await getS3Client({
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s32.GetBucketLocationCommand({
      Bucket: bucketName,
      ExpectedBucketOwner: expectedBucketOwner ?? undefined
    }));
    return (bucket.LocationConstraint ?? "us-east-1") === region;
  } catch (err) {
    if (err.Code === "NoSuchBucket") {
      return false;
    }
    throw err;
  }
};

// src/call-lambda-async.ts
var import_client_lambda2 = __toESM(require_dist_cjs63(), 1);
var callFunctionAsyncImplementation = async ({
  functionName,
  payload,
  region,
  timeoutInTest
}) => {
  const stringifiedPayload = JSON.stringify(payload);
  if (stringifiedPayload.length > 256 * 1024) {
    throw new Error(`Payload is too big: ${stringifiedPayload.length} bytes. Maximum size is 256 KB. This should not happen, please report this to the Remotion team. Payload: ${stringifiedPayload}`);
  }
  const result = await getLambdaClient(region, timeoutInTest, null).send(new import_client_lambda2.InvokeCommand({
    FunctionName: functionName,
    Payload: stringifiedPayload,
    InvocationType: "Event"
  }));
  if (result.FunctionError) {
    throw new Error(`Lambda function returned error: ${result.FunctionError} ${result.LogResult}`);
  }
};

// src/call-lambda-streaming.ts
var import_client_lambda3 = __toESM(require_dist_cjs63(), 1);
var STREAM_STALL_TIMEOUT = 30000;
var LAMBDA_STREAM_STALL = `AWS did not invoke Lambda in ${STREAM_STALL_TIMEOUT}ms`;
var parseJsonOrThrowSource = (data, type) => {
  const asString = new TextDecoder("utf-8").decode(data);
  try {
    return JSON.parse(asString);
  } catch {
    throw new Error(`Invalid JSON (${type}): ${asString}`);
  }
};
var invokeStreamOrTimeout = async ({
  region,
  timeoutInTest,
  functionName,
  type,
  payload
}) => {
  const resProm = getLambdaClient(region, timeoutInTest, null).send(new import_client_lambda3.InvokeWithResponseStreamCommand({
    FunctionName: functionName,
    Payload: JSON.stringify({ type, ...payload })
  }));
  let cleanup = () => {
    return;
  };
  const timeout = new Promise((_resolve, reject) => {
    const int = setTimeout(() => {
      reject(new Error(LAMBDA_STREAM_STALL));
    }, STREAM_STALL_TIMEOUT);
    cleanup = () => {
      clearTimeout(int);
    };
  });
  const res = await Promise.race([resProm, timeout]);
  cleanup();
  return res;
};
var INVALID_JSON_MESSAGE = "Cannot parse Lambda response as JSON";
var callLambdaWithStreamingWithoutRetry = async ({
  functionName,
  type,
  payload,
  region,
  timeoutInTest,
  receivedStreamingPayload
}) => {
  const res = await invokeStreamOrTimeout({
    functionName,
    payload,
    region,
    timeoutInTest,
    type
  });
  const { onData, clear } = makeStreamer((status, messageTypeId, data) => {
    const messageType = messageTypeIdToMessageType(messageTypeId);
    const innerPayload = formatMap[messageType] === "json" ? parseJsonOrThrowSource(data, messageType) : data;
    const message = {
      successType: status,
      message: {
        type: messageType,
        payload: innerPayload
      }
    };
    receivedStreamingPayload(message);
  });
  const dumpBuffers = () => {
    clear();
  };
  if (globalThis._dumpUnreleasedBuffers) {
    globalThis._dumpUnreleasedBuffers.addListener("dump-unreleased-buffers", dumpBuffers);
  }
  const events = res.EventStream;
  for await (const event of events) {
    if (event.PayloadChunk && event.PayloadChunk.Payload) {
      onData(event.PayloadChunk.Payload);
    }
    if (event.InvokeComplete) {
      if (event.InvokeComplete.ErrorCode) {
        const logs = `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logsV2:logs-insights$3FqueryDetail$3D~(end~0~start~-3600~timeType~'RELATIVE~unit~'seconds~editorString~'fields*20*40timestamp*2c*20*40requestId*2c*20*40message*0a*7c*20filter*20*40requestId*20like*20*${res.$metadata.requestId}*22*0a*7c*20sort*20*40timestamp*20asc~source~(~'*2faws*2flambda*2f${functionName}))`;
        if (event.InvokeComplete.ErrorCode === "Unhandled") {
          throw new Error(`Lambda function ${functionName} failed with an unhandled error: ${event.InvokeComplete.ErrorDetails} See ${logs} to see the logs of this invocation.`);
        }
        throw new Error(`Lambda function ${functionName} failed with error code ${event.InvokeComplete.ErrorCode}: ${event.InvokeComplete.ErrorDetails}. See ${logs} to see the logs of this invocation.`);
      }
    }
  }
  if (globalThis._dumpUnreleasedBuffers) {
    globalThis._dumpUnreleasedBuffers.removeListener("dump-unreleased-buffers", dumpBuffers);
  }
  clear();
};
var callFunctionWithStreamingImplementation = async (options) => {
  try {
    await callLambdaWithStreamingWithoutRetry(options);
  } catch (err) {
    if (err.stack?.includes("TooManyRequestsException") || err.message?.includes("ConcurrentInvocationLimitExceeded")) {
      throw new Error(`AWS Concurrency limit reached (Original Error: ${err.message}). See https://www.remotion.dev/docs/lambda/troubleshooting/rate-limit for tips to fix this.`);
    }
    if (!err.message.includes(INVALID_JSON_MESSAGE) && !err.message.includes(LAMBDA_STREAM_STALL) && !err.message.includes("Runtime.TruncatedResponse") && !err.message.includes("aborted")) {
      throw err;
    }
    console.error("Retries remaining:", options.retriesRemaining);
    if (options.retriesRemaining === 0) {
      console.error("Throwing error:");
      throw err;
    }
    console.error(err);
    return callFunctionWithStreamingImplementation({
      ...options,
      retriesRemaining: options.retriesRemaining - 1
    });
  }
};

// src/call-lambda-sync.ts
var import_client_lambda4 = __toESM(require_dist_cjs63(), 1);
var callLambdaSyncWithoutRetry = async ({
  functionName,
  payload,
  region,
  timeoutInTest
}) => {
  const Payload = JSON.stringify(payload);
  const res = await getLambdaClient(region, timeoutInTest, null).send(new import_client_lambda4.InvokeCommand({
    FunctionName: functionName,
    Payload,
    InvocationType: "RequestResponse"
  }));
  const decoded = new TextDecoder("utf-8").decode(res.Payload);
  try {
    return JSON.parse(decoded);
  } catch {
    throw new Error(`Invalid JSON: ${JSON.stringify(decoded)}`);
  }
};
var callFunctionSyncImplementation = async (options) => {
  const res = await callLambdaSyncWithoutRetry(options);
  if (res.type === "error") {
    const err = new Error(res.message);
    err.stack = res.stack;
    throw err;
  }
  return res;
};

// src/constants.ts
var MIN_MEMORY = 512;
var MAX_MEMORY = 10240;
var DEFAULT_MAX_RETRIES = 1;
var MAX_EPHEMERAL_STORAGE_IN_MB = 10240;
var DEFAULT_EPHEMERAL_STORAGE_IN_MB = 2048;
var MIN_EPHEMERAL_STORAGE_IN_MB = 512;
var DEFAULT_CLOUDWATCH_RETENTION_PERIOD = 14;
var RENDER_FN_PREFIX = "remotion-render-";
var getSitesKey = (siteId) => `sites/${siteId}`;
var REMOTION_BUCKET_PREFIX = "remotionlambda-";

// src/convert-to-serve-url.ts
var convertToServeUrlImplementation = ({
  urlOrId,
  region,
  bucketName
}) => {
  if (urlOrId.startsWith("src/")) {
    throw new Error(`Remotion Lambda can only render based on a URL in the cloud. It seems like you passed a local file: ${urlOrId}. Read the setup guide for Remotion Lambda ${DOCS_URL}/docs/lambda/setup`);
  }
  if (urlOrId.startsWith("http://") || urlOrId.startsWith("https://")) {
    return urlOrId;
  }
  return `https://${bucketName}.s3.${region}.amazonaws.com/sites/${urlOrId}/index.html`;
};

// src/create-bucket.ts
var import_client_s33 = __toESM(require_dist_cjs74(), 1);
var createBucket = async ({ region, bucketName, forcePathStyle, requestHandler }) => {
  await getS3Client({
    region,
    customCredentials: null,
    forcePathStyle,
    requestHandler
  }).send(new import_client_s33.CreateBucketCommand({
    Bucket: bucketName
  }));
  try {
    await getS3Client({
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s33.DeleteBucketOwnershipControlsCommand({
      Bucket: bucketName
    }));
  } catch (err) {
    if (err.message.includes("Access Denied")) {
      throw new Error("Since April 2023, more AWS permissions are required to create an S3 bucket. You need to update your user policy to continue. See https://remotion.dev/docs/lambda/s3-public-access for instructions on how to resolve this issue.");
    }
    throw err;
  }
  try {
    await getS3Client({
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s33.DeletePublicAccessBlockCommand({
      Bucket: bucketName
    }));
  } catch (err) {
    if (err.message.includes("Access Denied")) {
      throw new Error("PARTIAL SUCCESS: The s3:PutBucketOwnershipControls was found, but the s3:PutBucketPublicAccessBlock permission is not given. Since April 2023, more AWS permissions are required to create an S3 bucket. You need to update your user policy to continue. You need to update your user policy to continue. See https://remotion.dev/docs/lambda/s3-public-access for instructions on how to resolve this issue.");
    }
    throw err;
  }
  try {
    await getS3Client({
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s33.PutBucketAclCommand({
      Bucket: bucketName,
      ACL: "public-read"
    }));
  } catch (err) {
    if (err.message.includes("The bucket does not allow ACLs")) {
      throw new Error(`Could not add an ACL to the bucket. This might have happened because the bucket was already successfully created before but then failed to configure correctly. We recommend to delete the bucket (${bucketName}) if it is empty and start over to fix the problem.`);
    }
    throw err;
  }
};

// src/delete-file.ts
var import_client_s34 = __toESM(require_dist_cjs74(), 1);
var lambdaDeleteFileImplementation = async ({
  bucketName,
  key,
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  await getS3Client({
    region,
    customCredentials,
    forcePathStyle,
    requestHandler
  }).send(new import_client_s34.DeleteObjectCommand({
    Bucket: bucketName,
    Key: key
  }));
};

// src/delete-function.ts
var import_client_lambda5 = __toESM(require_dist_cjs63(), 1);
var deleteFunction = async ({
  region,
  functionName,
  requestHandler
}) => {
  await getLambdaClient(region, undefined, requestHandler ?? null).send(new import_client_lambda5.DeleteFunctionCommand({
    FunctionName: functionName
  }));
};

// src/price-per-1s.ts
var pricing = {
  "af-south-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "X7CK6KFXNWY9RF6Z.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000129000"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "R7SEQT2WRDVFV6ZA.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000055300"
    },
    "Lambda Requests": {
      rateCode: "BNQXHCKJQCQXPHE8.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002700"
    },
    "Lambda Requests-ARM": {
      rateCode: "XPFR3MTP3RW5GRTN.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002700"
    },
    "Lambda Storage-Duration": {
      rateCode: "4BP2EZTC4F4EHEEZ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000404"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "XGW8AHN7KTN5TCH5.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000404"
    },
    "Lambda Duration": {
      rateCode: "Z6UGBG979PFHQNPH.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000221000"
    },
    "Lambda Duration-ARM": {
      rateCode: "2PW46FQRKMQMYQVF.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000176800"
    }
  },
  "ap-east-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "G5524SRW6HD6742P.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000133358"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "YY2W7HU5HZERD9YH.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000057153"
    },
    "Lambda Requests": {
      rateCode: "68H82NC62DFBNEVM.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002800"
    },
    "Lambda Requests-ARM": {
      rateCode: "5JXCX35TH2MPMFMW.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002800"
    },
    "Lambda Storage-Duration": {
      rateCode: "FAUSK48UZ8QQK3JS.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000407"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "G7RNUCJ8FY236XS9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000407"
    },
    "Lambda Duration": {
      rateCode: "Y3J9NSBFENB45VFD.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000229200"
    },
    "Lambda Duration-ARM": {
      rateCode: "79GRE5UQB86PEDTE.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000183000"
    }
  },
  "ap-south-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "QKVFMCSDP4AVPEE7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000104966"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "ATX3ZXV9GDMQWKUN.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000044985"
    },
    "Lambda Requests": {
      rateCode: "VPGUBFQ4KNZKMKGJ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "RYFSQRRXQ4R9CK7A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "QHWU5Q6JSUS532X2.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000352"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "2K94HT2ACCBDSE8U.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000352"
    },
    "Lambda Duration": {
      rateCode: "PHDF9YNAFR3HDSR8.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "69Y7TUFYEF9HAV59.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ap-northeast-3": {
    "Lambda Duration-Provisioned": {
      rateCode: "UZWTTB7ZV7B2GMG5.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000125615"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "8ZQGQZJZS48NB28R.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000053835"
    },
    "Lambda Requests": {
      rateCode: "89U8ZQR2ZV45HXWY.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "FPS5FM45229RTFBT.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "CU95TW3FKNQFD844.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "XZJM3HMZSZCJ84TM.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "HQWXQQHHTTTVSUH2.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "92C8Z466WVKPRP7S.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ap-northeast-2": {
    "Lambda Duration-Provisioned": {
      rateCode: "GX89TXD63W6NZ626.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000119592"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "UP7EY8NNX8VZF5MD.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000051254"
    },
    "Lambda Requests": {
      rateCode: "NFXH9EUGP7BUPE4A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "4KD96CKPZF9FJUJ9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "QYHWMM7W2MAR34MK.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000352"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "6XSCMH79E2EPRAA3.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000352"
    },
    "Lambda Duration": {
      rateCode: "AW8K7Q9ZMMBBP9W6.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "Y9MYZCDTMAKCDR6D.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ap-southeast-4": {
    "Lambda Storage-Duration": {
      rateCode: "VVJE4FEKRZE6DRJK.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Requests-ARM": {
      rateCode: "UH8TQNRPPRZ9TJ4V.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "2EC2UBFH6KGNHV2T.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000052360"
    },
    "Lambda Duration-ARM": {
      rateCode: "QVV5SPACJCKHAF8A.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    },
    "Lambda Requests": {
      rateCode: "VXJTSR9CJSBFXG5K.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "29EUHTVHTD7D8THR.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "H6FQK2WA7RDQ5V8X.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-Provisioned": {
      rateCode: "YYP8U36M9AE5T6D2.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000122173"
    }
  },
  "ap-southeast-5": {
    "Lambda Storage-Duration-ARM": {
      rateCode: "Q54DCNPEP5HDZ72X.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000333"
    },
    "Lambda Storage-Duration": {
      rateCode: "Q54DCNPEP5HDZ72X.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000333"
    },
    "Lambda Requests-ARM": {
      rateCode: "F9T53VWVKRT6G32X.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000001800"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "72ETGRTGNSDZG7ZS.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000046791"
    },
    "Lambda Duration-ARM": {
      rateCode: "JZF5EBXY9YXH6KJZ.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000120000"
    },
    "Lambda Requests": {
      rateCode: "GVB4MJBFXA3BX4M6.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000001800"
    },
    "Lambda Duration": {
      rateCode: "D9T9NECWKTB5WH67.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000150000"
    },
    "Lambda Duration-Provisioned": {
      rateCode: "BWUE5MJNG4QYHA76.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000109181"
    }
  },
  "ap-southeast-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "Z43QGMUZW4S2XN34.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000121313"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "A4HTACA65772T7MD.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000051991"
    },
    "Lambda Requests": {
      rateCode: "36D3E7396ZKUSWWW.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "V5T5H5YEU5SUN3C2.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "8FAV96E74NWR9SG9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "M49Z5B8UP2XTPTGN.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "67ZV6RMYY72YSRDC.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "KSD76ZR243WEPWRS.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ap-southeast-2": {
    "Lambda Duration-Provisioned": {
      rateCode: "NBPYMYTJX2CTM4AJ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000122173"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "3MZN5YQ2PU7VCFH8.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000052360"
    },
    "Lambda Requests": {
      rateCode: "ZW6UHD4Q6EPUCZWU.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "92KS5FMQEEJ39ACN.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "D4HFHSGASZ38KWED.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "ATH88NV3HBJ3ZTTG.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "4NX7CSSF3DVPXWBT.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "KDEJ26SV7QK2N7DW.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ap-northeast-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "CQ446M27PP4V4UVB.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000125615"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "ZVA2Z6TTQNFCXFSU.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000053835"
    },
    "Lambda Requests": {
      rateCode: "3BE8DYKG4FYSZGDW.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "AA4Q79463N2JQHZA.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "E7BUD4C7BEJ3ED26.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "8DSSBVMYVUE4A85P.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "FSYUV9NMNDEXRJ5H.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "ZSE7CMBEBTMPH8ET.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "ca-central-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "ZMDUKS3D6V7QJFQT.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000108407"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "9M447J8E9CJSZFKY.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000046460"
    },
    "Lambda Requests": {
      rateCode: "XM5KDGVKY9KYJWCG.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "B22EKFMS5UB7E4DB.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "WFVQTPK4SQ6UGEPT.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000340"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "Y9JGD8ASN2SPS7QA.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000340"
    },
    "Lambda Duration": {
      rateCode: "KS26AK5FJMDYPXSF.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "WH7JAAY3UGC8KHEC.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-central-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "6963ZK4U22NHS35G.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000117011"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "SADU4Z93G2F3QPA2.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000050147"
    },
    "Lambda Requests": {
      rateCode: "CKZQ3D25MV9ET243.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "UVYYDZQ83GKQ2K6C.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "TSJKCMGTDRNVXPB4.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000367"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "WSN3KKEEPF26JZR5.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000367"
    },
    "Lambda Duration": {
      rateCode: "S4ZKFHQ6B28FBYVW.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "6PPNGCBXY95TENXZ.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-west-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "ZS4KB9WXZA5FWZ7A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000108407"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "BP8P7CBMNM86SRMW.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000046460"
    },
    "Lambda Requests": {
      rateCode: "B5V2RNHAWGVJBZD3.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "DV2YFXRNHNJFTDP3.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "83UZGV2B4WAZRJSR.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000340"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "N6RU8DUAHRJJA9F9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000340"
    },
    "Lambda Duration": {
      rateCode: "SGGKTWDV7PGMPPSJ.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "KXNSA7NBRHBHXXPS.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-west-2": {
    "Lambda Duration-Provisioned": {
      rateCode: "W62XX94KDFQQKBSD.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000112709"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "6DB7ZBYMK456XGDS.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000048304"
    },
    "Lambda Requests": {
      rateCode: "NDYBVXT3KB548Z2A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "D4TPQYY66DKTZWX9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "N5RQX23Q92PY74R5.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000358"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "555FJ99JDKUE4USZ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000358"
    },
    "Lambda Duration": {
      rateCode: "RP9RSZYUC96SQ4G2.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "VGMFG9KJ58Z2FK83.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-south-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "CQ3MCSJ8KUN9AG4M.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000113827"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "WCTG35VUU2JTG398.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000048783"
    },
    "Lambda Requests": {
      rateCode: "EE6A5VEB3PCF9VKU.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002300"
    },
    "Lambda Requests-ARM": {
      rateCode: "K9DMCWXXQT7TQSWX.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002300"
    },
    "Lambda Storage-Duration": {
      rateCode: "J6URR2UHKJHADCJR.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000357"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "95QW2EH2JTEV5PB8.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000357"
    },
    "Lambda Duration": {
      rateCode: "SWU8SVYB8U6S2RXR.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000195172"
    },
    "Lambda Duration-ARM": {
      rateCode: "SKKKJURRUZNWWKF9.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000156138"
    }
  },
  "eu-west-3": {
    "Lambda Duration-Provisioned": {
      rateCode: "8XRAXPBUT4QZ92DT.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000113569"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "HYMBKMJZP76PZ7UF.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000048673"
    },
    "Lambda Requests": {
      rateCode: "6GFK8TZW8U8G9MUB.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "BVPQ9WHBE3SM65K7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "N7HW6RPFWJVEX3VW.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000358"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "ZWPEJYBW22R8KWS7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000358"
    },
    "Lambda Duration": {
      rateCode: "7V27U9PFRJGUDWJ8.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "RUA4GEMXYRH9896Q.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-north-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "PK4HANPQ3MKK2P4F.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000103245"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "C8CESGBREP8BBMUZ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000044248"
    },
    "Lambda Requests": {
      rateCode: "KERWZD8CJ22SEZWT.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "R3N9VPKCMSVAJDEH.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "D5P7WQ6NGY6MNGPU.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000323"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "M5U4DY9KUQ5P8XRV.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000323"
    },
    "Lambda Duration": {
      rateCode: "7N49FRQMXS49C2QS.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "VRFJ836X75T58FNT.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "me-south-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "55WKNBUF5TE92NZJ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000119251"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "RPTP77J75VAKQZD9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000051108"
    },
    "Lambda Requests": {
      rateCode: "EMZ8YZDPGWMDYZNK.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002500"
    },
    "Lambda Requests-ARM": {
      rateCode: "KY96C7U4EB95UXGK.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002500"
    },
    "Lambda Storage-Duration": {
      rateCode: "DBA83XQ3BXSW7T3A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000374"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "9PH9MHPV4V4MQNRH.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000374"
    },
    "Lambda Duration": {
      rateCode: "N7S38YMSMVSPHNAH.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000206667"
    },
    "Lambda Duration-ARM": {
      rateCode: "R3C6YVZV7TF52KUE.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000165334"
    }
  },
  "sa-east-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "VENWZ787B7TGFR3E.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000154867"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "8CC33XHRZVTNGE2A.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000066372"
    },
    "Lambda Requests": {
      rateCode: "7TZ969MZND3Z6HD7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "D9Z54P78JUX2Y552.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "9FNFNSCFQFX6C5GU.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000586"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "A5QYMYNMDQHDWHTP.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000586"
    },
    "Lambda Duration": {
      rateCode: "JNXN2GCNDMDR7JAF.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "HTQZ78UWV8DFX49Y.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "us-east-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "ZZF88MXYPS4DGSEZ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000097222"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "BMKCD2ZCEYKTYYCB.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000041667"
    },
    "Lambda Requests": {
      rateCode: "GU2ZS9HVP6QTQ7KE.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "K7BX6567RJ67A2KE.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "CVY5JH8RFRXMP92N.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "CH6HMM86MH4K8KCS.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Duration": {
      rateCode: "TG3M4CAGBA3NYQBH.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "72SBSFWPMDTH8S3J.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "us-east-2": {
    "Lambda Duration-Provisioned": {
      rateCode: "8RKHZ54QB9XA3Y9F.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000097222"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "ZA4ZDREWFS9UEMSC.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000041667"
    },
    "Lambda Requests": {
      rateCode: "ZEA64MMVK5QRB5TC.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "DMJPKNDPVRPMG2E7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "NTZU6AKMUBV2U895.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "B3C4NH7C3BXVK5KQ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Duration": {
      rateCode: "3BYZH4NKJN8TJUQ6.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "CHGDQQ3YSPF93CBA.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "us-west-1": {
    "Lambda Duration-Provisioned": {
      rateCode: "X79AKVS7VZDNBZ9U.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000114430"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "QP9Q8TWYNJX4PDBS.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000049041"
    },
    "Lambda Requests": {
      rateCode: "YY4C5XTAZNQPB6J6.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "EQE7YY7WBWZFB46G.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "59PHF9Z3ZAYD2XW9.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "TGG4EG7U2Y6WABH7.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000370"
    },
    "Lambda Duration": {
      rateCode: "46GNEXAQAPS9YGE2.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "XVFAA23C65JJZNNW.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  },
  "eu-central-2": {
    "Lambda Storage-Duration": {
      rateCode: "4JZ5N4HUYM6K333N.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000441"
    },
    "Lambda Requests-ARM": {
      rateCode: "VUQUVJRYRZKGXHKX.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002200"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "YYM4DVFSJ5APJDUG.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000055162"
    },
    "Lambda Duration-ARM": {
      rateCode: "EZZMW8SEEDT6E2G5.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000146667"
    },
    "Lambda Requests": {
      rateCode: "8FY96CH95ZA8NU5C.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002200"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "TMSMVCZ6FWXCBNM5.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000441"
    },
    "Lambda Duration": {
      rateCode: "U6YRFNVKQZTX8VF2.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000183334"
    },
    "Lambda Duration-Provisioned": {
      rateCode: "594VMK9T4PANJ2TK.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000128712"
    }
  },
  "us-west-2": {
    "Lambda Duration-Provisioned": {
      rateCode: "MP7NQ6MSH3HNCZP6.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000097222"
    },
    "Lambda Provisioned-Concurrency": {
      rateCode: "67MDK2GR6PRT8GW8.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000041667"
    },
    "Lambda Requests": {
      rateCode: "ZWHFK83WS2P4WZR6.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Requests-ARM": {
      rateCode: "6SKZPR8753NAAQ4W.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000002000"
    },
    "Lambda Storage-Duration": {
      rateCode: "HXET4S4G5F9Y7FP6.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Storage-Duration-ARM": {
      rateCode: "N9TMQ3FMNJR97GYZ.JRTCKXETXF.6YS6EN2CT7",
      price: "0.0000000309"
    },
    "Lambda Duration": {
      rateCode: "XCU6U9G4FCKZQWG9.JRTCKXETXF.CUKFZ388N3",
      price: "0.0000166667"
    },
    "Lambda Duration-ARM": {
      rateCode: "T3BEHFG5V4TZDT76.JRTCKXETXF.6NBUNBXSC3",
      price: "0.0000133334"
    }
  }
};

// src/regions.ts
var AWS_REGIONS = [
  "eu-central-1",
  "eu-central-2",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "eu-south-1",
  "eu-north-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2",
  "af-south-1",
  "ap-south-1",
  "ap-east-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-northeast-3",
  "ap-southeast-4",
  "ap-southeast-5",
  "ca-central-1",
  "me-south-1",
  "sa-east-1"
];

// src/validate-aws-region.ts
function validateAwsRegion(region) {
  if (!AWS_REGIONS.includes(region)) {
    throw new TypeError(`${region} is not a supported AWS region. Must be one of: ${AWS_REGIONS.join(", ")}`);
  }
}

// src/validate-disk-size-in-mb.ts
var validateDiskSizeInMb = (diskSizeInMb) => {
  if (typeof diskSizeInMb !== "number") {
    throw new TypeError(`parameter 'diskSizeInMb' must be a number, got a ${typeof diskSizeInMb}`);
  }
  if (Number.isNaN(diskSizeInMb)) {
    throw new TypeError(`parameter 'diskSizeInMb' must not be NaN, but is`);
  }
  if (!Number.isFinite(diskSizeInMb)) {
    throw new TypeError(`parameter 'diskSizeInMb' must be finite, but is ${diskSizeInMb}`);
  }
  if (diskSizeInMb < MIN_EPHEMERAL_STORAGE_IN_MB || diskSizeInMb > MAX_EPHEMERAL_STORAGE_IN_MB) {
    throw new TypeError(`parameter 'diskSizeInMb' must be between ${MIN_EPHEMERAL_STORAGE_IN_MB} and ${MAX_EPHEMERAL_STORAGE_IN_MB}, but got ${diskSizeInMb}`);
  }
  if (diskSizeInMb % 1 !== 0) {
    throw new TypeError(`parameter 'diskSizeInMb' must be an integer but got ${diskSizeInMb}`);
  }
};

// src/validate-memory-size.ts
var validateMemorySize = (memorySizeInMb) => {
  if (typeof memorySizeInMb !== "number") {
    throw new TypeError(`parameter 'memorySizeInMb' must be a number, got a ${typeof memorySizeInMb}`);
  }
  if (Number.isNaN(memorySizeInMb)) {
    throw new TypeError(`parameter 'memorySizeInMb' must not be NaN, but is`);
  }
  if (!Number.isFinite(memorySizeInMb)) {
    throw new TypeError(`parameter 'memorySizeInMb' must be finite, but is ${memorySizeInMb}`);
  }
  if (memorySizeInMb < MIN_MEMORY || memorySizeInMb > MAX_MEMORY) {
    throw new TypeError(`parameter 'memorySizeInMb' must be between ${MIN_MEMORY} and ${MAX_MEMORY}, but got ${memorySizeInMb}`);
  }
  if (memorySizeInMb % 1 !== 0) {
    throw new TypeError(`parameter 'memorySizeInMb' must be an integer but got ${memorySizeInMb}`);
  }
};

// src/estimate-price.ts
var estimatePrice = ({
  region,
  memorySizeInMb,
  diskSizeInMb,
  lambdasInvoked,
  ...other
}) => {
  validateMemorySize(memorySizeInMb);
  validateAwsRegion(region);
  validateDiskSizeInMb(diskSizeInMb);
  const durationInMilliseconds = "durationInMiliseconds" in other ? other.durationInMiliseconds : other.durationInMilliseconds;
  if (typeof durationInMilliseconds !== "number") {
    throw new TypeError(`Parameter 'durationInMilliseconds' must be a number but got ${typeof durationInMilliseconds}`);
  }
  if (Number.isNaN(durationInMilliseconds)) {
    throw new TypeError(`Parameter 'durationInMilliseconds' must not be NaN but it is.`);
  }
  if (!Number.isFinite(durationInMilliseconds)) {
    throw new TypeError(`Parameter 'durationInMilliseconds' must be finite but it is ${durationInMilliseconds}`);
  }
  if (durationInMilliseconds < 0) {
    throw new TypeError(`Parameter 'durationInMilliseconds' must be over 0 but it is ${durationInMilliseconds}.`);
  }
  const durationPrice = pricing[region]["Lambda Duration-ARM"].price;
  const timeCostDollars = Number(durationPrice) * (memorySizeInMb * durationInMilliseconds / 1000 / 1024);
  const diskSizePrice = pricing[region]["Lambda Storage-Duration-ARM"].price;
  const chargedDiskSize = Math.max(0, diskSizeInMb - MIN_EPHEMERAL_STORAGE_IN_MB);
  const diskSizeDollars = chargedDiskSize * Number(diskSizePrice) * (durationInMilliseconds / 1000 / 1024);
  const invocationCost = Number(pricing[region]["Lambda Requests"].price) * lambdasInvoked;
  return Number((timeCostDollars + diskSizeDollars + invocationCost).toFixed(5));
};

// src/get-account-id.ts
var import_client_sts2 = __toESM(require_dist_cjs76(), 1);
var getAccountIdImplementation = async (options) => {
  validateAwsRegion(options.region);
  const callerIdentity = await getStsClient(options.region, null).send(new import_client_sts2.GetCallerIdentityCommand({}));
  if (!callerIdentity.Account) {
    throw new Error("Cannot get account ID");
  }
  return callerIdentity.Account;
};

// src/encode-aws-url-params.ts
var encodeAwsUrlParams = (input) => {
  return encodeURIComponent(input).replace(/%/g, "$25");
};

// src/get-aws-urls.ts
var cloudWatchUrlWithQuery = ({
  region,
  functionNameToUse,
  query
}) => {
  return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${functionNameToUse}/log-events$3FfilterPattern$3D${encodeAwsUrlParams(query)}`;
};
var getCloudwatchMethodUrl = ({
  region,
  functionName,
  renderId,
  rendererFunctionName,
  method
}) => {
  const functionNameToUse = rendererFunctionName ?? functionName;
  const query = `"method=${method},renderId=${renderId}"`;
  return cloudWatchUrlWithQuery({ region, functionNameToUse, query });
};
var getLambdaInsightsUrl = ({
  region,
  functionName
}) => {
  return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#lambda-insights:functions/${functionName}`;
};
var getCloudwatchRendererUrl = ({ region, functionName, renderId, rendererFunctionName, chunk }) => {
  const functionNameToUse = rendererFunctionName ?? functionName;
  const query = `"method=renderer,renderId=${renderId}${chunk === null ? "" : `,chunk=${chunk},`}"`;
  return cloudWatchUrlWithQuery({ region, functionNameToUse, query });
};
var getS3RenderUrl = ({
  renderId,
  region,
  bucketName
}) => {
  return `https://s3.console.aws.amazon.com/s3/buckets/${bucketName}?region=${region}&prefix=renders/${renderId}/`;
};
var getProgressJsonUrl = ({
  region,
  bucketName,
  renderId
}) => {
  return `https://${region}.console.aws.amazon.com/s3/object/${bucketName}?region=${region}&bucketType=general&prefix=renders/${renderId}/progress.json`;
};

// src/get-buckets.ts
var import_client_s35 = __toESM(require_dist_cjs74(), 1);

// src/validate-bucketname.ts
var parseBucketName = (name) => {
  const parsed = name.match(new RegExp(`^${REMOTION_BUCKET_PREFIX}(.*)-([a-z0-9A-Z]+)$`));
  const region = parsed?.[1];
  if (!region) {
    return { region: null };
  }
  const realRegionFound = AWS_REGIONS.find((r) => r.replace(/-/g, "") === region);
  return { region: realRegionFound ?? null };
};

// src/get-buckets.ts
var getRemotionBuckets = async ({
  region,
  forceBucketName,
  forcePathStyle,
  requestHandler
}) => {
  const { Buckets } = await getS3Client({
    region,
    customCredentials: null,
    forcePathStyle,
    requestHandler
  }).send(new import_client_s35.ListBucketsCommand({}));
  if (!Buckets) {
    return [];
  }
  const remotionBuckets = Buckets.filter((b) => {
    if (forceBucketName) {
      return b.Name === forceBucketName;
    }
    return b.Name?.startsWith(REMOTION_BUCKET_PREFIX);
  });
  const locations = await Promise.all(remotionBuckets.map(async (bucket) => {
    const { region: parsedRegion } = parseBucketName(bucket.Name);
    if (parsedRegion) {
      return parsedRegion;
    }
    try {
      const result = await getS3Client({
        region,
        customCredentials: null,
        forcePathStyle,
        requestHandler
      }).send(new import_client_s35.GetBucketLocationCommand({
        Bucket: bucket.Name
      }));
      return result.LocationConstraint ?? "us-east-1";
    } catch (err) {
      if (err.stack?.includes("NoSuchBucket")) {
        return null;
      }
      throw err;
    }
  }));
  const bucketsWithLocation = remotionBuckets.map((bucket, i) => {
    return {
      creationDate: bucket.CreationDate.getTime(),
      name: bucket.Name,
      region: locations[i]
    };
  }).filter((b) => b.region);
  return bucketsWithLocation.filter((bucket) => {
    return bucket.region === region;
  });
};

// src/get-functions.ts
var import_client_lambda6 = __toESM(require_dist_cjs63(), 1);

// src/get-function-version.ts
var getFunctionVersion = async ({
  functionName,
  region,
  logLevel,
  requestHandler
}) => {
  try {
    const result = await awsImplementation.callFunctionSync({
      functionName,
      payload: {
        logLevel,
        type: ServerlessRoutines.info
      },
      region,
      type: ServerlessRoutines.info,
      timeoutInTest: 120000,
      requestHandler
    });
    return result.version;
  } catch (err) {
    if (err.message.includes(COMMAND_NOT_FOUND)) {
      return "n/a";
    }
    if (err.message.includes("AWS CRT binary not present ")) {
      return "n/a";
    }
    throw err;
  }
};

// src/get-functions.ts
var getAllFunctions = async ({
  existing,
  nextMarker,
  region,
  requestHandler
}) => {
  const allLambdas = [...existing];
  const lambdas = await getLambdaClient(region, undefined, requestHandler ?? null).send(new import_client_lambda6.ListFunctionsCommand({
    Marker: nextMarker ?? undefined
  }));
  if (!lambdas.Functions) {
    return allLambdas;
  }
  for (const lambda of lambdas.Functions) {
    allLambdas.push(lambda);
  }
  if (lambdas.NextMarker) {
    return getAllFunctions({
      existing: allLambdas,
      nextMarker: lambdas.NextMarker,
      region,
      requestHandler
    });
  }
  return allLambdas;
};
var getFunctions = async (params) => {
  const lambdas = await getAllFunctions({
    existing: [],
    nextMarker: null,
    region: params.region,
    requestHandler: params.requestHandler
  });
  const remotionLambdas = lambdas.filter((f) => {
    return f.FunctionName?.startsWith(RENDER_FN_PREFIX);
  });
  const configs = await Promise.all(remotionLambdas.map(async (fn) => {
    try {
      const version = await getFunctionVersion({
        functionName: fn.FunctionName,
        region: params.region,
        logLevel: params.logLevel ?? "info",
        requestHandler: params.requestHandler
      });
      return version;
    } catch {
      return null;
    }
  }));
  const list = remotionLambdas.map((lambda, i) => {
    return {
      functionName: lambda.FunctionName,
      version: configs[i],
      memorySizeInMb: lambda.MemorySize,
      timeoutInSeconds: lambda.Timeout,
      diskSizeInMb: lambda.EphemeralStorage?.Size ?? DEFAULT_EPHEMERAL_STORAGE_IN_MB
    };
  });
  if (!params.compatibleOnly) {
    return list;
  }
  return list.filter((l) => {
    if (!params.compatibleOnly) {
      return true;
    }
    return l.version === VERSION;
  });
};

// src/get-output-url-from-metadata.ts
var getOutputUrlFromMetadata = ({
  renderMetadata,
  bucketName,
  customCredentials,
  currentRegion
}) => {
  const { key, renderBucketName } = getExpectedOutName({
    renderMetadata,
    bucketName,
    customCredentials,
    bucketNamePrefix: REMOTION_BUCKET_PREFIX
  });
  return {
    url: `https://s3.${currentRegion}.amazonaws.com/${renderBucketName}/${key}`,
    key
  };
};

// src/head-file.ts
var import_client_s36 = __toESM(require_dist_cjs74(), 1);
var lambdaHeadFileImplementation = async ({
  bucketName,
  key,
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  const head = await getS3Client({
    region,
    customCredentials,
    forcePathStyle,
    requestHandler
  }).send(new import_client_s36.HeadObjectCommand({
    Bucket: bucketName,
    Key: key
  }));
  return head;
};

// src/is-flaky-error.ts
var isFlakyError = (err) => {
  const message = err.stack ?? "";
  if ((message.includes("Format error") || message.includes("audio metadata")) && message.includes("storage.googleapis.com")) {
    return true;
  }
  if (message.includes("FATAL:zygote_communication_linux.cc")) {
    return true;
  }
  if (message.includes("error while loading shared libraries: libnss3.so")) {
    return true;
  }
  if (message.includes("but the server sent no data")) {
    return true;
  }
  if (message.includes("Compositor panicked")) {
    return true;
  }
  if (message.includes("We encountered an internal error.")) {
    return true;
  }
  if (message.includes("Compositor exited") && !message.includes("SIGSEGV")) {
    return true;
  }
  if (message.includes("Timed out") && message.includes("while setting up the headless browser")) {
    return true;
  }
  if (message.includes("while trying to connect to the browser")) {
    return true;
  }
  if (message.includes("RequestTimeout: Your socket connection to the server")) {
    return true;
  }
  if (message.includes("waiting for the page to render the React component")) {
    return true;
  }
  if (message.includes("Timed out evaluating page function")) {
    return true;
  }
  if (message.includes("Timeout exceeded rendering the component")) {
    return true;
  }
  if (message.includes("Loading root component")) {
    return true;
  }
  if (message.includes("getaddrinfo") || message.includes("ECONNRESET") || message.includes("ERR_CONNECTION_TIMED_OUT") || message.includes("ERR_NETWORK_CHANGED") || message.includes("A network error occurred") || message.includes("socket hang up")) {
    return true;
  }
  if (message.includes("Target closed") || message.includes("Session closed")) {
    return true;
  }
  if (message.includes("SIGKILL")) {
    return true;
  }
  if (message.includes("ServiceException: We currently do not have sufficient capacity in the region you requested")) {
    return true;
  }
  return false;
};

// src/lifecycle-rules.ts
var import_client_s37 = __toESM(require_dist_cjs74(), 1);

// src/apply-lifecycle.ts
var deleteLifeCycleInput = ({
  bucketName
}) => {
  return {
    Bucket: bucketName
  };
};
var createLifeCycleInput = ({
  bucketName,
  lcRules
}) => {
  return {
    Bucket: bucketName,
    LifecycleConfiguration: {
      Rules: lcRules
    }
  };
};

// src/lifecycle.ts
var getEnabledLifeCycleRule = ({
  key,
  value
}) => {
  return {
    Expiration: {
      Days: value
    },
    Filter: {
      Prefix: `renders/${key}`
    },
    ID: `delete-after-${key}`,
    Status: "Enabled"
  };
};
var getLifeCycleRules = () => {
  return Object.entries(expiryDays).map(([key, value]) => getEnabledLifeCycleRule({ key, value }));
};
var generateRandomHashWithLifeCycleRule = ({
  deleteAfter,
  randomHashFn
}) => {
  return [deleteAfter, randomHashFn()].filter(truthy3).join("-");
};

// src/lifecycle-rules.ts
var createLCRules = async ({
  bucketName,
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  const lcRules = getLifeCycleRules();
  const createCommandInput = createLifeCycleInput({
    bucketName,
    lcRules
  });
  const createCommand = new import_client_s37.PutBucketLifecycleConfigurationCommand(createCommandInput);
  try {
    await getS3Client({
      region,
      customCredentials,
      forcePathStyle,
      requestHandler
    }).send(createCommand);
  } catch (err) {
    if (err.stack?.includes("AccessDenied")) {
      throw new Error(`You don't have the required permissions to create lifecycle rules on the bucket "${bucketName}", but the "enableFolderExpiry" was set to true. Ensure that your user has the "s3:PutLifecycleConfiguration" permission.`);
    }
  }
};
var deleteLCRules = async ({
  bucketName,
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  const deleteCommandInput = deleteLifeCycleInput({
    bucketName
  });
  try {
    await getS3Client({
      region,
      customCredentials,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s37.DeleteBucketLifecycleCommand(deleteCommandInput));
  } catch (err) {
    if (err.stack?.includes("AccessDenied")) {
      throw new Error(`You don't have the required permissions to delete lifecycle rules on the bucket "${bucketName}", but the "enableFolderExpiry" option was set to "false". Ensure that your user has the "s3:PutLifecycleConfiguration" permission. Set "enableFolderExpiry" to "null" to not overwrite any existing lifecycle rules.`);
    }
  }
};
var applyLifeCyleOperation = async ({
  enableFolderExpiry,
  bucketName,
  region,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  if (enableFolderExpiry === null) {
    return;
  }
  if (enableFolderExpiry === true) {
    await createLCRules({
      bucketName,
      region,
      customCredentials,
      forcePathStyle,
      requestHandler
    });
  } else {
    await deleteLCRules({
      bucketName,
      region,
      customCredentials,
      forcePathStyle,
      requestHandler
    });
  }
};

// src/list-objects.ts
var import_client_s38 = __toESM(require_dist_cjs74(), 1);
var lambdaLsImplementation = async ({
  bucketName,
  prefix,
  region,
  expectedBucketOwner,
  continuationToken,
  forcePathStyle,
  requestHandler
}) => {
  try {
    const list = await getS3Client({
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    }).send(new import_client_s38.ListObjectsV2Command({
      Bucket: bucketName,
      Prefix: prefix,
      ExpectedBucketOwner: expectedBucketOwner ?? undefined,
      ContinuationToken: continuationToken
    }));
    if (list.NextContinuationToken) {
      return [
        ...(list.Contents ?? []).map((o) => {
          return {
            Key: o.Key,
            LastModified: o.LastModified,
            ETag: o.ETag,
            Size: o.Size
          };
        }),
        ...await lambdaLsImplementation({
          bucketName,
          prefix,
          expectedBucketOwner,
          region,
          continuationToken: list.NextContinuationToken,
          forcePathStyle,
          requestHandler
        })
      ];
    }
    return (list.Contents || [])?.map((o) => {
      return {
        Key: o.Key,
        LastModified: o.LastModified,
        ETag: o.ETag,
        Size: o.Size
      };
    }) ?? [];
  } catch (err) {
    if (!expectedBucketOwner) {
      throw err;
    }
    if (err.stack?.includes("AccessDenied")) {
      await getS3Client({
        region,
        customCredentials: null,
        forcePathStyle,
        requestHandler
      }).send(new import_client_s38.ListObjectsV2Command({
        Bucket: bucketName,
        Prefix: prefix
      }));
      throw new Error(`Bucket owner mismatch: Expected the bucket ${bucketName} to be owned by you (AWS Account ID: ${expectedBucketOwner}) but it's not the case. Did you accidentially specify the wrong bucket?`);
    }
    throw err;
  }
};

// src/parse-function-name.ts
var parseFunctionName = (functionName) => {
  const match = functionName.match(new RegExp(RENDER_FN_PREFIX + "(.*)-mem(\\d+)mb-disk(\\d+)mb-(\\d+)sec$"));
  if (!match) {
    return null;
  }
  return {
    version: match[1],
    memorySizeInMb: parseInt(match[2], 10),
    diskSizeInMb: parseInt(match[3], 10),
    timeoutInSeconds: parseInt(match[4], 10)
  };
};

// src/random-hash.ts
var alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
var randomHashImplementation = () => {
  return new Array(10).fill(1).map(() => {
    return alphabet[Math.floor(Math.random() * alphabet.length)];
  }).join("");
};

// src/read-file.ts
var import_client_s39 = __toESM(require_dist_cjs74(), 1);
var lambdaReadFileImplementation = async ({
  bucketName,
  key,
  region,
  expectedBucketOwner,
  forcePathStyle,
  requestHandler
}) => {
  const { Body } = await getS3Client({
    region,
    customCredentials: null,
    forcePathStyle,
    requestHandler
  }).send(new import_client_s39.GetObjectCommand({
    Bucket: bucketName,
    Key: key,
    ExpectedBucketOwner: expectedBucketOwner ?? undefined
  }));
  return Body;
};

// src/write-file.ts
var import_client_s310 = __toESM(require_dist_cjs74(), 1);
var import_lib_storage = __toESM(require_dist_cjs78(), 1);
var import_mime_types = __toESM(require_mime_types(), 1);

// src/content-disposition-header.ts
var problematicCharacters = {
  "%3A": ":",
  "%2F": "/",
  "%3F": "?",
  "%23": "#",
  "%5B": "[",
  "%5D": "]",
  "%40": "@",
  "%21": "!",
  "%24": "$",
  "%26": "&",
  "%27": "'",
  "%28": "(",
  "%29": ")",
  "%2A": "*",
  "%2B": "+",
  "%2C": ",",
  "%3B": ";"
};
var includesHexOfUnsafeChar = (path) => {
  for (const key of Object.keys(problematicCharacters)) {
    if (path.includes(key)) {
      return { containsHex: true };
    }
  }
  return { containsHex: false };
};
var getContentDispositionHeader = (behavior) => {
  if (behavior === null) {
    return;
  }
  if (behavior.type === "play-in-browser") {
    return;
  }
  if (behavior.fileName === null) {
    return `attachment`;
  }
  const { containsHex } = includesHexOfUnsafeChar(behavior.fileName);
  if (containsHex) {
    return `attachment; filename="${behavior.fileName}"`;
  }
  return `attachment; filename="${encodeURIComponent(behavior.fileName)}"`;
};

// src/write-file.ts
var MULTIPART_THRESHOLD = 100 * 1024 * 1024;
var tryLambdaWriteFile = async ({
  bucketName,
  key,
  body,
  region,
  privacy,
  expectedBucketOwner,
  downloadBehavior,
  customCredentials,
  forcePathStyle,
  storageClass,
  requestHandler
}) => {
  const client = getS3Client({
    region,
    customCredentials,
    forcePathStyle,
    requestHandler
  });
  const params = {
    Bucket: bucketName,
    Key: key,
    Body: body,
    ACL: privacy === "no-acl" ? undefined : privacy === "private" ? "private" : "public-read",
    ExpectedBucketOwner: customCredentials ? undefined : expectedBucketOwner ?? undefined,
    ContentType: import_mime_types.default.lookup(key) || "application/octet-stream",
    ContentDisposition: getContentDispositionHeader(downloadBehavior),
    StorageClass: storageClass ?? undefined
  };
  const size = body instanceof Buffer || body instanceof Uint8Array ? body.length : body instanceof Blob ? body.size : typeof body === "string" ? Buffer.from(body).length : null;
  if (size === null || size > MULTIPART_THRESHOLD) {
    const upload = new import_lib_storage.Upload({
      client,
      params,
      queueSize: 4,
      partSize: 5 * 1024 * 1024
    });
    await upload.done();
  } else {
    await client.send(new import_client_s310.PutObjectCommand(params));
  }
};
var lambdaWriteFileImplementation = async (params) => {
  const remainingRetries = params.retries ?? 2;
  try {
    await tryLambdaWriteFile(params);
  } catch (err) {
    if (remainingRetries === 0) {
      throw err;
    }
    const backoff = 2 ** (2 - remainingRetries) * 2000;
    await new Promise((resolve) => {
      setTimeout(resolve, backoff);
    });
    console.warn("Failed to write file to storage:");
    console.warn(err);
    console.warn(`Retrying (${remainingRetries} retries remaining)...`);
    return lambdaWriteFileImplementation({
      ...params,
      retries: remainingRetries - 1
    });
  }
};

// src/aws-provider.ts
if (/^AWS_Lambda_nodejs(?:18|20)[.]x$/.test(process.env.AWS_EXECUTION_ENV ?? "") === true) {
  process.env.FONTCONFIG_PATH = "/opt";
  process.env.FONTCONFIG_FILE = "/opt/fonts.conf";
  process.env.DISABLE_FROM_SURFACE = "1";
  process.env.NO_COLOR = "1";
  globalThis._dumpUnreleasedBuffers = new EventEmitter;
  globalThis._dumpUnreleasedBuffers.setMaxListeners(201);
}
var validateDeleteAfter = (lifeCycleValue) => {
  if (lifeCycleValue === null) {
    return;
  }
  if (lifeCycleValue === undefined) {
    return;
  }
  if (typeof lifeCycleValue !== "string") {
    throw new TypeError(`Expected life cycle value to be a string, got ${JSON.stringify(lifeCycleValue)}`);
  }
  if (!(lifeCycleValue in expiryDays)) {
    throw new TypeError(`Expected deleteAfter value to be one of ${Object.keys(expiryDays).join(", ")}, got ${lifeCycleValue}`);
  }
};
var awsImplementation = {
  getChromiumPath() {
    return "/opt/bin/chromium";
  },
  getBuckets: getRemotionBuckets,
  createBucket,
  applyLifeCycle: applyLifeCyleOperation,
  listObjects: lambdaLsImplementation,
  deleteFile: lambdaDeleteFileImplementation,
  bucketExists: bucketExistsInRegionImplementation,
  randomHash: randomHashImplementation,
  readFile: lambdaReadFileImplementation,
  writeFile: lambdaWriteFileImplementation,
  headFile: lambdaHeadFileImplementation,
  convertToServeUrl: convertToServeUrlImplementation,
  printLoggingHelper: true,
  validateDeleteAfter,
  callFunctionAsync: callFunctionAsyncImplementation,
  callFunctionStreaming: callFunctionWithStreamingImplementation,
  callFunctionSync: callFunctionSyncImplementation,
  getEphemeralStorageForPriceCalculation() {
    return MAX_EPHEMERAL_STORAGE_IN_MB;
  },
  estimatePrice,
  getLoggingUrlForMethod: getCloudwatchMethodUrl,
  getLoggingUrlForRendererFunction: getCloudwatchRendererUrl,
  isFlakyError,
  getOutputUrl: getOutputUrlFromMetadata,
  serverStorageProductName: () => "S3",
  getMaxStillInlinePayloadSize: () => 5000000,
  getMaxNonInlinePayloadSizePerFunction: () => 200000,
  getAccountId: getAccountIdImplementation,
  deleteFunction,
  getFunctions,
  parseFunctionName,
  checkCredentials,
  getBucketPrefix: () => REMOTION_BUCKET_PREFIX
};

// src/p-limit.ts
var pLimit = (concurrency) => {
  const queue = [];
  let activeCount = 0;
  const next = () => {
    activeCount--;
    if (queue.length > 0) {
      queue.shift()?.();
    }
  };
  const run = async (fn, resolve, ...args) => {
    activeCount++;
    const result = (async () => fn(...args))();
    resolve(result);
    try {
      await result;
    } catch {}
    next();
  };
  const enqueue = (fn, resolve, ...args) => {
    queue.push(() => run(fn, resolve, ...args));
    (async () => {
      await Promise.resolve();
      if (activeCount < concurrency && queue.length > 0) {
        queue.shift()?.();
      }
    })();
  };
  const generator = (fn, ...args) => new Promise((resolve) => {
    enqueue(fn, resolve, ...args);
  });
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue.length
    },
    clearQueue: {
      value: () => {
        queue.length = 0;
      }
    }
  });
  return generator;
};

// src/clean-items.ts
var limit = pLimit(10);
var cleanItems = ({
  bucket,
  onAfterItemDeleted,
  onBeforeItemDeleted,
  region,
  list,
  providerSpecifics,
  forcePathStyle,
  requestHandler
}) => {
  return Promise.all(list.map((object) => limit(async () => {
    onBeforeItemDeleted({
      bucketName: bucket,
      itemName: object
    });
    await providerSpecifics.deleteFile({
      bucketName: bucket,
      key: object,
      region,
      customCredentials: null,
      forcePathStyle,
      requestHandler
    });
    onAfterItemDeleted({
      bucketName: bucket,
      itemName: object
    });
  })));
};

// src/delete-render.ts
var internalDeleteRender = async (input) => {
  const expectedBucketOwner = await input.providerSpecifics.getAccountId({
    region: input.region
  });
  const progress = await getOverallProgressFromStorage({
    bucketName: input.bucketName,
    expectedBucketOwner,
    region: input.region,
    renderId: input.renderId,
    providerSpecifics: input.providerSpecifics,
    forcePathStyle: input.forcePathStyle,
    requestHandler: input.requestHandler
  });
  if (progress.renderMetadata === null) {
    return { freedBytes: 0 };
  }
  const { key, renderBucketName, customCredentials } = getExpectedOutName({
    renderMetadata: progress.renderMetadata,
    bucketName: input.bucketName,
    customCredentials: input.customCredentials ?? null,
    bucketNamePrefix: REMOTION_BUCKET_PREFIX
  });
  await input.providerSpecifics.deleteFile({
    bucketName: renderBucketName,
    customCredentials,
    key,
    region: input.region,
    forcePathStyle: input.forcePathStyle,
    requestHandler: input.requestHandler
  });
  let files = await input.providerSpecifics.listObjects({
    bucketName: input.bucketName,
    prefix: rendersPrefix(input.renderId),
    region: input.region,
    expectedBucketOwner,
    forcePathStyle: input.forcePathStyle,
    requestHandler: input.requestHandler
  });
  let totalSize = 0;
  while (files.length > 0) {
    totalSize += files.reduce((a, b) => {
      return a + (b.Size ?? 0);
    }, 0);
    await cleanItems({
      list: files.map((f) => f.Key),
      bucket: input.bucketName,
      onAfterItemDeleted: () => {
        return;
      },
      onBeforeItemDeleted: () => {
        return;
      },
      region: input.region,
      providerSpecifics: input.providerSpecifics,
      forcePathStyle: input.forcePathStyle,
      requestHandler: input.requestHandler
    });
    files = await input.providerSpecifics.listObjects({
      bucketName: input.bucketName,
      prefix: rendersPrefix(input.renderId),
      region: input.region,
      expectedBucketOwner,
      forcePathStyle: input.forcePathStyle,
      requestHandler: input.requestHandler
    });
  }
  return {
    freedBytes: totalSize
  };
};
var deleteRender = (input) => {
  return internalDeleteRender({
    ...input,
    providerSpecifics: awsImplementation,
    forcePathStyle: input.forcePathStyle ?? false
  });
};

// src/make-s3-url.ts
var makeS3ServeUrl = ({
  bucketName,
  subFolder,
  region
}) => {
  return `https://${bucketName}.s3.${region}.amazonaws.com/${subFolder}/index.html`;
};

// src/get-sites.ts
var internalGetSites = async ({
  region,
  forceBucketName,
  providerSpecifics,
  forcePathStyle,
  requestHandler
}) => {
  const remotionBuckets = forceBucketName ? await providerSpecifics.getBuckets({
    region,
    forceBucketName,
    forcePathStyle,
    requestHandler
  }) : await providerSpecifics.getBuckets({
    region,
    forceBucketName: null,
    forcePathStyle,
    requestHandler
  });
  const accountId = await providerSpecifics.getAccountId({ region });
  const sites = {};
  for (const bucket of remotionBuckets) {
    const ls = await providerSpecifics.listObjects({
      bucketName: bucket.name,
      prefix: getSitesKey(""),
      region,
      expectedBucketOwner: accountId,
      forcePathStyle,
      requestHandler
    });
    for (const file of ls) {
      const siteKeyMatch = file.Key?.match(/sites\/([0-9a-zA-Z-!_.*'()]+)\/(.*)$/);
      if (!siteKeyMatch) {
        throw new Error(`A file was found in the bucket "${bucket.name}" with the key ${file.Key} which is an unexpected folder structure. Delete this file.`);
      }
      const [, siteId] = siteKeyMatch;
      if (!sites[siteId]) {
        sites[siteId] = {
          sizeInBytes: 0,
          bucketName: bucket.name,
          lastModified: null,
          id: siteId,
          serveUrl: makeS3ServeUrl({
            bucketName: bucket.name,
            region,
            subFolder: getSitesKey(siteId)
          })
        };
      }
      if (file.LastModified) {
        const currentLastModified = sites[siteId].lastModified;
        if (currentLastModified === null || file.LastModified.getTime() > currentLastModified) {
          sites[siteId].lastModified = file.LastModified.getTime();
        }
      }
      if (file.Size) {
        sites[siteId].sizeInBytes += file.Size;
      }
    }
  }
  const sitesArray = Object.keys(sites).map((siteId) => {
    return sites[siteId];
  });
  return { sites: sitesArray, buckets: remotionBuckets };
};
var getSites = ({
  region,
  forceBucketName,
  forcePathStyle,
  requestHandler
}) => {
  return internalGetSites({
    region,
    forceBucketName: forceBucketName ?? null,
    forcePathStyle: forcePathStyle ?? false,
    providerSpecifics: awsImplementation,
    requestHandler: requestHandler ?? null
  });
};

// src/lambda-version-string.ts
var LAMBDA_VERSION_STRING = VERSION.replace(/\./g, "-").replace(/\+/g, "-").substring(0, 10);

// src/validate-lambda-codec.ts
var validateLambdaCodec = (codec) => {
  if (typeof codec !== "string") {
    throw new TypeError('"codec" must be a string ');
  }
  if (!serverlessCodecs.includes(codec)) {
    throw new TypeError("'" + codec + "' is not a valid codec for Lambda. The following values are supported: " + serverlessCodecs.join(", "));
  }
  if (codec === "h264-mkv") {
    console.warn(`The "h264-mkv" codec for renderMediaOnLambda() is deprecated - it's now just "h264".`);
    return "h264";
  }
  return codec;
};

// src/validate-serveurl.ts
var validateServeUrl = (serveUrl) => {
  if (typeof serveUrl !== "string") {
    throw new TypeError(`"serveURL" parameter must be a string, but is ${JSON.stringify(serveUrl)}`);
  }
};

// src/make-lambda-payload.ts
var makeLambdaRenderMediaPayload = async ({
  rendererFunctionName,
  frameRange,
  framesPerLambda,
  concurrency,
  forceBucketName: bucketName,
  codec,
  composition,
  serveUrl,
  imageFormat,
  inputProps,
  region,
  crf,
  envVariables,
  pixelFormat,
  proResProfile,
  x264Preset,
  maxRetries,
  privacy,
  logLevel,
  outName: outName2,
  timeoutInMilliseconds,
  chromiumOptions,
  scale,
  everyNthFrame,
  numberOfGifLoops,
  audioBitrate,
  concurrencyPerLambda,
  audioCodec,
  forceHeight,
  forceWidth,
  webhook,
  videoBitrate,
  encodingMaxRate,
  encodingBufferSize,
  downloadBehavior,
  muted,
  overwrite,
  jpegQuality,
  offthreadVideoCacheSizeInBytes,
  mediaCacheSizeInBytes,
  deleteAfter,
  colorSpace,
  preferLossless,
  forcePathStyle,
  metadata,
  apiKey,
  offthreadVideoThreads,
  storageClass,
  requestHandler
}) => {
  const actualCodec = validateLambdaCodec(codec);
  validateServeUrl(serveUrl);
  validateDownloadBehavior(downloadBehavior);
  validateWebhook(webhook);
  const stringifiedInputProps = serializeOrThrow(inputProps ?? {}, "input-props");
  const serialized = await compressInputProps({
    stringifiedInputProps,
    region,
    needsToUpload: getNeedsToUpload({
      type: "video-or-audio",
      sizes: [
        stringifiedInputProps.length,
        JSON.stringify(envVariables).length
      ],
      providerSpecifics: awsImplementation
    }),
    userSpecifiedBucketName: bucketName ?? null,
    propsType: "input-props",
    providerSpecifics: awsImplementation,
    forcePathStyle: forcePathStyle ?? false,
    skipPutAcl: privacy === "no-acl",
    requestHandler: requestHandler ?? null
  });
  return {
    rendererFunctionName,
    framesPerLambda,
    concurrency,
    composition,
    serveUrl,
    inputProps: serialized,
    codec: actualCodec,
    imageFormat,
    crf: crf ?? null,
    envVariables,
    pixelFormat: pixelFormat ?? null,
    proResProfile: proResProfile ?? null,
    x264Preset,
    jpegQuality,
    maxRetries,
    privacy,
    logLevel,
    frameRange,
    outName: outName2,
    timeoutInMilliseconds,
    chromiumOptions,
    scale,
    everyNthFrame,
    numberOfGifLoops,
    concurrencyPerLambda,
    downloadBehavior,
    muted,
    version: VERSION,
    overwrite: overwrite ?? ENABLE_V5_BREAKING_CHANGES2,
    audioBitrate: audioBitrate ?? null,
    videoBitrate: videoBitrate ?? null,
    encodingBufferSize: encodingBufferSize ?? null,
    encodingMaxRate: encodingMaxRate ?? null,
    webhook: webhook ?? null,
    forceHeight: forceHeight ?? null,
    forceWidth: forceWidth ?? null,
    bucketName: bucketName ?? null,
    audioCodec: audioCodec ?? null,
    type: ServerlessRoutines.start,
    offthreadVideoCacheSizeInBytes: offthreadVideoCacheSizeInBytes ?? null,
    deleteAfter: deleteAfter ?? null,
    colorSpace: colorSpace ?? null,
    preferLossless: preferLossless ?? false,
    forcePathStyle: forcePathStyle ?? false,
    metadata: metadata ?? null,
    apiKey: apiKey ?? null,
    offthreadVideoThreads: offthreadVideoThreads ?? null,
    mediaCacheSizeInBytes: mediaCacheSizeInBytes ?? null,
    storageClass: storageClass ?? null
  };
};
var getRenderProgressPayload = ({
  bucketName,
  renderId,
  s3OutputProvider,
  logLevel,
  forcePathStyle
}) => {
  return {
    type: ServerlessRoutines.status,
    bucketName,
    renderId,
    version: VERSION,
    s3OutputProvider: s3OutputProvider ?? null,
    logLevel: logLevel ?? "info",
    forcePathStyle: forcePathStyle ?? false
  };
};
var makeLambdaRenderStillPayload = async ({
  serveUrl,
  inputProps,
  imageFormat,
  envVariables,
  jpegQuality,
  region,
  maxRetries,
  composition,
  privacy,
  frame,
  logLevel,
  outName: outName2,
  timeoutInMilliseconds,
  chromiumOptions,
  scale,
  downloadBehavior,
  forceHeight,
  forceWidth,
  forceBucketName,
  offthreadVideoCacheSizeInBytes,
  deleteAfter,
  forcePathStyle,
  apiKey,
  storageClass,
  requestHandler,
  offthreadVideoThreads,
  mediaCacheSizeInBytes
}) => {
  const stringifiedInputProps = serializeOrThrow(inputProps, "input-props");
  const serializedInputProps = await compressInputProps({
    stringifiedInputProps,
    region,
    needsToUpload: getNeedsToUpload({
      type: "still",
      sizes: [
        stringifiedInputProps.length,
        JSON.stringify(envVariables).length
      ],
      providerSpecifics: awsImplementation
    }),
    userSpecifiedBucketName: forceBucketName ?? null,
    propsType: "input-props",
    providerSpecifics: awsImplementation,
    forcePathStyle,
    skipPutAcl: privacy === "no-acl",
    requestHandler
  });
  return {
    composition,
    serveUrl,
    inputProps: serializedInputProps,
    imageFormat,
    envVariables,
    jpegQuality,
    maxRetries,
    frame,
    privacy,
    attempt: 1,
    logLevel,
    outName: outName2,
    timeoutInMilliseconds,
    chromiumOptions,
    scale,
    downloadBehavior,
    version: VERSION,
    forceHeight,
    forceWidth,
    bucketName: forceBucketName,
    offthreadVideoCacheSizeInBytes,
    deleteAfter,
    type: ServerlessRoutines.still,
    streamed: true,
    forcePathStyle,
    apiKey: apiKey ?? null,
    offthreadVideoThreads: offthreadVideoThreads ?? null,
    mediaCacheSizeInBytes: mediaCacheSizeInBytes ?? null,
    storageClass: storageClass ?? null
  };
};

// src/render-media-on-lambda.ts
var internalRenderMediaOnLambdaRaw = async (input) => {
  const { functionName, region, rendererFunctionName } = input;
  try {
    const res = await awsImplementation.callFunctionSync({
      functionName,
      type: ServerlessRoutines.start,
      payload: await makeLambdaRenderMediaPayload(input),
      region,
      timeoutInTest: 120000,
      requestHandler: input.requestHandler
    });
    return {
      renderId: res.renderId,
      bucketName: res.bucketName,
      cloudWatchLogs: getCloudwatchRendererUrl({
        functionName,
        region,
        renderId: res.renderId,
        rendererFunctionName: rendererFunctionName ?? null,
        chunk: null
      }),
      cloudWatchMainLogs: getCloudwatchMethodUrl({
        renderId: res.renderId,
        functionName,
        method: ServerlessRoutines.launch,
        region,
        rendererFunctionName: rendererFunctionName ?? null
      }),
      folderInS3Console: getS3RenderUrl({
        bucketName: res.bucketName,
        renderId: res.renderId,
        region
      }),
      lambdaInsightsLogs: getLambdaInsightsUrl({
        functionName,
        region
      }),
      progressJsonInConsole: getProgressJsonUrl({
        bucketName: res.bucketName,
        renderId: res.renderId,
        region
      })
    };
  } catch (err) {
    if (err.stack?.includes("UnrecognizedClientException")) {
      throw new Error("UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception");
    }
    throw err;
  }
};
var renderMediaOnLambdaOptionalToRequired = (options) => {
  return {
    offthreadVideoThreads: options.offthreadVideoThreads ?? null,
    audioBitrate: options.audioBitrate ?? null,
    audioCodec: options.audioCodec ?? null,
    chromiumOptions: options.chromiumOptions ?? {},
    codec: options.codec,
    colorSpace: options.colorSpace ?? null,
    composition: options.composition,
    concurrencyPerLambda: options.concurrencyPerLambda ?? 1,
    concurrency: options.concurrency ?? null,
    crf: options.crf,
    downloadBehavior: options.downloadBehavior ?? { type: "play-in-browser" },
    envVariables: options.envVariables ?? {},
    everyNthFrame: options.everyNthFrame ?? 1,
    forceBucketName: options.forceBucketName ?? null,
    forceHeight: options.forceHeight ?? null,
    forceWidth: options.forceWidth ?? null,
    frameRange: options.frameRange ?? null,
    framesPerLambda: options.framesPerLambda ?? null,
    functionName: options.functionName,
    imageFormat: options.imageFormat ?? "jpeg",
    inputProps: options.inputProps ?? {},
    jpegQuality: options.jpegQuality ?? 80,
    logLevel: options.logLevel ?? "info",
    maxRetries: options.maxRetries ?? 1,
    muted: options.muted ?? false,
    numberOfGifLoops: options.numberOfGifLoops ?? null,
    offthreadVideoCacheSizeInBytes: options.offthreadVideoCacheSizeInBytes ?? null,
    outName: options.outName ?? null,
    overwrite: options.overwrite ?? false,
    pixelFormat: options.pixelFormat ?? undefined,
    privacy: options.privacy ?? "public",
    proResProfile: options.proResProfile ?? undefined,
    region: options.region,
    rendererFunctionName: options.rendererFunctionName ?? null,
    scale: options.scale ?? 1,
    serveUrl: options.serveUrl,
    timeoutInMilliseconds: options.timeoutInMilliseconds ?? 30000,
    videoBitrate: options.videoBitrate ?? null,
    encodingMaxRate: options.encodingMaxRate ?? null,
    encodingBufferSize: options.encodingBufferSize ?? null,
    webhook: options.webhook ?? null,
    x264Preset: options.x264Preset ?? null,
    deleteAfter: options.deleteAfter ?? null,
    preferLossless: options.preferLossless ?? false,
    forcePathStyle: options.forcePathStyle ?? false,
    indent: false,
    metadata: options.metadata ?? null,
    apiKey: options.apiKey ?? null,
    storageClass: options.storageClass ?? null,
    requestHandler: options.requestHandler ?? null,
    mediaCacheSizeInBytes: options.mediaCacheSizeInBytes ?? null
  };
};
var wrapped = wrapWithErrorHandling(internalRenderMediaOnLambdaRaw);
var renderMediaOnLambda = (options) => {
  if (options.quality) {
    throw new Error("quality has been renamed to jpegQuality. Please rename the option.");
  }
  return wrapped(renderMediaOnLambdaOptionalToRequired(options));
};
var renderVideoOnLambda = renderMediaOnLambda;

// src/render-still-on-lambda.ts
var innerRenderStillOnLambda = async (input) => {
  const { functionName, region, onInit } = input;
  try {
    const payload = await makeLambdaRenderStillPayload(input);
    const res = await new Promise((resolve, reject) => {
      awsImplementation.callFunctionStreaming({
        functionName,
        type: ServerlessRoutines.still,
        payload,
        region,
        receivedStreamingPayload: ({ message }) => {
          if (message.type === "render-id-determined") {
            onInit?.({
              renderId: message.payload.renderId,
              cloudWatchLogs: getCloudwatchMethodUrl({
                functionName,
                method: ServerlessRoutines.still,
                region,
                rendererFunctionName: null,
                renderId: message.payload.renderId
              }),
              lambdaInsightsUrl: getLambdaInsightsUrl({
                functionName,
                region
              })
            });
          }
          if (message.type === "error-occurred") {
            reject(new Error(message.payload.error));
          }
          if (message.type === "still-rendered") {
            resolve(message.payload);
          }
        },
        timeoutInTest: 120000,
        retriesRemaining: input.maxRetries,
        requestHandler: input.requestHandler
      }).then(() => {
        reject(new Error("Expected response to be streamed"));
      }).catch((err) => {
        reject(err);
      });
    });
    return {
      estimatedPrice: res.estimatedPrice,
      url: res.output,
      outKey: res.outKey,
      sizeInBytes: res.size,
      bucketName: res.bucketName,
      renderId: res.renderId,
      cloudWatchLogs: getCloudwatchMethodUrl({
        functionName,
        method: ServerlessRoutines.still,
        region,
        renderId: res.renderId,
        rendererFunctionName: null
      }),
      artifacts: res.receivedArtifacts
    };
  } catch (err) {
    if (err.stack?.includes("UnrecognizedClientException")) {
      throw new Error("UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception");
    }
    throw err;
  }
};
var internalRenderStillOnLambda = wrapWithErrorHandling(innerRenderStillOnLambda);
var renderStillOnLambda = (input) => {
  return internalRenderStillOnLambda({
    chromiumOptions: input.chromiumOptions ?? {},
    composition: input.composition,
    deleteAfter: input.deleteAfter ?? null,
    downloadBehavior: input.downloadBehavior ?? { type: "play-in-browser" },
    envVariables: input.envVariables ?? {},
    forceBucketName: input.forceBucketName ?? null,
    forceHeight: input.forceHeight ?? null,
    forceWidth: input.forceWidth ?? null,
    frame: input.frame ?? 0,
    functionName: input.functionName,
    imageFormat: input.imageFormat,
    indent: false,
    inputProps: input.inputProps,
    maxRetries: input.maxRetries ?? DEFAULT_MAX_RETRIES,
    onInit: input.onInit ?? (() => {
      return;
    }),
    outName: input.outName ?? null,
    privacy: input.privacy,
    region: input.region,
    serveUrl: input.serveUrl,
    jpegQuality: input.jpegQuality ?? input.quality ?? 80,
    logLevel: input.dumpBrowserLogs ? "verbose" : input.logLevel ?? "info",
    offthreadVideoCacheSizeInBytes: input.offthreadVideoCacheSizeInBytes ?? null,
    scale: input.scale ?? 1,
    timeoutInMilliseconds: input.timeoutInMilliseconds ?? 30000,
    forcePathStyle: input.forcePathStyle ?? false,
    apiKey: input.apiKey ?? null,
    offthreadVideoThreads: input.offthreadVideoThreads ?? null,
    storageClass: input.storageClass ?? null,
    requestHandler: input.requestHandler ?? null,
    mediaCacheSizeInBytes: input.mediaCacheSizeInBytes ?? null
  });
};

// src/runtime-preference.ts
var runtimePreferenceOptions = [
  "default",
  "apple-emojis",
  "cjk"
];

// src/speculate-function-name.ts
var innerSpeculateFunctionName = ({
  diskSizeInMb,
  memorySizeInMb,
  timeoutInSeconds
}) => {
  return [
    `${RENDER_FN_PREFIX}${LAMBDA_VERSION_STRING}`,
    `mem${memorySizeInMb}mb`,
    `disk${diskSizeInMb}mb`,
    `${timeoutInSeconds}sec`
  ].join("-");
};
var speculateFunctionName = ({
  memorySizeInMb,
  diskSizeInMb,
  timeoutInSeconds
}) => {
  const memorySize = Number(memorySizeInMb);
  const diskSize = Number(diskSizeInMb);
  const timeout = Number(timeoutInSeconds);
  if (!Number.isInteger(memorySize) || memorySize <= 0) {
    throw new Error(`Memory size must be a positive integer. Received: ${memorySizeInMb}`);
  }
  if (!Number.isInteger(diskSize) || diskSize <= 0) {
    throw new Error(`Disk size must be a positive integer. Received: ${diskSizeInMb}`);
  }
  if (!Number.isInteger(timeout) || timeout <= 0) {
    throw new Error(`Timeout must be a positive integer. Received: ${timeoutInSeconds}`);
  }
  return innerSpeculateFunctionName({
    diskSizeInMb,
    memorySizeInMb,
    timeoutInSeconds
  });
};

// src/validate-webhook-signature.ts
var validateWebhookSignature = ({
  secret,
  body,
  signatureHeader
}) => {
  if (!secret) {
    throw new TypeError("No 'secret' was provided to validateWebhookSignature().");
  }
  if (!body) {
    throw new TypeError("No 'body' was provided to validateWebhookSignature().");
  }
  if (false) {}
  const Crypto = __require("crypto");
  const hmac = Crypto.createHmac("sha512", secret);
  const signature = `sha512=${hmac.update(JSON.stringify(body)).digest("hex")}`;
  if (!signatureHeader || signatureHeader === "NO_SECRET_PROVIDED") {
    throw new Error("No webhook signature was provided");
  }
  if (signatureHeader !== signature) {
    throw new Error("Signatures do not match");
  }
};

// src/app-router-webhook.ts
var appRouterWebhook = (options) => {
  const { testing, extraHeaders, secret, onSuccess, onTimeout, onError } = options;
  return async function(req) {
    let headers = extraHeaders || {};
    if (testing) {
      const testingheaders = {
        "Access-Control-Allow-Origin": "https://www.remotion.dev",
        "Access-Control-Allow-Headers": "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, X-Remotion-Status, X-Remotion-Signature, X-Remotion-Mode",
        "Access-Control-Allow-Methods": "OPTIONS,POST"
      };
      headers = { ...headers, ...testingheaders };
    }
    if (req.method === "OPTIONS") {
      return new Response(null, {
        headers
      });
    }
    const body = await req.json();
    try {
      validateWebhookSignature({
        secret,
        body,
        signatureHeader: req.headers.get("X-Remotion-Signature")
      });
      const payload = body;
      if (payload.type === "success" && onSuccess) {
        await onSuccess(payload);
      } else if (payload.type === "timeout" && onTimeout) {
        await onTimeout(payload);
      } else if (payload.type === "error" && onError) {
        await onError(payload);
      }
    } catch (err) {
      return new Response(JSON.stringify({
        success: false,
        error: err instanceof Error ? err.message : String(err)
      }), { status: 500, headers });
    }
    return new Response(JSON.stringify({ success: true }), { headers });
  };
};
// src/pages-router-webhook.ts
var addHeaders = (res, headers) => {
  Object.entries(headers).forEach(([key, value]) => {
    res.setHeader(key, value);
  });
};
var pagesRouterWebhook = (options) => {
  const { testing, extraHeaders, secret, onSuccess, onTimeout, onError } = options;
  return async function(req, res) {
    addHeaders(res, extraHeaders || {});
    if (testing) {
      const testingheaders = {
        "Access-Control-Allow-Origin": "https://www.remotion.dev",
        "Access-Control-Allow-Headers": "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, X-Remotion-Status, X-Remotion-Signature, X-Remotion-Mode",
        "Access-Control-Allow-Methods": "OPTIONS,POST"
      };
      addHeaders(res, testingheaders);
    }
    if (req.method === "OPTIONS") {
      res.status(200).end();
      return;
    }
    try {
      validateWebhookSignature({
        secret,
        body: req.body,
        signatureHeader: req.headers["x-remotion-signature"]
      });
      const payload = req.body;
      if (payload.type === "success" && onSuccess) {
        await onSuccess(payload);
      } else if (payload.type === "timeout" && onTimeout) {
        await onTimeout(payload);
      } else if (payload.type === "error" && onError) {
        await onError(payload);
      }
      res.status(200).json({
        success: true
      });
    } catch (err) {
      res.status(500).json({
        success: false,
        error: err instanceof Error ? err.message : String(err)
      });
    }
  };
};

// src/express-webhook.ts
var expressWebhook = (options) => {
  const { testing, extraHeaders, secret, onSuccess, onTimeout, onError } = options;
  return async (req, res) => {
    if (testing) {
      const testingheaders = {
        "Access-Control-Allow-Origin": "https://www.remotion.dev",
        "Access-Control-Allow-Headers": "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, X-Remotion-Status, X-Remotion-Signature, X-Remotion-Mode",
        "Access-Control-Allow-Methods": "OPTIONS,POST"
      };
      addHeaders(res, testingheaders);
    }
    addHeaders(res, extraHeaders || {});
    if (req.method === "OPTIONS") {
      res.status(200).end();
      return;
    }
    try {
      validateWebhookSignature({
        signatureHeader: req.header("X-Remotion-Signature"),
        body: req.body,
        secret
      });
      const payload = req.body;
      if (payload.type === "success" && onSuccess) {
        await onSuccess(payload);
      } else if (payload.type === "error" && onError) {
        await onError(payload);
      } else if (payload.type === "timeout" && onTimeout) {
        await onTimeout(payload);
      }
      res.status(200).json({ success: true });
    } catch (err) {
      res.status(500).json({
        success: false,
        error: err instanceof Error ? err.message : String(err)
      });
    }
  };
};
// src/get-aws-client.ts
var CloudWatchSDK = __toESM(require_dist_cjs60(), 1);
var IamSdk = __toESM(require_dist_cjs62(), 1);
var LambdaSDK = __toESM(require_dist_cjs63(), 1);
var S3SDK = __toESM(require_dist_cjs74(), 1);
var ServiceQuotasSDK = __toESM(require_dist_cjs75(), 1);
var StsSdk = __toESM(require_dist_cjs76(), 1);
var getAwsClient = ({
  region,
  service,
  customCredentials,
  forcePathStyle,
  requestHandler
}) => {
  return {
    client: getServiceClient({
      region,
      service,
      customCredentials: customCredentials ?? null,
      forcePathStyle: forcePathStyle ?? false,
      requestHandler
    }),
    sdk: {
      lambda: LambdaSDK,
      cloudwatch: CloudWatchSDK,
      iam: IamSdk,
      s3: S3SDK,
      servicequotas: ServiceQuotasSDK,
      sts: StsSdk
    }[service]
  };
};
// src/get-compositions-on-lambda.ts
var getCompositionsOnLambda = async ({
  chromiumOptions,
  serveUrl,
  region,
  inputProps,
  functionName,
  envVariables,
  logLevel,
  timeoutInMilliseconds,
  forceBucketName: bucketName,
  dumpBrowserLogs,
  offthreadVideoCacheSizeInBytes,
  forcePathStyle,
  requestHandler,
  mediaCacheSizeInBytes
}) => {
  const stringifiedInputProps = serializeOrThrow(inputProps, "input-props");
  const serializedInputProps = await compressInputProps({
    stringifiedInputProps,
    region,
    userSpecifiedBucketName: bucketName ?? null,
    propsType: "input-props",
    needsToUpload: getNeedsToUpload({
      type: "video-or-audio",
      sizes: [
        stringifiedInputProps.length,
        JSON.stringify(envVariables).length
      ],
      providerSpecifics: awsImplementation
    }),
    providerSpecifics: awsImplementation,
    forcePathStyle: forcePathStyle ?? false,
    skipPutAcl: false,
    requestHandler
  });
  try {
    const res = await awsImplementation.callFunctionSync({
      functionName,
      type: ServerlessRoutines.compositions,
      payload: {
        type: ServerlessRoutines.compositions,
        chromiumOptions: chromiumOptions ?? {},
        serveUrl,
        envVariables,
        inputProps: serializedInputProps,
        logLevel: dumpBrowserLogs ? "verbose" : logLevel ?? "info",
        timeoutInMilliseconds: timeoutInMilliseconds ?? 30000,
        version: VERSION,
        bucketName: bucketName ?? null,
        offthreadVideoCacheSizeInBytes: offthreadVideoCacheSizeInBytes ?? null,
        forcePathStyle: forcePathStyle ?? false,
        mediaCacheSizeInBytes: mediaCacheSizeInBytes ?? null
      },
      region,
      timeoutInTest: 120000,
      requestHandler
    });
    return res.compositions;
  } catch (err) {
    if (err.stack?.includes("UnrecognizedClientException")) {
      throw new Error("UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception");
    }
    throw err;
  }
};
// src/get-render-progress.ts
var getRenderProgress = async (input) => {
  if (input.skipLambdaInvocation) {
    const parsed = parseFunctionName(input.functionName);
    if (!parsed) {
      throw new Error([
        `The function name ${input.functionName} does not adhere to the function name convention (https://www.remotion.dev/docs/lambda/naming-convention).`,
        "Cannot determine memory and disk size from the function name.",
        "You must call getRenderProgress with `skipLambdaInvocation` set to false."
      ].join(`
`));
    }
    return getProgress({
      bucketName: input.bucketName,
      renderId: input.renderId,
      region: input.region,
      forcePathStyle: input.forcePathStyle ?? false,
      customCredentials: input.s3OutputProvider ?? null,
      expectedBucketOwner: null,
      providerSpecifics: awsImplementation,
      memorySizeInMb: parsed.memorySizeInMb,
      timeoutInMilliseconds: parsed.timeoutInSeconds * 1000,
      functionName: input.functionName,
      requestHandler: input.requestHandler
    });
  }
  const result = await awsImplementation.callFunctionSync({
    functionName: input.functionName,
    type: ServerlessRoutines.status,
    payload: getRenderProgressPayload(input),
    region: input.region,
    timeoutInTest: 120000,
    requestHandler: input.requestHandler
  });
  return result;
};
// src/presign-url.ts
var import_client_s311 = __toESM(require_dist_cjs74(), 1);
var import_s3_request_presigner = __toESM(require_dist_cjs80(), 1);

// src/validate-presign-expiration.ts
var MAX_PRESIGN_EXPIRATION = 604800;
var MIN_PRESIGN_EXPIRATION = 1;
var validatePresignExpiration = (presignExpiration) => {
  if (typeof presignExpiration === "undefined" || presignExpiration === null) {
    return;
  }
  if (typeof presignExpiration !== "number") {
    throw new TypeError(`'expiresIn' should be a number, but is ${JSON.stringify(presignExpiration)}`);
  }
  if (Number.isNaN(presignExpiration)) {
    throw new TypeError(`'expiresIn' should not be NaN, but is NaN`);
  }
  if (!Number.isFinite(presignExpiration)) {
    throw new TypeError(`'expiresIn' should be finite but is ${presignExpiration}`);
  }
  if (presignExpiration % 1 !== 0) {
    throw new TypeError(`'expiresIn' should be an integer but is ${JSON.stringify(presignExpiration)}`);
  }
  if (presignExpiration > MAX_PRESIGN_EXPIRATION) {
    throw new TypeError(`The 'expiresIn' parameter must be less or equal than ${MAX_PRESIGN_EXPIRATION} (7 days) as enforced by AWS`);
  }
  if (presignExpiration < MIN_PRESIGN_EXPIRATION) {
    throw new TypeError(`The 'expiresIn' parameter must be greater or equal than ${MIN_PRESIGN_EXPIRATION}`);
  }
};

// src/presign-url.ts
var internalPresignUrl = async ({
  region,
  bucketName,
  objectKey,
  checkIfObjectExists,
  expiresInSeconds,
  forcePathStyle,
  requestHandler
}) => {
  validateBucketName({
    bucketName,
    bucketNamePrefix: REMOTION_BUCKET_PREFIX,
    options: { mustStartWithRemotion: false }
  });
  validatePresignExpiration(expiresInSeconds);
  const s3Client = getS3Client({
    region,
    customCredentials: null,
    forcePathStyle,
    requestHandler: requestHandler ?? null
  });
  if (checkIfObjectExists === true) {
    try {
      await s3Client.send(new import_client_s311.HeadObjectCommand({
        Bucket: bucketName,
        Key: objectKey
      }));
    } catch (err) {
      if (err.name === "NotFound") {
        return null;
      }
      if (err.message === "UnknownError" || err.$metadata.httpStatusCode === 403) {
        throw new Error(`Unable to access item "${objectKey}" from bucket "${bucketName}". You must have permission for both "s3:GetObject" and "s3:ListBucket" actions.`);
      }
      throw err;
    }
  }
  const objCommand = new import_client_s311.GetObjectCommand({
    Bucket: bucketName,
    Key: objectKey
  });
  const publicUrl = await import_s3_request_presigner.getSignedUrl(s3Client, objCommand, {
    expiresIn: expiresInSeconds
  });
  return publicUrl;
};
var presignUrl = ({
  region,
  bucketName,
  objectKey,
  checkIfObjectExists,
  expiresInSeconds,
  forcePathStyle,
  requestHandler
}) => {
  return internalPresignUrl({
    region,
    bucketName,
    objectKey,
    checkIfObjectExists: checkIfObjectExists ?? false,
    expiresInSeconds,
    forcePathStyle: forcePathStyle ?? false,
    requestHandler
  });
};

// src/index.ts
var LambdaClientInternals = {
  generateRandomHashWithLifeCycleRule,
  getLambdaClient,
  getS3Client,
  getS3RenderUrl,
  getIamClient,
  getStsClient,
  getCloudWatchLogsClient,
  getServiceQuotasClient,
  parseJsonOrThrowSource,
  getCloudwatchMethodUrl,
  getCloudwatchRendererUrl,
  MAX_EPHEMERAL_STORAGE_IN_MB,
  parseFunctionName,
  isFlakyError,
  convertToServeUrlImplementation,
  randomHashImplementation,
  parseBucketName,
  makeLambdaRenderMediaPayload,
  renderMediaOnLambdaOptionalToRequired,
  internalDeleteRender,
  internalGetSites,
  getLifeCycleRules,
  awsImplementation,
  runtimePreferenceOptions,
  validateAwsRegion,
  validateDiskSizeInMb,
  validateMemorySize,
  DEFAULT_CLOUDWATCH_RETENTION_PERIOD,
  DEFAULT_EPHEMERAL_STORAGE_IN_MB,
  LAMBDA_VERSION_STRING,
  pLimit,
  makeS3ServeUrl,
  validateServeUrl,
  getEnvVariable,
  internalRenderMediaOnLambdaRaw,
  internalRenderStillOnLambda,
  cleanItems,
  makeLambdaRenderStillPayload,
  getRenderProgressPayload,
  innerSpeculateFunctionName
};
export {
  validateWebhookSignature,
  speculateFunctionName,
  renderVideoOnLambda,
  renderStillOnLambda,
  renderMediaOnLambda,
  presignUrl,
  pagesRouterWebhook,
  getSites,
  getRenderProgress,
  getFunctions,
  getFunctionVersion,
  getCompositionsOnLambda,
  getAwsClient,
  expressWebhook,
  estimatePrice,
  deleteRender,
  deleteFunction,
  appRouterWebhook,
  LambdaClientInternals
};
