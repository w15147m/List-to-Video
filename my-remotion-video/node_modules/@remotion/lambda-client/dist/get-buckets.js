"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRemotionBuckets = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const constants_1 = require("./constants");
const get_s3_client_1 = require("./get-s3-client");
const validate_bucketname_1 = require("./validate-bucketname");
const getRemotionBuckets = async ({ region, forceBucketName, forcePathStyle, requestHandler, }) => {
    const { Buckets } = await (0, get_s3_client_1.getS3Client)({
        region,
        customCredentials: null,
        forcePathStyle,
        requestHandler,
    }).send(new client_s3_1.ListBucketsCommand({}));
    if (!Buckets) {
        return [];
    }
    const remotionBuckets = Buckets.filter((b) => {
        var _a;
        if (forceBucketName) {
            return b.Name === forceBucketName;
        }
        return (_a = b.Name) === null || _a === void 0 ? void 0 : _a.startsWith(constants_1.REMOTION_BUCKET_PREFIX);
    });
    const locations = await Promise.all(remotionBuckets.map(async (bucket) => {
        var _a, _b;
        const { region: parsedRegion } = (0, validate_bucketname_1.parseBucketName)(bucket.Name);
        if (parsedRegion) {
            return parsedRegion;
        }
        try {
            const result = await (0, get_s3_client_1.getS3Client)({
                region,
                customCredentials: null,
                forcePathStyle,
                requestHandler,
            }).send(new client_s3_1.GetBucketLocationCommand({
                Bucket: bucket.Name,
            }));
            // AWS docs: Buckets in Region us-east-1 have a LocationConstraint of null!!
            return (_a = result.LocationConstraint) !== null && _a !== void 0 ? _a : 'us-east-1';
        }
        catch (err) {
            // Sometimes the API returns a bucket even if it was deleted before
            if ((_b = err.stack) === null || _b === void 0 ? void 0 : _b.includes('NoSuchBucket')) {
                return null;
            }
            throw err;
        }
    }));
    const bucketsWithLocation = remotionBuckets
        .map((bucket, i) => {
        return {
            creationDate: bucket.CreationDate.getTime(),
            name: bucket.Name,
            region: locations[i],
        };
    })
        .filter((b) => b.region);
    return bucketsWithLocation.filter((bucket) => {
        return bucket.region === region;
    });
};
exports.getRemotionBuckets = getRemotionBuckets;
