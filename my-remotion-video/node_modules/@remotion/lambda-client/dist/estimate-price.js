"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimatePrice = void 0;
const constants_1 = require("./constants");
const price_per_1s_1 = require("./price-per-1s");
const validate_aws_region_1 = require("./validate-aws-region");
const validate_disk_size_in_mb_1 = require("./validate-disk-size-in-mb");
const validate_memory_size_1 = require("./validate-memory-size");
/*
 * @description Calculates the AWS costs incurred for AWS Lambda given the region, execution duration and memory size.
 * @see [Documentation](https://remotion.dev/docs/lambda/estimateprice)
 */
const estimatePrice = ({ region, memorySizeInMb, diskSizeInMb, lambdasInvoked, ...other }) => {
    (0, validate_memory_size_1.validateMemorySize)(memorySizeInMb);
    (0, validate_aws_region_1.validateAwsRegion)(region);
    (0, validate_disk_size_in_mb_1.validateDiskSizeInMb)(diskSizeInMb);
    const durationInMilliseconds = 'durationInMiliseconds' in other
        ? other.durationInMiliseconds
        : other.durationInMilliseconds;
    if (typeof durationInMilliseconds !== 'number') {
        throw new TypeError(`Parameter 'durationInMilliseconds' must be a number but got ${typeof durationInMilliseconds}`);
    }
    if (Number.isNaN(durationInMilliseconds)) {
        throw new TypeError(`Parameter 'durationInMilliseconds' must not be NaN but it is.`);
    }
    if (!Number.isFinite(durationInMilliseconds)) {
        throw new TypeError(`Parameter 'durationInMilliseconds' must be finite but it is ${durationInMilliseconds}`);
    }
    if (durationInMilliseconds < 0) {
        throw new TypeError(`Parameter 'durationInMilliseconds' must be over 0 but it is ${durationInMilliseconds}.`);
    }
    const durationPrice = price_per_1s_1.pricing[region]['Lambda Duration-ARM'].price;
    // In GB-second
    const timeCostDollars = Number(durationPrice) *
        ((memorySizeInMb * durationInMilliseconds) / 1000 / 1024);
    const diskSizePrice = price_per_1s_1.pricing[region]['Lambda Storage-Duration-ARM'].price;
    const chargedDiskSize = Math.max(0, diskSizeInMb - constants_1.MIN_EPHEMERAL_STORAGE_IN_MB);
    // In GB-second
    const diskSizeDollars = chargedDiskSize *
        Number(diskSizePrice) *
        (durationInMilliseconds / 1000 / 1024);
    const invocationCost = Number(price_per_1s_1.pricing[region]['Lambda Requests'].price) * lambdasInvoked;
    return Number((timeCostDollars + diskSizeDollars + invocationCost).toFixed(5));
};
exports.estimatePrice = estimatePrice;
