import type { StorageClass } from '@aws-sdk/client-s3';
import type { AudioCodec, BrowserSafeApis, ChromiumOptions, DownloadBehavior, FrameRange, OutNameInput, PixelFormat, Privacy, ProResProfile, ServerlessCodec, ToOptions, VideoImageFormat, WebhookOption } from '@remotion/serverless-client';
import { type AwsProvider } from './aws-provider';
import type { InnerRenderMediaOnLambdaInput } from './make-lambda-payload';
import type { AwsRegion } from './regions';
import type { RequestHandler } from './types';
export type RenderMediaOnLambdaInput = {
    region: AwsRegion;
    functionName: string;
    serveUrl: string;
    composition: string;
    inputProps?: Record<string, unknown>;
    codec: ServerlessCodec;
    imageFormat?: VideoImageFormat;
    crf?: number | undefined;
    envVariables?: Record<string, string>;
    pixelFormat?: PixelFormat;
    proResProfile?: ProResProfile;
    privacy?: Privacy;
    /**
     * @deprecated Renamed to `jpegQuality`
     */
    quality?: never;
    jpegQuality?: number;
    maxRetries?: number;
    framesPerLambda?: number;
    concurrency?: number;
    frameRange?: FrameRange;
    outName?: OutNameInput<AwsProvider>;
    chromiumOptions?: Omit<ChromiumOptions, 'enableMultiProcessOnLinux'>;
    scale?: number;
    everyNthFrame?: number;
    concurrencyPerLambda?: number;
    downloadBehavior?: DownloadBehavior | null;
    overwrite?: boolean;
    webhook?: WebhookOption | null;
    forceWidth?: number | null;
    forceHeight?: number | null;
    rendererFunctionName?: string | null;
    forceBucketName?: string;
    audioCodec?: AudioCodec | null;
    /**
     * @deprecated in favor of `logLevel`: true
     */
    dumpBrowserLogs?: boolean;
    forcePathStyle?: boolean;
    metadata?: Record<string, string> | null;
    storageClass?: StorageClass | null;
    requestHandler?: RequestHandler;
} & Partial<ToOptions<typeof BrowserSafeApis.optionsMap.renderMediaOnLambda>>;
export type RenderMediaOnLambdaOutput = {
    renderId: string;
    bucketName: string;
    cloudWatchLogs: string;
    cloudWatchMainLogs: string;
    lambdaInsightsLogs: string;
    folderInS3Console: string;
    progressJsonInConsole: string;
};
export declare const internalRenderMediaOnLambdaRaw: (input: InnerRenderMediaOnLambdaInput) => Promise<RenderMediaOnLambdaOutput>;
export declare const renderMediaOnLambdaOptionalToRequired: (options: RenderMediaOnLambdaInput) => InnerRenderMediaOnLambdaInput;
export declare const renderMediaOnLambda: (options: RenderMediaOnLambdaInput) => Promise<RenderMediaOnLambdaOutput>;
/**
 * @deprecated Renamed to renderMediaOnLambda()
 */
export declare const renderVideoOnLambda: (options: RenderMediaOnLambdaInput) => Promise<RenderMediaOnLambdaOutput>;
