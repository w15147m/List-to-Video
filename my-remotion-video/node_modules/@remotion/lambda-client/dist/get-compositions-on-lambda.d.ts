import type { BrowserSafeApis, ChromiumOptions, ToOptions, VideoConfig } from '@remotion/serverless-client';
import type { AwsRegion } from './regions';
import type { RequestHandler } from './types';
export type GetCompositionsOnLambdaInput = {
    chromiumOptions?: ChromiumOptions;
    region: AwsRegion;
    inputProps: Record<string, unknown>;
    functionName: string;
    serveUrl: string;
    envVariables?: Record<string, string>;
    forceBucketName?: string;
    /**
     * @deprecated in favor of `logLevel`: true
     */
    dumpBrowserLogs?: boolean;
    forcePathStyle?: boolean;
    requestHandler?: RequestHandler | null;
} & Partial<ToOptions<typeof BrowserSafeApis.optionsMap.getCompositionsOnLambda>>;
export type GetCompositionsOnLambdaOutput = VideoConfig[];
export declare const getCompositionsOnLambda: ({ chromiumOptions, serveUrl, region, inputProps, functionName, envVariables, logLevel, timeoutInMilliseconds, forceBucketName: bucketName, dumpBrowserLogs, offthreadVideoCacheSizeInBytes, forcePathStyle, requestHandler, mediaCacheSizeInBytes, }: GetCompositionsOnLambdaInput) => Promise<GetCompositionsOnLambdaOutput>;
