"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompositionsOnLambda = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const aws_provider_1 = require("./aws-provider");
/*
 * @description Gets the compositions inside a Lambda function.
 * @see [Documentation](https://remotion.dev/docs/lambda/getcompositionsonlambda)
 */
const getCompositionsOnLambda = async ({ chromiumOptions, serveUrl, region, inputProps, functionName, envVariables, logLevel, timeoutInMilliseconds, forceBucketName: bucketName, dumpBrowserLogs, offthreadVideoCacheSizeInBytes, forcePathStyle, requestHandler, mediaCacheSizeInBytes, }) => {
    var _a;
    const stringifiedInputProps = (0, serverless_client_1.serializeOrThrow)(inputProps, 'input-props');
    const serializedInputProps = await (0, serverless_client_1.compressInputProps)({
        stringifiedInputProps,
        region,
        userSpecifiedBucketName: bucketName !== null && bucketName !== void 0 ? bucketName : null,
        propsType: 'input-props',
        needsToUpload: (0, serverless_client_1.getNeedsToUpload)({
            type: 'video-or-audio',
            sizes: [
                stringifiedInputProps.length,
                JSON.stringify(envVariables).length,
            ],
            providerSpecifics: aws_provider_1.awsImplementation,
        }),
        providerSpecifics: aws_provider_1.awsImplementation,
        forcePathStyle: forcePathStyle !== null && forcePathStyle !== void 0 ? forcePathStyle : false,
        skipPutAcl: false,
        requestHandler,
    });
    try {
        const res = await aws_provider_1.awsImplementation.callFunctionSync({
            functionName,
            type: serverless_client_1.ServerlessRoutines.compositions,
            payload: {
                type: serverless_client_1.ServerlessRoutines.compositions,
                chromiumOptions: chromiumOptions !== null && chromiumOptions !== void 0 ? chromiumOptions : {},
                serveUrl,
                envVariables,
                inputProps: serializedInputProps,
                logLevel: dumpBrowserLogs ? 'verbose' : (logLevel !== null && logLevel !== void 0 ? logLevel : 'info'),
                timeoutInMilliseconds: timeoutInMilliseconds !== null && timeoutInMilliseconds !== void 0 ? timeoutInMilliseconds : 30000,
                version: serverless_client_1.VERSION,
                bucketName: bucketName !== null && bucketName !== void 0 ? bucketName : null,
                offthreadVideoCacheSizeInBytes: offthreadVideoCacheSizeInBytes !== null && offthreadVideoCacheSizeInBytes !== void 0 ? offthreadVideoCacheSizeInBytes : null,
                forcePathStyle: forcePathStyle !== null && forcePathStyle !== void 0 ? forcePathStyle : false,
                mediaCacheSizeInBytes: mediaCacheSizeInBytes !== null && mediaCacheSizeInBytes !== void 0 ? mediaCacheSizeInBytes : null,
            },
            region,
            timeoutInTest: 120000,
            requestHandler,
        });
        return res.compositions;
    }
    catch (err) {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.includes('UnrecognizedClientException')) {
            throw new Error('UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception');
        }
        throw err;
    }
};
exports.getCompositionsOnLambda = getCompositionsOnLambda;
