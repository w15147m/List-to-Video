"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.awsImplementation = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const node_events_1 = require("node:events");
const bucket_exists_1 = require("./bucket-exists");
const call_lambda_async_1 = require("./call-lambda-async");
const call_lambda_streaming_1 = require("./call-lambda-streaming");
const call_lambda_sync_1 = require("./call-lambda-sync");
const check_credentials_1 = require("./check-credentials");
const constants_1 = require("./constants");
const convert_to_serve_url_1 = require("./convert-to-serve-url");
const create_bucket_1 = require("./create-bucket");
const delete_file_1 = require("./delete-file");
const delete_function_1 = require("./delete-function");
const estimate_price_1 = require("./estimate-price");
const get_account_id_1 = require("./get-account-id");
const get_aws_urls_1 = require("./get-aws-urls");
const get_buckets_1 = require("./get-buckets");
const get_functions_1 = require("./get-functions");
const get_output_url_from_metadata_1 = require("./get-output-url-from-metadata");
const head_file_1 = require("./head-file");
const is_flaky_error_1 = require("./is-flaky-error");
const lifecycle_rules_1 = require("./lifecycle-rules");
const list_objects_1 = require("./list-objects");
const parse_function_name_1 = require("./parse-function-name");
const random_hash_1 = require("./random-hash");
const read_file_1 = require("./read-file");
const write_file_1 = require("./write-file");
if (/^AWS_Lambda_nodejs(?:18|20)[.]x$/.test((_a = process.env.AWS_EXECUTION_ENV) !== null && _a !== void 0 ? _a : '') === true) {
    process.env.FONTCONFIG_PATH = '/opt';
    process.env.FONTCONFIG_FILE = '/opt/fonts.conf';
    process.env.DISABLE_FROM_SURFACE = '1';
    process.env.NO_COLOR = '1';
    // @ts-expect-error
    globalThis._dumpUnreleasedBuffers = new node_events_1.EventEmitter();
    // @ts-expect-error
    globalThis._dumpUnreleasedBuffers.setMaxListeners(201);
}
const validateDeleteAfter = (lifeCycleValue) => {
    if (lifeCycleValue === null) {
        return;
    }
    if (lifeCycleValue === undefined) {
        return;
    }
    if (typeof lifeCycleValue !== 'string') {
        throw new TypeError(`Expected life cycle value to be a string, got ${JSON.stringify(lifeCycleValue)}`);
    }
    if (!(lifeCycleValue in serverless_client_1.expiryDays)) {
        throw new TypeError(`Expected deleteAfter value to be one of ${Object.keys(serverless_client_1.expiryDays).join(', ')}, got ${lifeCycleValue}`);
    }
};
exports.awsImplementation = {
    getChromiumPath() {
        return '/opt/bin/chromium';
    },
    getBuckets: get_buckets_1.getRemotionBuckets,
    createBucket: create_bucket_1.createBucket,
    applyLifeCycle: lifecycle_rules_1.applyLifeCyleOperation,
    listObjects: list_objects_1.lambdaLsImplementation,
    deleteFile: delete_file_1.lambdaDeleteFileImplementation,
    bucketExists: bucket_exists_1.bucketExistsInRegionImplementation,
    randomHash: random_hash_1.randomHashImplementation,
    readFile: read_file_1.lambdaReadFileImplementation,
    writeFile: write_file_1.lambdaWriteFileImplementation,
    headFile: head_file_1.lambdaHeadFileImplementation,
    convertToServeUrl: convert_to_serve_url_1.convertToServeUrlImplementation,
    printLoggingHelper: true,
    validateDeleteAfter,
    callFunctionAsync: call_lambda_async_1.callFunctionAsyncImplementation,
    callFunctionStreaming: call_lambda_streaming_1.callFunctionWithStreamingImplementation,
    callFunctionSync: call_lambda_sync_1.callFunctionSyncImplementation,
    getEphemeralStorageForPriceCalculation() {
        // We cannot determine the ephemeral storage size, so we
        // overestimate the price, but will only have a miniscule effect (~0.2%)
        return constants_1.MAX_EPHEMERAL_STORAGE_IN_MB;
    },
    estimatePrice: estimate_price_1.estimatePrice,
    getLoggingUrlForMethod: get_aws_urls_1.getCloudwatchMethodUrl,
    getLoggingUrlForRendererFunction: get_aws_urls_1.getCloudwatchRendererUrl,
    isFlakyError: is_flaky_error_1.isFlakyError,
    getOutputUrl: get_output_url_from_metadata_1.getOutputUrlFromMetadata,
    serverStorageProductName: () => 'S3',
    getMaxStillInlinePayloadSize: () => 5000000,
    getMaxNonInlinePayloadSizePerFunction: () => 200000,
    getAccountId: get_account_id_1.getAccountIdImplementation,
    deleteFunction: delete_function_1.deleteFunction,
    getFunctions: get_functions_1.getFunctions,
    parseFunctionName: parse_function_name_1.parseFunctionName,
    checkCredentials: check_credentials_1.checkCredentials,
    getBucketPrefix: () => constants_1.REMOTION_BUCKET_PREFIX,
};
