import type { AudioCodec, BrowserSafeApis, ChromiumOptions, ColorSpace, DeleteAfter, DownloadBehavior, FrameRange, LogLevel, OutNameInput, PixelFormat, Privacy, ProResProfile, ServerlessCodec, ServerlessPayloads, ServerlessStartPayload, ServerlessStatusPayload, ToOptions, VideoImageFormat, WebhookOption, X264Preset } from '@remotion/serverless-client';
import { ServerlessRoutines } from '@remotion/serverless-client';
import type { AwsProvider } from './aws-provider';
import type { StorageClass } from '@aws-sdk/client-s3';
import type { GetRenderProgressInput } from './get-render-progress';
import type { AwsRegion } from './regions';
import type { RenderStillOnLambdaNonNullInput } from './render-still-on-lambda';
import type { RequestHandler } from './types';
export type InnerRenderMediaOnLambdaInput = {
    region: AwsRegion;
    functionName: string;
    serveUrl: string;
    composition: string;
    inputProps: Record<string, unknown>;
    codec: ServerlessCodec;
    imageFormat: VideoImageFormat;
    crf: number | undefined;
    envVariables: Record<string, string>;
    pixelFormat: PixelFormat | undefined;
    proResProfile: ProResProfile | undefined;
    x264Preset: X264Preset | null;
    privacy: Privacy;
    jpegQuality: number;
    maxRetries: number;
    framesPerLambda: number | null;
    concurrency: number | null;
    logLevel: LogLevel;
    frameRange: FrameRange | null;
    outName: OutNameInput<AwsProvider> | null;
    timeoutInMilliseconds: number;
    chromiumOptions: ChromiumOptions;
    scale: number;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    concurrencyPerLambda: number;
    downloadBehavior: DownloadBehavior;
    muted: boolean;
    overwrite: boolean;
    audioBitrate: string | null;
    videoBitrate: string | null;
    encodingMaxRate: string | null;
    encodingBufferSize: string | null;
    webhook: WebhookOption | null;
    forceWidth: number | null;
    forceHeight: number | null;
    rendererFunctionName: string | null;
    forceBucketName: string | null;
    audioCodec: AudioCodec | null;
    colorSpace: ColorSpace | null;
    deleteAfter: DeleteAfter | null;
    indent: boolean;
    forcePathStyle: boolean;
    metadata: Record<string, string> | null;
    storageClass: StorageClass | null;
    requestHandler: RequestHandler | null;
} & ToOptions<typeof BrowserSafeApis.optionsMap.renderMediaOnLambda>;
export declare const makeLambdaRenderMediaPayload: ({ rendererFunctionName, frameRange, framesPerLambda, concurrency, forceBucketName: bucketName, codec, composition, serveUrl, imageFormat, inputProps, region, crf, envVariables, pixelFormat, proResProfile, x264Preset, maxRetries, privacy, logLevel, outName, timeoutInMilliseconds, chromiumOptions, scale, everyNthFrame, numberOfGifLoops, audioBitrate, concurrencyPerLambda, audioCodec, forceHeight, forceWidth, webhook, videoBitrate, encodingMaxRate, encodingBufferSize, downloadBehavior, muted, overwrite, jpegQuality, offthreadVideoCacheSizeInBytes, mediaCacheSizeInBytes, deleteAfter, colorSpace, preferLossless, forcePathStyle, metadata, apiKey, offthreadVideoThreads, storageClass, requestHandler, }: InnerRenderMediaOnLambdaInput) => Promise<ServerlessStartPayload<AwsProvider>>;
export declare const getRenderProgressPayload: ({ bucketName, renderId, s3OutputProvider, logLevel, forcePathStyle, }: GetRenderProgressInput) => ServerlessStatusPayload<AwsProvider>;
export declare const makeLambdaRenderStillPayload: ({ serveUrl, inputProps, imageFormat, envVariables, jpegQuality, region, maxRetries, composition, privacy, frame, logLevel, outName, timeoutInMilliseconds, chromiumOptions, scale, downloadBehavior, forceHeight, forceWidth, forceBucketName, offthreadVideoCacheSizeInBytes, deleteAfter, forcePathStyle, apiKey, storageClass, requestHandler, offthreadVideoThreads, mediaCacheSizeInBytes, }: RenderStillOnLambdaNonNullInput) => Promise<ServerlessPayloads<AwsProvider>[ServerlessRoutines.still]>;
