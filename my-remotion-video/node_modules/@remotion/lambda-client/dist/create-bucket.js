"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBucket = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const get_s3_client_1 = require("./get-s3-client");
const createBucket = async ({ region, bucketName, forcePathStyle, requestHandler }) => {
    await (0, get_s3_client_1.getS3Client)({
        region,
        customCredentials: null,
        forcePathStyle,
        requestHandler,
    }).send(new client_s3_1.CreateBucketCommand({
        Bucket: bucketName,
    }));
    try {
        await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials: null,
            forcePathStyle,
            requestHandler,
        }).send(new client_s3_1.DeleteBucketOwnershipControlsCommand({
            Bucket: bucketName,
        }));
    }
    catch (err) {
        if (err.message.includes('Access Denied')) {
            throw new Error('Since April 2023, more AWS permissions are required to create an S3 bucket. You need to update your user policy to continue. See https://remotion.dev/docs/lambda/s3-public-access for instructions on how to resolve this issue.');
        }
        throw err;
    }
    try {
        await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials: null,
            forcePathStyle,
            requestHandler,
        }).send(new client_s3_1.DeletePublicAccessBlockCommand({
            Bucket: bucketName,
        }));
    }
    catch (err) {
        if (err.message.includes('Access Denied')) {
            throw new Error('PARTIAL SUCCESS: The s3:PutBucketOwnershipControls was found, but the s3:PutBucketPublicAccessBlock permission is not given. Since April 2023, more AWS permissions are required to create an S3 bucket. You need to update your user policy to continue. You need to update your user policy to continue. See https://remotion.dev/docs/lambda/s3-public-access for instructions on how to resolve this issue.');
        }
        throw err;
    }
    try {
        await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials: null,
            forcePathStyle,
            requestHandler,
        }).send(new client_s3_1.PutBucketAclCommand({
            Bucket: bucketName,
            ACL: 'public-read',
        }));
    }
    catch (err) {
        if (err.message.includes('The bucket does not allow ACLs')) {
            throw new Error(`Could not add an ACL to the bucket. This might have happened because the bucket was already successfully created before but then failed to configure correctly. We recommend to delete the bucket (${bucketName}) if it is empty and start over to fix the problem.`);
        }
        throw err;
    }
};
exports.createBucket = createBucket;
