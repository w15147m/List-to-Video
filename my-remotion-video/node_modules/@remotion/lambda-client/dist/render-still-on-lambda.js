"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderStillOnLambda = exports.internalRenderStillOnLambda = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const serverless_client_2 = require("@remotion/serverless-client");
const aws_provider_1 = require("./aws-provider");
const constants_1 = require("./constants");
const get_aws_urls_1 = require("./get-aws-urls");
const make_lambda_payload_1 = require("./make-lambda-payload");
const innerRenderStillOnLambda = async (input) => {
    var _a;
    const { functionName, region, onInit } = input;
    try {
        const payload = await (0, make_lambda_payload_1.makeLambdaRenderStillPayload)(input);
        const res = await new Promise((resolve, reject) => {
            aws_provider_1.awsImplementation
                .callFunctionStreaming({
                functionName,
                type: serverless_client_1.ServerlessRoutines.still,
                payload,
                region,
                receivedStreamingPayload: ({ message }) => {
                    if (message.type === 'render-id-determined') {
                        onInit === null || onInit === void 0 ? void 0 : onInit({
                            renderId: message.payload.renderId,
                            cloudWatchLogs: (0, get_aws_urls_1.getCloudwatchMethodUrl)({
                                functionName,
                                method: serverless_client_1.ServerlessRoutines.still,
                                region,
                                rendererFunctionName: null,
                                renderId: message.payload.renderId,
                            }),
                            lambdaInsightsUrl: (0, get_aws_urls_1.getLambdaInsightsUrl)({
                                functionName,
                                region,
                            }),
                        });
                    }
                    if (message.type === 'error-occurred') {
                        reject(new Error(message.payload.error));
                    }
                    if (message.type === 'still-rendered') {
                        resolve(message.payload);
                    }
                },
                timeoutInTest: 120000,
                retriesRemaining: input.maxRetries,
                requestHandler: input.requestHandler,
            })
                .then(() => {
                reject(new Error('Expected response to be streamed'));
            })
                .catch((err) => {
                reject(err);
            });
        });
        return {
            estimatedPrice: res.estimatedPrice,
            url: res.output,
            outKey: res.outKey,
            sizeInBytes: res.size,
            bucketName: res.bucketName,
            renderId: res.renderId,
            cloudWatchLogs: (0, get_aws_urls_1.getCloudwatchMethodUrl)({
                functionName,
                method: serverless_client_1.ServerlessRoutines.still,
                region,
                renderId: res.renderId,
                rendererFunctionName: null,
            }),
            artifacts: res.receivedArtifacts,
        };
    }
    catch (err) {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.includes('UnrecognizedClientException')) {
            throw new Error('UnrecognizedClientException: The AWS credentials provided were probably mixed up. Learn how to fix this issue here: https://remotion.dev/docs/lambda/troubleshooting/unrecognizedclientexception');
        }
        throw err;
    }
};
exports.internalRenderStillOnLambda = (0, serverless_client_2.wrapWithErrorHandling)(innerRenderStillOnLambda);
/*
 * @description Renders a still image inside a lambda function and writes it to the specified output location.
 * @see [Documentation](https://remotion.dev/docs/lambda/renderstillonlambda)
 */
const renderStillOnLambda = (input) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
    return (0, exports.internalRenderStillOnLambda)({
        chromiumOptions: (_a = input.chromiumOptions) !== null && _a !== void 0 ? _a : {},
        composition: input.composition,
        deleteAfter: (_b = input.deleteAfter) !== null && _b !== void 0 ? _b : null,
        downloadBehavior: (_c = input.downloadBehavior) !== null && _c !== void 0 ? _c : { type: 'play-in-browser' },
        envVariables: (_d = input.envVariables) !== null && _d !== void 0 ? _d : {},
        forceBucketName: (_e = input.forceBucketName) !== null && _e !== void 0 ? _e : null,
        forceHeight: (_f = input.forceHeight) !== null && _f !== void 0 ? _f : null,
        forceWidth: (_g = input.forceWidth) !== null && _g !== void 0 ? _g : null,
        frame: (_h = input.frame) !== null && _h !== void 0 ? _h : 0,
        functionName: input.functionName,
        imageFormat: input.imageFormat,
        indent: false,
        inputProps: input.inputProps,
        maxRetries: (_j = input.maxRetries) !== null && _j !== void 0 ? _j : constants_1.DEFAULT_MAX_RETRIES,
        onInit: (_k = input.onInit) !== null && _k !== void 0 ? _k : (() => undefined),
        outName: (_l = input.outName) !== null && _l !== void 0 ? _l : null,
        privacy: input.privacy,
        region: input.region,
        serveUrl: input.serveUrl,
        jpegQuality: (_o = (_m = input.jpegQuality) !== null && _m !== void 0 ? _m : input.quality) !== null && _o !== void 0 ? _o : 80,
        logLevel: input.dumpBrowserLogs ? 'verbose' : ((_p = input.logLevel) !== null && _p !== void 0 ? _p : 'info'),
        offthreadVideoCacheSizeInBytes: (_q = input.offthreadVideoCacheSizeInBytes) !== null && _q !== void 0 ? _q : null,
        scale: (_r = input.scale) !== null && _r !== void 0 ? _r : 1,
        timeoutInMilliseconds: (_s = input.timeoutInMilliseconds) !== null && _s !== void 0 ? _s : 30000,
        forcePathStyle: (_t = input.forcePathStyle) !== null && _t !== void 0 ? _t : false,
        apiKey: (_u = input.apiKey) !== null && _u !== void 0 ? _u : null,
        offthreadVideoThreads: (_v = input.offthreadVideoThreads) !== null && _v !== void 0 ? _v : null,
        storageClass: (_w = input.storageClass) !== null && _w !== void 0 ? _w : null,
        requestHandler: (_x = input.requestHandler) !== null && _x !== void 0 ? _x : null,
        mediaCacheSizeInBytes: (_y = input.mediaCacheSizeInBytes) !== null && _y !== void 0 ? _y : null,
    });
};
exports.renderStillOnLambda = renderStillOnLambda;
