"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lambdaLsImplementation = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const get_s3_client_1 = require("./get-s3-client");
const lambdaLsImplementation = async ({ bucketName, prefix, region, expectedBucketOwner, continuationToken, forcePathStyle, requestHandler, }) => {
    var _a, _b, _c, _d;
    try {
        const list = await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials: null,
            forcePathStyle,
            requestHandler,
        }).send(new client_s3_1.ListObjectsV2Command({
            Bucket: bucketName,
            Prefix: prefix,
            ExpectedBucketOwner: expectedBucketOwner !== null && expectedBucketOwner !== void 0 ? expectedBucketOwner : undefined,
            ContinuationToken: continuationToken,
        }));
        if (list.NextContinuationToken) {
            return [
                ...((_a = list.Contents) !== null && _a !== void 0 ? _a : []).map((o) => {
                    return {
                        Key: o.Key,
                        LastModified: o.LastModified,
                        ETag: o.ETag,
                        Size: o.Size,
                    };
                }),
                ...(await (0, exports.lambdaLsImplementation)({
                    bucketName,
                    prefix,
                    expectedBucketOwner,
                    region,
                    continuationToken: list.NextContinuationToken,
                    forcePathStyle,
                    requestHandler,
                })),
            ];
        }
        return ((_c = (_b = (list.Contents || [])) === null || _b === void 0 ? void 0 : _b.map((o) => {
            return {
                Key: o.Key,
                LastModified: o.LastModified,
                ETag: o.ETag,
                Size: o.Size,
            };
        })) !== null && _c !== void 0 ? _c : []);
    }
    catch (err) {
        if (!expectedBucketOwner) {
            throw err;
        }
        // Prevent from accessing a foreign bucket, retry without ExpectedBucketOwner and see if it works. If it works then it's an owner mismatch.
        if ((_d = err.stack) === null || _d === void 0 ? void 0 : _d.includes('AccessDenied')) {
            await (0, get_s3_client_1.getS3Client)({
                region,
                customCredentials: null,
                forcePathStyle,
                requestHandler,
            }).send(new client_s3_1.ListObjectsV2Command({
                Bucket: bucketName,
                Prefix: prefix,
            }));
            throw new Error(`Bucket owner mismatch: Expected the bucket ${bucketName} to be owned by you (AWS Account ID: ${expectedBucketOwner}) but it's not the case. Did you accidentially specify the wrong bucket?`);
        }
        throw err;
    }
};
exports.lambdaLsImplementation = lambdaLsImplementation;
