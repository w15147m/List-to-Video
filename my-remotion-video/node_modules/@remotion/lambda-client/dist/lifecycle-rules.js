"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyLifeCyleOperation = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const apply_lifecycle_1 = require("./apply-lifecycle");
const get_s3_client_1 = require("./get-s3-client");
const lifecycle_1 = require("./lifecycle");
const createLCRules = async ({ bucketName, region, customCredentials, forcePathStyle, requestHandler, }) => {
    var _a;
    const lcRules = (0, lifecycle_1.getLifeCycleRules)();
    // create the lifecyle rules
    const createCommandInput = (0, apply_lifecycle_1.createLifeCycleInput)({
        bucketName,
        lcRules,
    });
    const createCommand = new client_s3_1.PutBucketLifecycleConfigurationCommand(createCommandInput);
    try {
        await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials,
            forcePathStyle,
            requestHandler,
        }).send(createCommand);
    }
    catch (err) {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.includes('AccessDenied')) {
            throw new Error(`You don't have the required permissions to create lifecycle rules on the bucket "${bucketName}", but the "enableFolderExpiry" was set to true. Ensure that your user has the "s3:PutLifecycleConfiguration" permission.`);
        }
    }
};
const deleteLCRules = async ({ bucketName, region, customCredentials, forcePathStyle, requestHandler, }) => {
    var _a;
    const deleteCommandInput = (0, apply_lifecycle_1.deleteLifeCycleInput)({
        bucketName,
    });
    try {
        await (0, get_s3_client_1.getS3Client)({
            region,
            customCredentials,
            forcePathStyle,
            requestHandler,
        }).send(new client_s3_1.DeleteBucketLifecycleCommand(deleteCommandInput));
    }
    catch (err) {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.includes('AccessDenied')) {
            throw new Error(`You don't have the required permissions to delete lifecycle rules on the bucket "${bucketName}", but the "enableFolderExpiry" option was set to "false". Ensure that your user has the "s3:PutLifecycleConfiguration" permission. Set "enableFolderExpiry" to "null" to not overwrite any existing lifecycle rules.`);
        }
    }
};
const applyLifeCyleOperation = async ({ enableFolderExpiry, bucketName, region, customCredentials, forcePathStyle, requestHandler, }) => {
    if (enableFolderExpiry === null) {
        return;
    }
    if (enableFolderExpiry === true) {
        await createLCRules({
            bucketName,
            region,
            customCredentials,
            forcePathStyle,
            requestHandler,
        });
    }
    else {
        await deleteLCRules({
            bucketName,
            region,
            customCredentials,
            forcePathStyle,
            requestHandler,
        });
    }
};
exports.applyLifeCyleOperation = applyLifeCyleOperation;
