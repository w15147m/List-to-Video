"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceClient = void 0;
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const client_iam_1 = require("@aws-sdk/client-iam");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_service_quotas_1 = require("@aws-sdk/client-service-quotas");
const client_sts_1 = require("@aws-sdk/client-sts");
const serverless_client_1 = require("@remotion/serverless-client");
const check_credentials_1 = require("./check-credentials");
const get_credentials_1 = require("./get-credentials");
const get_env_variable_1 = require("./get-env-variable");
const getCredentialsHash = ({ customCredentials, region, service, forcePathStyle, requestHandler, }) => {
    const hashComponents = {};
    if ((0, get_env_variable_1.getEnvVariable)('REMOTION_SKIP_AWS_CREDENTIALS_CHECK')) {
        hashComponents.credentials = {
            credentialsSkipped: true,
        };
    }
    else if ((0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_PROFILE')) {
        hashComponents.credentials = {
            awsProfile: (0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_PROFILE'),
        };
    }
    else if ((0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_ACCESS_KEY_ID') &&
        (0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_SECRET_ACCESS_KEY')) {
        hashComponents.credentials = {
            accessKeyId: (0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_ACCESS_KEY_ID'),
            secretAccessKey: (0, get_env_variable_1.getEnvVariable)('REMOTION_AWS_SECRET_ACCESS_KEY'),
        };
    }
    else if ((0, get_env_variable_1.getEnvVariable)('AWS_PROFILE')) {
        hashComponents.credentials = {
            awsProfile: (0, get_env_variable_1.getEnvVariable)('AWS_PROFILE'),
        };
    }
    else if ((0, get_env_variable_1.getEnvVariable)('AWS_ACCESS_KEY_ID') &&
        (0, get_env_variable_1.getEnvVariable)('AWS_SECRET_ACCESS_KEY')) {
        hashComponents.credentials = {
            accessKeyId: (0, get_env_variable_1.getEnvVariable)('AWS_ACCESS_KEY_ID'),
            secretAccessKey: (0, get_env_variable_1.getEnvVariable)('AWS_SECRET_ACCESS_KEY'),
        };
    }
    hashComponents.customCredentials = customCredentials;
    hashComponents.region = region;
    hashComponents.service = service;
    hashComponents.forcePathStyle = forcePathStyle;
    hashComponents.requestHandler = requestHandler;
    return (0, serverless_client_1.random)(JSON.stringify(hashComponents)).toString().replace('0.', '');
};
const _clients = {};
const getServiceClient = ({ region, service, customCredentials, forcePathStyle, requestHandler, }) => {
    var _a;
    const Client = (() => {
        if (service === 'cloudwatch') {
            return client_cloudwatch_logs_1.CloudWatchLogsClient;
        }
        if (service === 'lambda') {
            return client_lambda_1.LambdaClient;
        }
        if (service === 's3') {
            return client_s3_1.S3Client;
        }
        if (service === 'iam') {
            return client_iam_1.IAMClient;
        }
        if (service === 'servicequotas') {
            return client_service_quotas_1.ServiceQuotasClient;
        }
        if (service === 'sts') {
            return client_sts_1.STSClient;
        }
        throw new TypeError('unknown client ' + service);
    })();
    const key = getCredentialsHash({
        region,
        customCredentials,
        service,
        forcePathStyle,
        requestHandler,
    });
    if (!_clients[key]) {
        (0, check_credentials_1.checkCredentials)();
        const lambdaOptions = service === 'lambda'
            ? {
                httpsAgent: {
                    maxSockets: serverless_client_1.MAX_FUNCTIONS_PER_RENDER * 2,
                },
            }
            : undefined;
        // Merge custom requestHandler with lambda options
        const finalRequestHandler = requestHandler
            ? lambdaOptions
                ? { ...requestHandler, ...lambdaOptions }
                : requestHandler
            : lambdaOptions;
        const client = customCredentials
            ? new Client({
                region: (_a = customCredentials.region) !== null && _a !== void 0 ? _a : 'us-east-1',
                credentials: customCredentials.accessKeyId && customCredentials.secretAccessKey
                    ? {
                        accessKeyId: customCredentials.accessKeyId,
                        secretAccessKey: customCredentials.secretAccessKey,
                    }
                    : undefined,
                endpoint: customCredentials.endpoint,
                requestHandler: finalRequestHandler,
                forcePathStyle: customCredentials.forcePathStyle,
                maxAttempts: service === 'lambda' ? 1 : undefined,
            })
            : (0, get_env_variable_1.getEnvVariable)('REMOTION_SKIP_AWS_CREDENTIALS_CHECK')
                ? new Client({
                    region,
                    requestHandler: finalRequestHandler,
                    maxAttempts: service === 'lambda' ? 1 : undefined,
                })
                : new Client({
                    region,
                    credentials: (0, get_credentials_1.getCredentials)(),
                    requestHandler: finalRequestHandler,
                    maxAttempts: service === 'lambda' ? 1 : undefined,
                });
        if ((0, get_env_variable_1.getEnvVariable)('REMOTION_DISABLE_AWS_CLIENT_CACHE')) {
            return client;
        }
        _clients[key] = client;
    }
    return _clients[key];
};
exports.getServiceClient = getServiceClient;
