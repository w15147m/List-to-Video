"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderStillOnWeb = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const client_1 = __importDefault(require("react-dom/client"));
const remotion_1 = require("remotion");
const compose_1 = require("./compose");
const find_canvas_elements_1 = require("./find-canvas-elements");
const wait_for_ready_1 = require("./wait-for-ready");
const renderStillOnWeb = async ({ Component, width, height, fps, durationInFrames, frame, }) => {
    const div = document.createElement('div');
    // Match same behavior as renderEntry.tsx
    div.style.display = 'flex';
    div.style.backgroundColor = 'transparent';
    div.style.position = 'absolute';
    div.style.width = `${width}px`;
    div.style.height = `${height}px`;
    document.body.appendChild(div);
    // TODO: Hardcoded
    const delayRenderTimeoutInMilliseconds = 10000;
    if (!client_1.default.createRoot) {
        throw new Error('@remotion/web-renderer requires React 18 or higher');
    }
    // TODO: Env variables
    // TODO: Input Props
    // TODO: Default props
    // TODO: calculateMetadata()
    // TODO: getRemotionEnvironment()
    // TODO: delayRender()
    // TODO: Video config
    // TODO: window.remotion_isPlayer
    // TODO: Log Level
    const compositionManagerContext = {
        currentCompositionMetadata: {
            durationInFrames,
            fps,
            height,
            width,
            props: {},
            defaultCodec: null,
            defaultOutName: null,
            defaultVideoImageFormat: null,
            defaultPixelFormat: null,
        },
        folders: [],
        compositions: [
            {
                // TODO: Make dynamic
                id: 'markup',
                component: Component,
                nonce: 0,
                defaultProps: undefined,
                folderName: null,
                parentFolderName: null,
                schema: null,
                calculateMetadata: null,
                durationInFrames,
                fps,
                height,
                width,
            },
        ],
        canvasContent: {
            type: 'composition',
            compositionId: 'markup',
        },
    };
    const root = client_1.default.createRoot(div);
    root.render((0, jsx_runtime_1.jsx)(remotion_1.Internals.RemotionEnvironmentContext, { value: {
            isStudio: false,
            isRendering: true,
            isPlayer: false,
            isReadOnlyStudio: false,
            isClientSideRendering: true,
        }, children: (0, jsx_runtime_1.jsx)(remotion_1.Internals.RemotionRoot
        // TODO: Hardcoded
        , { 
            // TODO: Hardcoded
            audioEnabled: true, 
            // TODO: Hardcoded
            videoEnabled: true, 
            // TODO: Hardcoded
            logLevel: "info", 
            // TODO: Hardcoded
            numberOfAudioTags: 0, 
            // TODO: Hardcoded
            onlyRenderComposition: null, 
            // TODO: Hardcoded
            currentCompositionMetadata: {
                // TODO: Empty
                props: {},
                // TODO: Hardcoded
                durationInFrames,
                // TODO: Hardcoded
                fps,
                // TODO: Hardcoded
                height,
                // TODO: Hardcoded
                width,
                // TODO: Hardcoded
                defaultCodec: null,
                // TODO: Hardcoded
                defaultOutName: null,
                // TODO: Hardcoded
                defaultVideoImageFormat: null,
                // TODO: Hardcoded
                defaultPixelFormat: null,
            }, 
            // TODO: Hardcoded
            audioLatencyHint: "interactive", children: (0, jsx_runtime_1.jsx)(remotion_1.Internals.CanUseRemotionHooks, { value: true, children: (0, jsx_runtime_1.jsx)(remotion_1.Internals.CompositionManager.Provider
                // TODO: This context is double-wrapped
                , { 
                    // TODO: This context is double-wrapped
                    value: compositionManagerContext, children: (0, jsx_runtime_1.jsx)(Component, {}) }) }) }) }));
    // TODO: Doesn't work at all ðŸ™ˆ
    window.remotion_setFrame(frame, 'markup', frame);
    await (0, wait_for_ready_1.waitForReady)(delayRenderTimeoutInMilliseconds);
    const canvasElements = (0, find_canvas_elements_1.findCanvasElements)(div);
    const composed = (0, compose_1.compose)({
        composables: canvasElements,
        width,
        height,
    });
    const imageData = await composed.convertToBlob({
        type: 'image/png',
    });
    // download image
    const blob = new Blob([imageData], { type: 'image/png' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'composed.png';
    a.click();
    URL.revokeObjectURL(url);
    root.unmount();
    div.remove();
};
exports.renderStillOnWeb = renderStillOnWeb;
