"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFonts = exports.withResolvers = void 0;
const remotion_1 = require("remotion");
const no_react_1 = require("remotion/no-react");
const loadedFonts = {};
const withResolvers = function () {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return { promise, resolve: resolve, reject: reject };
};
exports.withResolvers = withResolvers;
const loadFontFaceOrTimeoutAfter20Seconds = (fontFace) => {
    const timeout = (0, exports.withResolvers)();
    const int = setTimeout(() => {
        timeout.reject(new Error('Timed out loading Google Font'));
    }, 18000);
    return Promise.race([
        fontFace.load().then(() => {
            clearTimeout(int);
        }),
        timeout.promise,
    ]);
};
/**
 * @description Load a Google Font for use in Remotion.
 * @param meta
 * @param {string} style The font style we want to load. While each font has a different set of styles, common options are: normal, italic etc.
 * @param {Array} options
 * @returns An object with the following properties: fontFamily, unicodeRanges, fonts
 * @see [Documentation](https://www.remotion.dev/docs/google-fonts/load-font)
 */
const loadFonts = (meta, style, options) => {
    var _a, _b, _c, _d;
    const weightsAndSubsetsAreSpecified = Array.isArray(options === null || options === void 0 ? void 0 : options.weights) &&
        Array.isArray(options === null || options === void 0 ? void 0 : options.subsets) &&
        options.weights.length > 0 &&
        options.subsets.length > 0;
    if (no_react_1.NoReactInternals.ENABLE_V5_BREAKING_CHANGES &&
        !weightsAndSubsetsAreSpecified) {
        throw new Error('Loading Google Fonts without specifying weights and subsets is not supported in Remotion v5. Please specify the weights and subsets you need.');
    }
    const promises = [];
    const styles = style ? [style] : Object.keys(meta.fonts);
    let fontsLoaded = 0;
    for (const style of styles) {
        // Don't load fonts on server
        if (typeof FontFace === 'undefined') {
            continue;
        }
        if (!meta.fonts[style]) {
            throw new Error(`The font ${meta.fontFamily} does not have a style ${style}`);
        }
        const weights = (_a = options === null || options === void 0 ? void 0 : options.weights) !== null && _a !== void 0 ? _a : Object.keys(meta.fonts[style]);
        for (const weight of weights) {
            if (!meta.fonts[style][weight]) {
                throw new Error(`The font ${meta.fontFamily} does not  have a weight ${weight} in style ${style}`);
            }
            const subsets = (_b = options === null || options === void 0 ? void 0 : options.subsets) !== null && _b !== void 0 ? _b : Object.keys(meta.fonts[style][weight]);
            for (const subset of subsets) {
                //  Get font url from meta
                let font = (_d = (_c = meta.fonts[style]) === null || _c === void 0 ? void 0 : _c[weight]) === null || _d === void 0 ? void 0 : _d[subset];
                //  Check is font available in meta
                if (!font) {
                    throw new Error(`weight: ${weight} subset: ${subset} is not available for '${meta.fontFamily}'`);
                }
                //  Check is font already loaded
                let fontKey = `${meta.fontFamily}-${style}-${weight}-${subset}`;
                const previousPromise = loadedFonts[fontKey];
                if (previousPromise) {
                    promises.push(previousPromise);
                    continue;
                }
                const baseLabel = `Fetching ${meta.fontFamily} font ${JSON.stringify({
                    style,
                    weight,
                    subset,
                })}`;
                const label = weightsAndSubsetsAreSpecified
                    ? baseLabel
                    : `${baseLabel}. This might be caused by loading too many font variations. Read more: https://www.remotion.dev/docs/troubleshooting/font-loading-errors#render-timeout-when-loading-google-fonts`;
                const handle = (0, remotion_1.delayRender)(label, { timeoutInMilliseconds: 60000 });
                fontsLoaded++;
                //  Create font-face
                const fontFace = new FontFace(meta.fontFamily, `url(${font}) format('woff2')`, {
                    weight: weight,
                    style: style,
                    unicodeRange: meta.unicodeRanges[subset],
                });
                let attempts = 2;
                const tryToLoad = () => {
                    //  Load font-face
                    if (fontFace.status === 'loaded') {
                        (0, remotion_1.continueRender)(handle);
                        return;
                    }
                    const promise = loadFontFaceOrTimeoutAfter20Seconds(fontFace)
                        .then(() => {
                        var _a;
                        ((_a = options === null || options === void 0 ? void 0 : options.document) !== null && _a !== void 0 ? _a : document).fonts.add(fontFace);
                        (0, remotion_1.continueRender)(handle);
                    })
                        .catch((err) => {
                        //  Mark font as not loaded
                        loadedFonts[fontKey] = undefined;
                        if (attempts === 0) {
                            throw err;
                        }
                        else {
                            attempts--;
                            tryToLoad();
                        }
                    });
                    //  Mark font as loaded
                    loadedFonts[fontKey] = promise;
                    promises.push(promise);
                };
                tryToLoad();
            }
        }
        if (fontsLoaded > 20) {
            console.warn(`Made ${fontsLoaded} network requests to load fonts for ${meta.fontFamily}. Consider loading fewer weights and subsets by passing options to loadFont(). Disable this warning by passing "ignoreTooManyRequestsWarning: true" to "options".`);
        }
    }
    return {
        fontFamily: meta.fontFamily,
        fonts: meta.fonts,
        unicodeRanges: meta.unicodeRanges,
        waitUntilDone: () => Promise.all(promises).then(() => undefined),
    };
};
exports.loadFonts = loadFonts;
