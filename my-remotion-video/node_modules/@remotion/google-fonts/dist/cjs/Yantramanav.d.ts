export declare const getInfo: () => {
    fontFamily: string;
    importName: string;
    version: string;
    url: string;
    unicodeRanges: {
        devanagari: string;
        'latin-ext': string;
        latin: string;
    };
    fonts: {
        normal: {
            '100': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
            '300': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
            '400': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
            '500': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
            '700': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
            '900': {
                devanagari: string;
                'latin-ext': string;
                latin: string;
            };
        };
    };
    subsets: string[];
};
export declare const fontFamily: "Yantramanav";
type Variants = {
    normal: {
        weights: '100' | '300' | '400' | '500' | '700' | '900';
        subsets: 'devanagari' | 'latin' | 'latin-ext';
    };
};
export declare const loadFont: <T extends keyof Variants>(style?: T, options?: {
    weights?: Variants[T]["weights"][];
    subsets?: Variants[T]["subsets"][];
    document?: Document;
    ignoreTooManyRequestsWarning?: boolean;
}) => {
    fontFamily: import("./base").FontInfo["fontFamily"];
    fonts: import("./base").FontInfo["fonts"];
    unicodeRanges: import("./base").FontInfo["unicodeRanges"];
    waitUntilDone: () => Promise<undefined>;
};
export {};
