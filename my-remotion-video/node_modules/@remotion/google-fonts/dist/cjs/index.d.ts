type Variants = Record<string, {
    weights: string;
    subsets: string;
}>;
export type FontInfo = {
    fontFamily: string;
    importName: string;
    version: string;
    url: string;
    unicodeRanges: Record<string, string>;
    fonts: Record<string, Record<string, Record<string, string>>>;
    subsets: string[];
};
export type GoogleFont = {
    getInfo: () => FontInfo;
    fontFamily: string;
    loadFont: <T extends keyof Variants>(style?: T | undefined, options?: {
        weights?: Variants[T]['weights'][] | undefined;
        subsets?: Variants[T]['subsets'][] | undefined;
        document?: Document | undefined;
    } | undefined) => {
        fontFamily: FontInfo['fontFamily'];
        fonts: FontInfo['fonts'];
        unicodeRanges: FontInfo['unicodeRanges'];
        waitUntilDone: () => Promise<undefined>;
    };
};
export declare const getAvailableFonts: () => {
    fontFamily: string;
    importName: string;
    load: () => Promise<GoogleFont>;
}[];
export {};
