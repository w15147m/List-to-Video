"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderInternals = exports.validateOutputFilename = exports.stitchFramesToVideo = exports.selectComposition = exports.renderStill = exports.renderMedia = exports.renderFrames = exports.openBrowser = exports.makeCancelSignal = exports.validateSelectedPixelFormatAndImageFormatCombination = exports.getVideoMetadata = exports.getSilentParts = exports.getCompositions = exports.extractAudio = exports.ErrorWithStackFrame = exports.ensureBrowser = exports.combineChunks = void 0;
const execa_1 = __importDefault(require("execa"));
const download_file_1 = require("./assets/download-file");
const browser_1 = require("./browser");
const Browser_1 = require("./browser/Browser");
const TimeoutSettings_1 = require("./browser/TimeoutSettings");
const call_ffmpeg_1 = require("./call-ffmpeg");
const can_use_parallel_encoding_1 = require("./can-use-parallel-encoding");
const chalk_1 = require("./chalk");
const is_color_supported_1 = require("./chalk/is-color-supported");
const check_version_requirements_1 = require("./check-version-requirements");
const codec_1 = require("./codec");
const get_executable_path_1 = require("./compositor/get-executable-path");
const convert_to_positive_frame_index_1 = require("./convert-to-positive-frame-index");
const delete_directory_1 = require("./delete-directory");
const ensure_output_directory_1 = require("./ensure-output-directory");
const symbolicate_error_1 = require("./error-handling/symbolicate-error");
const symbolicateable_error_1 = require("./error-handling/symbolicateable-error");
const file_extensions_1 = require("./file-extensions");
const find_closest_package_json_1 = require("./find-closest-package-json");
const frame_range_1 = require("./frame-range");
const get_compositions_1 = require("./get-compositions");
const get_concurrency_1 = require("./get-concurrency");
const get_duration_from_frame_range_1 = require("./get-duration-from-frame-range");
const get_extension_from_codec_1 = require("./get-extension-from-codec");
const get_extension_of_filename_1 = require("./get-extension-of-filename");
const get_frame_to_render_1 = require("./get-frame-to-render");
const get_port_1 = require("./get-port");
const image_format_1 = require("./image-format");
const is_serve_url_1 = require("./is-serve-url");
const jpeg_quality_1 = require("./jpeg-quality");
const log_level_1 = require("./log-level");
const logger_1 = require("./logger");
const mime_types_1 = require("./mime-types");
const open_browser_1 = require("./open-browser");
const gl_1 = require("./options/gl");
const parse_browser_error_stack_1 = require("./parse-browser-error-stack");
const perf = __importStar(require("./perf"));
const pixel_format_1 = require("./pixel-format");
const port_config_1 = require("./port-config");
const prepare_server_1 = require("./prepare-server");
const render_frames_1 = require("./render-frames");
const render_media_1 = require("./render-media");
const render_still_1 = require("./render-still");
const select_composition_1 = require("./select-composition");
const is_path_inside_1 = require("./serve-handler/is-path-inside");
const serve_static_1 = require("./serve-static");
const test_gpu_1 = require("./test-gpu");
const tmp_dir_1 = require("./tmp-dir");
const validate_concurrency_1 = require("./validate-concurrency");
const validate_even_dimensions_with_codec_1 = require("./validate-even-dimensions-with-codec");
var combine_chunks_1 = require("./combine-chunks");
Object.defineProperty(exports, "combineChunks", { enumerable: true, get: function () { return combine_chunks_1.combineChunks; } });
var ensure_browser_1 = require("./ensure-browser");
Object.defineProperty(exports, "ensureBrowser", { enumerable: true, get: function () { return ensure_browser_1.ensureBrowser; } });
var handle_javascript_exception_1 = require("./error-handling/handle-javascript-exception");
Object.defineProperty(exports, "ErrorWithStackFrame", { enumerable: true, get: function () { return handle_javascript_exception_1.ErrorWithStackFrame; } });
var extract_audio_1 = require("./extract-audio");
Object.defineProperty(exports, "extractAudio", { enumerable: true, get: function () { return extract_audio_1.extractAudio; } });
var get_compositions_2 = require("./get-compositions");
Object.defineProperty(exports, "getCompositions", { enumerable: true, get: function () { return get_compositions_2.getCompositions; } });
var get_silent_parts_1 = require("./get-silent-parts");
Object.defineProperty(exports, "getSilentParts", { enumerable: true, get: function () { return get_silent_parts_1.getSilentParts; } });
var get_video_metadata_1 = require("./get-video-metadata");
Object.defineProperty(exports, "getVideoMetadata", { enumerable: true, get: function () { return get_video_metadata_1.getVideoMetadata; } });
var image_format_2 = require("./image-format");
Object.defineProperty(exports, "validateSelectedPixelFormatAndImageFormatCombination", { enumerable: true, get: function () { return image_format_2.validateSelectedPixelFormatAndImageFormatCombination; } });
var make_cancel_signal_1 = require("./make-cancel-signal");
Object.defineProperty(exports, "makeCancelSignal", { enumerable: true, get: function () { return make_cancel_signal_1.makeCancelSignal; } });
var open_browser_2 = require("./open-browser");
Object.defineProperty(exports, "openBrowser", { enumerable: true, get: function () { return open_browser_2.openBrowser; } });
var render_frames_2 = require("./render-frames");
Object.defineProperty(exports, "renderFrames", { enumerable: true, get: function () { return render_frames_2.renderFrames; } });
var render_media_2 = require("./render-media");
Object.defineProperty(exports, "renderMedia", { enumerable: true, get: function () { return render_media_2.renderMedia; } });
var render_still_2 = require("./render-still");
Object.defineProperty(exports, "renderStill", { enumerable: true, get: function () { return render_still_2.renderStill; } });
var select_composition_2 = require("./select-composition");
Object.defineProperty(exports, "selectComposition", { enumerable: true, get: function () { return select_composition_2.selectComposition; } });
var stitch_frames_to_video_1 = require("./stitch-frames-to-video");
Object.defineProperty(exports, "stitchFramesToVideo", { enumerable: true, get: function () { return stitch_frames_to_video_1.stitchFramesToVideo; } });
var validate_output_filename_1 = require("./validate-output-filename");
Object.defineProperty(exports, "validateOutputFilename", { enumerable: true, get: function () { return validate_output_filename_1.validateOutputFilename; } });
const download_map_1 = require("./assets/download-map");
const can_concat_seamlessly_1 = require("./can-concat-seamlessly");
const codec_supports_media_1 = require("./codec-supports-media");
const combine_chunks_2 = require("./combine-chunks");
const make_file_executable_1 = require("./compositor/make-file-executable");
const default_on_log_1 = require("./default-on-log");
const ensure_browser_2 = require("./ensure-browser");
const audio_codec_1 = require("./options/audio-codec");
const offthreadvideo_threads_1 = require("./options/offthreadvideo-threads");
const print_useful_error_message_1 = require("./print-useful-error-message");
const render_has_audio_1 = require("./render-has-audio");
const to_megabytes_1 = require("./to-megabytes");
const validate_puppeteer_timeout_1 = require("./validate-puppeteer-timeout");
const validate_videobitrate_1 = require("./validate-videobitrate");
const wait_for_symbolication_error_to_be_done_1 = require("./wait-for-symbolication-error-to-be-done");
exports.RenderInternals = {
    resolveConcurrency: get_concurrency_1.resolveConcurrency,
    serveStatic: serve_static_1.serveStatic,
    validateEvenDimensionsWithCodec: validate_even_dimensions_with_codec_1.validateEvenDimensionsWithCodec,
    getFileExtensionFromCodec: get_extension_from_codec_1.getFileExtensionFromCodec,
    tmpDir: tmp_dir_1.tmpDir,
    deleteDirectory: delete_directory_1.deleteDirectory,
    isServeUrl: is_serve_url_1.isServeUrl,
    ensureOutputDirectory: ensure_output_directory_1.ensureOutputDirectory,
    getRealFrameRange: get_frame_to_render_1.getRealFrameRange,
    validatePuppeteerTimeout: validate_puppeteer_timeout_1.validatePuppeteerTimeout,
    downloadFile: download_file_1.downloadFile,
    parseStack: parse_browser_error_stack_1.parseStack,
    symbolicateError: symbolicate_error_1.symbolicateError,
    SymbolicateableError: symbolicateable_error_1.SymbolicateableError,
    getFramesToRender: get_duration_from_frame_range_1.getFramesToRender,
    getExtensionOfFilename: get_extension_of_filename_1.getExtensionOfFilename,
    getDesiredPort: get_port_1.getDesiredPort,
    isPathInside: is_path_inside_1.isPathInside,
    execa: execa_1.default,
    registerErrorSymbolicationLock: wait_for_symbolication_error_to_be_done_1.registerErrorSymbolicationLock,
    unlockErrorSymbolicationLock: wait_for_symbolication_error_to_be_done_1.unlockErrorSymbolicationLock,
    canUseParallelEncoding: can_use_parallel_encoding_1.canUseParallelEncoding,
    mimeContentType: mime_types_1.mimeContentType,
    mimeLookup: mime_types_1.mimeLookup,
    validateConcurrency: validate_concurrency_1.validateConcurrency,
    validPixelFormats: pixel_format_1.validPixelFormats,
    DEFAULT_BROWSER: browser_1.DEFAULT_BROWSER,
    validateFrameRange: frame_range_1.validateFrameRange,
    DEFAULT_OPENGL_RENDERER: gl_1.DEFAULT_OPENGL_RENDERER,
    validateOpenGlRenderer: gl_1.validateOpenGlRenderer,
    validCodecs: codec_1.validCodecs,
    DEFAULT_PIXEL_FORMAT: pixel_format_1.DEFAULT_PIXEL_FORMAT,
    validateJpegQuality: jpeg_quality_1.validateJpegQuality,
    DEFAULT_TIMEOUT: TimeoutSettings_1.DEFAULT_TIMEOUT,
    DEFAULT_CODEC: codec_1.DEFAULT_CODEC,
    logLevels: log_level_1.logLevels,
    isEqualOrBelowLogLevel: log_level_1.isEqualOrBelowLogLevel,
    isValidLogLevel: log_level_1.isValidLogLevel,
    perf,
    convertToPositiveFrameIndex: convert_to_positive_frame_index_1.convertToPositiveFrameIndex,
    findRemotionRoot: find_closest_package_json_1.findRemotionRoot,
    validateBitrate: validate_videobitrate_1.validateBitrate,
    getMinConcurrency: validate_concurrency_1.getMinConcurrency,
    getMaxConcurrency: validate_concurrency_1.getMaxConcurrency,
    getDefaultAudioCodec: audio_codec_1.getDefaultAudioCodec,
    defaultFileExtensionMap: file_extensions_1.defaultFileExtensionMap,
    supportedAudioCodecs: audio_codec_1.supportedAudioCodecs,
    makeFileExtensionMap: get_extension_from_codec_1.makeFileExtensionMap,
    defaultCodecsForFileExtension: get_extension_from_codec_1.defaultCodecsForFileExtension,
    getExecutablePath: get_executable_path_1.getExecutablePath,
    callFf: call_ffmpeg_1.callFf,
    validStillImageFormats: image_format_1.validStillImageFormats,
    validVideoImageFormats: image_format_1.validVideoImageFormats,
    DEFAULT_STILL_IMAGE_FORMAT: image_format_1.DEFAULT_STILL_IMAGE_FORMAT,
    DEFAULT_VIDEO_IMAGE_FORMAT: image_format_1.DEFAULT_VIDEO_IMAGE_FORMAT,
    DEFAULT_JPEG_QUALITY: jpeg_quality_1.DEFAULT_JPEG_QUALITY,
    chalk: chalk_1.chalk,
    Log: logger_1.Log,
    INDENT_TOKEN: logger_1.INDENT_TOKEN,
    isColorSupported: is_color_supported_1.isColorSupported,
    HeadlessBrowser: Browser_1.HeadlessBrowser,
    prepareServer: prepare_server_1.prepareServer,
    makeOrReuseServer: prepare_server_1.makeOrReuseServer,
    internalRenderStill: render_still_1.internalRenderStill,
    internalOpenBrowser: open_browser_1.internalOpenBrowser,
    internalSelectComposition: select_composition_1.internalSelectComposition,
    internalGetCompositions: get_compositions_1.internalGetCompositions,
    internalRenderFrames: render_frames_1.internalRenderFrames,
    internalRenderMedia: render_media_1.internalRenderMedia,
    validOpenGlRenderers: gl_1.validOpenGlRenderers,
    isIpV6Supported: port_config_1.isIpV6Supported,
    getChromiumGpuInformation: test_gpu_1.getChromiumGpuInformation,
    getPortConfig: port_config_1.getPortConfig,
    makeDownloadMap: download_map_1.makeDownloadMap,
    getExtensionFromAudioCodec: audio_codec_1.getExtensionFromAudioCodec,
    makeFileExecutableIfItIsNot: make_file_executable_1.makeFileExecutableIfItIsNot,
    resolveAudioCodec: audio_codec_1.resolveAudioCodec,
    getShouldRenderAudio: render_has_audio_1.getShouldRenderAudio,
    codecSupportsMedia: codec_supports_media_1.codecSupportsMedia,
    toMegabytes: to_megabytes_1.toMegabytes,
    internalEnsureBrowser: ensure_browser_2.internalEnsureBrowser,
    printUsefulErrorMessage: print_useful_error_message_1.printUsefulErrorMessage,
    DEFAULT_RENDER_FRAMES_OFFTHREAD_VIDEO_THREADS: offthreadvideo_threads_1.DEFAULT_RENDER_FRAMES_OFFTHREAD_VIDEO_THREADS,
    canConcatVideoSeamlessly: can_concat_seamlessly_1.canConcatVideoSeamlessly,
    canConcatAudioSeamlessly: can_concat_seamlessly_1.canConcatAudioSeamlessly,
    internalCombineChunks: combine_chunks_2.internalCombineChunks,
    defaultOnLog: default_on_log_1.defaultOnLog,
};
// Warn of potential performance issues with Apple Silicon (M1 chip under Rosetta)
(0, check_version_requirements_1.checkRuntimeVersion)('info', false);
