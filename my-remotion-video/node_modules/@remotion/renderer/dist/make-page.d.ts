import type { VideoConfig } from 'remotion/no-react';
import type { BrowserLog } from './browser-log';
import type { OnLog, Page } from './browser/BrowserPage';
import type { SourceMapGetter } from './browser/source-map-getter';
import type { VideoImageFormat } from './image-format';
import type { LogLevel } from './log-level';
import type { BrowserReplacer } from './replace-browser';
export declare const makePage: ({ context, initialFrame, browserReplacer, logLevel, indent, pagesArray, onBrowserLog, scale, timeoutInMilliseconds, composition, proxyPort, serveUrl, muted, envVariables, serializedInputPropsWithCustomSchema, imageFormat, serializedResolvedPropsWithCustomSchema, pageIndex, isMainTab, mediaCacheSizeInBytes, onLog, }: {
    context: SourceMapGetter;
    initialFrame: number;
    browserReplacer: BrowserReplacer;
    logLevel: LogLevel;
    indent: boolean;
    pagesArray: Page[];
    onBrowserLog: ((log: BrowserLog) => void) | null;
    scale: number;
    timeoutInMilliseconds: number;
    composition: Omit<VideoConfig, "defaultProps" | "props">;
    proxyPort: number;
    serveUrl: string;
    muted: boolean;
    envVariables: Record<string, string>;
    serializedInputPropsWithCustomSchema: string;
    serializedResolvedPropsWithCustomSchema: string;
    imageFormat: VideoImageFormat;
    pageIndex: number;
    isMainTab: boolean;
    mediaCacheSizeInBytes: number | null;
    onLog: OnLog;
}) => Promise<Page>;
