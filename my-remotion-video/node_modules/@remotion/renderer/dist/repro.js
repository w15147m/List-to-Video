"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReproEnabled = exports.disableRepro = exports.enableRepro = exports.writeInRepro = exports.getReproWriter = void 0;
const node_child_process_1 = require("node:child_process");
const node_fs_1 = __importStar(require("node:fs"));
const node_os_1 = __importDefault(require("node:os"));
const node_path_1 = __importDefault(require("node:path"));
const version_1 = require("remotion/version");
const chalk_1 = require("./chalk");
const find_closest_package_json_1 = require("./find-closest-package-json");
const is_serve_url_1 = require("./is-serve-url");
const logger_1 = require("./logger");
const REPRO_DIR = '.remotionrepro';
const LOG_FILE_NAME = 'logs.txt';
const INPUT_DIR = 'bundle';
const OUTPUT_DIR = 'output';
const LINE_SPLIT = '\n';
const getZipFileName = (name) => `remotion-repro-${name}-${Date.now()}.zip`;
const readyDirSync = (dir) => {
    let items;
    try {
        items = node_fs_1.default.readdirSync(dir);
    }
    catch (_a) {
        return node_fs_1.default.mkdirSync(dir, { recursive: true });
    }
    items.forEach((item) => {
        item = node_path_1.default.join(dir, item);
        node_fs_1.default.rmSync(item, { recursive: true, force: true });
    });
};
const zipFolder = ({ sourceFolder, targetZip, indent, logLevel, }) => {
    const platform = node_os_1.default.platform();
    try {
        logger_1.Log.info({ indent, logLevel }, '+ Creating reproduction ZIP');
        if (platform === 'win32') {
            (0, node_child_process_1.execSync)(`powershell.exe Compress-Archive -Path "${sourceFolder}" -DestinationPath "${targetZip}"`);
        }
        else {
            (0, node_child_process_1.execSync)(`zip -r "${targetZip}" "${sourceFolder}"`);
        }
        (0, node_fs_1.rmSync)(sourceFolder, { recursive: true });
        logger_1.Log.info({ indent, logLevel }, `${chalk_1.chalk.blue(`+ Repro: ${targetZip}`)}`);
    }
    catch (error) {
        logger_1.Log.error({ indent, logLevel }, `Failed to zip repro folder, The repro folder is ${sourceFolder}. You can try manually zip it.`);
        logger_1.Log.error({ indent, logLevel }, error);
    }
};
const reproWriter = (name) => {
    const root = (0, find_closest_package_json_1.findRemotionRoot)();
    const reproFolder = node_path_1.default.join(root, REPRO_DIR);
    const logPath = node_path_1.default.join(reproFolder, LOG_FILE_NAME);
    const zipFile = node_path_1.default.join(root, getZipFileName(name));
    readyDirSync(reproFolder);
    const reproLogWriteStream = node_fs_1.default.createWriteStream(logPath, { flags: 'a' });
    const serializeArgs = (args) => JSON.stringify(args);
    const writeLine = (level, ...args) => {
        if (!args.length)
            return;
        const startTime = new Date().toISOString();
        const line = `[${startTime}] ${level} ${serializeArgs(args)}`;
        reproLogWriteStream.write(line + LINE_SPLIT);
    };
    const start = ({ serveUrl, serializedInputPropsWithCustomSchema, serializedResolvedPropsWithCustomSchema, }) => {
        const isServe = (0, is_serve_url_1.isServeUrl)(serveUrl);
        if (!isServe) {
            const inputDir = node_path_1.default.resolve(reproFolder, INPUT_DIR);
            readyDirSync(inputDir);
            node_fs_1.default.cpSync(serveUrl, inputDir, { recursive: true });
        }
        const serializedProps = node_path_1.default.resolve(reproFolder, 'input-props.json');
        node_fs_1.default.writeFileSync(serializedProps, serializedInputPropsWithCustomSchema);
        const serializedResolvedProps = node_path_1.default.resolve(reproFolder, 'resolved-props.json');
        node_fs_1.default.writeFileSync(serializedResolvedProps, serializedResolvedPropsWithCustomSchema);
        writeLine('info', [`Args: ${JSON.stringify(process.argv)}`]);
        writeLine('info', [`Node/Bun version: ${process.version}`]);
        writeLine('info', [`OS: ${process.platform}-${process.arch}`]);
        writeLine('info', [`Serve URL: ${serveUrl}`]);
        writeLine('info', [`Remotion version: ${version_1.VERSION}`]);
    };
    const onRenderSucceed = ({ indent, logLevel, output, }) => {
        return new Promise((resolve, reject) => {
            try {
                if (output) {
                    const outputDir = node_path_1.default.resolve(reproFolder, OUTPUT_DIR);
                    readyDirSync(outputDir);
                    const fileName = node_path_1.default.basename(output);
                    const targetPath = node_path_1.default.join(outputDir, fileName);
                    node_fs_1.default.copyFileSync(output, targetPath);
                }
                (0, exports.disableRepro)();
                reproLogWriteStream.end(() => {
                    reproLogWriteStream.close(() => {
                        zipFolder({
                            sourceFolder: reproFolder,
                            targetZip: zipFile,
                            indent,
                            logLevel,
                        });
                        resolve();
                    });
                });
            }
            catch (error) {
                logger_1.Log.error({ indent: false, logLevel }, `repro render success error:`);
                logger_1.Log.error({ indent: false, logLevel }, error);
                reject(error);
            }
        });
    };
    return {
        start,
        writeLine,
        onRenderSucceed,
    };
};
let reproWriteInstance = null;
const getReproWriter = () => {
    if (!reproWriteInstance) {
        throw new Error('reproWriteInstance is not initialized');
    }
    return reproWriteInstance;
};
exports.getReproWriter = getReproWriter;
const writeInRepro = (level, ...args) => {
    if ((0, exports.isReproEnabled)()) {
        (0, exports.getReproWriter)().writeLine(level, ...args);
    }
};
exports.writeInRepro = writeInRepro;
let shouldRepro = false;
const enableRepro = ({ serveUrl, compositionName, serializedInputPropsWithCustomSchema, serializedResolvedPropsWithCustomSchema, }) => {
    shouldRepro = true;
    reproWriteInstance = reproWriter(compositionName);
    (0, exports.getReproWriter)().start({
        serveUrl,
        serializedInputPropsWithCustomSchema,
        serializedResolvedPropsWithCustomSchema,
    });
};
exports.enableRepro = enableRepro;
const disableRepro = () => {
    shouldRepro = false;
};
exports.disableRepro = disableRepro;
const isReproEnabled = () => shouldRepro;
exports.isReproEnabled = isReproEnabled;
