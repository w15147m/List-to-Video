import type { WebpackOverrideFn } from '@remotion/bundler';
import type { LogLevel } from '@remotion/renderer';
import type { GitSource, RenderDefaults, RenderJob } from '@remotion/studio-shared';
import type { QueueMethods } from './api-types';
import type { LiveEventsServer } from './live-events';
export declare const startServer: (options: {
    entry: string;
    userDefinedComponent: string;
    webpackOverride: WebpackOverrideFn;
    getCurrentInputProps: () => object;
    getEnvVariables: () => Record<string, string>;
    port: number | null;
    maxTimelineTracks: number | null;
    bufferStateDelayInMilliseconds: number | null;
    remotionRoot: string;
    keyboardShortcutsEnabled: boolean;
    publicDir: string;
    poll: number | null;
    staticHash: string;
    staticHashPrefix: string;
    outputHash: string;
    outputHashPrefix: string;
    logLevel: LogLevel;
    getRenderQueue: () => RenderJob[];
    getRenderDefaults: () => RenderDefaults;
    numberOfAudioTags: number;
    queueMethods: QueueMethods;
    gitSource: GitSource | null;
    binariesDirectory: string | null;
    forceIPv4: boolean;
    audioLatencyHint: AudioContextLatencyCategory | null;
    enableCrossSiteIsolation: boolean;
}) => Promise<{
    port: number;
    liveEventsServer: LiveEventsServer;
    close: () => Promise<void>;
}>;
