"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyCodemodHandler = void 0;
const renderer_1 = require("@remotion/renderer");
const node_fs_1 = require("node:fs");
const duplicate_composition_1 = require("../../codemods/duplicate-composition");
const simple_diff_1 = require("../../codemods/simple-diff");
const project_info_1 = require("../project-info");
const can_update_default_props_1 = require("./can-update-default-props");
const applyCodemodHandler = async ({ input: { codemod, dryRun }, logLevel, remotionRoot, entryPoint }) => {
    try {
        const time = Date.now();
        const projectInfo = await (0, project_info_1.getProjectInfo)(remotionRoot, entryPoint);
        if (!projectInfo.rootFile) {
            throw new Error('Cannot find root file in project');
        }
        (0, can_update_default_props_1.checkIfTypeScriptFile)(projectInfo.rootFile);
        const input = (0, node_fs_1.readFileSync)(projectInfo.rootFile, 'utf-8');
        const { newContents } = (0, duplicate_composition_1.parseAndApplyCodemod)({
            codeMod: codemod,
            input,
        });
        const formatted = await (0, duplicate_composition_1.formatOutput)(newContents);
        const diff = (0, simple_diff_1.simpleDiff)({
            oldLines: input.split('\n'),
            newLines: formatted.split('\n'),
        });
        if (!dryRun) {
            (0, node_fs_1.writeFileSync)(projectInfo.rootFile, formatted);
            const end = Date.now() - time;
            renderer_1.RenderInternals.Log.info({ indent: false, logLevel }, renderer_1.RenderInternals.chalk.blue(`Edited root file in ${end}ms`));
        }
        return {
            success: true,
            diff,
        };
    }
    catch (err) {
        return {
            success: false,
            reason: err.message,
            stack: err.stack,
        };
    }
};
exports.applyCodemodHandler = applyCodemodHandler;
