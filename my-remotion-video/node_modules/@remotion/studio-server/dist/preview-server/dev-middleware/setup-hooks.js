"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupHooks = setupHooks;
const renderer_1 = require("@remotion/renderer");
const no_react_1 = require("remotion/no-react");
function setupHooks(context, logLevel) {
    function invalid() {
        // We are now in invalid state
        context.state = false;
        context.stats = undefined;
    }
    function done(stats) {
        context.state = true;
        context.stats = stats;
        // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling
        process.nextTick(() => {
            const { logger, state, callbacks } = context;
            // Check if still in valid state
            if (!state || !stats) {
                return;
            }
            logger.log('Compilation finished');
            const statsOptions = {
                preset: 'errors-warnings',
                colors: renderer_1.RenderInternals.isColorSupported(),
            };
            const printedStats = stats.toString(statsOptions);
            const lines = printedStats
                .split('\n')
                .map((a) => a.trimEnd())
                .filter(no_react_1.NoReactInternals.truthy)
                .map((a) => {
                if (a.startsWith('webpack compiled')) {
                    return `Built in ${stats.endTime - stats.startTime}ms`;
                }
                return a;
            })
                .join('\n');
            if (lines) {
                renderer_1.RenderInternals.Log.info({ indent: false, logLevel }, lines);
                if (process.argv.includes('--test-for-server-open')) {
                    renderer_1.RenderInternals.Log.info({ indent: false, logLevel }, 'Yes, the server started.');
                    process.exit(0);
                }
            }
            context.callbacks = [];
            callbacks.forEach((callback) => {
                callback(stats);
            });
        });
    }
    context.compiler.hooks.watchRun.tap('remotion', invalid);
    context.compiler.hooks.invalid.tap('remotion', invalid);
    context.compiler.hooks.done.tap('remotion', done);
}
