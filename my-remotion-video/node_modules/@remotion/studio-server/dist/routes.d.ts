import type { LogLevel } from '@remotion/renderer';
import type { GitSource, RenderDefaults, RenderJob } from '@remotion/studio-shared';
import type { IncomingMessage, ServerResponse } from 'node:http';
import type { QueueMethods } from './preview-server/api-types';
import type { LiveEventsServer } from './preview-server/live-events';
export declare const handleRoutes: ({ staticHash, staticHashPrefix, outputHash, outputHashPrefix, request, response, liveEventsServer, getCurrentInputProps, getEnvVariables, remotionRoot, entryPoint, publicDir, logLevel, getRenderQueue, getRenderDefaults, numberOfAudioTags, queueMethods: methods, gitSource, binariesDirectory, audioLatencyHint, enableCrossSiteIsolation, }: {
    staticHash: string;
    staticHashPrefix: string;
    outputHash: string;
    outputHashPrefix: string;
    request: IncomingMessage;
    response: ServerResponse;
    liveEventsServer: LiveEventsServer;
    getCurrentInputProps: () => object;
    getEnvVariables: () => Record<string, string>;
    remotionRoot: string;
    entryPoint: string;
    publicDir: string;
    logLevel: LogLevel;
    getRenderQueue: () => RenderJob[];
    getRenderDefaults: () => RenderDefaults;
    numberOfAudioTags: number;
    queueMethods: QueueMethods;
    gitSource: GitSource | null;
    binariesDirectory: string | null;
    audioLatencyHint: AudioContextLatencyCategory | null;
    enableCrossSiteIsolation: boolean;
}) => Promise<void>;
