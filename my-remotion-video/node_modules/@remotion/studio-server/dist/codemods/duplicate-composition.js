"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAndApplyCodemod = exports.formatOutput = void 0;
const parse_ast_1 = require("./parse-ast");
const recast_mods_1 = require("./recast-mods");
const getPrettier = async () => {
    try {
        return await Promise.resolve().then(() => __importStar(require('prettier')));
    }
    catch (_a) {
        throw new Error('Prettier cannot be found in the current project.');
    }
};
const formatOutput = async (tsContent) => {
    const prettier = await getPrettier();
    const { format, resolveConfig, resolveConfigFile } = prettier;
    const configFilePath = await resolveConfigFile();
    if (!configFilePath) {
        throw new Error('The Prettier config file was not found. For this feature, the "prettier" package must be installed and a .prettierrc file must exist.');
    }
    const prettierConfig = await resolveConfig(configFilePath);
    if (!prettierConfig) {
        throw new Error(`The Prettier config at ${configFilePath} could not be read`);
    }
    const newContents = await format(tsContent, {
        ...prettierConfig,
        filepath: 'test.tsx',
    });
    return newContents;
};
exports.formatOutput = formatOutput;
const parseAndApplyCodemod = ({ input, codeMod, }) => {
    const ast = (0, parse_ast_1.parseAst)(input);
    const { newAst, changesMade } = (0, recast_mods_1.applyCodemod)({
        file: ast,
        codeMod,
    });
    if (changesMade.length === 0) {
        throw new Error('Unable to calculate the changes needed for this file. Edit the root file manually.');
    }
    const output = (0, parse_ast_1.serializeAst)(newAst);
    return { changesMade, newContents: output };
};
exports.parseAndApplyCodemod = parseAndApplyCodemod;
