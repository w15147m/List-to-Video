export { ApiRoutes, CopyStillToClipboardRequest, getDefaultOutLocation, OpenInFileExplorerRequest, } from '@remotion/studio-shared';
export type { AggregateRenderProgress, BundlingState, CopyingState, DownloadProgress, HotMiddlewareOptions, JobProgressCallback, ModuleMap, PackageManager, ProjectInfo, RenderingProgressInput, RenderJob, RenderJobWithCleanup, RequiredChromiumOptions, StitchingProgressInput, UiOpenGlOptions, } from '@remotion/studio-shared';
import { AnsiDiff } from './ansi-diff';
export declare const StudioServerInternals: {
    startStudio: ({ browserArgs, browserFlag, configValueShouldOpenBrowser, fullEntryPath, logLevel, getCurrentInputProps, getEnvVariables, desiredPort, maxTimelineTracks, remotionRoot, keyboardShortcutsEnabled, relativePublicDir, webpackOverride, poll, getRenderDefaults, getRenderQueue, numberOfAudioTags, queueMethods, parsedCliOpen, previewEntry, gitSource, bufferStateDelayInMilliseconds, binariesDirectory, forceIPv4, audioLatencyHint, enableCrossSiteIsolation, }: {
        browserArgs: string;
        browserFlag: string;
        logLevel: import("@remotion/renderer").LogLevel;
        configValueShouldOpenBrowser: boolean;
        fullEntryPath: string;
        getCurrentInputProps: () => object;
        getEnvVariables: () => Record<string, string>;
        desiredPort: number | null;
        maxTimelineTracks: number | null;
        bufferStateDelayInMilliseconds: number | null;
        remotionRoot: string;
        keyboardShortcutsEnabled: boolean;
        relativePublicDir: string | null;
        webpackOverride: import("@remotion/bundler").WebpackOverrideFn;
        poll: number | null;
        getRenderDefaults: () => import("@remotion/studio-shared").RenderDefaults;
        getRenderQueue: () => import("@remotion/studio-shared").RenderJob[];
        numberOfAudioTags: number;
        audioLatencyHint: AudioContextLatencyCategory | null;
        enableCrossSiteIsolation: boolean;
        queueMethods: import("./preview-server/api-types").QueueMethods;
        parsedCliOpen: boolean;
        previewEntry: string;
        gitSource: import("@remotion/studio-shared").GitSource | null;
        binariesDirectory: string | null;
        forceIPv4: boolean;
    }) => Promise<void>;
    getRemotionVersion: () => any;
    waitForLiveEventsListener: () => Promise<import("./preview-server/live-events").LiveEventsServer>;
    lockFilePaths: {
        manager: import("@remotion/studio-shared").PackageManager;
        path: string;
        installCommand: string;
        startCommand: string;
    }[];
    getPackageManager: (remotionRoot: string, packageManager: string | undefined, dirUp: number) => {
        manager: import("@remotion/studio-shared").PackageManager;
        path: string;
        installCommand: string;
        startCommand: string;
    } | "unknown";
    getMaxTimelineTracks: () => number;
    setMaxTimelineTracks: (maxTracks: number) => void;
    getLatestRemotionVersion: () => Promise<any>;
    installFileWatcher: ({ file, onChange, }: {
        file: string;
        onChange: (type: "created" | "deleted" | "changed") => void;
    }) => {
        exists: boolean;
        unwatch: () => void;
    };
    AnsiDiff: typeof AnsiDiff;
    formatBytes: (number: number, options?: Intl.NumberFormatOptions & {
        locale: string;
        bits?: boolean;
        binary?: boolean;
        signed: boolean;
    }) => string;
    parseAndApplyCodemod: ({ input, codeMod, }: {
        input: string;
        codeMod: import("@remotion/studio-shared").RecastCodemod;
    }) => {
        newContents: string;
        changesMade: import("./codemods/recast-mods").Change[];
    };
    openBrowser: ({ url, browserFlag, browserArgs, }: {
        url: string;
        browserFlag: string | undefined;
        browserArgs: string | undefined;
    }) => Promise<boolean | import("child_process").ChildProcess>;
    getInstalledDependencies: (remotionRoot: string) => {
        dependencies: string[];
        devDependencies: string[];
        optionalDependencies: string[];
        peerDependencies: string[];
    };
    getInstallCommand: ({ manager, packages, version, additionalArgs, }: {
        manager: import("@remotion/studio-shared").PackageManager;
        packages: string[];
        version: string;
        additionalArgs: string[];
    }) => string[];
};
