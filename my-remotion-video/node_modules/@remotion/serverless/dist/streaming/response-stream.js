"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseStream = void 0;
const stream_1 = require("stream");
class ResponseStream extends stream_1.Writable {
    constructor() {
        super();
        this.queue = [];
        this.waitingResolve = [];
        this.response = [];
    }
    _write(chunk, encoding, callback) {
        const data = Buffer.from(chunk, encoding);
        const resolve = this.waitingResolve.shift();
        if (resolve) {
            resolve({ PayloadChunk: { Payload: data }, InvokeComplete: false });
        }
        else {
            this.queue.push({ PayloadChunk: { Payload: data }, InvokeComplete: false });
        }
        this.response.push(Buffer.from(chunk, encoding));
        callback();
    }
    _finish() {
        const resolve = this.waitingResolve.shift();
        if (resolve) {
            resolve({ PayloadChunk: { Payload: null }, InvokeComplete: true });
        }
        else {
            this.queue.push({ PayloadChunk: { Payload: null }, InvokeComplete: true });
        }
    }
    getBufferedData() {
        return Buffer.concat(this.response);
    }
    async *[Symbol.asyncIterator]() {
        while (true) {
            if (this.queue.length > 0) {
                const shifted = this.queue.shift();
                yield shifted;
                if (shifted.InvokeComplete) {
                    break;
                }
            }
            else {
                // Wait for new data to be written
                const shifted = await new Promise((resolve) => {
                    this.waitingResolve.push((data) => {
                        Promise.resolve(data).then((d) => {
                            if (d) {
                                resolve(d);
                            }
                        });
                    });
                });
                yield shifted;
                if (shifted.InvokeComplete) {
                    break;
                }
            }
        }
    }
}
exports.ResponseStream = ResponseStream;
