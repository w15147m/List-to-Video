"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateComposition = void 0;
const renderer_1 = require("@remotion/renderer");
const validate_1 = require("./validate");
const validateComposition = async ({ serveUrl, composition, browserInstance, serializedInputPropsWithCustomSchema, envVariables, timeoutInMilliseconds, chromiumOptions, port, forceHeight, forceWidth, logLevel, server, offthreadVideoCacheSizeInBytes, onBrowserDownload, onServeUrlVisited, providerSpecifics, offthreadVideoThreads, mediaCacheSizeInBytes, }) => {
    const { metadata: comp } = await renderer_1.RenderInternals.internalSelectComposition({
        id: composition,
        puppeteerInstance: browserInstance,
        serializedInputPropsWithCustomSchema,
        envVariables,
        timeoutInMilliseconds,
        chromiumOptions,
        port,
        browserExecutable: providerSpecifics.getChromiumPath(),
        serveUrl,
        logLevel,
        indent: false,
        onBrowserLog: null,
        server,
        offthreadVideoCacheSizeInBytes,
        offthreadVideoThreads,
        binariesDirectory: null,
        onBrowserDownload,
        onServeUrlVisited,
        chromeMode: 'headless-shell',
        mediaCacheSizeInBytes,
    });
    const videoConfig = {
        ...comp,
        height: forceHeight !== null && forceHeight !== void 0 ? forceHeight : comp.height,
        width: forceWidth !== null && forceWidth !== void 0 ? forceWidth : comp.width,
    };
    const reason = `of the "<Composition />" component with the id "${composition}"`;
    (0, validate_1.validateDurationInFrames)(comp.durationInFrames, {
        component: reason,
        allowFloats: false,
    });
    (0, validate_1.validateFps)(comp.fps, reason, false);
    (0, validate_1.validateDimension)(comp.height, 'height', reason);
    (0, validate_1.validateDimension)(comp.width, 'width', reason);
    return videoConfig;
};
exports.validateComposition = validateComposition;
