"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeWebhook = void 0;
exports.calculateSignature = calculateSignature;
const renderer_1 = require("@remotion/renderer");
const Crypto = __importStar(require("node:crypto"));
function calculateSignature(payload, secret) {
    if (!secret) {
        return 'NO_SECRET_PROVIDED';
    }
    const hmac = Crypto.createHmac('sha512', secret);
    const signature = 'sha512=' + hmac.update(payload).digest('hex');
    return signature;
}
async function invokeWebhookRaw({ payload, secret, url, }) {
    const jsonPayload = JSON.stringify(payload);
    const res = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': String(jsonPayload.length),
            'X-Remotion-Mode': 'production',
            'X-Remotion-Signature': calculateSignature(jsonPayload, secret),
            'X-Remotion-Status': payload.type,
        },
        body: jsonPayload,
        signal: AbortSignal.timeout(10000),
        redirect: 'follow',
    });
    if (!res.ok) {
        throw new Error(`Failed to send webhook to ${url}, got status code ${res.status}`);
    }
}
function exponentialBackoff(errorCount) {
    return 1000 * 2 ** (errorCount - 1);
}
const invokeWebhook = async ({ options, logLevel, retries = 2, errors = 0, }) => {
    try {
        await invokeWebhookRaw(options);
    }
    catch (err) {
        if (retries === 0) {
            throw err;
        }
        renderer_1.RenderInternals.Log.error({ indent: false, logLevel }, 'Could not send webhook due to error:');
        renderer_1.RenderInternals.Log.error({ indent: false, logLevel }, err.stack);
        renderer_1.RenderInternals.Log.error({ indent: false, logLevel }, `Retrying in ${exponentialBackoff(errors)}ms.`);
        await new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, exponentialBackoff(errors));
        });
        return (0, exports.invokeWebhook)({
            options,
            logLevel,
            retries: retries - 1,
            errors: errors + 1,
        });
    }
};
exports.invokeWebhook = invokeWebhook;
