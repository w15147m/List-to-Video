import { type LogLevel } from '@remotion/renderer';
import type { ChunkRetry, CloudProvider, FunctionErrorInfo, OverallRenderProgress, PostRenderData, ProviderSpecifics, ReceivedArtifact, RenderMetadata } from '@remotion/serverless-client';
export type OverallProgressHelper<Provider extends CloudProvider> = {
    upload: () => Promise<void>;
    setFrames: ({ encoded, rendered, index, }: {
        rendered: number;
        encoded: number;
        index: number;
    }) => void;
    setLambdaInvoked: (chunk: number) => void;
    addChunkCompleted: (chunkIndex: number, start: number, rendered: number) => void;
    setCombinedFrames: (framesEncoded: number) => void;
    setTimeToCombine: (timeToCombine: number) => void;
    addRetry: (retry: ChunkRetry) => void;
    setPostRenderData: (postRenderData: PostRenderData<Provider>) => void;
    setRenderMetadata: (renderMetadata: RenderMetadata<Provider>) => void;
    addErrorWithoutUpload: (errorInfo: FunctionErrorInfo) => void;
    setExpectedChunks: (expectedChunks: number) => void;
    get: () => OverallRenderProgress<Provider>;
    setServeUrlOpened: (timestamp: number) => void;
    setCompositionValidated: (timestamp: number) => void;
    addReceivedArtifact: (asset: ReceivedArtifact<Provider>) => void;
    getReceivedArtifacts: () => ReceivedArtifact<Provider>[];
};
export declare const makeInitialOverallRenderProgress: <Provider extends CloudProvider>(timeoutTimestamp: number) => OverallRenderProgress<Provider>;
export declare const makeOverallRenderProgress: <Provider extends CloudProvider>({ renderId, bucketName, expectedBucketOwner, region, timeoutTimestamp, logLevel, providerSpecifics, forcePathStyle, }: {
    renderId: string;
    bucketName: string;
    expectedBucketOwner: string;
    region: Provider["region"];
    timeoutTimestamp: number;
    logLevel: LogLevel;
    providerSpecifics: ProviderSpecifics<Provider>;
    forcePathStyle: boolean;
}) => OverallProgressHelper<Provider>;
