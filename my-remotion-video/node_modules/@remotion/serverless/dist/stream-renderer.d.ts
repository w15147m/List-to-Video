import type { EmittedArtifact, LogLevel } from '@remotion/renderer';
import type { CloudProvider, ProviderSpecifics, ServerlessPayload } from '@remotion/serverless-client';
import type { OverallProgressHelper } from './overall-render-progress';
import type { InsideFunctionSpecifics } from './provider-implementation';
export declare const streamRendererFunctionWithRetry: <Provider extends CloudProvider>({ payload, files, functionName, outdir, overallProgress, logLevel, onArtifact, providerSpecifics, insideFunctionSpecifics, requestHandler, }: {
    payload: ServerlessPayload<Provider>;
    functionName: string;
    outdir: string;
    overallProgress: OverallProgressHelper<Provider>;
    files: string[];
    logLevel: LogLevel;
    onArtifact: (asset: EmittedArtifact) => {
        alreadyExisted: boolean;
    };
    providerSpecifics: ProviderSpecifics<Provider>;
    insideFunctionSpecifics: InsideFunctionSpecifics<Provider>;
    requestHandler: Provider["requestHandler"] | null;
}) => Promise<unknown>;
