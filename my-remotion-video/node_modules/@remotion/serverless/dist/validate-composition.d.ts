import type { ChromiumOptions, LogLevel, OnBrowserDownload, openBrowser, RemotionServer } from '@remotion/renderer';
import type { Await, CloudProvider, ProviderSpecifics, VideoConfig } from '@remotion/serverless-client';
type ValidateCompositionOptions<Provider extends CloudProvider> = {
    serveUrl: string;
    composition: string;
    browserInstance: Await<ReturnType<typeof openBrowser>>;
    serializedInputPropsWithCustomSchema: string;
    envVariables: Record<string, string>;
    timeoutInMilliseconds: number;
    chromiumOptions: ChromiumOptions;
    port: number | null;
    forceHeight: number | null;
    forceWidth: number | null;
    logLevel: LogLevel;
    server: RemotionServer | undefined;
    offthreadVideoCacheSizeInBytes: number | null;
    mediaCacheSizeInBytes: number | null;
    offthreadVideoThreads: number | null;
    onBrowserDownload: OnBrowserDownload;
    onServeUrlVisited: () => void;
    providerSpecifics: ProviderSpecifics<Provider>;
};
export declare const validateComposition: <Provider extends CloudProvider>({ serveUrl, composition, browserInstance, serializedInputPropsWithCustomSchema, envVariables, timeoutInMilliseconds, chromiumOptions, port, forceHeight, forceWidth, logLevel, server, offthreadVideoCacheSizeInBytes, onBrowserDownload, onServeUrlVisited, providerSpecifics, offthreadVideoThreads, mediaCacheSizeInBytes, }: ValidateCompositionOptions<Provider>) => Promise<VideoConfig>;
export {};
