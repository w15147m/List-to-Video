"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkVersionMismatch = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const checkVersionMismatch = ({ params, insideFunctionSpecifics, apiName, }) => {
    if (params.type === serverless_client_1.ServerlessRoutines.info) {
        return;
    }
    if (params.type === serverless_client_1.ServerlessRoutines.renderer) {
        return;
    }
    if (params.type === serverless_client_1.ServerlessRoutines.launch) {
        return;
    }
    if (params.version !== serverless_client_1.VERSION) {
        if (!params.version) {
            throw new Error(`Version mismatch: When calling ${apiName}, you called the function ${insideFunctionSpecifics.getCurrentFunctionName()} which has the version ${serverless_client_1.VERSION} but the @remotion/lambda package sent an incompatible payload: ${JSON.stringify(params)}. Expected it to contain {version: ${serverless_client_1.VERSION}}`);
        }
        throw new Error(`Version mismatch: When calling ${apiName}, you passed ${insideFunctionSpecifics.getCurrentFunctionName()} as the function, which has the version ${serverless_client_1.VERSION}, but the @remotion/lambda package you used to invoke the function has version ${params.version}. Deploy a new function and use it to call getRenderProgress(). See: https://www.remotion.dev/docs/lambda/upgrading`);
    }
};
exports.checkVersionMismatch = checkVersionMismatch;
