"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.progressHandler = void 0;
const serverless_client_1 = require("@remotion/serverless-client");
const check_version_mismatch_1 = require("./check-version-mismatch");
const progressHandler = async ({ params, options, }) => {
    var _a;
    if (params.type !== serverless_client_1.ServerlessRoutines.status) {
        throw new TypeError('Expected status type');
    }
    (0, check_version_mismatch_1.checkVersionMismatch)({
        apiName: 'getRenderProgress()',
        insideFunctionSpecifics: options.insideFunctionSpecifics,
        params,
    });
    try {
        const progress = await (0, serverless_client_1.getProgress)({
            bucketName: params.bucketName,
            renderId: params.renderId,
            expectedBucketOwner: options.expectedBucketOwner,
            region: options.insideFunctionSpecifics.getCurrentRegionInFunction(),
            memorySizeInMb: options.insideFunctionSpecifics.getCurrentMemorySizeInMb(),
            timeoutInMilliseconds: options.timeoutInMilliseconds,
            customCredentials: (_a = params.s3OutputProvider) !== null && _a !== void 0 ? _a : null,
            providerSpecifics: options.providerSpecifics,
            forcePathStyle: params.forcePathStyle,
            functionName: options.insideFunctionSpecifics.getCurrentFunctionName(),
            requestHandler: null,
        });
        return progress;
    }
    catch (err) {
        if (options.retriesRemaining === 0) {
            throw err;
        }
        if (err.message.includes('No render with ID')) {
            await new Promise((resolve) => {
                setTimeout(resolve, 1000);
            });
            return (0, exports.progressHandler)({
                params,
                options: {
                    expectedBucketOwner: options.expectedBucketOwner,
                    timeoutInMilliseconds: options.timeoutInMilliseconds,
                    retriesRemaining: options.retriesRemaining - 1,
                    providerSpecifics: options.providerSpecifics,
                    insideFunctionSpecifics: options.insideFunctionSpecifics,
                },
            });
        }
        throw err;
    }
};
exports.progressHandler = progressHandler;
