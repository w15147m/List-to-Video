import type { AudioCodec, FrameRange, LogLevel } from '@remotion/renderer';
import type { DownloadBehavior } from '@remotion/serverless-client';
import { type CloudProvider, type CustomCredentials, type PostRenderData, type Privacy, type ProviderSpecifics, type RenderMetadata, type SerializedInputProps, type ServerlessCodec } from '@remotion/serverless-client';
import type { OverallProgressHelper } from './overall-render-progress';
import type { InsideFunctionSpecifics } from './provider-implementation';
export declare const mergeChunksAndFinishRender: <Provider extends CloudProvider>(options: {
    bucketName: string;
    renderId: string;
    expectedBucketOwner: string;
    numberOfFrames: number;
    codec: ServerlessCodec;
    chunkCount: number;
    fps: number;
    numberOfGifLoops: number | null;
    audioCodec: AudioCodec | null;
    renderBucketName: string;
    customCredentials: CustomCredentials<Provider> | null;
    downloadBehavior: DownloadBehavior;
    key: string;
    privacy: Privacy;
    inputProps: SerializedInputProps;
    serializedResolvedProps: SerializedInputProps;
    renderMetadata: RenderMetadata<Provider>;
    audioBitrate: string | null;
    logLevel: LogLevel;
    framesPerLambda: number;
    binariesDirectory: string | null;
    preferLossless: boolean;
    compositionStart: number;
    outdir: string;
    files: string[];
    overallProgress: OverallProgressHelper<Provider>;
    startTime: number;
    providerSpecifics: ProviderSpecifics<Provider>;
    insideFunctionSpecifics: InsideFunctionSpecifics<Provider>;
    forcePathStyle: boolean;
    everyNthFrame: number;
    frameRange: FrameRange | null;
    storageClass: Provider["storageClass"] | null;
    requestHandler: Provider["requestHandler"] | null;
}) => Promise<PostRenderData<Provider>>;
