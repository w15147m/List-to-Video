"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatVideos = void 0;
const renderer_1 = require("@remotion/renderer");
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = require("node:path");
const serverless_client_1 = require("@remotion/serverless-client");
const concatVideos = async ({ onProgress, codec, fps, numberOfGifLoops, files, outdir, audioCodec, audioBitrate, logLevel, framesPerLambda, binariesDirectory, cancelSignal, preferLossless, metadata, insideFunctionSpecifics, everyNthFrame, frameRange, compositionDurationInFrames, }) => {
    const outfile = (0, node_path_1.join)(renderer_1.RenderInternals.tmpDir(serverless_client_1.REMOTION_CONCATENATED_TOKEN), `concat.${renderer_1.RenderInternals.getFileExtensionFromCodec(codec, audioCodec)}`);
    const combine = insideFunctionSpecifics.timer('Combine chunks', logLevel);
    const audioFiles = files.filter((f) => f.endsWith('audio'));
    const videoFiles = files.filter((f) => f.endsWith('video'));
    await renderer_1.RenderInternals.internalCombineChunks({
        outputLocation: outfile,
        onProgress,
        codec,
        fps,
        numberOfGifLoops,
        audioBitrate,
        indent: false,
        logLevel,
        binariesDirectory,
        cancelSignal,
        metadata,
        audioFiles,
        videoFiles,
        framesPerChunk: framesPerLambda,
        audioCodec,
        preferLossless,
        compositionDurationInFrames,
        everyNthFrame,
        frameRange,
    });
    combine.end();
    const cleanupChunksProm = node_fs_1.default.promises.rm(outdir, {
        recursive: true,
        force: true,
    });
    return { outfile, cleanupChunksProm };
};
exports.concatVideos = concatVideos;
