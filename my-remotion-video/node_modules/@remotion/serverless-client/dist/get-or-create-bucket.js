"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.internalGetOrCreateBucket = void 0;
const make_bucket_name_1 = require("./make-bucket-name");
const internalGetOrCreateBucket = async (params) => {
    const remotionBuckets = await params.providerSpecifics.getBuckets({
        region: params.region,
        forceBucketName: null,
        forcePathStyle: params.forcePathStyle,
        requestHandler: params.requestHandler,
    });
    if (remotionBuckets.length > 1) {
        throw new Error(`You have multiple buckets (${remotionBuckets.map((b) => b.name)}) in your S3 region (${params.region}) starting with "${params.providerSpecifics.getBucketPrefix()}". Please see https://remotion.dev/docs/lambda/multiple-buckets.`);
    }
    const { enableFolderExpiry, region } = params;
    if (remotionBuckets.length === 1) {
        const existingBucketName = remotionBuckets[0].name;
        // apply to existing bucket
        await params.providerSpecifics.applyLifeCycle({
            enableFolderExpiry: enableFolderExpiry !== null && enableFolderExpiry !== void 0 ? enableFolderExpiry : null,
            bucketName: existingBucketName,
            region,
            customCredentials: params.customCredentials,
            forcePathStyle: params.forcePathStyle,
            requestHandler: params.requestHandler,
        });
        return { bucketName: remotionBuckets[0].name, alreadyExisted: true };
    }
    const bucketName = (0, make_bucket_name_1.makeBucketName)(params.region, params.providerSpecifics);
    await params.providerSpecifics.createBucket({
        bucketName,
        region: params.region,
        forcePathStyle: params.forcePathStyle,
        skipPutAcl: params.skipPutAcl,
        requestHandler: params.requestHandler,
    });
    // apply to newly created bucket
    await params.providerSpecifics.applyLifeCycle({
        enableFolderExpiry: enableFolderExpiry !== null && enableFolderExpiry !== void 0 ? enableFolderExpiry : null,
        bucketName,
        region,
        customCredentials: params.customCredentials,
        forcePathStyle: params.forcePathStyle,
        requestHandler: params.requestHandler,
    });
    return { bucketName, alreadyExisted: false };
};
exports.internalGetOrCreateBucket = internalGetOrCreateBucket;
