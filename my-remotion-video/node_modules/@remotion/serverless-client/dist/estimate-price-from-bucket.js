"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimatePriceFromMetadata = void 0;
const calculate_chunk_times_1 = require("./calculate-chunk-times");
const estimatePriceFromMetadata = ({ renderMetadata, memorySizeInMb, diskSizeInMb, functionsInvoked, timings, region, providerSpecifics, }) => {
    var _a, _b;
    if (!renderMetadata) {
        return null;
    }
    const elapsedTime = Math.max(0, Date.now() - ((_a = renderMetadata === null || renderMetadata === void 0 ? void 0 : renderMetadata.startedDate) !== null && _a !== void 0 ? _a : 0));
    const unfinished = Math.max(0, ((_b = renderMetadata === null || renderMetadata === void 0 ? void 0 : renderMetadata.totalChunks) !== null && _b !== void 0 ? _b : 0) - timings.length);
    const timeElapsedOfUnfinished = new Array(unfinished)
        .fill(true)
        .map(() => elapsedTime)
        .reduce((a, b) => a + b, 0);
    const estimatedBillingDurationInMilliseconds = (0, calculate_chunk_times_1.calculateChunkTimes)({
        type: 'combined-time-for-cost-calculation',
        timings,
    }) + timeElapsedOfUnfinished;
    const accruedSoFar = Number(providerSpecifics
        .estimatePrice({
        region,
        durationInMilliseconds: estimatedBillingDurationInMilliseconds,
        memorySizeInMb,
        diskSizeInMb,
        lambdasInvoked: functionsInvoked,
    })
        .toPrecision(5));
    return { accruedSoFar, estimatedBillingDurationInMilliseconds };
};
exports.estimatePriceFromMetadata = estimatePriceFromMetadata;
