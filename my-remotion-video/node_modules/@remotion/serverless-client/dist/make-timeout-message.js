"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTimeoutMessage = void 0;
const constants_1 = require("./constants");
const docs_url_1 = require("./docs-url");
const MAX_MISSING_CHUNKS = 5;
const makeChunkMissingMessage = ({ missingChunks, renderMetadata, region, providerSpecifics, functionName, }) => {
    if (missingChunks.length === 0) {
        return 'All chunks have been successfully rendered, but the main function has timed out.';
    }
    return [
        `The following chunks are missing (showing ${Math.min(MAX_MISSING_CHUNKS, missingChunks.length)} out of ${missingChunks.length}):`,
        ...missingChunks
            .map((ch) => {
            const isLastChunk = ch === renderMetadata.totalChunks - 1;
            const start = ch * renderMetadata.framesPerLambda;
            const end = renderMetadata.type === 'still'
                ? 0
                : isLastChunk
                    ? renderMetadata.frameRange[1]
                    : (ch + 1) * renderMetadata.framesPerLambda - 1;
            const msg = `Chunk ${ch} (Frames ${start} - ${end})`;
            return [
                msg,
                `▸ Logs for chunk ${ch}: ${providerSpecifics.getLoggingUrlForRendererFunction({
                    functionName,
                    region,
                    rendererFunctionName: null,
                    renderId: renderMetadata.renderId,
                    chunk: ch,
                })}`,
            ].join('\n');
        })
            .slice(0, 5),
    ].join('\n');
};
const makeTimeoutMessage = ({ timeoutInMilliseconds, missingChunks, renderMetadata, renderId, functionName, region, providerSpecifics, }) => {
    const cloudWatchRendererUrl = providerSpecifics.getLoggingUrlForRendererFunction({
        renderId,
        functionName,
        region,
        rendererFunctionName: functionName,
        chunk: null,
    });
    const cloudWatchLaunchUrl = providerSpecifics.getLoggingUrlForMethod({
        renderId,
        functionName,
        method: constants_1.ServerlessRoutines.launch,
        region,
        rendererFunctionName: functionName,
    });
    const message = [
        `The main function timed out after ${timeoutInMilliseconds}ms.`,
        makeChunkMissingMessage({
            missingChunks,
            renderMetadata,
            region,
            providerSpecifics,
            functionName,
        }),
        '',
        `Consider increasing the timeout of your function.`,
        `▸ You can use the "--timeout" parameter when deploying a function via CLI, or the "timeoutInSeconds" parameter when using the deployFunction() API.`,
        `${docs_url_1.DOCS_URL}/docs/lambda/cli/functions/deploy`,
        '',
        '▸ Visit the logs for the main function:',
        cloudWatchLaunchUrl,
        '▸ Visit the logs for the renderer functions:',
        cloudWatchRendererUrl,
        '',
        '▸ Get help on debugging this error:',
        `${docs_url_1.DOCS_URL}/docs/lambda/troubleshooting/debug`,
    ].join('\n');
    return message;
};
exports.makeTimeoutMessage = makeTimeoutMessage;
