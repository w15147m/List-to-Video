"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExpectedOutName = exports.getCredentialsFromOutName = void 0;
const pure_1 = require("@remotion/renderer/pure");
const constants_1 = require("./constants");
const get_custom_out_name_1 = require("./get-custom-out-name");
const validate_outname_1 = require("./validate-outname");
const getCredentialsFromOutName = (name) => {
    var _a;
    if (typeof name === 'string') {
        return null;
    }
    if (name === null) {
        return null;
    }
    if (typeof name === 'undefined') {
        return null;
    }
    return (_a = name.s3OutputProvider) !== null && _a !== void 0 ? _a : null;
};
exports.getCredentialsFromOutName = getCredentialsFromOutName;
const getExpectedOutName = ({ renderMetadata, bucketName, customCredentials, bucketNamePrefix, }) => {
    const outNameValue = (0, get_custom_out_name_1.getCustomOutName)({
        customCredentials,
        renderMetadata,
    });
    if (outNameValue) {
        (0, validate_outname_1.validateOutname)({
            outName: outNameValue,
            codec: renderMetadata.codec,
            audioCodecSetting: renderMetadata.audioCodec,
            separateAudioTo: null,
            bucketNamePrefix,
        });
        return (0, constants_1.customOutName)(renderMetadata.renderId, bucketName, outNameValue);
    }
    if (renderMetadata.type === 'still') {
        return {
            renderBucketName: bucketName,
            key: (0, constants_1.outStillName)(renderMetadata.renderId, renderMetadata.imageFormat),
            customCredentials: null,
        };
    }
    if (renderMetadata.type === 'video') {
        return {
            renderBucketName: bucketName,
            key: (0, constants_1.outName)(renderMetadata.renderId, pure_1.NoReactAPIs.getFileExtensionFromCodec(renderMetadata.codec, renderMetadata.audioCodec)),
            customCredentials: null,
        };
    }
    throw new TypeError('no type passed');
};
exports.getExpectedOutName = getExpectedOutName;
