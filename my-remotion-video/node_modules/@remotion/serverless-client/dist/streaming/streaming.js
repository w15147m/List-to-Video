"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeStreamPayload = exports.messageTypeIdToMessageType = exports.formatMap = void 0;
const streaming_1 = require("@remotion/streaming");
const framesRendered = 'frames-rendered';
const errorOccurred = 'error-occurred';
const renderIdDetermined = 'render-id-determined';
const videoChunkRendered = 'video-chunk-rendered';
const audioChunkRendered = 'audio-chunk-rendered';
const chunkComplete = 'chunk-complete';
const stillRendered = 'still-rendered';
const functionInvoked = 'lambda-invoked';
const artifactEmitted = 'artifact-emitted';
const messageTypes = {
    '1': { type: framesRendered },
    '2': { type: errorOccurred },
    '3': { type: renderIdDetermined },
    '4': { type: videoChunkRendered },
    '5': { type: audioChunkRendered },
    '6': { type: stillRendered },
    '7': { type: chunkComplete },
    '8': { type: functionInvoked },
    '9': { type: artifactEmitted },
};
exports.formatMap = {
    [framesRendered]: 'json',
    [errorOccurred]: 'json',
    [renderIdDetermined]: 'json',
    [videoChunkRendered]: 'binary',
    [audioChunkRendered]: 'binary',
    [stillRendered]: 'json',
    [chunkComplete]: 'json',
    [functionInvoked]: 'json',
    [artifactEmitted]: 'json',
};
const messageTypeIdToMessageType = (messageTypeId) => {
    const types = messageTypes[messageTypeId];
    if (!types) {
        throw new Error(`Unknown message type id ${messageTypeId}`);
    }
    return types.type;
};
exports.messageTypeIdToMessageType = messageTypeIdToMessageType;
const messageTypeToMessageId = (messageType) => {
    const id = Object.keys(messageTypes).find((key) => messageTypes[key].type === messageType);
    if (!id) {
        throw new Error(`Unknown message type ${messageType}`);
    }
    return id;
};
const makeStreamPayload = ({ message, }) => {
    const body = exports.formatMap[message.type] === 'json'
        ? new TextEncoder().encode(JSON.stringify(message.payload))
        : message.payload;
    return (0, streaming_1.makeStreamPayloadMessage)({
        body,
        nonce: messageTypeToMessageId(message.type),
        status: 0,
    });
};
exports.makeStreamPayload = makeStreamPayload;
