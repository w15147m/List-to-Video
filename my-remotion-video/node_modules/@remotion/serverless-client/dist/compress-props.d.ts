import type { SerializedInputProps } from './constants';
import type { ProviderSpecifics } from './provider-implementation';
import type { CloudProvider } from './types';
type PropsType = 'input-props' | 'resolved-props';
export declare const serializeOrThrow: (inputProps: Record<string, unknown>, propsType: PropsType) => string;
export declare const getNeedsToUpload: <Provider extends CloudProvider>({ type, sizes, providerSpecifics, }: {
    type: "still" | "video-or-audio";
    sizes: number[];
    providerSpecifics: ProviderSpecifics<Provider>;
}) => boolean;
export declare const compressInputProps: <Provider extends CloudProvider>({ stringifiedInputProps, region, userSpecifiedBucketName, propsType, needsToUpload, providerSpecifics, forcePathStyle, skipPutAcl, requestHandler, }: {
    stringifiedInputProps: string;
    region: Provider["region"];
    userSpecifiedBucketName: string | null;
    propsType: PropsType;
    needsToUpload: boolean;
    providerSpecifics: ProviderSpecifics<Provider>;
    forcePathStyle: boolean;
    skipPutAcl: boolean;
    requestHandler: Provider["requestHandler"] | undefined;
}) => Promise<SerializedInputProps>;
export declare const decompressInputProps: <Provider extends CloudProvider>({ serialized, region, bucketName, expectedBucketOwner, propsType, providerSpecifics, forcePathStyle, requestHandler, }: {
    serialized: SerializedInputProps;
    region: Provider["region"];
    bucketName: string;
    expectedBucketOwner: string;
    propsType: PropsType;
    providerSpecifics: ProviderSpecifics<Provider>;
    forcePathStyle: boolean;
    requestHandler: Provider["requestHandler"] | null;
}) => Promise<string>;
export {};
