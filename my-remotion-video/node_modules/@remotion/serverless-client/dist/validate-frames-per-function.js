"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFramesPerFunction = void 0;
const best_frames_per_function_param_1 = require("./best-frames-per-function-param");
const constants_1 = require("./constants");
const validateFramesPerFunction = ({ framesPerFunction, durationInFrames, concurrency, }) => {
    if (concurrency !== null && framesPerFunction !== null) {
        throw new TypeError(`Both 'framesPerLambda' and 'concurrency' were set. Please use only one of them.`);
    }
    const effectiveMinimum = Math.min(constants_1.MINIMUM_FRAMES_PER_FUNCTION, durationInFrames);
    if (concurrency !== null) {
        // Validate concurrency is a number
        if (typeof concurrency !== 'number') {
            throw new TypeError(`'concurrency' needs to be a number, passed ${JSON.stringify(concurrency)}`);
        }
        // Validate concurrency is finite
        if (!Number.isFinite(concurrency)) {
            throw new TypeError(`'concurrency' needs to be finite, passed ${concurrency}`);
        }
        // Validate concurrency is not NaN
        if (Number.isNaN(concurrency)) {
            throw new TypeError(`'concurrency' needs to be a valid number, passed ${concurrency}`);
        }
        // Validate concurrency is an integer
        if (concurrency % 1 !== 0) {
            throw new TypeError(`'concurrency' needs to be an integer, passed ${concurrency}`);
        }
        // Validate concurrency is positive
        if (concurrency <= 0) {
            throw new TypeError(`'concurrency' needs to be positive, passed ${concurrency}`);
        }
        // Validate concurrency doesn't exceed maximum
        if (concurrency > constants_1.MAX_FUNCTIONS_PER_RENDER) {
            throw new TypeError(`'concurrency' cannot exceed ${constants_1.MAX_FUNCTIONS_PER_RENDER}, passed ${concurrency}`);
        }
        return Math.max(Math.ceil(durationInFrames / concurrency), effectiveMinimum);
    }
    if (framesPerFunction === null) {
        return Math.max((0, best_frames_per_function_param_1.bestFramesPerFunctionParam)(durationInFrames), effectiveMinimum);
    }
    if (framesPerFunction === undefined) {
        return Math.max((0, best_frames_per_function_param_1.bestFramesPerFunctionParam)(durationInFrames), effectiveMinimum);
    }
    if (typeof framesPerFunction !== 'number') {
        throw new TypeError(`'framesPerLambda' needs to be a number, passed ${JSON.stringify(framesPerFunction)}`);
    }
    if (!Number.isFinite(framesPerFunction)) {
        throw new TypeError(`'framesPerLambda' needs to be finite, passed ${framesPerFunction}`);
    }
    if (Number.isNaN(framesPerFunction)) {
        throw new TypeError(`'framesPerLambda' needs to be NaN, passed ${framesPerFunction}`);
    }
    if (framesPerFunction % 1 !== 0) {
        throw new TypeError(`'framesPerLambda' needs to be an integer, passed ${framesPerFunction}`);
    }
    if (framesPerFunction < effectiveMinimum) {
        throw new TypeError(`The framesPerLambda needs to be at least ${effectiveMinimum}, but is ${framesPerFunction}`);
    }
    return framesPerFunction;
};
exports.validateFramesPerFunction = validateFramesPerFunction;
