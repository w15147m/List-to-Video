"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCommandLine = void 0;
const client_1 = require("@remotion/renderer/client");
const config_1 = require("./config");
const log_1 = require("./log");
const parsed_cli_1 = require("./parsed-cli");
const { beepOnFinishOption, colorSpaceOption, disallowParallelEncodingOption, offthreadVideoCacheSizeInBytesOption, encodingBufferSizeOption, encodingMaxRateOption, deleteAfterOption, folderExpiryOption, enableMultiprocessOnLinuxOption, numberOfGifLoopsOption, x264Option, enforceAudioOption, jpegQualityOption, audioBitrateOption, videoBitrateOption, audioCodecOption, publicPathOption, audioLatencyHintOption, } = client_1.BrowserSafeApis.options;
const parseCommandLine = () => {
    if (parsed_cli_1.parsedCli['pixel-format']) {
        config_1.Config.setPixelFormat(parsed_cli_1.parsedCli['pixel-format']);
    }
    if (parsed_cli_1.parsedCli['browser-executable']) {
        config_1.Config.setBrowserExecutable(parsed_cli_1.parsedCli['browser-executable']);
    }
    if (typeof parsed_cli_1.parsedCli['bundle-cache'] !== 'undefined') {
        config_1.Config.setCachingEnabled(parsed_cli_1.parsedCli['bundle-cache'] !== 'false');
    }
    if (parsed_cli_1.parsedCli['disable-web-security']) {
        config_1.Config.setChromiumDisableWebSecurity(true);
    }
    if (parsed_cli_1.parsedCli['ignore-certificate-errors']) {
        config_1.Config.setChromiumIgnoreCertificateErrors(true);
    }
    if (parsed_cli_1.parsedCli['user-agent']) {
        config_1.Config.setChromiumUserAgent(parsed_cli_1.parsedCli['user-agent']);
    }
    if (parsed_cli_1.parsedCli.concurrency) {
        config_1.Config.setConcurrency(parsed_cli_1.parsedCli.concurrency);
    }
    if (parsed_cli_1.parsedCli.height) {
        config_1.Config.overrideHeight(parsed_cli_1.parsedCli.height);
    }
    if (parsed_cli_1.parsedCli.width) {
        config_1.Config.overrideWidth(parsed_cli_1.parsedCli.width);
    }
    if (parsed_cli_1.parsedCli.frames) {
        config_1.ConfigInternals.setFrameRangeFromCli(parsed_cli_1.parsedCli.frames);
    }
    if (parsed_cli_1.parsedCli.frame) {
        config_1.ConfigInternals.setStillFrame(Number(parsed_cli_1.parsedCli.frame));
    }
    if (parsed_cli_1.parsedCli.png) {
        throw new Error('The --png flag has been removed. Use --sequence --image-format=png from now on.');
    }
    if (parsed_cli_1.parsedCli.sequence) {
        config_1.Config.setImageSequence(true);
    }
    if (parsed_cli_1.parsedCli['every-nth-frame']) {
        config_1.Config.setEveryNthFrame(parsed_cli_1.parsedCli['every-nth-frame']);
    }
    if (parsed_cli_1.parsedCli['prores-profile']) {
        config_1.Config.setProResProfile(String(parsed_cli_1.parsedCli['prores-profile']));
    }
    if (typeof parsed_cli_1.parsedCli.quality !== 'undefined') {
        log_1.Log.warn({ indent: false, logLevel: 'info' }, 'The --quality flag has been renamed to --jpeg-quality instead.');
        config_1.Config.setJpegQuality(parsed_cli_1.parsedCli.quality);
    }
    if (typeof parsed_cli_1.parsedCli.scale !== 'undefined') {
        config_1.Config.setScale(parsed_cli_1.parsedCli.scale);
    }
    if (typeof parsed_cli_1.parsedCli['disable-keyboard-shortcuts'] !== 'undefined') {
        config_1.Config.setKeyboardShortcutsEnabled(!parsed_cli_1.parsedCli['disable-keyboard-shortcuts']);
    }
    if (typeof parsed_cli_1.parsedCli['webpack-poll'] !== 'undefined') {
        config_1.Config.setWebpackPollingInMilliseconds(parsed_cli_1.parsedCli['webpack-poll']);
    }
};
exports.parseCommandLine = parseCommandLine;
