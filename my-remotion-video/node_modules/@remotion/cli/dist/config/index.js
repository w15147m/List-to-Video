"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigInternals = exports.Config = void 0;
const browser_1 = require("./browser");
const browser_executable_1 = require("./browser-executable");
const chromium_flags_1 = require("./chromium-flags");
const concurrency_1 = require("./concurrency");
const env_file_1 = require("./env-file");
const frame_range_1 = require("./frame-range");
const image_format_1 = require("./image-format");
const image_sequence_1 = require("./image-sequence");
const output_location_1 = require("./output-location");
const override_webpack_1 = require("./override-webpack");
const pixel_format_1 = require("./pixel-format");
const preview_server_1 = require("./preview-server");
const prores_profile_1 = require("./prores-profile");
const still_frame_1 = require("./still-frame");
const webpack_caching_1 = require("./webpack-caching");
const client_1 = require("@remotion/renderer/client");
const studio_server_1 = require("@remotion/studio-server");
const browser_executable_2 = require("./browser-executable");
const buffer_state_delay_in_milliseconds_1 = require("./buffer-state-delay-in-milliseconds");
const chromium_flags_2 = require("./chromium-flags");
const concurrency_2 = require("./concurrency");
const entry_point_1 = require("./entry-point");
const env_file_2 = require("./env-file");
const every_nth_frame_1 = require("./every-nth-frame");
const ffmpeg_override_1 = require("./ffmpeg-override");
const frame_range_2 = require("./frame-range");
const height_1 = require("./height");
const image_sequence_2 = require("./image-sequence");
const keyboard_shortcuts_1 = require("./keyboard-shortcuts");
const metadata_1 = require("./metadata");
const number_of_shared_audio_tags_1 = require("./number-of-shared-audio-tags");
const open_browser_1 = require("./open-browser");
const output_location_2 = require("./output-location");
const override_webpack_2 = require("./override-webpack");
const pixel_format_2 = require("./pixel-format");
const preview_server_2 = require("./preview-server");
const prores_profile_2 = require("./prores-profile");
const user_agent_1 = require("./user-agent");
const webpack_caching_2 = require("./webpack-caching");
const webpack_poll_1 = require("./webpack-poll");
const width_1 = require("./width");
const { offthreadVideoCacheSizeInBytesOption, x264Option, audioBitrateOption, videoBitrateOption, scaleOption, crfOption, jpegQualityOption, enforceAudioOption, overwriteOption, chromeModeOption, mutedOption, videoCodecOption, colorSpaceOption, disallowParallelEncodingOption, deleteAfterOption, folderExpiryOption, enableMultiprocessOnLinuxOption, glOption, headlessOption, numberOfGifLoopsOption, beepOnFinishOption, encodingMaxRateOption, encodingBufferSizeOption, reproOption, enableLambdaInsights, logLevelOption, delayRenderTimeoutInMillisecondsOption, publicDirOption, binariesDirectoryOption, preferLosslessOption, forSeamlessAacConcatenationOption, audioCodecOption, publicPathOption, hardwareAccelerationOption, audioLatencyHintOption, enableCrossSiteIsolationOption, imageSequencePatternOption, } = client_1.BrowserSafeApis.options;
exports.Config = {
    get Bundling() {
        throw new Error('The config format has changed. Change `Config.Bundling.*()` calls to `Config.*()` in your config file.');
    },
    get Rendering() {
        throw new Error('The config format has changed. Change `Config.Rendering.*()` calls to `Config.*()` in your config file.');
    },
    get Output() {
        throw new Error('The config format has changed. Change `Config.Output.*()` calls to `Config.*()` in your config file.');
    },
    get Log() {
        throw new Error('The config format has changed. Change `Config.Log.*()` calls to `Config.*()` in your config file.');
    },
    get Preview() {
        throw new Error('The config format has changed. Change `Config.Preview.*()` calls to `Config.*()` in your config file.');
    },
    get Puppeteer() {
        throw new Error('The config format has changed. Change `Config.Puppeteer.*()` calls to `Config.*()` in your config file.');
    },
    setMaxTimelineTracks: studio_server_1.StudioServerInternals.setMaxTimelineTracks,
    setKeyboardShortcutsEnabled: keyboard_shortcuts_1.setKeyboardShortcutsEnabled,
    setNumberOfSharedAudioTags: number_of_shared_audio_tags_1.setNumberOfSharedAudioTags,
    setWebpackPollingInMilliseconds: webpack_poll_1.setWebpackPollingInMilliseconds,
    setShouldOpenBrowser: open_browser_1.setShouldOpenBrowser,
    setBufferStateDelayInMilliseconds: buffer_state_delay_in_milliseconds_1.setBufferStateDelayInMilliseconds,
    overrideWebpackConfig: override_webpack_2.overrideWebpackConfig,
    setCachingEnabled: webpack_caching_2.setWebpackCaching,
    setPort: preview_server_2.setPort,
    setStudioPort: preview_server_2.setStudioPort,
    setRendererPort: preview_server_2.setRendererPort,
    setPublicDir: publicDirOption.setConfig,
    setEntryPoint: entry_point_1.setEntryPoint,
    setLevel: logLevelOption.setConfig,
    setBrowserExecutable: browser_executable_2.setBrowserExecutable,
    setTimeoutInMilliseconds: delayRenderTimeoutInMillisecondsOption.setConfig,
    setDelayRenderTimeoutInMilliseconds: delayRenderTimeoutInMillisecondsOption.setConfig,
    setChromiumDisableWebSecurity: chromium_flags_2.setChromiumDisableWebSecurity,
    setChromiumIgnoreCertificateErrors: chromium_flags_2.setChromiumIgnoreCertificateErrors,
    setChromiumHeadlessMode: headlessOption.setConfig,
    setChromiumOpenGlRenderer: glOption.setConfig,
    setChromiumUserAgent: user_agent_1.setChromiumUserAgent,
    setDotEnvLocation: env_file_2.setDotEnvLocation,
    setConcurrency: concurrency_2.setConcurrency,
    setChromiumMultiProcessOnLinux: enableMultiprocessOnLinuxOption.setConfig,
    setQuality: () => {
        throw new Error('setQuality() has been renamed - use setJpegQuality() instead.');
    },
    setImageFormat: () => {
        throw new Error('Config.setImageFormat() has been renamed - use Config.setVideoImageFormat() instead (default "jpeg"). For rendering stills, use Config.setStillImageFormat() (default "png")');
    },
    setJpegQuality: jpegQualityOption.setConfig,
    setStillImageFormat: image_format_1.setStillImageFormat,
    setVideoImageFormat: image_format_1.setVideoImageFormat,
    setMetadata: metadata_1.setMetadata,
    setEncodingMaxRate: encodingMaxRateOption.setConfig,
    setEncodingBufferSize: encodingBufferSizeOption.setConfig,
    setFrameRange: frame_range_2.setFrameRange,
    setScale: scaleOption.setConfig,
    setEveryNthFrame: every_nth_frame_1.setEveryNthFrame,
    setNumberOfGifLoops: numberOfGifLoopsOption.setConfig,
    setMuted: mutedOption.setConfig,
    setEnforceAudioTrack: enforceAudioOption.setConfig,
    setOutputLocation: output_location_2.setOutputLocation,
    setOverwriteOutput: overwriteOption.setConfig,
    setChromeMode: chromeModeOption.setConfig,
    setPixelFormat: pixel_format_2.setPixelFormat,
    setCodec: videoCodecOption.setConfig,
    setCrf: crfOption.setConfig,
    setImageSequence: image_sequence_2.setImageSequence,
    setProResProfile: prores_profile_2.setProResProfile,
    setX264Preset: x264Option.setConfig,
    setAudioBitrate: audioBitrateOption.setConfig,
    setVideoBitrate: videoBitrateOption.setConfig,
    setAudioLatencyHint: audioLatencyHintOption.setConfig,
    setForSeamlessAacConcatenation: forSeamlessAacConcatenationOption.setConfig,
    overrideHeight: height_1.overrideHeight,
    overrideWidth: width_1.overrideWidth,
    overrideFfmpegCommand: ffmpeg_override_1.setFfmpegOverrideFunction,
    setAudioCodec: audioCodecOption.setConfig,
    setOffthreadVideoCacheSizeInBytes: (size) => {
        offthreadVideoCacheSizeInBytesOption.setConfig(size);
    },
    setDeleteAfter: deleteAfterOption.setConfig,
    setColorSpace: colorSpaceOption.setConfig,
    setDisallowParallelEncoding: disallowParallelEncodingOption.setConfig,
    setBeepOnFinish: beepOnFinishOption.setConfig,
    setEnableFolderExpiry: folderExpiryOption.setConfig,
    setRepro: reproOption.setConfig,
    setLambdaInsights: enableLambdaInsights.setConfig,
    setBinariesDirectory: binariesDirectoryOption.setConfig,
    setPreferLosslessAudio: preferLosslessOption.setConfig,
    setPublicPath: publicPathOption.setConfig,
    setImageSequencePattern: imageSequencePatternOption.setConfig,
    setHardwareAcceleration: hardwareAccelerationOption.setConfig,
    setEnableCrossSiteIsolation: enableCrossSiteIsolationOption.setConfig,
};
exports.ConfigInternals = {
    getRange: frame_range_1.getRange,
    getBrowser: browser_1.getBrowser,
    getPixelFormat: pixel_format_1.getPixelFormat,
    getProResProfile: prores_profile_1.getProResProfile,
    getBrowserExecutable: browser_executable_1.getBrowserExecutable,
    getStudioPort: preview_server_1.getStudioPort,
    getRendererPortFromConfigFile: preview_server_1.getRendererPortFromConfigFile,
    getRendererPortFromConfigFileAndCliFlag: preview_server_1.getRendererPortFromConfigFileAndCliFlag,
    getChromiumDisableWebSecurity: chromium_flags_1.getChromiumDisableWebSecurity,
    getIgnoreCertificateErrors: chromium_flags_1.getIgnoreCertificateErrors,
    getEveryNthFrame: every_nth_frame_1.getEveryNthFrame,
    getConcurrency: concurrency_1.getConcurrency,
    getStillFrame: still_frame_1.getStillFrame,
    getShouldOutputImageSequence: image_sequence_1.getShouldOutputImageSequence,
    getDotEnvLocation: env_file_1.getDotEnvLocation,
    getUserPreferredStillImageFormat: image_format_1.getUserPreferredStillImageFormat,
    getUserPreferredVideoImageFormat: image_format_1.getUserPreferredVideoImageFormat,
    getWebpackOverrideFn: override_webpack_1.getWebpackOverrideFn,
    getWebpackCaching: webpack_caching_1.getWebpackCaching,
    getOutputLocation: output_location_1.getOutputLocation,
    setFrameRangeFromCli: frame_range_1.setFrameRangeFromCli,
    setStillFrame: still_frame_1.setStillFrame,
    getMaxTimelineTracks: studio_server_1.StudioServerInternals.getMaxTimelineTracks,
    defaultOverrideFunction: override_webpack_1.defaultOverrideFunction,
    getKeyboardShortcutsEnabled: keyboard_shortcuts_1.getKeyboardShortcutsEnabled,
    getFfmpegOverrideFunction: ffmpeg_override_1.getFfmpegOverrideFunction,
    getHeight: height_1.getHeight,
    getWidth: width_1.getWidth,
    getMetadata: metadata_1.getMetadata,
    getEntryPoint: entry_point_1.getEntryPoint,
    getWebpackPolling: webpack_poll_1.getWebpackPolling,
    getShouldOpenBrowser: open_browser_1.getShouldOpenBrowser,
    getChromiumUserAgent: user_agent_1.getChromiumUserAgent,
    getBufferStateDelayInMilliseconds: buffer_state_delay_in_milliseconds_1.getBufferStateDelayInMilliseconds,
    getOutputCodecOrUndefined: client_1.BrowserSafeApis.getOutputCodecOrUndefined,
};
