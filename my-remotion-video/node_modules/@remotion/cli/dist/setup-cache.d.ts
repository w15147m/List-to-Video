import type { LogLevel } from '@remotion/renderer';
import type { BundlingState, CopyingState } from '@remotion/studio-server';
import type { GitSource } from '@remotion/studio-shared';
export declare const bundleOnCliOrTakeServeUrl: ({ fullPath, remotionRoot, publicDir, onProgress, indentOutput, logLevel, onDirectoryCreated, quietProgress, quietFlag, outDir, gitSource, bufferStateDelayInMilliseconds, maxTimelineTracks, publicPath, audioLatencyHint, }: {
    fullPath: string;
    remotionRoot: string;
    publicDir: string | null;
    onProgress: (params: {
        bundling: BundlingState;
        copying: CopyingState;
    }) => void;
    indentOutput: boolean;
    logLevel: LogLevel;
    onDirectoryCreated: (path: string) => void;
    quietProgress: boolean;
    quietFlag: boolean;
    outDir: string | null;
    gitSource: GitSource | null;
    bufferStateDelayInMilliseconds: number | null;
    maxTimelineTracks: number | null;
    publicPath: string | null;
    audioLatencyHint: AudioContextLatencyCategory | null;
}) => Promise<{
    urlOrBundle: string;
    cleanup: () => void;
}>;
export declare const bundleOnCli: ({ fullPath, remotionRoot, publicDir, onProgressCallback, indent, logLevel, onDirectoryCreated, quietProgress, quietFlag, outDir, gitSource, maxTimelineTracks, bufferStateDelayInMilliseconds, publicPath, audioLatencyHint, }: {
    fullPath: string;
    remotionRoot: string;
    publicDir: string | null;
    onProgressCallback: (params: {
        bundling: BundlingState;
        copying: CopyingState;
    }) => void;
    indent: boolean;
    logLevel: LogLevel;
    onDirectoryCreated: (path: string) => void;
    quietProgress: boolean;
    quietFlag: boolean;
    outDir: string | null;
    gitSource: GitSource | null;
    maxTimelineTracks: number | null;
    bufferStateDelayInMilliseconds: number | null;
    publicPath: string | null;
    audioLatencyHint: AudioContextLatencyCategory | null;
}) => Promise<string>;
