import type { AudioCodec, BrowserExecutable, Codec, OpenGlRenderer, PixelFormat, ProResProfile, StillImageFormat, VideoImageFormat } from '@remotion/renderer';
import type { TypeOfOption } from '@remotion/renderer/client';
declare const beepOnFinishOption: {
    name: string;
    cliFlag: "beep-on-finish";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: null;
    docLink: string;
    type: boolean;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: boolean;
        source: string;
    };
    setConfig(value: boolean): void;
}, colorSpaceOption: {
    name: string;
    cliFlag: "color-space";
    description: () => import("react/jsx-runtime").JSX.Element;
    docLink: string;
    ssrName: string;
    type: import("@remotion/renderer").ColorSpace | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: import("@remotion/renderer").ColorSpace;
    };
    setConfig: (value: "default" | "bt709" | "bt2020-ncl" | null) => void;
}, disallowParallelEncodingOption: {
    name: string;
    cliFlag: "disallow-parallel-encoding";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: boolean;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: boolean;
        source: string;
    };
    setConfig(value: boolean): void;
}, offthreadVideoCacheSizeInBytesOption: {
    name: string;
    cliFlag: "offthreadvideo-cache-size-in-bytes";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "offthreadVideoCacheSizeInBytes";
    docLink: string;
    type: number | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: number;
    } | {
        source: string;
        value: null;
    };
    setConfig: (size: number | null) => void;
}, encodingBufferSizeOption: {
    name: string;
    cliFlag: "buffer-size";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "encodingBufferSize";
    docLink: string;
    type: string | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: string;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (bitrate: string | null) => void;
}, encodingMaxRateOption: {
    name: string;
    cliFlag: "max-rate";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "encodingMaxRate";
    docLink: string;
    type: string | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: string;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (newMaxRate: string | null) => void;
}, deleteAfterOption: {
    name: string;
    cliFlag: "delete-after";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "deleteAfter";
    docLink: string;
    type: import("@remotion/renderer").DeleteAfter | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: import("@remotion/renderer").DeleteAfter;
    } | {
        source: string;
        value: null;
    };
    setConfig: (value: import("@remotion/renderer").DeleteAfter | null) => void;
}, folderExpiryOption: {
    name: string;
    cliFlag: "enable-folder-expiry";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "enableFolderExpiry";
    docLink: string;
    type: boolean | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: boolean | null;
    };
    setConfig: (value: boolean | null) => void;
}, enableMultiprocessOnLinuxOption: {
    name: string;
    cliFlag: "enable-multiprocess-on-linux";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: boolean;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: boolean;
    };
    setConfig: (value: boolean) => void;
}, numberOfGifLoopsOption: {
    name: string;
    cliFlag: "number-of-gif-loops";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "numberOfGifLoops";
    docLink: string;
    type: number | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: number;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (newLoop: import("@remotion/renderer").NumberOfGifLoops) => void;
}, x264Option: {
    name: string;
    cliFlag: "x264-preset";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "x264Preset";
    docLink: string;
    type: import("@remotion/renderer").X264Preset | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: import("@remotion/renderer").X264Preset;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (profile: import("@remotion/renderer").X264Preset | null) => void;
}, enforceAudioOption: {
    name: string;
    cliFlag: "enforce-audio-track";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: boolean;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: true;
    } | {
        source: string;
        value: false;
    };
    setConfig: (value: boolean) => void;
}, jpegQualityOption: {
    name: string;
    cliFlag: "jpeg-quality";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: number;
    setConfig: (q: number | undefined) => void;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: number;
    };
}, audioBitrateOption: {
    name: string;
    cliFlag: "audio-bitrate";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: string;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: string;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (value: string | null) => void;
}, videoBitrateOption: {
    name: string;
    cliFlag: "video-bitrate";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: string;
    docLink: string;
    type: string | null;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: string | null;
    };
    setConfig: (bitrate: string | null) => void;
}, audioCodecOption: {
    cliFlag: "audio-codec";
    setConfig: (audioCodec: "mp3" | "aac" | "pcm-16" | "opus" | null) => void;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: import("@remotion/renderer/dist/options/audio-codec").AudioCodec;
    } | {
        source: string;
        value: null;
    };
    description: () => string;
    docLink: string;
    name: string;
    ssrName: "audioCodec";
    type: import("@remotion/renderer/dist/options/audio-codec").AudioCodec;
}, publicPathOption: {
    name: string;
    cliFlag: "public-path";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "publicPath";
    docLink: string;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        source: string;
        value: string;
    } | {
        source: string;
        value: null;
    };
    setConfig: (value: string | null) => void;
    type: string | null;
}, audioLatencyHintOption: {
    name: string;
    cliFlag: "audio-latency-hint";
    description: () => import("react/jsx-runtime").JSX.Element;
    ssrName: "audioLatencyHint";
    docLink: string;
    type: AudioContextLatencyCategory;
    getValue: ({ commandLine }: {
        commandLine: Record<string, unknown>;
    }) => {
        value: AudioContextLatencyCategory;
        source: string;
    } | {
        value: null;
        source: string;
    };
    setConfig: (profile: AudioContextLatencyCategory | null) => void;
};
export type CommandLineOptions = {
    ['browser-executable']: BrowserExecutable;
    ['pixel-format']: PixelFormat;
    ['image-format']: VideoImageFormat | StillImageFormat;
    ['prores-profile']: ProResProfile;
    [x264Option.cliFlag]: TypeOfOption<typeof x264Option>;
    ['bundle-cache']: string;
    ['env-file']: string;
    ['ignore-certificate-errors']: string;
    ['disable-web-security']: string;
    ['every-nth-frame']: number;
    [numberOfGifLoopsOption.cliFlag]: TypeOfOption<typeof numberOfGifLoopsOption>;
    ['number-of-shared-audio-tags']: number;
    [offthreadVideoCacheSizeInBytesOption.cliFlag]: TypeOfOption<typeof offthreadVideoCacheSizeInBytesOption>;
    [colorSpaceOption.cliFlag]: TypeOfOption<typeof colorSpaceOption>;
    [disallowParallelEncodingOption.cliFlag]: TypeOfOption<typeof disallowParallelEncodingOption>;
    [beepOnFinishOption.cliFlag]: TypeOfOption<typeof beepOnFinishOption>;
    version: string;
    codec: Codec;
    concurrency: number;
    timeout: number;
    config: string;
    ['public-dir']: string;
    [audioBitrateOption.cliFlag]: TypeOfOption<typeof audioBitrateOption>;
    [videoBitrateOption.cliFlag]: TypeOfOption<typeof videoBitrateOption>;
    [encodingBufferSizeOption.cliFlag]: TypeOfOption<typeof encodingBufferSizeOption>;
    [encodingMaxRateOption.cliFlag]: TypeOfOption<typeof encodingMaxRateOption>;
    [audioCodecOption.cliFlag]: AudioCodec;
    [publicPathOption.cliFlag]: string;
    crf: number;
    force: boolean;
    output: string | undefined;
    overwrite: boolean;
    png: boolean;
    props: string;
    quality: number;
    [jpegQualityOption.cliFlag]: TypeOfOption<typeof jpegQualityOption>;
    frames: string | number;
    scale: number;
    sequence: boolean;
    quiet: boolean;
    q: boolean;
    log: string;
    help: boolean;
    port: number;
    frame: string | number;
    ['disable-headless']: boolean;
    ['disable-keyboard-shortcuts']: boolean;
    muted: boolean;
    height: number;
    width: number;
    runs: number;
    concurrencies: string;
    [enforceAudioOption.cliFlag]: TypeOfOption<typeof enforceAudioOption>;
    gl: OpenGlRenderer;
    ['package-manager']: string;
    ['webpack-poll']: number;
    ['no-open']: boolean;
    ['browser']: string;
    ['browser-args']: string;
    ['user-agent']: string;
    ['out-dir']: string;
    [audioLatencyHintOption.cliFlag]: AudioContextLatencyCategory;
    ipv4: boolean;
    [deleteAfterOption.cliFlag]: TypeOfOption<typeof deleteAfterOption>;
    [folderExpiryOption.cliFlag]: TypeOfOption<typeof folderExpiryOption>;
    [enableMultiprocessOnLinuxOption.cliFlag]: TypeOfOption<typeof enableMultiprocessOnLinuxOption>;
    repro: boolean;
    'image-sequence-pattern': string;
};
export declare const parseCommandLine: () => void;
export {};
