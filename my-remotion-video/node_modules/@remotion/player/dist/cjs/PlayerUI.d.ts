import React from 'react';
import type { RenderMuteButton } from './MediaVolumeSlider.js';
import type { RenderFullscreenButton, RenderPlayPauseButton } from './PlayerControls.js';
import type { BrowserMediaControlsBehavior } from './browser-mediasession.js';
import type { PlayerRef } from './player-methods.js';
import type { RenderVolumeSlider } from './render-volume-slider.js';
export type ErrorFallback = (info: {
    error: Error;
}) => React.ReactNode;
export type RenderLoading = (canvas: {
    height: number;
    width: number;
    isBuffering: boolean;
}) => React.ReactNode;
export type RenderPoster = RenderLoading;
export type PosterFillMode = 'player-size' | 'composition-size';
declare const _default: React.ForwardRefExoticComponent<{
    readonly controls: boolean;
    readonly loop: boolean;
    readonly autoPlay: boolean;
    readonly allowFullscreen: boolean;
    readonly inputProps: Record<string, unknown>;
    readonly showVolumeControls: boolean;
    readonly style?: React.CSSProperties;
    readonly clickToPlay: boolean;
    readonly doubleClickToFullscreen: boolean;
    readonly spaceKeyToPlayOrPause: boolean;
    readonly errorFallback: ErrorFallback;
    readonly playbackRate: number;
    readonly renderLoading: RenderLoading | undefined;
    readonly renderPoster: RenderPoster | undefined;
    readonly className: string | undefined;
    readonly moveToBeginningWhenEnded: boolean;
    readonly showPosterWhenPaused: boolean;
    readonly showPosterWhenEnded: boolean;
    readonly showPosterWhenUnplayed: boolean;
    readonly showPosterWhenBuffering: boolean;
    readonly showPosterWhenBufferingAndPaused: boolean;
    readonly inFrame: number | null;
    readonly outFrame: number | null;
    readonly initiallyShowControls: number | boolean;
    readonly renderPlayPauseButton: RenderPlayPauseButton | null;
    readonly renderFullscreen: RenderFullscreenButton | null;
    readonly renderMuteButton: RenderMuteButton | null;
    readonly renderVolumeSlider: RenderVolumeSlider | null;
    readonly alwaysShowControls: boolean;
    readonly showPlaybackRateControl: boolean | number[];
    readonly posterFillMode: PosterFillMode;
    readonly bufferStateDelayInMilliseconds: number;
    readonly hideControlsWhenPointerDoesntMove: boolean | number;
    readonly overflowVisible: boolean;
    readonly browserMediaControlsBehavior: BrowserMediaControlsBehavior;
    readonly overrideInternalClassName: string | undefined;
    readonly noSuspense: boolean;
} & React.RefAttributes<PlayerRef>>;
export default _default;
