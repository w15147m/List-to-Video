import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// ../../node_modules/.bun/mime-db@1.51.0/node_modules/mime-db/db.json
var require_db = __commonJS((exports, module) => {
  module.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/3gpphal+json": {
      source: "iana",
      compressible: true
    },
    "application/3gpphalforms+json": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/ace+cbor": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/at+jwt": {
      source: "iana"
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/captive+json": {
      source: "iana",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/clr": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["es", "ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/elm+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/elm+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/express": {
      source: "iana",
      extensions: ["exp"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/jscalendar+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/missing-blocks+cbor-seq": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/oauth-authz-req+jwt": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/opc-nodeset+xml": {
      source: "iana",
      compressible: true
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p21": {
      source: "iana"
    },
    "application/p21+zip": {
      source: "iana",
      compressible: false
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana"
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.cyn": {
      source: "iana",
      charset: "7-BIT"
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sarif+json": {
      source: "iana",
      compressible: true
    },
    "application/sarif-external-properties+json": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spdx+json": {
      source: "iana",
      compressible: true
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/token-introspection+jwt": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana",
      extensions: ["trig"]
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ubjson": {
      compressible: false,
      extensions: ["ubj"]
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["td"]
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.5gnas": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gtpc": {
      source: "iana"
    },
    "application/vnd.3gpp.interworking-data": {
      source: "iana"
    },
    "application/vnd.3gpp.lpp": {
      source: "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ngap": {
      source: "iana"
    },
    "application/vnd.3gpp.pfcp": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.s1ap": {
      source: "iana"
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.age": {
      source: "iana",
      extensions: ["age"]
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.arrow.file": {
      source: "iana"
    },
    "application/vnd.apache.arrow.stream": {
      source: "iana"
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["key"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.cryptomator.encrypted": {
      source: "iana"
    },
    "application/vnd.cryptomator.vault": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.cyclonedx+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cyclonedx+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.d3m-dataset": {
      source: "iana"
    },
    "application/vnd.d3m-problem": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana",
      extensions: ["dbf"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujifilm.fb.docuworks": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.slides": {
      source: "iana"
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana",
      extensions: ["mvt"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.nacamar.ybrid+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nebumind.line": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+cbor": {
      source: "iana"
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.opentimestamps.ots": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana",
      extensions: ["rar"]
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.resilient.logic": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.seis+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.sycle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veritone.aion+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.dpp": {
      source: "iana"
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      source: "iana",
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-iwork-keynote-sffkey": {
      extensions: ["key"]
    },
    "application/x-iwork-numbers-sffnumbers": {
      extensions: ["numbers"]
    },
    "application/x-iwork-pages-sffpages": {
      extensions: ["pages"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xsl", "xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana",
      extensions: ["amr"]
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx", "opus"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/scip": {
      source: "iana"
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sofa": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/tsvcis": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana"
    },
    "image/avcs": {
      source: "iana"
    },
    "image/avif": {
      source: "iana",
      compressible: false,
      extensions: ["avif"]
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/ktx2": {
      source: "iana",
      extensions: ["ktx2"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      compressible: true,
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      compressible: true,
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.pco.b16": {
      source: "iana",
      extensions: ["b16"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/e57": {
      source: "iana"
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/step": {
      source: "iana"
    },
    "model/step+xml": {
      source: "iana",
      compressible: true,
      extensions: ["stpx"]
    },
    "model/step+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpz"]
    },
    "model/step-xml+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpxz"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.pytha.pyox": {
      source: "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.sap.vds": {
      source: "iana",
      extensions: ["vds"]
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/cql": {
      source: "iana"
    },
    "text/cql-expression": {
      source: "iana"
    },
    "text/cql-identifier": {
      source: "iana"
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fhirpath": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/gff3": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shaclc": {
      source: "iana"
    },
    "text/shex": {
      source: "iana",
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/spdx": {
      source: "iana",
      extensions: ["spdx"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
      source: "iana",
      extensions: ["ged"]
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hans": {
      source: "iana"
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      compressible: true,
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/av1": {
      source: "iana"
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/ffv1": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana",
      extensions: ["m4s"]
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/jxsv": {
      source: "iana"
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/scip": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/vp9": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// ../../node_modules/.bun/mime-db@1.51.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports, module) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  module.exports = require_db();
});

// ../../node_modules/.bun/mime-types@2.1.34/node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports) => {
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var db = require_mime_db();
  var extname = __require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
  function charset(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf("charset") === -1) {
      var charset2 = exports.charset(mime);
      if (charset2)
        mime += "; charset=" + charset2.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path) {
    if (!path || typeof path !== "string") {
      return false;
    }
    var extension2 = extname("x." + path).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports.types[extension2] || false;
  }
  function populateMaps(extensions, types) {
    var preference = ["nginx", "apache", undefined, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0;i < exts.length; i++) {
        var extension2 = exts[i];
        if (types[extension2]) {
          var from = preference.indexOf(db[types[extension2]].source);
          var to = preference.indexOf(mime.source);
          if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types[extension2] = type;
      }
    });
  }
});

// package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    repository: {
      url: "https://github.com/remotion-dev/remotion/tree/main/packages/lambda"
    },
    name: "@remotion/lambda",
    version: "4.0.366",
    description: "Render Remotion videos on AWS Lambda",
    main: "dist/index.js",
    sideEffects: false,
    scripts: {
      formatting: "prettier --experimental-cli src --check",
      lint: "eslint src",
      testlambda: "exit 0",
      test: "bun test src/test/unit",
      make: "tsc -d && bun --env-file=../.env.bundle bundle.ts",
      makeruntime: "bun build.ts",
      prepublishOnly: "bun build.ts && bun ensure-version-match.js"
    },
    author: "Jonny Burger <jonny@remotion.dev>",
    license: "MIT",
    dependencies: {
      "@aws-sdk/s3-request-presigner": "3.787.0",
      "@aws-sdk/middleware-flexible-checksums": "3.787.0",
      "@aws-sdk/client-lambda": "3.787.0",
      "@aws-sdk/client-s3": "3.787.0",
      "@aws-sdk/client-sts": "3.787.0",
      "@aws-sdk/client-iam": "3.787.0",
      "@aws-sdk/client-cloudwatch-logs": "3.787.0",
      "@aws-sdk/client-service-quotas": "3.787.0",
      "@aws-sdk/lib-storage": "3.787.0",
      "@remotion/bundler": "workspace:*",
      "@remotion/cli": "workspace:*",
      "@remotion/lambda-client": "workspace:*",
      "@remotion/renderer": "workspace:*",
      "@remotion/serverless": "workspace:*",
      "@remotion/streaming": "workspace:*",
      "@smithy/abort-controller": "4.0.1",
      remotion: "workspace:*",
      zod: "catalog:"
    },
    devDependencies: {
      "@remotion/bundler": "workspace:*",
      "@types/express": "^5.0.0",
      express: "4.21.0",
      "@remotion/compositor-linux-arm64-gnu": "workspace:*",
      "@remotion/eslint-config-internal": "workspace:*",
      "mime-types": "2.1.34",
      "@types/mime-types": "2.1.1",
      "@types/minimist": "1.2.2",
      "@types/prompt": "^1.1.0",
      eslint: "catalog:",
      next: "catalog:",
      pureimage: "0.4.13",
      "zip-lib": "^0.7.2",
      "@types/node": "catalog:"
    },
    peerDependencies: {
      "@remotion/bundler": "workspace:*"
    },
    publishConfig: {
      access: "public"
    },
    exports: {
      "./package.json": "./package.json",
      ".": {
        types: "./dist/index.d.ts",
        require: "./dist/index.js",
        module: "./dist/esm/index.mjs",
        import: "./dist/esm/index.mjs"
      },
      "./client": {
        types: "./dist/client.d.ts",
        require: "./dist/client.js",
        module: "./dist/esm/client.mjs",
        import: "./dist/esm/client.mjs"
      },
      "./policies": {
        types: "./dist/policies.d.ts",
        require: "./dist/policies.js",
        module: "./dist/esm/policies.mjs",
        import: "./dist/esm/policies.mjs"
      }
    },
    typesVersions: {
      ">=1.0": {
        client: [
          "./dist/client.d.ts"
        ],
        policies: [
          "./dist/policies.d.ts"
        ]
      }
    },
    homepage: "https://www.remotion.dev/docs/lambda"
  };
});

// src/index.ts
import {
  deleteFunction as deleteFunction3,
  deleteRender,
  getRenderProgress as deprecatedGetRenderProgress,
  getSites as deprecatedGetSites,
  presignUrl as deprecatedPresignUrl,
  renderMediaOnLambda as deprecatedRenderMediaOnLambda,
  renderStillOnLambda as deprecatedRenderStillOnLambda,
  estimatePrice,
  getAwsClient,
  getCompositionsOnLambda as getCompositionsOnLambda2,
  getFunctions,
  renderVideoOnLambda,
  validateWebhookSignature
} from "@remotion/lambda-client";
import { NoReactInternals as NoReactInternals6 } from "remotion/no-react";

// src/api/delete-site.ts
import { LambdaClientInternals } from "@remotion/lambda-client";
import { getSitesKey } from "@remotion/lambda-client/constants";
var internalDeleteSite = async ({
  bucketName,
  siteName,
  region,
  onAfterItemDeleted,
  providerSpecifics,
  forcePathStyle,
  requestHandler
}) => {
  const accountId = await providerSpecifics.getAccountId({ region });
  let files = await providerSpecifics.listObjects({
    bucketName,
    prefix: `${getSitesKey(siteName)}/`,
    region,
    expectedBucketOwner: accountId,
    forcePathStyle,
    requestHandler: null
  });
  let totalSize = 0;
  while (files.length > 0) {
    totalSize += files.reduce((a, b) => {
      return a + (b.Size ?? 0);
    }, 0);
    await LambdaClientInternals.cleanItems({
      list: files.map((f) => f.Key),
      bucket: bucketName,
      onAfterItemDeleted: onAfterItemDeleted ?? (() => {
        return;
      }),
      onBeforeItemDeleted: () => {
        return;
      },
      region,
      providerSpecifics,
      forcePathStyle,
      requestHandler
    });
    files = await providerSpecifics.listObjects({
      bucketName,
      prefix: `${getSitesKey(siteName)}/`,
      region,
      expectedBucketOwner: accountId,
      forcePathStyle,
      requestHandler
    });
  }
  return {
    totalSizeInBytes: totalSize
  };
};
var deleteSite = (props) => {
  return internalDeleteSite({
    ...props,
    onAfterItemDeleted: props.onAfterItemDeleted ?? null,
    forcePathStyle: props.forcePathStyle ?? false,
    providerSpecifics: LambdaClientInternals.awsImplementation,
    requestHandler: props.requestHandler ?? null
  });
};

// src/api/deploy-function.ts
import {
  LambdaClientInternals as LambdaClientInternals5,
  speculateFunctionName
} from "@remotion/lambda-client";
import { DEFAULT_EPHEMERAL_STORAGE_IN_MB } from "@remotion/lambda-client/constants";
import { wrapWithErrorHandling } from "@remotion/renderer/error-handling";
import { VERSION as VERSION2 } from "remotion/version";

// src/functions/full-client-implementation.ts
import { bundle } from "@remotion/bundler";

// src/api/create-function.ts
import {
  CreateLogGroupCommand,
  PutRetentionPolicyCommand
} from "@aws-sdk/client-cloudwatch-logs";
import {
  CreateFunctionCommand,
  GetFunctionCommand,
  PutFunctionEventInvokeConfigCommand,
  PutRuntimeManagementConfigCommand,
  TagResourceCommand
} from "@aws-sdk/client-lambda";
import {
  LambdaClientInternals as LambdaClientInternals3
} from "@remotion/lambda-client";
import { LOG_GROUP_PREFIX as LOG_GROUP_PREFIX3 } from "@remotion/lambda-client/constants";
import { RenderInternals } from "@remotion/renderer";
import { readFileSync } from "node:fs";
import { VERSION } from "remotion/version";

// src/shared/get-layers.ts
import { LambdaClientInternals as LambdaClientInternals2 } from "@remotion/lambda-client";

// src/shared/hosted-layers.ts
var REMOTION_HOSTED_LAYER_ARN = `arn:aws:lambda:*:678892195805:layer:remotion-binaries-*`;
var hostedLayers = {
  "ap-northeast-1": [
    {
      layerArn: "arn:aws:lambda:ap-northeast-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-south-1": [
    {
      layerArn: "arn:aws:lambda:ap-south-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:ap-south-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:ap-south-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-south-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-south-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-southeast-1": [
    {
      layerArn: "arn:aws:lambda:ap-southeast-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-southeast-2": [
    {
      layerArn: "arn:aws:lambda:ap-southeast-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "eu-central-1": [
    {
      layerArn: "arn:aws:lambda:eu-central-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 52
    },
    {
      layerArn: "arn:aws:lambda:eu-central-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 53
    },
    {
      layerArn: "arn:aws:lambda:eu-central-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 16
    },
    {
      layerArn: "arn:aws:lambda:eu-central-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 16
    },
    {
      layerArn: "arn:aws:lambda:eu-central-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 16
    }
  ],
  "eu-west-1": [
    {
      layerArn: "arn:aws:lambda:eu-west-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 23
    },
    {
      layerArn: "arn:aws:lambda:eu-west-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:eu-west-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "eu-west-2": [
    {
      layerArn: "arn:aws:lambda:eu-west-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:eu-west-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:eu-west-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "us-east-1": [
    {
      layerArn: "arn:aws:lambda:us-east-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 27
    },
    {
      layerArn: "arn:aws:lambda:us-east-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 35
    },
    {
      layerArn: "arn:aws:lambda:us-east-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-east-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-east-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "us-east-2": [
    {
      layerArn: "arn:aws:lambda:us-east-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:us-east-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:us-east-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-east-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-east-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "us-west-2": [
    {
      layerArn: "arn:aws:lambda:us-west-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 22
    },
    {
      layerArn: "arn:aws:lambda:us-west-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 26
    },
    {
      layerArn: "arn:aws:lambda:us-west-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-west-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-west-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "af-south-1": [
    {
      layerArn: "arn:aws:lambda:af-south-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:af-south-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:af-south-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:af-south-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:af-south-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-east-1": [
    {
      layerArn: "arn:aws:lambda:ap-east-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-east-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-east-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-east-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-east-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-northeast-2": [
    {
      layerArn: "arn:aws:lambda:ap-northeast-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-northeast-3": [
    {
      layerArn: "arn:aws:lambda:ap-northeast-3:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-3:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-3:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-3:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:ap-northeast-3:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ca-central-1": [
    {
      layerArn: "arn:aws:lambda:ca-central-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:ca-central-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:ca-central-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:ca-central-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:ca-central-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 9
    }
  ],
  "eu-north-1": [
    {
      layerArn: "arn:aws:lambda:eu-north-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-north-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-north-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-north-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-north-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "eu-south-1": [
    {
      layerArn: "arn:aws:lambda:eu-south-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-south-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-south-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-south-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-south-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "eu-west-3": [
    {
      layerArn: "arn:aws:lambda:eu-west-3:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-west-3:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:eu-west-3:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-3:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:eu-west-3:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "me-south-1": [
    {
      layerArn: "arn:aws:lambda:me-south-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:me-south-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:me-south-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:me-south-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:me-south-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 9
    }
  ],
  "sa-east-1": [
    {
      layerArn: "arn:aws:lambda:sa-east-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:sa-east-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 18
    },
    {
      layerArn: "arn:aws:lambda:sa-east-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:sa-east-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 9
    },
    {
      layerArn: "arn:aws:lambda:sa-east-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 9
    }
  ],
  "us-west-1": [
    {
      layerArn: "arn:aws:lambda:us-west-1:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:us-west-1:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 19
    },
    {
      layerArn: "arn:aws:lambda:us-west-1:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-west-1:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 10
    },
    {
      layerArn: "arn:aws:lambda:us-west-1:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 10
    }
  ],
  "ap-southeast-4": [
    {
      layerArn: "arn:aws:lambda:ap-southeast-4:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 7
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-4:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 7
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-4:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-4:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-4:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 6
    }
  ],
  "ap-southeast-5": [
    {
      layerArn: "arn:aws:lambda:ap-southeast-5:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-5:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-5:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-5:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:ap-southeast-5:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 6
    }
  ],
  "eu-central-2": [
    {
      layerArn: "arn:aws:lambda:eu-central-2:678892195805:layer:remotion-binaries-fonts-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:eu-central-2:678892195805:layer:remotion-binaries-chromium-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:eu-central-2:678892195805:layer:remotion-binaries-emoji-apple-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:eu-central-2:678892195805:layer:remotion-binaries-emoji-google-arm64",
      version: 6
    },
    {
      layerArn: "arn:aws:lambda:eu-central-2:678892195805:layer:remotion-binaries-cjk-arm64",
      version: 6
    }
  ]
};

// src/shared/get-layers.ts
var validateRuntimePreference = (option) => {
  if (!option) {
    return;
  }
  if (!LambdaClientInternals2.runtimePreferenceOptions.includes(option)) {
    throw new Error(`Invalid runtime preference ${option}. Must be one of ${LambdaClientInternals2.runtimePreferenceOptions.join(", ")}`);
  }
};
var getLayers = ({
  option,
  region
}) => {
  const layers = hostedLayers[region];
  return layers.filter((layer) => {
    if (layer.layerArn.includes("emoji-apple")) {
      return option === "apple-emojis";
    }
    if (layer.layerArn.includes("emoji-google")) {
      return option !== "apple-emojis";
    }
    if (layer.layerArn.includes("cjk")) {
      return option !== "apple-emojis";
    }
    if (layer.layerArn.includes("chromium")) {
      return true;
    }
    if (layer.layerArn.includes("fonts")) {
      return true;
    }
    throw new Error("Unhandled layer type ");
  });
};

// src/shared/lambda-insights-extensions.ts
var lambdaInsightsExtensions = {
  "us-east-1": "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "us-east-2": "arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension-Arm64:7",
  "us-west-1": "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension-Arm64:3",
  "us-west-2": "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "af-south-1": "arn:aws:lambda:af-south-1:012438385374:layer:LambdaInsightsExtension-Arm64:2",
  "ap-east-1": "arn:aws:lambda:ap-east-1:519774774795:layer:LambdaInsightsExtension-Arm64:2",
  "ap-south-1": "arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension-Arm64:7",
  "ap-northeast-3": "arn:aws:lambda:ap-northeast-3:194566237122:layer:LambdaInsightsExtension-Arm64:2",
  "ap-northeast-2": "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension-Arm64:4",
  "ap-southeast-1": "arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "ap-southeast-2": "arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "ap-northeast-1": "arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension-Arm64:11",
  "ca-central-1": "arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension-Arm64:3",
  "eu-central-1": "arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "eu-west-1": "arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "eu-west-2": "arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension-Arm64:5",
  "eu-south-1": "arn:aws:lambda:eu-south-1:339249233099:layer:LambdaInsightsExtension-Arm64:2",
  "eu-west-3": "arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension-Arm64:3",
  "eu-north-1": "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension-Arm64:3",
  "me-south-1": "arn:aws:lambda:me-south-1:285320876703:layer:LambdaInsightsExtension-Arm64:2",
  "sa-east-1": "arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension-Arm64:3",
  "ap-southeast-4": null,
  "ap-southeast-5": null,
  "eu-central-2": null
};

// src/api/iam-validation/role-permissions.ts
import {
  LAMBDA_INSIGHTS_PREFIX,
  LOG_GROUP_PREFIX,
  REMOTION_BUCKET_PREFIX,
  RENDER_FN_PREFIX
} from "@remotion/lambda-client/constants";
var rolePermissions = [
  {
    actions: ["s3:ListAllMyBuckets"],
    resource: ["*"]
  },
  {
    actions: [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:PutBucketAcl",
      "s3:GetObject",
      "s3:DeleteObject",
      "s3:PutObjectAcl",
      "s3:PutObject",
      "s3:GetBucketLocation"
    ],
    resource: [`arn:aws:s3:::${REMOTION_BUCKET_PREFIX}*`]
  },
  {
    actions: ["lambda:InvokeFunction"],
    resource: [`arn:aws:lambda:*:*:function:${RENDER_FN_PREFIX}*`]
  },
  {
    actions: ["logs:CreateLogGroup"],
    resource: [`arn:aws:logs:*:*:log-group:${LAMBDA_INSIGHTS_PREFIX}`]
  },
  {
    actions: ["logs:CreateLogStream", "logs:PutLogEvents"],
    resource: [
      `arn:aws:logs:*:*:log-group:${LOG_GROUP_PREFIX}${RENDER_FN_PREFIX}*`,
      `arn:aws:logs:*:*:log-group:${LAMBDA_INSIGHTS_PREFIX}:*`
    ]
  }
];

// src/api/iam-validation/user-permissions.ts
import {
  LOG_GROUP_PREFIX as LOG_GROUP_PREFIX2,
  REMOTION_BUCKET_PREFIX as REMOTION_BUCKET_PREFIX2,
  RENDER_FN_PREFIX as RENDER_FN_PREFIX2
} from "@remotion/lambda-client/constants";
var requiredPermissions = [
  {
    id: "HandleQuotas",
    actions: [
      "servicequotas:GetServiceQuota",
      "servicequotas:GetAWSDefaultServiceQuota",
      "servicequotas:RequestServiceQuotaIncrease",
      "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota"
    ],
    resource: ["*"]
  },
  {
    id: "PermissionValidation",
    actions: ["iam:SimulatePrincipalPolicy"],
    resource: ["*"]
  },
  {
    id: "LambdaInvokation",
    actions: ["iam:PassRole"],
    resource: ["arn:aws:iam::*:role/remotion-lambda-role"]
  },
  {
    id: "Storage",
    actions: [
      "s3:GetObject",
      "s3:DeleteObject",
      "s3:PutObjectAcl",
      "s3:PutObject",
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:PutBucketAcl",
      "s3:DeleteBucket",
      "s3:PutBucketOwnershipControls",
      "s3:PutBucketPublicAccessBlock",
      "s3:PutLifecycleConfiguration"
    ],
    resource: [`arn:aws:s3:::${REMOTION_BUCKET_PREFIX2}*`]
  },
  {
    id: "BucketListing",
    actions: ["s3:ListAllMyBuckets"],
    resource: ["*"]
  },
  {
    id: "FunctionListing",
    actions: ["lambda:ListFunctions", "lambda:GetFunction"],
    resource: ["*"]
  },
  {
    id: "FunctionManagement",
    actions: [
      "lambda:InvokeAsync",
      "lambda:InvokeFunction",
      "lambda:CreateFunction",
      "lambda:DeleteFunction",
      "lambda:PutFunctionEventInvokeConfig",
      "lambda:PutRuntimeManagementConfig",
      "lambda:TagResource"
    ],
    resource: [`arn:aws:lambda:*:*:function:${RENDER_FN_PREFIX2}*`]
  },
  {
    id: "LogsRetention",
    actions: ["logs:CreateLogGroup", "logs:PutRetentionPolicy"],
    resource: [
      `arn:aws:logs:*:*:log-group:${LOG_GROUP_PREFIX2}${RENDER_FN_PREFIX2}*`
    ]
  },
  {
    id: "FetchBinaries",
    actions: ["lambda:GetLayerVersion"],
    resource: [
      REMOTION_HOSTED_LAYER_ARN,
      "arn:aws:lambda:*:580247275435:layer:LambdaInsightsExtension*"
    ]
  }
];

// src/api/iam-validation/suggested-policy.ts
var suggestedPolicy = {
  Version: "2012-10-17",
  Statement: [
    ...requiredPermissions.map((per) => {
      return {
        Sid: per.id,
        Effect: "Allow",
        Action: per.actions,
        Resource: per.resource
      };
    })
  ]
};
var suggestedRolePolicy = {
  Version: "2012-10-17",
  Statement: [
    ...rolePermissions.map((per, i) => {
      return {
        Sid: String(i),
        Effect: "Allow",
        Action: per.actions,
        Resource: per.resource
      };
    })
  ]
};
var getUserPolicy = () => JSON.stringify(suggestedPolicy, null, 2);
var ROLE_NAME = "remotion-lambda-role";
var getRolePolicy = () => JSON.stringify(suggestedRolePolicy, null, 2);

// src/api/create-function.ts
var createFunction = async ({
  createCloudWatchLogGroup,
  region,
  zipFile,
  functionName,
  accountId,
  memorySizeInMb,
  timeoutInSeconds,
  alreadyCreated,
  retentionInDays,
  ephemerealStorageInMb,
  customRoleArn,
  enableLambdaInsights,
  logLevel,
  vpcSubnetIds,
  vpcSecurityGroupIds,
  runtimePreference,
  requestHandler
}) => {
  if (createCloudWatchLogGroup) {
    RenderInternals.Log.verbose({ indent: false, logLevel }, "Creating CloudWatch group");
    try {
      await LambdaClientInternals3.getCloudWatchLogsClient(region, requestHandler).send(new CreateLogGroupCommand({
        logGroupName: `${LOG_GROUP_PREFIX3}${functionName}`
      }));
      RenderInternals.Log.verbose({ indent: false, logLevel }, "CloudWatch group successfully created");
    } catch (_err) {
      const err = _err;
      if (err.message.includes("log group already exists")) {
        RenderInternals.Log.verbose({ indent: false, logLevel }, "CloudWatch group already existed.");
      } else {
        throw err;
      }
    }
    RenderInternals.Log.verbose({ indent: false, logLevel }, "Adding retention policy to the CloudWatch group");
    await LambdaClientInternals3.getCloudWatchLogsClient(region, requestHandler).send(new PutRetentionPolicyCommand({
      logGroupName: `${LOG_GROUP_PREFIX3}${functionName}`,
      retentionInDays
    }));
    RenderInternals.Log.verbose({ indent: false, logLevel }, `Set retention to ${retentionInDays} days`);
  }
  if (alreadyCreated) {
    RenderInternals.Log.verbose({ indent: false, logLevel }, `Function ${functionName} already existed`);
    return { FunctionName: functionName };
  }
  const defaultRoleName = `arn:aws:iam::${accountId}:role/${ROLE_NAME}`;
  const layers = getLayers({
    option: runtimePreference,
    region
  });
  let vpcConfig;
  if (vpcSubnetIds && vpcSecurityGroupIds) {
    vpcConfig = {
      SubnetIds: vpcSubnetIds.split(","),
      SecurityGroupIds: vpcSecurityGroupIds.split(",")
    };
  }
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Deploying new Lambda function");
  const insightsLayer = enableLambdaInsights ? lambdaInsightsExtensions[region] : null;
  if (enableLambdaInsights && !insightsLayer) {
    throw new Error(`Lambda Insights is not supported by AWS in region ${region}. Please disable Lambda Insights. See http://remotion.dev/docs/lambda/insights#unsupported-regions`);
  }
  const { FunctionName, FunctionArn } = await LambdaClientInternals3.getLambdaClient(region, undefined, requestHandler).send(new CreateFunctionCommand({
    Code: {
      ZipFile: new Uint8Array(readFileSync(zipFile))
    },
    FunctionName: functionName,
    Handler: "index.handler",
    Role: customRoleArn ?? defaultRoleName,
    Runtime: "nodejs20.x",
    Description: "Renders a Remotion video.",
    MemorySize: memorySizeInMb,
    Timeout: timeoutInSeconds,
    Layers: layers.map(({ layerArn, version }) => `${layerArn}:${version}`).concat(insightsLayer ? [insightsLayer] : []),
    Architectures: ["arm64"],
    EphemeralStorage: {
      Size: ephemerealStorageInMb
    },
    VpcConfig: vpcConfig
  }));
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Function deployed. Adding tags...");
  try {
    await LambdaClientInternals3.getLambdaClient(region, undefined, requestHandler).send(new TagResourceCommand({
      Resource: FunctionArn,
      Tags: {
        "remotion-lambda": "true",
        "remotion-version": VERSION,
        "remotion-memory-in-mb": String(memorySizeInMb),
        "remotion-timeout-in-seconds": String(timeoutInSeconds),
        "remotion-ephemereal-storage-in-mb": String(ephemerealStorageInMb)
      }
    }));
  } catch (err) {
    if (err.name.includes("AccessDenied")) {
      RenderInternals.Log.verbose({ indent: false, logLevel }, "Did not have permission to tag the function. Skipping.");
    } else {
      throw err;
    }
  }
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Disabling function retries (Remotion handles retries itself)...");
  await LambdaClientInternals3.getLambdaClient(region, undefined, requestHandler).send(new PutFunctionEventInvokeConfigCommand({
    MaximumRetryAttempts: 0,
    FunctionName
  }));
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Set function retries to 0.");
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Waiting for the function to be ready...");
  let state = "Pending";
  while (state === "Pending") {
    const getFn = await LambdaClientInternals3.getLambdaClient(region, undefined, requestHandler).send(new GetFunctionCommand({
      FunctionName
    }));
    await new Promise((resolve) => {
      setTimeout(() => resolve(), 1000);
    });
    state = getFn.Configuration?.State;
  }
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Function is now ready.");
  RenderInternals.Log.verbose({ indent: false, logLevel }, "Locking the runtime version of the function...");
  const RuntimeVersionArn = `arn:aws:lambda:${region}::runtime:da57c20c4b965d5b75540f6865a35fc8030358e33ec44ecfed33e90901a27a72`;
  try {
    await LambdaClientInternals3.getLambdaClient(region, undefined, requestHandler).send(new PutRuntimeManagementConfigCommand({
      FunctionName,
      UpdateRuntimeOn: "Manual",
      RuntimeVersionArn
    }));
  } catch {
    console.warn("⚠️ Could not lock the runtime version. We recommend to update your policies to prevent your functions from breaking in the future in case the AWS runtime changes. See https://remotion.dev/docs/lambda/feb-2023-incident for an example on how to update your policy.");
  }
  RenderInternals.Log.verbose({ indent: false, logLevel }, `Function runtime is locked to ${RuntimeVersionArn}`);
  return { FunctionName };
};

// src/api/upload-dir.ts
var import_mime_types = __toESM(require_mime_types(), 1);
import { Upload } from "@aws-sdk/lib-storage";
import { LambdaClientInternals as LambdaClientInternals4 } from "@remotion/lambda-client";
import { createReadStream, promises as fs } from "node:fs";
import path2 from "node:path";

// src/shared/make-s3-key.ts
import path from "node:path";
var makeS3Key = (folder, dir, filePath) => {
  return `${folder}/${path.relative(dir, filePath).split(path.sep).join("/")}`;
};

// src/api/upload-dir.ts
async function getFiles(directory, originalDirectory, toUpload) {
  const dirents = await fs.readdir(directory, { withFileTypes: true });
  const _files = await Promise.all(dirents.map((dirent) => {
    const res = path2.resolve(directory, dirent.name);
    return [dirent, res];
  }).filter(([dirent, res]) => {
    const relative = path2.relative(originalDirectory, res);
    if (dirent.isDirectory()) {
      return true;
    }
    if (!toUpload.includes(relative)) {
      return false;
    }
    return true;
  }).map(async ([dirent, res]) => {
    const { size } = await fs.stat(res);
    return dirent.isDirectory() ? getFiles(res, originalDirectory, toUpload) : [
      {
        name: res,
        size
      }
    ];
  }));
  return _files.flat(1);
}
var limit = LambdaClientInternals4.pLimit(5);
var uploadDir = async ({
  bucket,
  region,
  localDir,
  onProgress,
  keyPrefix,
  privacy,
  toUpload,
  forcePathStyle,
  requestHandler
}) => {
  const files = await getFiles(localDir, localDir, toUpload);
  const progresses = {};
  for (const file of files) {
    progresses[file.name] = 0;
  }
  const client = LambdaClientInternals4.getS3Client({
    region,
    customCredentials: null,
    forcePathStyle,
    requestHandler
  });
  const uploadWithoutRetry = async (filePath) => {
    const Key = makeS3Key(keyPrefix, localDir, filePath.name);
    const Body = createReadStream(filePath.name);
    const ContentType = import_mime_types.default.lookup(Key) || "application/octet-stream";
    const ACL = privacy === "no-acl" ? undefined : privacy === "private" ? "private" : "public-read";
    const parallelUploadsS3 = new Upload({
      client,
      queueSize: 2,
      partSize: 40 * 1024 * 1024,
      params: {
        Key,
        Bucket: bucket,
        Body,
        ACL,
        ContentType
      }
    });
    parallelUploadsS3.on("httpUploadProgress", (progress) => {
      progresses[filePath.name] = progress.loaded ?? 0;
    });
    const prom = await parallelUploadsS3.done();
    return prom;
  };
  const uploadWithRetry = async (filePath) => {
    let error = null;
    for (let i = 0;i < 3; i++) {
      try {
        return await uploadWithoutRetry(filePath);
      } catch (err) {
        error = err;
      }
    }
    if (error) {
      throw error;
    }
  };
  const uploadAll = (async () => {
    const uploads = files.map((filePath) => limit(async () => {
      await uploadWithRetry(filePath);
    }));
    await Promise.all(uploads);
  })();
  const interval = setInterval(() => {
    onProgress({
      totalSize: files.map((f) => f.size).reduce((a, b) => a + b, 0),
      sizeUploaded: Object.values(progresses).reduce((a, b) => a + b, 0),
      totalFiles: files.length,
      filesUploaded: files.filter((f) => progresses[f.name] === f.size).length
    });
  }, 1000);
  await uploadAll;
  clearInterval(interval);
};

// src/shared/read-dir.ts
import * as fs3 from "node:fs";
import * as path3 from "node:path";

// src/shared/get-etag.ts
import crypto from "node:crypto";
import fs2 from "node:fs";
var chunk = 1024 * 1024 * 5;
var md5 = (data) => crypto.createHash("md5").update(data).digest("hex");
var getEtagOfFile = (filePath, onProgress) => {
  const calc = async () => {
    const size = await fs2.promises.stat(filePath).then((s) => s.size);
    if (size <= chunk) {
      const buffer = await fs2.promises.readFile(filePath);
      return `"${md5(buffer)}"`;
    }
    const stream = fs2.createReadStream(filePath, {
      highWaterMark: chunk
    });
    const md5Chunks = [];
    const chunksNumber = Math.ceil(size / chunk);
    return new Promise((resolve, reject) => {
      stream.on("data", (c) => {
        md5Chunks.push(md5(c));
        onProgress(c.length);
      });
      stream.on("end", () => {
        resolve(`"${md5(Buffer.from(md5Chunks.join(""), "hex"))}-${chunksNumber}"`);
      });
      stream.on("error", (err) => {
        reject(err);
      });
    });
  };
  let tag = null;
  return async () => {
    if (tag !== null) {
      return tag;
    }
    tag = await calc();
    return tag;
  };
};

// src/shared/read-dir.ts
var readDirectory = ({
  dir,
  etags,
  originalDir,
  onProgress
}) => {
  const files = fs3.readdirSync(dir);
  for (const file of files) {
    if (file.startsWith(".DS_Store"))
      continue;
    const filePath = path3.join(dir, file);
    if (fs3.lstatSync(filePath).isDirectory()) {
      etags = {
        ...etags,
        ...readDirectory({
          dir: filePath,
          etags,
          originalDir,
          onProgress
        })
      };
      continue;
    }
    if (fs3.lstatSync(filePath).isSymbolicLink()) {
      const realPath = fs3.realpathSync(filePath);
      etags[path3.relative(originalDir, filePath)] = getEtagOfFile(realPath, onProgress);
    } else {
      etags[path3.relative(originalDir, filePath)] = getEtagOfFile(filePath, onProgress);
    }
  }
  return etags;
};

// src/functions/full-client-implementation.ts
var awsFullClientSpecifics = {
  bundleSite: bundle,
  id: "__remotion_full_client_specifics",
  readDirectory,
  uploadDir,
  createFunction
};

// src/shared/function-zip-path.ts
import path4 from "node:path";
var b = "../";
var a = "remotionlambda-arm64.zip";
var FUNCTION_ZIP_ARM64 = path4.resolve(__require.resolve(`../` + b), "..", "..", a);

// src/shared/validate-custom-role-arn.ts
var validateCustomRoleArn = (customRoleArn) => {
  if (typeof customRoleArn !== "undefined" && typeof customRoleArn !== "string") {
    throw new TypeError('A custom role ARN must either be "undefined" or a string, but instead got: ' + JSON.stringify(customRoleArn));
  }
};

// src/shared/validate-retention-period.ts
var MIN_RETENTION_PERIOD = 1;
var MAX_RETENTION_PERIOD = 10 * 365;
var validateCloudWatchRetentionPeriod = (period) => {
  if (period === null || period === undefined) {
    return;
  }
  if (typeof period !== "number") {
    throw new TypeError(`CloudWatch retention period should be a number, got: ${JSON.stringify(period)}`);
  }
  if (Number.isNaN(period)) {
    throw new TypeError(`CloudWatch retention period must be an integer, but is NaN`);
  }
  if (!Number.isFinite(period)) {
    throw new TypeError(`CloudWatch retention period must be finite, but is ${period}`);
  }
  if (period % 1 !== 0) {
    throw new TypeError(`CloudWatch retention period must be an integer, but is ${period}`);
  }
  if (period < MIN_RETENTION_PERIOD) {
    throw new Error(`CloudWatch retention period must be at least ${MIN_RETENTION_PERIOD}, but is ${period}`);
  }
  if (period > MAX_RETENTION_PERIOD) {
    throw new Error(`CloudWatch retention period must be at most ${MAX_RETENTION_PERIOD}, but is ${period}`);
  }
};

// src/shared/validate-timeout.ts
import { MAX_TIMEOUT, MIN_TIMEOUT } from "@remotion/lambda-client/constants";
var validateTimeout = (timeoutInSeconds) => {
  if (typeof timeoutInSeconds !== "number") {
    throw new TypeError(`parameter 'timeoutInSeconds' must be a number, but got a ${typeof timeoutInSeconds}`);
  }
  if (Number.isNaN(timeoutInSeconds)) {
    throw new TypeError(`parameter 'timeoutInSeconds' must not be NaN, but is`);
  }
  if (!Number.isFinite(timeoutInSeconds)) {
    throw new TypeError(`parameter 'timeoutInSeconds' must be finite, but is ${timeoutInSeconds}`);
  }
  if (timeoutInSeconds < MIN_TIMEOUT || timeoutInSeconds > MAX_TIMEOUT) {
    throw new TypeError(`parameter 'timeoutInSeconds' must be between ${MIN_TIMEOUT} and ${MAX_TIMEOUT}, but got ${timeoutInSeconds}`);
  }
  if (timeoutInSeconds % 1 !== 0) {
    throw new TypeError(`parameter 'timeoutInSeconds' must be an integer but got ${timeoutInSeconds}`);
  }
};

// src/api/deploy-function.ts
var internalDeployFunction = async (params) => {
  LambdaClientInternals5.validateMemorySize(params.memorySizeInMb);
  validateTimeout(params.timeoutInSeconds);
  LambdaClientInternals5.validateAwsRegion(params.region);
  validateCloudWatchRetentionPeriod(params.cloudWatchLogRetentionPeriodInDays);
  LambdaClientInternals5.validateDiskSizeInMb(params.diskSizeInMb);
  validateCustomRoleArn(params.customRoleArn);
  validateRuntimePreference(params.runtimePreference);
  const functionName = speculateFunctionName({
    diskSizeInMb: params.diskSizeInMb,
    memorySizeInMb: params.memorySizeInMb,
    timeoutInSeconds: params.timeoutInSeconds
  });
  const accountId = await params.providerSpecifics.getAccountId({
    region: params.region
  });
  const fns = await params.providerSpecifics.getFunctions({
    compatibleOnly: true,
    region: params.region
  });
  const alreadyDeployed = fns.find((f) => f.version === VERSION2 && f.memorySizeInMb === params.memorySizeInMb && f.timeoutInSeconds === params.timeoutInSeconds && f.diskSizeInMb === params.diskSizeInMb);
  const created = await params.fullClientSpecifics.createFunction({
    createCloudWatchLogGroup: params.createCloudWatchLogGroup,
    region: params.region,
    zipFile: FUNCTION_ZIP_ARM64,
    functionName,
    accountId,
    memorySizeInMb: params.memorySizeInMb,
    timeoutInSeconds: params.timeoutInSeconds,
    retentionInDays: params.cloudWatchLogRetentionPeriodInDays ?? LambdaClientInternals5.DEFAULT_CLOUDWATCH_RETENTION_PERIOD,
    alreadyCreated: Boolean(alreadyDeployed),
    ephemerealStorageInMb: params.diskSizeInMb,
    customRoleArn: params.customRoleArn,
    enableLambdaInsights: params.enableLambdaInsights ?? false,
    logLevel: params.logLevel,
    vpcSubnetIds: params.vpcSubnetIds,
    vpcSecurityGroupIds: params.vpcSecurityGroupIds,
    runtimePreference: params.runtimePreference,
    requestHandler: null
  });
  if (!created.FunctionName) {
    throw new Error("Lambda was created but has no name");
  }
  return {
    functionName: created.FunctionName,
    alreadyExisted: Boolean(alreadyDeployed)
  };
};
var errorHandled = wrapWithErrorHandling(internalDeployFunction);
var deployFunction = ({
  createCloudWatchLogGroup,
  memorySizeInMb,
  region,
  timeoutInSeconds,
  cloudWatchLogRetentionPeriodInDays,
  customRoleArn,
  enableLambdaInsights,
  indent,
  logLevel,
  enableV5Runtime,
  vpcSubnetIds,
  vpcSecurityGroupIds,
  runtimePreference,
  diskSizeInMb,
  requestHandler
}) => {
  if (enableV5Runtime) {
    console.warn("The `enableV5Runtime` option is now on by default. No need to specify it anymore.");
  }
  return errorHandled({
    indent: indent ?? false,
    logLevel: logLevel ?? "info",
    createCloudWatchLogGroup,
    customRoleArn: customRoleArn ?? undefined,
    diskSizeInMb: diskSizeInMb ?? DEFAULT_EPHEMERAL_STORAGE_IN_MB,
    enableLambdaInsights: enableLambdaInsights ?? false,
    memorySizeInMb,
    region,
    timeoutInSeconds,
    cloudWatchLogRetentionPeriodInDays,
    vpcSubnetIds,
    vpcSecurityGroupIds,
    runtimePreference: runtimePreference ?? "default",
    providerSpecifics: LambdaClientInternals5.awsImplementation,
    fullClientSpecifics: awsFullClientSpecifics,
    requestHandler
  });
};

// src/api/deploy-site.ts
import { LambdaClientInternals as LambdaClientInternals6 } from "@remotion/lambda-client";
import {
  getSitesKey as getSitesKey2,
  REMOTION_BUCKET_PREFIX as REMOTION_BUCKET_PREFIX3
} from "@remotion/lambda-client/constants";
import { wrapWithErrorHandling as wrapWithErrorHandling2 } from "@remotion/renderer/error-handling";
import { validateBucketName, validatePrivacy } from "@remotion/serverless";
import fs4 from "node:fs";

// src/shared/get-s3-operations.ts
var getS3DiffOperations = async ({
  objects,
  bundle: bundle2,
  prefix,
  onProgress,
  fullClientSpecifics
}) => {
  let totalBytes = 0;
  const dir = fullClientSpecifics.readDirectory({
    dir: bundle2,
    etags: {},
    originalDir: bundle2,
    onProgress: (bytes) => {
      totalBytes += bytes;
      onProgress(totalBytes);
    }
  });
  const filesOnS3ButNotLocal = [];
  for (const fileOnS3 of objects) {
    const key = fileOnS3.Key?.substring(prefix.length + 1);
    if (!dir[key]) {
      filesOnS3ButNotLocal.push(fileOnS3);
    }
  }
  const localFilesNotOnS3 = [];
  for (const d of Object.keys(dir)) {
    let found;
    for (const o of objects) {
      const key = o.Key?.substring(prefix.length + 1);
      if (key === d && o.ETag === await dir[d]()) {
        found = o;
        break;
      }
    }
    if (!found) {
      localFilesNotOnS3.push(d);
    }
  }
  const existing = [];
  for (const d of Object.keys(dir)) {
    for (const o of objects) {
      const key = o.Key?.substring(prefix.length + 1);
      if (key === d && o.ETag === await dir[d]()) {
        existing.push(d);
        break;
      }
    }
  }
  return {
    toDelete: filesOnS3ButNotLocal,
    toUpload: localFilesNotOnS3,
    existingCount: existing.length
  };
};

// src/shared/validate-site-name.ts
var validateSiteName = (siteName) => {
  if (typeof siteName === "undefined") {
    return;
  }
  if (typeof siteName !== "string") {
    throw new TypeError(`The 'projectName' argument must be a string if provided, but is ${JSON.stringify(siteName)}`);
  }
  if (!siteName.match(/([0-9a-zA-Z-!_.*'()]+)/g)) {
    throw new Error("The `siteName` must match the RegExp `/([0-9a-zA-Z-!_.*'()]+)/g`. You passed: " + siteName + ". Check for invalid characters.");
  }
};

// src/api/deploy-site.ts
var mandatoryDeploySite = async ({
  bucketName,
  entryPoint,
  siteName,
  options,
  region,
  privacy,
  gitSource,
  throwIfSiteExists,
  providerSpecifics,
  forcePathStyle,
  fullClientSpecifics,
  requestHandler
}) => {
  LambdaClientInternals6.validateAwsRegion(region);
  validateBucketName({
    bucketName,
    bucketNamePrefix: REMOTION_BUCKET_PREFIX3,
    options: {
      mustStartWithRemotion: !options?.bypassBucketNameValidation
    }
  });
  validateSiteName(siteName);
  validatePrivacy(privacy, false);
  const accountId = await providerSpecifics.getAccountId({ region });
  const bucketExists = await providerSpecifics.bucketExists({
    bucketName,
    region,
    expectedBucketOwner: accountId,
    forcePathStyle,
    requestHandler
  });
  if (!bucketExists) {
    throw new Error(`No bucket with the name ${bucketName} exists`);
  }
  const subFolder = getSitesKey2(siteName);
  const [files, bundled] = await Promise.all([
    providerSpecifics.listObjects({
      bucketName,
      expectedBucketOwner: accountId,
      region,
      prefix: `${subFolder}/`,
      forcePathStyle,
      requestHandler
    }),
    fullClientSpecifics.bundleSite({
      publicPath: `/${subFolder}/`,
      webpackOverride: options?.webpackOverride ?? ((f) => f),
      enableCaching: options?.enableCaching ?? true,
      publicDir: options?.publicDir ?? null,
      rootDir: options?.rootDir ?? null,
      ignoreRegisterRootWarning: options?.ignoreRegisterRootWarning ?? false,
      onProgress: options?.onBundleProgress ?? (() => {
        return;
      }),
      entryPoint,
      gitSource,
      bufferStateDelayInMilliseconds: null,
      maxTimelineTracks: null,
      onDirectoryCreated: () => {
        return;
      },
      onPublicDirCopyProgress: () => {
        return;
      },
      onSymlinkDetected: () => {
        return;
      },
      outDir: null
    })
  ]);
  if (throwIfSiteExists && files.length > 0) {
    throw new Error("`throwIfSiteExists` was passed as true, but there are already files in this folder: " + files.slice(0, 5).map((f) => f.Key).join(", "));
  }
  options.onDiffingProgress?.(0, false);
  let totalBytes = 0;
  const { toDelete, toUpload, existingCount } = await getS3DiffOperations({
    objects: files,
    bundle: bundled,
    prefix: subFolder,
    onProgress: (bytes) => {
      totalBytes = bytes;
      options.onDiffingProgress?.(bytes, false);
    },
    fullClientSpecifics
  });
  options.onDiffingProgress?.(totalBytes, true);
  await Promise.all([
    fullClientSpecifics.uploadDir({
      bucket: bucketName,
      region,
      localDir: bundled,
      onProgress: options?.onUploadProgress ?? (() => {
        return;
      }),
      keyPrefix: subFolder,
      privacy: privacy ?? "public",
      toUpload,
      forcePathStyle,
      requestHandler
    }),
    Promise.all(toDelete.map((d) => {
      return providerSpecifics.deleteFile({
        bucketName,
        customCredentials: null,
        key: d.Key,
        region,
        forcePathStyle,
        requestHandler
      });
    }))
  ]);
  if (fs4.existsSync(bundled)) {
    fs4.rmSync(bundled, {
      recursive: true
    });
  }
  return {
    serveUrl: LambdaClientInternals6.makeS3ServeUrl({
      bucketName,
      subFolder,
      region
    }),
    siteName,
    stats: {
      uploadedFiles: toUpload.length,
      deletedFiles: toDelete.length,
      untouchedFiles: existingCount
    }
  };
};
var internalDeploySite = wrapWithErrorHandling2(mandatoryDeploySite);
var deploySite = (args) => {
  return internalDeploySite({
    bucketName: args.bucketName,
    entryPoint: args.entryPoint,
    region: args.region,
    gitSource: args.gitSource ?? null,
    options: args.options ?? {},
    privacy: args.privacy ?? "public",
    siteName: args.siteName ?? LambdaClientInternals6.awsImplementation.randomHash(),
    indent: false,
    logLevel: "info",
    throwIfSiteExists: args.throwIfSiteExists ?? false,
    providerSpecifics: LambdaClientInternals6.awsImplementation,
    forcePathStyle: args.forcePathStyle ?? false,
    fullClientSpecifics: awsFullClientSpecifics,
    requestHandler: args.requestHandler ?? null
  });
};

// src/api/download-media.ts
import { LambdaClientInternals as LambdaClientInternals8 } from "@remotion/lambda-client";
import { REMOTION_BUCKET_PREFIX as REMOTION_BUCKET_PREFIX4 } from "@remotion/lambda-client/constants";
import { RenderInternals as RenderInternals3 } from "@remotion/renderer";
import {
  getExpectedOutName,
  getOverallProgressFromStorage
} from "@remotion/serverless";
import path5 from "node:path";

// src/functions/helpers/read-with-progress.ts
import { GetObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { LambdaClientInternals as LambdaClientInternals7 } from "@remotion/lambda-client";
import { RenderInternals as RenderInternals2 } from "@remotion/renderer";
var lambdaDownloadFileWithProgress = async ({
  bucketName,
  key,
  region,
  expectedBucketOwner,
  outputPath,
  onProgress,
  customCredentials,
  logLevel,
  forcePathStyle,
  requestHandler
}) => {
  const client = LambdaClientInternals7.getS3Client({
    region,
    customCredentials,
    forcePathStyle,
    requestHandler
  });
  const command = new GetObjectCommand({
    Bucket: bucketName,
    ExpectedBucketOwner: customCredentials ? undefined : expectedBucketOwner,
    Key: key
  });
  const presigned = await getSignedUrl(client, command);
  const { to, sizeInBytes } = await RenderInternals2.downloadFile({
    url: presigned,
    onProgress: ({ downloaded, percent, totalSize }) => {
      onProgress({
        downloaded,
        percent,
        totalSize
      });
    },
    to: () => outputPath,
    indent: false,
    logLevel
  });
  return { sizeInBytes, to };
};

// src/api/download-media.ts
var internalDownloadMedia = async (input) => {
  const expectedBucketOwner = await input.providerSpecifics.getAccountId({
    region: input.region
  });
  const overallProgress = await getOverallProgressFromStorage({
    bucketName: input.bucketName,
    expectedBucketOwner,
    region: input.region,
    renderId: input.renderId,
    providerSpecifics: input.providerSpecifics,
    forcePathStyle: input.forcePathStyle,
    requestHandler: input.requestHandler
  });
  if (!overallProgress.renderMetadata) {
    throw new Error("Render did not finish yet");
  }
  const outputPath = path5.resolve(process.cwd(), input.outPath);
  RenderInternals3.ensureOutputDirectory(outputPath);
  const { key, renderBucketName, customCredentials } = getExpectedOutName({
    renderMetadata: overallProgress.renderMetadata,
    bucketName: input.bucketName,
    customCredentials: input.customCredentials ?? null,
    bucketNamePrefix: REMOTION_BUCKET_PREFIX4
  });
  const { sizeInBytes } = await lambdaDownloadFileWithProgress({
    bucketName: renderBucketName,
    expectedBucketOwner,
    key,
    region: input.region,
    onProgress: input.onProgress ?? (() => {
      return;
    }),
    outputPath,
    customCredentials,
    logLevel: input.logLevel ?? "info",
    forcePathStyle: input.forcePathStyle ?? false,
    requestHandler: input.requestHandler
  });
  return {
    outputPath,
    sizeInBytes
  };
};
var downloadMedia = (input) => {
  return internalDownloadMedia({
    ...input,
    providerSpecifics: LambdaClientInternals8.awsImplementation,
    forcePathStyle: false
  });
};

// src/api/get-function-info.ts
import { GetFunctionCommand as GetFunctionCommand2 } from "@aws-sdk/client-lambda";
import {
  getFunctionVersion,
  LambdaClientInternals as LambdaClientInternals9
} from "@remotion/lambda-client";
import { DEFAULT_EPHEMERAL_STORAGE_IN_MB as DEFAULT_EPHEMERAL_STORAGE_IN_MB2 } from "@remotion/lambda-client/constants";
var getFunctionInfo = async ({
  region,
  functionName,
  logLevel,
  requestHandler
}) => {
  LambdaClientInternals9.validateAwsRegion(region);
  const [functionInfo, version] = await Promise.all([
    LambdaClientInternals9.getLambdaClient(region, undefined, requestHandler).send(new GetFunctionCommand2({
      FunctionName: functionName
    })),
    getFunctionVersion({
      functionName,
      region,
      logLevel: logLevel ?? "info",
      requestHandler
    })
  ]);
  return {
    functionName,
    timeoutInSeconds: functionInfo.Configuration?.Timeout,
    memorySizeInMb: functionInfo.Configuration?.MemorySize,
    version,
    diskSizeInMb: functionInfo.Configuration?.EphemeralStorage?.Size ?? DEFAULT_EPHEMERAL_STORAGE_IN_MB2
  };
};

// src/api/get-or-create-bucket.ts
import { LambdaClientInternals as LambdaClientInternals10 } from "@remotion/lambda-client";
import { internalGetOrCreateBucket } from "@remotion/serverless";
var getOrCreateBucket = (options) => {
  return internalGetOrCreateBucket({
    region: options.region,
    enableFolderExpiry: options.enableFolderExpiry ?? null,
    customCredentials: options.customCredentials ?? null,
    providerSpecifics: LambdaClientInternals10.awsImplementation,
    forcePathStyle: false,
    skipPutAcl: false,
    requestHandler: options.requestHandler ?? null
  });
};

// src/api/get-regions.ts
import {
  AWS_REGIONS,
  DEFAULT_AWS_REGIONS
} from "@remotion/lambda-client/regions";
var getRegions = (options) => {
  const onlyEnabledByDefault = options?.enabledByDefaultOnly ?? false;
  return onlyEnabledByDefault ? DEFAULT_AWS_REGIONS : AWS_REGIONS;
};

// src/api/iam-validation/simulate.ts
import { GetCallerIdentityCommand } from "@aws-sdk/client-sts";
import { LambdaClientInternals as LambdaClientInternals12 } from "@remotion/lambda-client";

// src/api/iam-validation/simulate-rule.ts
import { SimulatePrincipalPolicyCommand } from "@aws-sdk/client-iam";
import { LambdaClientInternals as LambdaClientInternals11 } from "@remotion/lambda-client";
var simulateRule = async (options) => {
  try {
    const res = await LambdaClientInternals11.getIamClient(options.region, options.requestHandler).send(new SimulatePrincipalPolicyCommand({
      ActionNames: options.actionNames,
      PolicySourceArn: options.arn,
      ResourceArns: options.resource
    }));
    return (res.EvaluationResults ?? []).map((pol) => {
      return {
        decision: pol.EvalDecision,
        name: pol.EvalActionName
      };
    });
  } catch (err) {
    if (options.retries <= 0) {
      throw err;
    }
    await new Promise((resolve) => {
      setTimeout(resolve, 2000);
    });
    return simulateRule({ ...options, retries: options.retries - 1 });
  }
};

// src/api/iam-validation/simulate.ts
var getEmojiForStatus = (decision) => {
  switch (decision) {
    case "allowed":
      return "✅";
    default:
      return "❌";
  }
};
var logPermissionOutput = (output) => {
  return [getEmojiForStatus(output.decision), output.name].join(" ");
};
var simulatePermissions = async (options) => {
  const callerIdentity = await LambdaClientInternals12.getStsClient(options.region, options.requestHandler).send(new GetCallerIdentityCommand({}));
  if (!callerIdentity?.Arn) {
    throw new Error("No valid AWS Caller Identity detected");
  }
  const callerIdentityArnComponents = callerIdentity.Arn.match(/arn:aws:([^:]+)::(\d+):([^/]+)(.*)/);
  if (!callerIdentityArnComponents) {
    throw new Error("Unknown AWS Caller Identity ARN detected");
  }
  const callerIdentityArnType = callerIdentityArnComponents[1];
  let callerArn;
  if (callerIdentityArnType === "iam" && callerIdentityArnComponents[3] === "user") {
    callerArn = callerIdentity.Arn;
  } else if (callerIdentityArnType === "sts" && callerIdentityArnComponents[3] === "assumed-role") {
    const assumedRoleComponents = callerIdentityArnComponents[4].match(/\/([^/]+)\/(.*)/);
    if (!assumedRoleComponents) {
      throw new Error("Unsupported AWS Caller Identity as Assumed-Role ARN detected");
    }
    callerArn = `arn:aws:iam::${callerIdentityArnComponents[2]}:role/${assumedRoleComponents[1]}`;
  } else {
    throw new Error("Unsupported AWS Caller Identity ARN detected");
  }
  const results = [];
  for (const per of requiredPermissions) {
    const result = await simulateRule({
      actionNames: per.actions,
      arn: callerArn,
      region: options.region,
      resource: per.resource,
      retries: 2,
      requestHandler: options.requestHandler
    });
    for (const res of result) {
      results.push(res);
      options.onSimulation?.(res);
    }
  }
  return { results };
};

// src/cli/index.ts
import { CliInternals as CliInternals23 } from "@remotion/cli";
import { LambdaClientInternals as LambdaClientInternals21 } from "@remotion/lambda-client";
import { BINARY_NAME as BINARY_NAME14 } from "@remotion/lambda-client/constants";
import { RenderInternals as RenderInternals7 } from "@remotion/renderer";
import {
  DOCS_URL
} from "@remotion/serverless";

// src/cli/args.ts
import { CliInternals } from "@remotion/cli";
var parsedLambdaCli = CliInternals.minimist(process.argv.slice(2), {
  boolean: CliInternals.BooleanFlags,
  string: ["_"]
});
var forceFlagProvided = parsedLambdaCli.f || parsedLambdaCli.force || parsedLambdaCli.yes || parsedLambdaCli.y;

// src/cli/commands/compositions/index.ts
import { CliInternals as CliInternals8 } from "@remotion/cli";
import {
  getCompositionsOnLambda,
  LambdaClientInternals as LambdaClientInternals16
} from "@remotion/lambda-client";
import { BINARY_NAME as BINARY_NAME4 } from "@remotion/lambda-client/constants";
import { BrowserSafeApis } from "@remotion/renderer/client";

// src/cli/get-aws-region.ts
import { LambdaClientInternals as LambdaClientInternals13 } from "@remotion/lambda-client";
import { DEFAULT_REGION } from "@remotion/lambda-client/constants";
var getAwsRegion = () => {
  if (parsedLambdaCli.region) {
    LambdaClientInternals13.validateAwsRegion(parsedLambdaCli.region);
    return parsedLambdaCli.region;
  }
  const envVariable = LambdaClientInternals13.getEnvVariable("REMOTION_AWS_REGION") ?? LambdaClientInternals13.getEnvVariable("AWS_REGION");
  if (envVariable) {
    LambdaClientInternals13.validateAwsRegion(envVariable);
    return envVariable;
  }
  return DEFAULT_REGION;
};

// src/cli/helpers/find-function-name.ts
import { LambdaClientInternals as LambdaClientInternals15 } from "@remotion/lambda-client";
import { BINARY_NAME as BINARY_NAME3 } from "@remotion/lambda-client/constants";
import { VERSION as VERSION4 } from "remotion/version";

// src/cli/commands/functions/index.ts
import { CliInternals as CliInternals7 } from "@remotion/cli";
import { BINARY_NAME as BINARY_NAME2 } from "@remotion/lambda-client/constants";

// src/cli/helpers/quit.ts
var quit = (exitCode) => {
  process.exit(exitCode);
};

// src/cli/commands/functions/deploy.ts
import { CliInternals as CliInternals3 } from "@remotion/cli";
import { LambdaClientInternals as LambdaClientInternals14 } from "@remotion/lambda-client";
import {
  DEFAULT_CLOUDWATCH_RETENTION_PERIOD,
  DEFAULT_EPHEMERAL_STORAGE_IN_MB as DEFAULT_EPHEMERAL_STORAGE_IN_MB3,
  DEFAULT_MEMORY_SIZE,
  DEFAULT_TIMEOUT
} from "@remotion/lambda-client/constants";
import { VERSION as VERSION3 } from "remotion/version";

// src/shared/validate-vpc-security-group-ids.ts
var isValidVpcSecurityGroupIdList = (vpcSecurityGroupIds) => {
  const securityGroupIdRegex = /^sg-[0-9a-f]{17}$/;
  vpcSecurityGroupIds.split(",").forEach((securityGroupId) => {
    if (!securityGroupIdRegex.test(securityGroupId.trim())) {
      return false;
    }
  });
  return true;
};
var validateVpcSecurityGroupIds = (vpcSecurityGroupIds) => {
  if (typeof vpcSecurityGroupIds !== "undefined" && typeof vpcSecurityGroupIds !== "string" && !isValidVpcSecurityGroupIdList(vpcSecurityGroupIds)) {
    throw new TypeError(`parameter 'vpcSecurityGroupIds' must either be 'undefined' or a comma-separated list of VPC security group IDs string, but instead got: ${vpcSecurityGroupIds}`);
  }
};

// src/shared/validate-vpc-subnet-ids.ts
var isValidVpcSubnetIdList = (vpcSubnetIds) => {
  const subnetIdRegex = /^subnet-[0-9a-f]{17}$/;
  vpcSubnetIds.split(",").forEach((subnetId) => {
    if (!subnetIdRegex.test(subnetId.trim())) {
      return false;
    }
  });
  return true;
};
var validateVpcSubnetIds = (vpcSubnetIds) => {
  if (typeof vpcSubnetIds !== "undefined" && typeof vpcSubnetIds !== "string" && !isValidVpcSubnetIdList(vpcSubnetIds)) {
    throw new TypeError(`parameter 'vpcSubnetIds' must either be 'undefined' or a comma-separated list of VPC subnet IDs string, but instead got: ${vpcSubnetIds}`);
  }
};

// src/cli/log.ts
import { CliInternals as CliInternals2 } from "@remotion/cli";
var { Log } = CliInternals2;

// src/cli/commands/functions/deploy.ts
var FUNCTIONS_DEPLOY_SUBCOMMAND = "deploy";
var functionsDeploySubcommand = async ({
  logLevel,
  providerSpecifics,
  fullClientSpecifics
}) => {
  const region = getAwsRegion();
  const timeoutInSeconds = parsedLambdaCli.timeout ?? DEFAULT_TIMEOUT;
  const memorySizeInMb = parsedLambdaCli.memory ?? DEFAULT_MEMORY_SIZE;
  const diskSizeInMb = parsedLambdaCli.disk ?? DEFAULT_EPHEMERAL_STORAGE_IN_MB3;
  const customRoleArn = parsedLambdaCli["custom-role-arn"] ?? undefined;
  const createCloudWatchLogGroup = !parsedLambdaCli["disable-cloudwatch"];
  const enableLambdaInsights = parsedLambdaCli["enable-lambda-insights"] ?? false;
  const cloudWatchLogRetentionPeriodInDays = parsedLambdaCli["retention-period"] ?? DEFAULT_CLOUDWATCH_RETENTION_PERIOD;
  const enableV5Runtime = parsedLambdaCli["enable-v5-runtime"] ?? undefined;
  if (enableV5Runtime) {
    Log.warn({ logLevel, indent: false }, `The --enable-v5-runtime flag is now enabled by default and has no function anymore.`);
  }
  const vpcSubnetIds = parsedLambdaCli["vpc-subnet-ids"] ?? undefined;
  const vpcSecurityGroupIds = parsedLambdaCli["vpc-security-group-ids"] ?? undefined;
  const runtimePreference = parsedLambdaCli["runtime-preference"] ?? "default";
  LambdaClientInternals14.validateMemorySize(memorySizeInMb);
  validateTimeout(timeoutInSeconds);
  LambdaClientInternals14.validateDiskSizeInMb(diskSizeInMb);
  validateCustomRoleArn(customRoleArn);
  validateVpcSubnetIds(vpcSubnetIds);
  validateVpcSecurityGroupIds(vpcSecurityGroupIds);
  if (!CliInternals3.quietFlagProvided()) {
    CliInternals3.Log.info({ indent: false, logLevel }, CliInternals3.chalk.gray(`
Region = ${region}
Memory = ${memorySizeInMb}MB
Disk size = ${diskSizeInMb}MB
Timeout = ${timeoutInSeconds}sec
Version = ${VERSION3}
CloudWatch Logging Enabled = ${createCloudWatchLogGroup}
CloudWatch Retention Period = ${cloudWatchLogRetentionPeriodInDays} days
Lambda Insights Enabled = ${enableLambdaInsights}

				`.trim()));
    if (vpcSubnetIds) {
      CliInternals3.Log.info({ indent: false, logLevel }, `
VPC Subnet IDs = ${vpcSubnetIds}
VPC Security Group IDs = ${vpcSecurityGroupIds}
`.trim());
    }
  }
  const output = CliInternals3.createOverwriteableCliOutput({
    quiet: CliInternals3.quietFlagProvided(),
    cancelSignal: null,
    updatesDontOverwrite: false,
    indent: false
  });
  output.update("Deploying Lambda...", false);
  const { functionName, alreadyExisted } = await internalDeployFunction({
    createCloudWatchLogGroup,
    region,
    timeoutInSeconds,
    memorySizeInMb,
    cloudWatchLogRetentionPeriodInDays,
    diskSizeInMb,
    customRoleArn,
    enableLambdaInsights,
    indent: false,
    logLevel,
    vpcSubnetIds,
    vpcSecurityGroupIds,
    runtimePreference,
    providerSpecifics,
    fullClientSpecifics,
    requestHandler: null
  });
  if (CliInternals3.quietFlagProvided()) {
    CliInternals3.Log.info({ indent: false, logLevel }, functionName);
  } else if (alreadyExisted) {
    output.update(`Already exists as ${functionName}`, true);
  } else {
    output.update(`Deployed as ${functionName}
`, true);
  }
};

// src/cli/commands/functions/ls.ts
import { CliInternals as CliInternals4 } from "@remotion/cli";
var NAME_COLS = 70;
var MEMORY_COLS = 15;
var DISK_COLS = 15;
var TIMEOUT_COLS = 15;
var VERSION_COLS = 15;
var FUNCTIONS_LS_SUBCOMMAND = "ls";
var functionsLsCommand = async ({
  logLevel,
  providerSpecifics
}) => {
  const region = getAwsRegion();
  const fetchingOutput = CliInternals4.createOverwriteableCliOutput({
    quiet: CliInternals4.quietFlagProvided(),
    cancelSignal: null,
    updatesDontOverwrite: CliInternals4.shouldUseNonOverlayingLogger({
      logLevel
    }),
    indent: false
  });
  fetchingOutput.update("Getting functions...", false);
  const compatibleOnly = parsedLambdaCli["compatible-only"] || false;
  const functions = await providerSpecifics.getFunctions({
    region,
    compatibleOnly
  });
  if (CliInternals4.quietFlagProvided()) {
    if (functions.length === 0) {
      CliInternals4.Log.info({ indent: false, logLevel }, "()");
      return;
    }
    CliInternals4.Log.info({ indent: false, logLevel }, functions.map((f) => f.functionName).join(" "));
    return;
  }
  fetchingOutput.update("Getting function info...", false);
  const pluralized = functions.length === 1 ? "function" : "functions";
  fetchingOutput.update(`${functions.length} ${pluralized} in the ${region} region`, true);
  CliInternals4.Log.info({ indent: false, logLevel });
  CliInternals4.Log.info({ indent: false, logLevel }, CliInternals4.chalk.gray([
    "Name".padEnd(NAME_COLS, " "),
    "Version".padEnd(VERSION_COLS, " "),
    "Disk (MB)".padEnd(MEMORY_COLS, " "),
    "Memory (MB)".padEnd(MEMORY_COLS, " "),
    "Timeout (sec)".padEnd(TIMEOUT_COLS, " ")
  ].join("")));
  for (const datapoint of functions) {
    CliInternals4.Log.info({ indent: false, logLevel }, [
      datapoint.functionName.padEnd(NAME_COLS, " "),
      datapoint.version ? datapoint.version.padEnd(VERSION_COLS, " ") : "Error".padEnd(VERSION_COLS, " "),
      String(datapoint.diskSizeInMb).padEnd(DISK_COLS, " "),
      String(datapoint.memorySizeInMb).padEnd(MEMORY_COLS, " "),
      String(datapoint.timeoutInSeconds).padEnd(TIMEOUT_COLS, " ")
    ].join(""));
  }
};

// src/cli/commands/functions/rm.ts
import { CliInternals as CliInternals5 } from "@remotion/cli";
import { deleteFunction } from "@remotion/lambda-client";
import { BINARY_NAME } from "@remotion/lambda-client/constants";

// src/cli/helpers/yes-or-no.ts
import readline from "readline";
var options = {
  yes: ["yes", "y"],
  no: ["no", "n"]
};
function defaultInvalidHandler({
  yesValues,
  noValues
}) {
  process.stdout.write(`
Invalid Response.
`);
  process.stdout.write("Answer either yes : (" + yesValues.join(", ") + `) 
`);
  process.stdout.write("Or no: (" + noValues.join(", ") + `) 

`);
}
var yesOrNo = ({
  question,
  defaultValue
}) => {
  const invalid = defaultInvalidHandler;
  const yesValues = options.yes.map((v) => v.toLowerCase());
  const noValues = options.no.map((v) => v.toLowerCase());
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise((resolve) => {
    rl.question(question + " ", async (answer) => {
      rl.close();
      const cleaned = answer.trim().toLowerCase();
      if (cleaned === "" && defaultValue !== null)
        return resolve(defaultValue);
      if (yesValues.indexOf(cleaned) >= 0)
        return resolve(true);
      if (noValues.indexOf(cleaned) >= 0)
        return resolve(false);
      invalid({ question, yesValues, noValues });
      const result = await yesOrNo({
        question,
        defaultValue
      });
      resolve(result);
    });
  });
};

// src/cli/helpers/confirm.ts
var confirmCli = async ({
  delMessage,
  allowForceFlag
}) => {
  if (allowForceFlag && forceFlagProvided) {
    return true;
  }
  const result = await yesOrNo({ question: delMessage, defaultValue: true });
  return result;
};

// src/cli/commands/functions/rm.ts
var FUNCTIONS_RM_SUBCOMMAND = "rm";
var LEFT_COL = 16;
var functionsRmCommand = async (args, logLevel) => {
  if (args.length === 0) {
    Log.error({ indent: false, logLevel }, "No function name passed.");
    Log.error({ indent: false, logLevel }, "Pass another argument which is the name of the function you would like to remove.");
    Log.info({ indent: false, logLevel }, `You can run \`${BINARY_NAME} ${FUNCTIONS_COMMAND} ${FUNCTIONS_LS_SUBCOMMAND}\` to see a list of deployed Lambda functions.`);
    quit(1);
  }
  if (args[0] === "()") {
    Log.info({ indent: false, logLevel }, "No functions to remove.");
    return;
  }
  const region = getAwsRegion();
  for (const functionName of args) {
    const infoOutput = CliInternals5.createOverwriteableCliOutput({
      quiet: CliInternals5.quietFlagProvided(),
      cancelSignal: null,
      updatesDontOverwrite: false,
      indent: false
    });
    infoOutput.update("Getting function info...", false);
    const info = await getFunctionInfo({
      region,
      functionName
    });
    infoOutput.update([
      "Function name: ".padEnd(LEFT_COL, " ") + " " + info.functionName,
      "Memory: ".padEnd(LEFT_COL, " ") + " " + info.memorySizeInMb + "MB",
      "Timeout: ".padEnd(LEFT_COL, " ") + " " + info.timeoutInSeconds + "sec",
      "Version: ".padEnd(LEFT_COL, " ") + " " + info.version
    ].join(`
`), true);
    if (!await confirmCli({ delMessage: "Delete? (Y/n)", allowForceFlag: true })) {
      quit(1);
    }
    const output = CliInternals5.createOverwriteableCliOutput({
      quiet: CliInternals5.quietFlagProvided(),
      cancelSignal: null,
      updatesDontOverwrite: CliInternals5.shouldUseNonOverlayingLogger({
        logLevel
      }),
      indent: false
    });
    output.update("Deleting...", false);
    await deleteFunction({ region, functionName });
    output.update("Deleted!", true);
  }
};

// src/cli/commands/functions/rmall.ts
import { CliInternals as CliInternals6 } from "@remotion/cli";
import { deleteFunction as deleteFunction2 } from "@remotion/lambda-client";
var FUNCTIONS_RMALL_SUBCOMMAND = "rmall";
var LEFT_COL2 = 16;
var functionsRmallCommand = async ({
  logLevel,
  providerSpecifics
}) => {
  const region = getAwsRegion();
  const functions = await providerSpecifics.getFunctions({
    region,
    compatibleOnly: false
  });
  for (const fun of functions) {
    const infoOutput = CliInternals6.createOverwriteableCliOutput({
      quiet: CliInternals6.quietFlagProvided(),
      cancelSignal: null,
      updatesDontOverwrite: false,
      indent: false
    });
    infoOutput.update("Getting function info...", false);
    const info = await getFunctionInfo({
      region,
      functionName: fun.functionName
    });
    infoOutput.update([
      "Function name: ".padEnd(LEFT_COL2, " ") + " " + info.functionName,
      "Memory: ".padEnd(LEFT_COL2, " ") + " " + info.memorySizeInMb + "MB",
      "Timeout: ".padEnd(LEFT_COL2, " ") + " " + info.timeoutInSeconds + "sec",
      "Version: ".padEnd(LEFT_COL2, " ") + " " + info.version
    ].join(`
`), true);
    if (!await confirmCli({ delMessage: "Delete? (Y/n)", allowForceFlag: true })) {
      continue;
    }
    const output = CliInternals6.createOverwriteableCliOutput({
      quiet: CliInternals6.quietFlagProvided(),
      cancelSignal: null,
      updatesDontOverwrite: CliInternals6.shouldUseNonOverlayingLogger({
        logLevel
      }),
      indent: false
    });
    output.update("Deleting...", false);
    await deleteFunction2({ region, functionName: fun.functionName });
    output.update("Deleted!", true);
  }
};

// src/cli/commands/functions/index.ts
var FUNCTIONS_COMMAND = "functions";
var printFunctionsHelp = (logLevel) => {
  CliInternals7.Log.info({ indent: false, logLevel }, `${BINARY_NAME2} ${FUNCTIONS_COMMAND} <subcommand>`);
  CliInternals7.Log.info({ indent: false, logLevel });
  CliInternals7.Log.info({ indent: false, logLevel }, "Available subcommands:");
  CliInternals7.Log.info({ indent: false, logLevel }, "");
  CliInternals7.Log.info({ indent: false, logLevel }, `${BINARY_NAME2} ${FUNCTIONS_COMMAND} ${FUNCTIONS_LS_SUBCOMMAND}`);
  CliInternals7.Log.info({ indent: false, logLevel }, CliInternals7.chalk.gray("Lists the functions currently deployed"));
  CliInternals7.Log.info({ indent: false, logLevel }, "");
  CliInternals7.Log.info({ indent: false, logLevel }, `${BINARY_NAME2} ${FUNCTIONS_COMMAND} ${FUNCTIONS_DEPLOY_SUBCOMMAND}`);
  CliInternals7.Log.info({ indent: false, logLevel }, CliInternals7.chalk.gray("Deploy a new Lambda function"));
  CliInternals7.Log.info({ indent: false, logLevel }, "");
  CliInternals7.Log.info({ indent: false, logLevel }, `${BINARY_NAME2} ${FUNCTIONS_COMMAND} ${FUNCTIONS_RM_SUBCOMMAND} <function-name>`);
  CliInternals7.Log.info({ indent: false, logLevel }, CliInternals7.chalk.gray("Delete a Lambda function"));
  CliInternals7.Log.info({ indent: false, logLevel }, "");
  CliInternals7.Log.info({ indent: false, logLevel }, `${BINARY_NAME2} ${FUNCTIONS_COMMAND} ${FUNCTIONS_RMALL_SUBCOMMAND}`);
  CliInternals7.Log.info({ indent: false, logLevel }, CliInternals7.chalk.gray("Delete all functions in selected region"));
};
var functionsCommand = ({
  args,
  logLevel,
  fullClientSpecifics,
  providerSpecifics
}) => {
  if (args[0] === FUNCTIONS_LS_SUBCOMMAND) {
    return functionsLsCommand({ logLevel, providerSpecifics });
  }
  if (args[0] === FUNCTIONS_RM_SUBCOMMAND) {
    return functionsRmCommand(args.slice(1), logLevel);
  }
  if (args[0] === FUNCTIONS_RMALL_SUBCOMMAND) {
    return functionsRmallCommand({ logLevel, providerSpecifics });
  }
  if (args[0] === FUNCTIONS_DEPLOY_SUBCOMMAND) {
    return functionsDeploySubcommand({
      logLevel,
      fullClientSpecifics,
      providerSpecifics
    });
  }
  if (args[0]) {
    CliInternals7.Log.error({ indent: false, logLevel }, `Subcommand ${args[0]} not found.`);
    printFunctionsHelp(logLevel);
    quit(1);
  }
  printFunctionsHelp(logLevel);
};

// src/cli/helpers/find-function-name.ts
var findFunctionName = async ({
  logLevel,
  providerSpecifics
}) => {
  const remotionLambdas = await providerSpecifics.getFunctions({
    region: getAwsRegion(),
    compatibleOnly: false
  });
  const lambdasWithMatchingVersion = remotionLambdas.filter((l) => l.version === VERSION4);
  const logOptions = {
    indent: false,
    logLevel
  };
  const cliFlag = parsedLambdaCli["function-name"];
  if (cliFlag) {
    const compatibleFunctionExists = lambdasWithMatchingVersion.find((l) => l.functionName === cliFlag);
    if (!compatibleFunctionExists) {
      Log.warn({ indent: false, logLevel }, `The name passed to --function-name "${cliFlag}" does not match the naming convention this version of the CLI expects: ${LambdaClientInternals15.innerSpeculateFunctionName({ diskSizeInMb: "[disk]", memorySizeInMb: "[memory]", timeoutInSeconds: "[timeout]" })}.`);
      Log.warn({ indent: false, logLevel }, "Remotion relies on the naming to determine function information. This is an unsupported workflow.");
      if (lambdasWithMatchingVersion.length > 0) {
        Log.info(logOptions, "The following functions were found:");
        for (const l of lambdasWithMatchingVersion) {
          Log.info(logOptions, `- ${l.functionName} (v${l.version})`);
        }
        Log.info(logOptions, "Prefer using one of those functions by passing their name to `--function-name` or removing it entirely.");
      }
    }
    return cliFlag;
  }
  if (lambdasWithMatchingVersion.length === 0) {
    Log.error({ indent: false, logLevel }, `No Lambda functions with version ${VERSION4} found in your account.`);
    if (remotionLambdas.length > 0) {
      Log.error({ indent: false, logLevel }, "Other functions were found, but are not compatible with this version of the CLI.");
    }
    Log.info(logOptions, "Run");
    Log.info(logOptions, `  npx ${BINARY_NAME3} ${FUNCTIONS_COMMAND} ${FUNCTIONS_DEPLOY_SUBCOMMAND}`);
    Log.info(logOptions, `to deploy a new Lambda function.`);
    quit(1);
  }
  if (lambdasWithMatchingVersion.length > 1) {
    Log.error({ indent: false, logLevel }, "More than 1 lambda function found in your account. Unsure which one to use.");
    Log.info(logOptions);
    Log.info(logOptions, "Possible solutions:");
    Log.info(logOptions, "- Define using `--function-name` which function you want to use.");
    Log.info(logOptions, `- Delete extraneous Lambda functions in your AWS console or using:`);
    Log.info(logOptions, `    npx ${BINARY_NAME3} ${FUNCTIONS_COMMAND} ${FUNCTIONS_RM_SUBCOMMAND} $(npx ${BINARY_NAME3} ${FUNCTIONS_COMMAND} ${FUNCTIONS_LS_SUBCOMMAND} -q) -y`);
    Log.info(logOptions);
    Log.info(logOptions, `The following functions were found (only showing v${VERSION4}):`);
    for (const l of lambdasWithMatchingVersion) {
      Log.info(logOptions, `- ${l.functionName}`);
    }
    quit(1);
  }
  const { functionName } = lambdasWithMatchingVersion[0];
  return functionName;
};

// src/cli/commands/compositions/index.ts
var COMPOSITIONS_COMMAND = "compositions";
var {
  enableMultiprocessOnLinuxOption,
  glOption,
  delayRenderTimeoutInMillisecondsOption,
  headlessOption
} = BrowserSafeApis.options;
var compositionsCommand = async ({
  args,
  logLevel,
  providerSpecifics
}) => {
  const serveUrl = args[0];
  if (!serveUrl) {
    Log.error({ indent: false, logLevel }, "No serve URL passed.");
    Log.info({ indent: false, logLevel }, "Pass an additional argument specifying a URL where your Remotion project is hosted.");
    Log.info({ indent: false, logLevel });
    Log.info({ indent: false, logLevel }, `${BINARY_NAME4} ${COMPOSITIONS_COMMAND} <serve-url>`);
    quit(1);
  }
  const {
    envVariables,
    inputProps,
    ignoreCertificateErrors,
    userAgent,
    disableWebSecurity
  } = CliInternals8.getCliOptions({
    isStill: false,
    logLevel,
    indent: false
  });
  const enableMultiProcessOnLinux = enableMultiprocessOnLinuxOption.getValue({
    commandLine: CliInternals8.parsedCli
  }).value;
  const gl = glOption.getValue({ commandLine: CliInternals8.parsedCli }).value;
  const puppeteerTimeout = delayRenderTimeoutInMillisecondsOption.getValue({
    commandLine: CliInternals8.parsedCli
  }).value;
  const headless = headlessOption.getValue({
    commandLine: CliInternals8.parsedCli
  }).value;
  const chromiumOptions = {
    disableWebSecurity,
    enableMultiProcessOnLinux,
    gl,
    headless,
    ignoreCertificateErrors,
    userAgent
  };
  const region = getAwsRegion();
  LambdaClientInternals16.validateServeUrl(serveUrl);
  const functionName = await findFunctionName({ logLevel, providerSpecifics });
  const comps = await getCompositionsOnLambda({
    functionName,
    serveUrl,
    inputProps,
    region,
    chromiumOptions,
    envVariables,
    logLevel,
    timeoutInMilliseconds: puppeteerTimeout,
    forceBucketName: parsedLambdaCli["force-bucket-name"],
    requestHandler: null
  });
  CliInternals8.printCompositions(comps, logLevel);
};

// src/cli/commands/policies/policies.ts
import { CliInternals as CliInternals9 } from "@remotion/cli";
import { BINARY_NAME as BINARY_NAME5 } from "@remotion/lambda-client/constants";

// src/cli/commands/policies/role.ts
var ROLE_SUBCOMMAND = "role";
var roleSubcommand = (logLevel) => {
  Log.info({ indent: false, logLevel }, getRolePolicy());
};

// src/cli/commands/policies/user.ts
var USER_SUBCOMMAND = "user";
var userSubcommand = (logLevel) => {
  Log.info({ indent: false, logLevel }, getUserPolicy());
};

// src/cli/commands/policies/validate.ts
var VALIDATE_SUBCOMMAND = "validate";
var validateSubcommand = async (logLevel) => {
  try {
    await simulatePermissions({
      region: getAwsRegion(),
      onSimulation: (res) => {
        Log.info({ indent: false, logLevel }, logPermissionOutput(res));
      }
    });
  } catch (err) {
    Log.error({ indent: false, logLevel }, "Did not have the required permissions on AWS:");
    Log.error({ indent: false, logLevel }, err);
  }
};

// src/cli/commands/policies/policies.ts
var POLICIES_COMMAND = "policies";
var printPoliciesHelp = (logLevel) => {
  Log.info({ indent: false, logLevel }, `${BINARY_NAME5} ${POLICIES_COMMAND} <subcommand>`);
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, "Available subcommands:");
  Log.info({ indent: false, logLevel }, "");
  Log.info({ indent: false, logLevel }, `${BINARY_NAME5} ${POLICIES_COMMAND} ${USER_SUBCOMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals9.chalk.gray("Print the suggested policy to be applied to the user that is attached to the access token."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME5} ${POLICIES_COMMAND} ${ROLE_SUBCOMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals9.chalk.gray("Print the suggested policy to be applied to the role that is attached to the lambda function."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME5} ${POLICIES_COMMAND} ${VALIDATE_SUBCOMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals9.chalk.gray("Validate the current policies setup is correct by running tests using the AWS policy simulator."));
};
var policiesCommand = (args, logLevel) => {
  if (args[0] === USER_SUBCOMMAND) {
    return userSubcommand(logLevel);
  }
  if (args[0] === ROLE_SUBCOMMAND) {
    return roleSubcommand(logLevel);
  }
  if (args[0] === VALIDATE_SUBCOMMAND) {
    return validateSubcommand(logLevel);
  }
  if (args[0]) {
    Log.error({ indent: false, logLevel }, `Subcommand ${args[0]} not found.`);
    printPoliciesHelp(logLevel);
    quit(1);
  }
  printPoliciesHelp(logLevel);
};

// src/cli/commands/quotas/index.ts
import { CliInternals as CliInternals11 } from "@remotion/cli";
import { BINARY_NAME as BINARY_NAME8 } from "@remotion/lambda-client/constants";

// src/cli/commands/quotas/increase.ts
import {
  GetAWSDefaultServiceQuotaCommand,
  GetServiceQuotaCommand,
  ListRequestedServiceQuotaChangeHistoryByQuotaCommand,
  RequestServiceQuotaIncreaseCommand
} from "@aws-sdk/client-service-quotas";
import {
  LambdaClientInternals as LambdaClientInternals17
} from "@remotion/lambda-client";
import {
  BINARY_NAME as BINARY_NAME6,
  LAMBDA_CONCURRENCY_LIMIT_QUOTA
} from "@remotion/lambda-client/constants";
import { exit } from "node:process";
var INCREASE_SUBCOMMAND = "increase";
var makeQuotaUrl = ({
  region,
  quotaId
}) => {
  return `https://${region}.console.aws.amazon.com/servicequotas/home/services/lambda/quotas/${quotaId}`;
};
var quotasIncreaseCommand = async (logLevel, requestHandler) => {
  const region = getAwsRegion();
  const [concurrencyLimit, defaultConcurrencyLimit, changes] = await Promise.all([
    LambdaClientInternals17.getServiceQuotasClient(region, requestHandler).send(new GetServiceQuotaCommand({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA,
      ServiceCode: "lambda"
    })),
    LambdaClientInternals17.getServiceQuotasClient(region, requestHandler).send(new GetAWSDefaultServiceQuotaCommand({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA,
      ServiceCode: "lambda"
    })),
    LambdaClientInternals17.getServiceQuotasClient(region, requestHandler).send(new ListRequestedServiceQuotaChangeHistoryByQuotaCommand({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA,
      ServiceCode: "lambda"
    }))
  ]);
  const openCase = changes.RequestedQuotas?.find((r) => r.Status === "CASE_OPENED");
  if (openCase) {
    const logOptions = {
      indent: false,
      logLevel
    };
    Log.warn(logOptions, `A request to increase it to ${openCase.DesiredValue} is already pending:`);
    Log.warn(logOptions, `https://${region}.console.aws.amazon.com/support/home#/case/?displayId=${openCase.CaseId}`);
    exit(1);
  }
  const concurrencyCurrent = concurrencyLimit.Quota?.Value;
  const defaultConcurrency = defaultConcurrencyLimit.Quota?.Value;
  const increaseRecommended = concurrencyCurrent <= defaultConcurrency;
  if (!increaseRecommended && !forceFlagProvided) {
    Log.error({ indent: false, logLevel }, `Current limit of ${concurrencyCurrent} is already increased over the default (${defaultConcurrency}).`);
    Log.info({ indent: false, logLevel }, "You can force the increase with the --force flag.");
    Log.info({ indent: false, logLevel }, "You are more likely to get an increase if you attach a reason. Go so by going to the AWS console:");
    Log.info({ indent: false, logLevel }, makeQuotaUrl({ quotaId: LAMBDA_CONCURRENCY_LIMIT_QUOTA, region }));
    quit(1);
  }
  const newLimit = Math.floor(concurrencyCurrent / 5000) * 5000 + 5000;
  Log.info({ indent: false, logLevel }, `Sending request to AWS to increase concurrency limit from ${concurrencyCurrent} to ${newLimit}.`);
  if (!await confirmCli({
    allowForceFlag: true,
    delMessage: "Send? (Y/n)"
  })) {
    quit(1);
  }
  try {
    await LambdaClientInternals17.getServiceQuotasClient(region, requestHandler).send(new RequestServiceQuotaIncreaseCommand({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA,
      DesiredValue: newLimit,
      ServiceCode: "lambda"
    }));
  } catch (err) {
    if (err.name === "DependencyAccessDeniedException") {
      Log.error({ indent: false, logLevel }, "Could not request increase because this is a sub-account of another AWS account.");
      Log.error({ indent: false, logLevel }, `Please go to ${makeQuotaUrl({
        quotaId: LAMBDA_CONCURRENCY_LIMIT_QUOTA,
        region
      })} to request the increase via the AWS console.`);
      return;
    }
    throw err;
  }
  Log.info({ indent: false, logLevel }, `Requested increase successfully. Run "${BINARY_NAME6} ${QUOTAS_COMMAND}" to check whether your request was approved.`);
};

// src/cli/commands/quotas/list.ts
import {
  GetAWSDefaultServiceQuotaCommand as GetAWSDefaultServiceQuotaCommand2,
  GetServiceQuotaCommand as GetServiceQuotaCommand2,
  ListRequestedServiceQuotaChangeHistoryByQuotaCommand as ListRequestedServiceQuotaChangeHistoryByQuotaCommand2
} from "@aws-sdk/client-service-quotas";
import { CliInternals as CliInternals10 } from "@remotion/cli";
import { LambdaClientInternals as LambdaClientInternals18 } from "@remotion/lambda-client";
import {
  BINARY_NAME as BINARY_NAME7,
  LAMBDA_CONCURRENCY_LIMIT_QUOTA as LAMBDA_CONCURRENCY_LIMIT_QUOTA2
} from "@remotion/lambda-client/constants";
var quotasListCommand = async (logLevel) => {
  const region = getAwsRegion();
  Log.info({ indent: false, logLevel }, CliInternals10.chalk.gray(`Region = ${region}`));
  Log.info({ indent: false, logLevel });
  const [concurrencyLimit, defaultConcurrencyLimit, changes] = await Promise.all([
    LambdaClientInternals18.getServiceQuotasClient(region, null).send(new GetServiceQuotaCommand2({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA2,
      ServiceCode: "lambda"
    })),
    LambdaClientInternals18.getServiceQuotasClient(region, null).send(new GetAWSDefaultServiceQuotaCommand2({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA2,
      ServiceCode: "lambda"
    })),
    LambdaClientInternals18.getServiceQuotasClient(region, null).send(new ListRequestedServiceQuotaChangeHistoryByQuotaCommand2({
      QuotaCode: LAMBDA_CONCURRENCY_LIMIT_QUOTA2,
      ServiceCode: "lambda"
    }))
  ]);
  const openCase = changes.RequestedQuotas?.find((r) => r.Status === "CASE_OPENED");
  const concurrencyCurrent = concurrencyLimit.Quota?.Value;
  const defaultConcurrency = defaultConcurrencyLimit.Quota?.Value;
  const increaseRecommended = concurrencyCurrent <= defaultConcurrency;
  if (increaseRecommended) {
    Log.info({ indent: false, logLevel }, `Concurrency limit: ${concurrencyCurrent} - ${increaseRecommended ? CliInternals10.chalk.greenBright("Increase recommended!") : ""}`);
  } else {
    Log.info({ indent: false, logLevel }, `Concurrency limit: ${concurrencyCurrent}`);
  }
  if (openCase) {
    Log.warn({ indent: false, logLevel }, `A request to increase it to ${openCase.DesiredValue} is pending:`);
    Log.warn({ indent: false, logLevel }, `https://${region}.console.aws.amazon.com/support/home#/case/?displayId=${openCase.CaseId}`);
  }
  Log.info({ indent: false, logLevel }, CliInternals10.chalk.gray("The maximum amount of Lambda functions which can concurrently execute."));
  Log.info({ indent: false, logLevel }, CliInternals10.chalk.gray(`Run \`npx ${BINARY_NAME7} ${QUOTAS_COMMAND} ${INCREASE_SUBCOMMAND}\` to ask AWS to increase your limit.`));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, CliInternals10.chalk.gray("The maximum amount of concurrency increase in 10 seconds"));
};

// src/cli/commands/quotas/index.ts
var QUOTAS_COMMAND = "quotas";
var printHelp = (logLevel) => {
  CliInternals11.Log.info({ indent: false, logLevel }, "Available commands:");
  CliInternals11.Log.info({ indent: false, logLevel });
  CliInternals11.Log.info({ indent: false, logLevel }, `npx ${BINARY_NAME8} ${QUOTAS_COMMAND}`);
  CliInternals11.Log.info({ indent: false, logLevel }, CliInternals11.chalk.gray("List relevant AWS Lambda quotas."));
  CliInternals11.Log.info({ indent: false, logLevel });
  CliInternals11.Log.info({ indent: false, logLevel }, `npx ${BINARY_NAME8} ${QUOTAS_COMMAND} ${INCREASE_SUBCOMMAND}`);
  CliInternals11.Log.info({ indent: false, logLevel }, CliInternals11.chalk.gray("Increase Lambda quotas."));
};
var quotasCommand = (args, logLevel) => {
  if (args.filter(Boolean).length === 0) {
    return quotasListCommand(logLevel);
  }
  if (args[0] === INCREASE_SUBCOMMAND) {
    return quotasIncreaseCommand(logLevel, null);
  }
  CliInternals11.Log.error({ indent: false, logLevel }, "Subcommand " + args[0] + " not found.");
  printHelp(logLevel);
};

// src/cli/commands/regions.ts
import { CliInternals as CliInternals12 } from "@remotion/cli";
var REGIONS_COMMAND = "regions";
var regionsCommand = (logLevel) => {
  CliInternals12.Log.info({ indent: false, logLevel }, getRegions({
    enabledByDefaultOnly: parsedLambdaCli["default-only"] ?? false
  }).join(" "));
};

// src/cli/commands/render/render.ts
import { CliInternals as CliInternals14 } from "@remotion/cli";
import { ConfigInternals } from "@remotion/cli/config";
import { RenderInternals as RenderInternals5 } from "@remotion/renderer";
import { BrowserSafeApis as BrowserSafeApis3 } from "@remotion/renderer/client";
import path7 from "path";
import { NoReactInternals as NoReactInternals2 } from "remotion/no-react";
import {
  getRenderProgress,
  LambdaClientInternals as LambdaClientInternals19
} from "@remotion/lambda-client";
import {
  BINARY_NAME as BINARY_NAME9,
  DEFAULT_MAX_RETRIES,
  DEFAULT_OUTPUT_PRIVACY
} from "@remotion/lambda-client/constants";
import { validatePrivacy as validatePrivacy2 } from "@remotion/serverless";

// src/shared/sleep.ts
var sleep = (duration) => {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
};

// src/shared/validate-retries.ts
function validateMaxRetries(maxRetries) {
  if (typeof maxRetries !== "number") {
    throw new TypeError("maxRetries must be a number, but is " + JSON.stringify(maxRetries));
  }
  if (!Number.isFinite(maxRetries)) {
    throw new TypeError("maxRetries must be finite, but is " + maxRetries);
  }
  if (Number.isNaN(maxRetries)) {
    throw new TypeError("maxRetries is NaN");
  }
  if (maxRetries < 0) {
    throw new TypeError(`maxRetries cannot be negative but is ${maxRetries}`);
  }
  if (maxRetries % 1 !== 0) {
    throw new TypeError(`maxRetries should be an integer, but is ${maxRetries}.`);
  }
}

// src/cli/helpers/get-webhook-custom-data.ts
import { BrowserSafeApis as BrowserSafeApis2 } from "@remotion/renderer/client";
import fs5 from "node:fs";
import os from "node:os";
import path6 from "node:path";
var getWebhookCustomData = (logLevel) => {
  const flagName = BrowserSafeApis2.options.webhookCustomDataOption.cliFlag;
  const webhookFlag = parsedLambdaCli[flagName];
  if (!webhookFlag) {
    return null;
  }
  const jsonFile = path6.resolve(process.cwd(), webhookFlag);
  try {
    if (fs5.existsSync(jsonFile)) {
      const rawJsonData = fs5.readFileSync(jsonFile, "utf-8");
      return JSON.parse(rawJsonData);
    }
    return JSON.parse(webhookFlag);
  } catch (err) {
    Log.error({ indent: false, logLevel }, `You passed --${flagName} but it was neither valid JSON nor a file path to a valid JSON file. Provided value: ${webhookFlag}`);
    Log.info({ indent: false, logLevel }, "Got the following value:", webhookFlag);
    Log.error({ indent: false, logLevel }, "Check that your input is parseable using `JSON.parse` and try again.");
    if (os.platform() === "win32") {
      const logOptions = {
        indent: false,
        logLevel
      };
      Log.warn(logOptions, "Note: Windows handles escaping of quotes very weirdly in the command line.");
      Log.warn(logOptions, "This might have led to you having this problem.");
      Log.warn(logOptions, "Consider using the alternative API for --props which is to pass");
      Log.warn(logOptions, "a path to a JSON file:");
      Log.warn(logOptions, `  --${flagName}=path/to/props.json`);
    }
    process.exit(1);
  }
};

// src/cli/commands/render/progress.ts
import { CliInternals as CliInternals13 } from "@remotion/cli";
import { RenderInternals as RenderInternals4 } from "@remotion/renderer";
import { truthy } from "@remotion/serverless";
import { NoReactInternals } from "remotion/no-react";
var makeEvaluationProgress = (overall) => {
  const timeToLaunch = overall.compositionValidated ? overall.compositionValidated - overall.functionLaunched : null;
  if (timeToLaunch) {
    return [
      `Got composition`.padEnd(CliInternals13.LABEL_WIDTH),
      CliInternals13.makeProgressBar(1, false),
      CliInternals13.chalk.gray(`${timeToLaunch}ms`)
    ].join(" ");
  }
  if (overall.serveUrlOpened) {
    return [
      `Calculating metadata`.padEnd(CliInternals13.LABEL_WIDTH),
      CliInternals13.makeProgressBar(0.5, false),
      `${overall.currentTime - overall.serveUrlOpened}ms`
    ].join(" ");
  }
  return [
    `Visiting Site`.padEnd(CliInternals13.LABEL_WIDTH),
    CliInternals13.makeProgressBar(0, false),
    `${overall.currentTime - overall.functionLaunched}ms`
  ].join(" ");
};
var makeInvokeProgress = (overall) => {
  const invokeProgress = {
    lambdasInvoked: overall.lambdasInvoked,
    totalLambdas: overall.renderMetadata?.estimatedRenderLambdaInvokations ?? null
  };
  const { lambdasInvoked, totalLambdas } = invokeProgress;
  const progress = totalLambdas === null ? 0 : lambdasInvoked / totalLambdas;
  const topLine = [
    `${progress === 0 ? "Invoked" : "Invoking"} lambdas`.padEnd(CliInternals13.LABEL_WIDTH),
    CliInternals13.makeProgressBar(progress, false),
    progress === 1 ? CliInternals13.chalk.gray(`${lambdasInvoked}/${totalLambdas}`) : totalLambdas === null ? null : `${lambdasInvoked}/${totalLambdas}`
  ].join(" ");
  return [
    topLine,
    overall.retriesInfo.length > 0 ? `! Retrying chunk${overall.retriesInfo.length === 1 ? "" : "s"} ${overall.retriesInfo.map((r) => r.chunk).join(", ")}` : null
  ].filter(NoReactInternals.truthy);
};
var makeRenderProgress = (progress) => {
  const framesEncoded = progress.encodingStatus?.framesEncoded ?? 0;
  const totalFrames = progress.renderMetadata && progress.renderMetadata.type === "video" ? RenderInternals4.getFramesToRender(progress.renderMetadata.frameRange, progress.renderMetadata.everyNthFrame).length : null;
  const renderProgress = totalFrames === null ? 0 : progress.framesRendered / totalFrames;
  const encodingProgress = totalFrames === null ? 0 : framesEncoded / totalFrames;
  const frames = totalFrames === null ? null : `${progress.framesRendered}/${totalFrames}`;
  const first = [
    (progress.timeToRenderFrames === null ? "Rendering frames" : "Rendered frames").padEnd(CliInternals13.LABEL_WIDTH, " "),
    CliInternals13.makeProgressBar(renderProgress, false),
    progress.timeToRenderFrames === null ? frames : CliInternals13.chalk.gray(`${progress.timeToRenderFrames}ms`)
  ].filter(truthy).join(" ");
  const second = [
    `${progress.timeToEncode === null ? "Encoding" : "Encoded"} frames`.padEnd(CliInternals13.LABEL_WIDTH, " "),
    CliInternals13.makeProgressBar(encodingProgress, false),
    progress.timeToEncode === null ? totalFrames === null ? null : `${framesEncoded}/${totalFrames}` : CliInternals13.chalk.gray(`${progress.timeToEncode}ms`)
  ].filter(truthy).join(" ");
  return [first, second];
};
function getTotalFrames(status) {
  return status.renderMetadata && status.renderMetadata.type === "video" ? RenderInternals4.getFramesToRender(status.renderMetadata.frameRange, status.renderMetadata.everyNthFrame).length : null;
}
var makeCombinationProgress = (prog) => {
  const encodingProgress = {
    framesEncoded: prog.encodingStatus?.framesEncoded ?? 0,
    combinedFrames: prog.combinedFrames,
    timeToCombine: prog.timeToCombine
  };
  const totalFrames = getTotalFrames(prog);
  const { combinedFrames, timeToCombine } = encodingProgress;
  const progress = totalFrames === null ? 0 : combinedFrames / totalFrames;
  return [
    `${timeToCombine === null ? "Combining" : "Combined"} chunks`.padEnd(CliInternals13.LABEL_WIDTH, " "),
    CliInternals13.makeProgressBar(progress, false),
    timeToCombine === null ? `${Math.round(progress * 100)}%` : CliInternals13.chalk.gray(`${timeToCombine}ms`)
  ].join(" ");
};
var makeDownloadProgress = (downloadInfo) => {
  return [
    `${downloadInfo.doneIn === null ? "Downloading" : "Downloaded"} video`.padEnd(CliInternals13.LABEL_WIDTH, " "),
    downloadInfo.totalSize === null ? CliInternals13.getFileSizeDownloadBar(downloadInfo.downloaded) : CliInternals13.makeProgressBar(downloadInfo.downloaded / downloadInfo.totalSize, false),
    downloadInfo.doneIn === null ? [
      `${CliInternals13.formatBytes(downloadInfo.downloaded)}`,
      downloadInfo.totalSize === null ? null : `${CliInternals13.formatBytes(downloadInfo.totalSize)}`
    ].filter(NoReactInternals.truthy).join("/") : CliInternals13.chalk.gray(`${downloadInfo.doneIn}ms`)
  ].join(" ");
};
var makeTopRow = (overall) => {
  const timeoutInSeconds = Math.round((overall.timeoutTimestamp - Date.now()) / 1000);
  if (overall.done) {
    return null;
  }
  const str = [
    `${Math.round(overall.overallProgress * 100)}%`,
    overall.renderMetadata ? `${overall.renderMetadata.estimatedTotalLambdaInvokations} λ` : null,
    `${overall.costs.displayCost}`,
    timeoutInSeconds < 0 ? `${CliInternals13.chalk.red("Timeout reached")} - Expecting crash shortly` : `Timeout ${timeoutInSeconds}s`
  ].filter(NoReactInternals.truthy).join(" • ");
  return CliInternals13.chalk.gray(str);
};
var ARTIFACTS_SHOWN = 5;
var makeArtifactProgress = (artifactProgress) => {
  if (artifactProgress.length === 0) {
    return null;
  }
  const artifacts = artifactProgress.slice(0, ARTIFACTS_SHOWN).map((artifact) => {
    return [
      CliInternals13.chalk.blue(`+ S3`.padEnd(CliInternals13.LABEL_WIDTH)),
      CliInternals13.chalk.blue(CliInternals13.makeHyperlink({
        url: artifact.s3Url,
        fallback: artifact.s3Key,
        text: artifact.s3Key
      })),
      CliInternals13.chalk.gray(`${CliInternals13.formatBytes(artifact.sizeInBytes)}`)
    ].join(" ");
  }).filter(truthy).join(`
`);
  const moreSizeCombined = artifactProgress.slice(ARTIFACTS_SHOWN).reduce((acc, artifact) => acc + artifact.sizeInBytes, 0);
  const more = artifactProgress.length > ARTIFACTS_SHOWN ? CliInternals13.chalk.gray(`${" ".repeat(CliInternals13.LABEL_WIDTH)} ${artifactProgress.length - ARTIFACTS_SHOWN} more artifact${artifactProgress.length - ARTIFACTS_SHOWN === 1 ? "" : "s"} ${CliInternals13.formatBytes(moreSizeCombined)}`) : null;
  return [artifacts, more].filter(truthy).join(`
`);
};
var makeProgressString = ({
  downloadInfo,
  overall
}) => {
  return [
    makeTopRow(overall),
    makeEvaluationProgress(overall),
    ...makeInvokeProgress(overall),
    ...makeRenderProgress(overall),
    makeCombinationProgress(overall),
    downloadInfo ? makeDownloadProgress(downloadInfo) : null,
    makeArtifactProgress(overall.artifacts)
  ].filter(NoReactInternals.truthy).join(`
`);
};

// src/cli/commands/render/render.ts
var RENDER_COMMAND = "render";
var {
  x264Option,
  audioBitrateOption,
  offthreadVideoCacheSizeInBytesOption,
  offthreadVideoThreadsOption,
  scaleOption,
  crfOption,
  jpegQualityOption,
  videoBitrateOption,
  mutedOption,
  colorSpaceOption,
  deleteAfterOption,
  enableMultiprocessOnLinuxOption: enableMultiprocessOnLinuxOption2,
  glOption: glOption2,
  headlessOption: headlessOption2,
  numberOfGifLoopsOption,
  encodingMaxRateOption,
  encodingBufferSizeOption,
  delayRenderTimeoutInMillisecondsOption: delayRenderTimeoutInMillisecondsOption2,
  overwriteOption,
  binariesDirectoryOption,
  preferLosslessOption,
  metadataOption,
  mediaCacheSizeInBytesOption
} = BrowserSafeApis3.options;
var renderCommand = async ({
  args,
  remotionRoot,
  logLevel,
  providerSpecifics
}) => {
  const serveUrl = args[0];
  if (!serveUrl) {
    Log.error({ indent: false, logLevel }, "No serve URL passed.");
    Log.info({ indent: false, logLevel }, "Pass an additional argument specifying a URL where your Remotion project is hosted.");
    Log.info({ indent: false, logLevel });
    Log.info({ indent: false, logLevel }, `${BINARY_NAME9} ${RENDER_COMMAND} <serve-url> <composition-id> [output-location]`);
    quit(1);
  }
  const region = getAwsRegion();
  const {
    envVariables,
    frameRange,
    inputProps,
    pixelFormat,
    proResProfile,
    everyNthFrame,
    height,
    width,
    browserExecutable,
    ignoreCertificateErrors,
    userAgent,
    disableWebSecurity
  } = CliInternals14.getCliOptions({
    isStill: false,
    logLevel,
    indent: false
  });
  const x264Preset = x264Option.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const audioBitrate = audioBitrateOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const offthreadVideoCacheSizeInBytes = offthreadVideoCacheSizeInBytesOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const mediaCacheSizeInBytes = mediaCacheSizeInBytesOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const offthreadVideoThreads = offthreadVideoThreadsOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const scale = scaleOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const crf = crfOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const jpegQuality = jpegQualityOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const videoBitrate = videoBitrateOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const muted = mutedOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const colorSpace = colorSpaceOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const deleteAfter = deleteAfterOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const enableMultiProcessOnLinux = enableMultiprocessOnLinuxOption2.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const gl = glOption2.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const headless = headlessOption2.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const numberOfGifLoops = numberOfGifLoopsOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const encodingMaxRate = encodingMaxRateOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const encodingBufferSize = encodingBufferSizeOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const timeoutInMilliseconds = delayRenderTimeoutInMillisecondsOption2.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const overwrite = overwriteOption.getValue({
    commandLine: CliInternals14.parsedCli
  }, false).value;
  const binariesDirectory = binariesDirectoryOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const preferLossless = preferLosslessOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const metadata = metadataOption.getValue({
    commandLine: CliInternals14.parsedCli
  }).value;
  const chromiumOptions = {
    disableWebSecurity,
    enableMultiProcessOnLinux,
    gl,
    headless,
    ignoreCertificateErrors,
    userAgent
  };
  let composition = args[1];
  if (!composition) {
    Log.info({ indent: false, logLevel }, "No compositions passed. Fetching compositions...");
    LambdaClientInternals19.validateServeUrl(serveUrl);
    if (!serveUrl.startsWith("https://") && !serveUrl.startsWith("http://")) {
      throw Error(`Passing the shorthand serve URL without composition name is currently not supported.
 Make sure to pass a composition name after the shorthand serve URL or pass the complete serveURL without composition name to get to choose between all compositions.`);
    }
    const server = await RenderInternals5.prepareServer({
      offthreadVideoThreads: 1,
      indent: false,
      port: ConfigInternals.getRendererPortFromConfigFileAndCliFlag(),
      remotionRoot,
      logLevel,
      webpackConfigOrServeUrl: serveUrl,
      offthreadVideoCacheSizeInBytes,
      binariesDirectory,
      forceIPv4: false
    });
    const indent = false;
    const { compositionId } = await CliInternals14.getCompositionWithDimensionOverride({
      args: args.slice(1),
      compositionIdFromUi: null,
      browserExecutable,
      chromiumOptions,
      envVariables,
      height,
      indent,
      serializedInputPropsWithCustomSchema: NoReactInternals2.serializeJSONWithSpecialTypes({
        indent: undefined,
        staticBase: null,
        data: inputProps
      }).serializedString,
      port: ConfigInternals.getRendererPortFromConfigFileAndCliFlag(),
      puppeteerInstance: undefined,
      serveUrlOrWebpackUrl: serveUrl,
      timeoutInMilliseconds,
      logLevel,
      width,
      server,
      offthreadVideoCacheSizeInBytes,
      offthreadVideoThreads,
      binariesDirectory,
      onBrowserDownload: CliInternals14.defaultBrowserDownloadProgress({
        indent,
        logLevel,
        quiet: CliInternals14.quietFlagProvided()
      }),
      chromeMode: "headless-shell",
      mediaCacheSizeInBytes
    });
    composition = compositionId;
  }
  const outName = parsedLambdaCli["out-name"];
  const downloadName = args[2] ?? null;
  const { value: codec, source: reason } = BrowserSafeApis3.options.videoCodecOption.getValue({
    commandLine: CliInternals14.parsedCli
  }, {
    downloadName,
    outName: outName ?? null,
    configFile: ConfigInternals.getOutputCodecOrUndefined() ?? null,
    uiCodec: null,
    compositionCodec: null
  });
  const imageFormat = CliInternals14.getVideoImageFormat({
    codec,
    uiImageFormat: null
  });
  const functionName = await findFunctionName({ logLevel, providerSpecifics });
  const maxRetries = parsedLambdaCli["max-retries"] ?? DEFAULT_MAX_RETRIES;
  validateMaxRetries(maxRetries);
  const privacy = parsedLambdaCli.privacy ?? DEFAULT_OUTPUT_PRIVACY;
  validatePrivacy2(privacy, true);
  const framesPerLambda = parsedLambdaCli["frames-per-lambda"] ?? undefined;
  const concurrency = parsedLambdaCli["concurrency"] ?? undefined;
  const concurrencyPerLambda = parsedLambdaCli["concurrency-per-lambda"] ?? 1;
  const webhookCustomData = getWebhookCustomData(logLevel);
  const res = await LambdaClientInternals19.internalRenderMediaOnLambdaRaw({
    functionName,
    serveUrl,
    inputProps,
    codec,
    imageFormat,
    crf: crf ?? undefined,
    envVariables,
    pixelFormat,
    proResProfile,
    jpegQuality,
    region,
    maxRetries,
    composition,
    framesPerLambda: framesPerLambda ?? null,
    concurrency: concurrency ?? null,
    privacy,
    logLevel,
    frameRange: frameRange ?? null,
    outName: parsedLambdaCli["out-name"] ?? null,
    timeoutInMilliseconds,
    chromiumOptions,
    scale,
    numberOfGifLoops,
    everyNthFrame,
    concurrencyPerLambda,
    muted,
    overwrite,
    audioBitrate,
    videoBitrate,
    encodingBufferSize,
    encodingMaxRate,
    forceHeight: height,
    forceWidth: width,
    webhook: parsedLambdaCli.webhook ? {
      url: parsedLambdaCli.webhook,
      secret: parsedLambdaCli["webhook-secret"] ?? null,
      customData: webhookCustomData
    } : null,
    rendererFunctionName: parsedLambdaCli["renderer-function-name"] ?? null,
    forceBucketName: parsedLambdaCli["force-bucket-name"] ?? null,
    audioCodec: CliInternals14.parsedCli[BrowserSafeApis3.options.audioCodecOption.cliFlag],
    deleteAfter: deleteAfter ?? null,
    colorSpace,
    downloadBehavior: { type: "play-in-browser" },
    offthreadVideoCacheSizeInBytes: offthreadVideoCacheSizeInBytes ?? null,
    mediaCacheSizeInBytes: mediaCacheSizeInBytes ?? null,
    offthreadVideoThreads: offthreadVideoThreads ?? null,
    x264Preset: x264Preset ?? null,
    preferLossless,
    indent: false,
    forcePathStyle: parsedLambdaCli["force-path-style"] ?? false,
    metadata: metadata ?? null,
    apiKey: parsedLambdaCli[BrowserSafeApis3.options.apiKeyOption.cliFlag] ?? null,
    storageClass: parsedLambdaCli["storage-class"] ?? null,
    requestHandler: null
  });
  const progressBar = CliInternals14.createOverwriteableCliOutput({
    quiet: CliInternals14.quietFlagProvided(),
    cancelSignal: null,
    updatesDontOverwrite: false,
    indent: false
  });
  Log.info({ indent: false, logLevel }, CliInternals14.chalk.gray(`Bucket: ${CliInternals14.makeHyperlink({ text: res.bucketName, fallback: res.bucketName, url: `https://${getAwsRegion()}.console.aws.amazon.com/s3/buckets/${res.bucketName}/?region=${getAwsRegion()}` })}`));
  Log.info({ indent: false, logLevel }, CliInternals14.chalk.gray(`Function: ${CliInternals14.makeHyperlink({ text: functionName, fallback: functionName, url: `https://${getAwsRegion()}.console.aws.amazon.com/lambda/home#/functions/${functionName}?tab=code` })}`));
  Log.info({ indent: false, logLevel }, CliInternals14.chalk.gray(`Render ID: ${CliInternals14.makeHyperlink({ text: res.renderId, fallback: res.renderId, url: res.folderInS3Console })}`));
  Log.info({ indent: false, logLevel }, CliInternals14.chalk.gray(`progress.json: ${CliInternals14.makeHyperlink({
    text: (clickInstruction) => {
      return `${clickInstruction} to view`;
    },
    fallback: res.progressJsonInConsole,
    url: res.progressJsonInConsole
  })}`));
  Log.info({
    indent: false,
    logLevel
  }, CliInternals14.chalk.gray(`${CliInternals14.makeHyperlink({
    text: "Codec",
    fallback: "Codec",
    url: "https://remotion.dev/docs/encoding"
  })}: ${codec} (${reason})`));
  Log.verbose({ indent: false, logLevel }, "CloudWatch logs (if enabled):", CliInternals14.makeHyperlink({
    text: `Main function`,
    url: res.cloudWatchMainLogs,
    fallback: res.cloudWatchMainLogs
  }), CliInternals14.makeHyperlink({
    text: `Renderer functions`,
    url: res.cloudWatchLogs,
    fallback: res.cloudWatchLogs
  }));
  Log.verbose({ indent: false, logLevel }, "Lambda insights: (if enabled):", CliInternals14.makeHyperlink({
    text: (instruction) => `${instruction} to view`,
    url: res.lambdaInsightsLogs,
    fallback: res.lambdaInsightsLogs
  }));
  if (!CliInternals14.supportsHyperlink()) {
    Log.verbose({ indent: false, logLevel }, CliInternals14.makeHyperlink({
      text: (instruction) => `${instruction} for Render folder`,
      url: res.folderInS3Console,
      fallback: `Render folder: ${res.folderInS3Console}`
    }));
  }
  const adheresToFunctionNameConvention = LambdaClientInternals19.parseFunctionName(functionName);
  const status = await getRenderProgress({
    functionName,
    bucketName: res.bucketName,
    renderId: res.renderId,
    region: getAwsRegion(),
    logLevel,
    skipLambdaInvocation: Boolean(adheresToFunctionNameConvention)
  });
  progressBar.update(makeProgressString({
    downloadInfo: null,
    overall: status
  }), false);
  while (true) {
    await sleep(500);
    const newStatus = await getRenderProgress({
      functionName,
      bucketName: res.bucketName,
      renderId: res.renderId,
      region: getAwsRegion(),
      logLevel
    });
    progressBar.update(makeProgressString({
      downloadInfo: null,
      overall: newStatus
    }), false);
    if (newStatus.done) {
      let downloadOrNothing;
      if (downloadName) {
        const downloadStart = Date.now();
        const download = await internalDownloadMedia({
          bucketName: res.bucketName,
          outPath: downloadName,
          region: getAwsRegion(),
          renderId: res.renderId,
          logLevel,
          onProgress: ({ downloaded, totalSize }) => {
            progressBar.update(makeProgressString({
              downloadInfo: {
                doneIn: null,
                downloaded,
                totalSize
              },
              overall: newStatus
            }), false);
          },
          providerSpecifics,
          forcePathStyle: parsedLambdaCli["force-path-style"]
        });
        downloadOrNothing = download;
        progressBar.update(makeProgressString({
          downloadInfo: {
            doneIn: Date.now() - downloadStart,
            downloaded: download.sizeInBytes,
            totalSize: download.sizeInBytes
          },
          overall: newStatus
        }), false);
      }
      Log.info({ indent: false, logLevel });
      Log.info({ indent: false, logLevel }, CliInternals14.chalk.blue("+ S3 ".padEnd(CliInternals14.LABEL_WIDTH)), CliInternals14.chalk.blue(CliInternals14.makeHyperlink({
        fallback: newStatus.outputFile,
        text: newStatus.outKey,
        url: newStatus.outputFile
      })), CliInternals14.chalk.gray(CliInternals14.formatBytes(newStatus.outputSizeInBytes)));
      if (downloadOrNothing) {
        const relativeOutputPath = path7.relative(process.cwd(), downloadOrNothing.outputPath);
        Log.info({ indent: false, logLevel }, CliInternals14.chalk.blue("↓".padEnd(CliInternals14.LABEL_WIDTH)), CliInternals14.chalk.blue(CliInternals14.makeHyperlink({
          url: `file://${downloadOrNothing.outputPath}`,
          text: relativeOutputPath,
          fallback: downloadOrNothing.outputPath
        })), CliInternals14.chalk.gray(CliInternals14.formatBytes(downloadOrNothing.sizeInBytes)));
      }
      Log.info({ indent: false, logLevel });
      Log.info({ indent: false, logLevel }, [
        newStatus.renderMetadata ? `${newStatus.renderMetadata.estimatedTotalLambdaInvokations} λ's used` : null,
        newStatus.timeToFinish ? `${(newStatus.timeToFinish / 1000).toFixed(2)}sec` : null,
        `Estimated cost ${newStatus.costs.displayCost}`
      ].filter(Boolean).join(", "));
      if (newStatus.mostExpensiveFrameRanges) {
        Log.verbose({ indent: false, logLevel }, "Most expensive frame ranges:");
        Log.verbose({ indent: false, logLevel }, newStatus.mostExpensiveFrameRanges.map((f) => {
          return `${f.frameRange[0]}-${f.frameRange[1]} (Chunk ${f.chunk}, ${f.timeInMilliseconds}ms)`;
        }).join(", "));
      }
      quit(0);
    }
    if (newStatus.fatalErrorEncountered) {
      Log.error({ indent: false, logLevel }, `
`);
      const uniqueErrors = [];
      for (const err of newStatus.errors) {
        if (uniqueErrors.find((e) => e.stack === err.stack)) {
          continue;
        }
        uniqueErrors.push(err);
        if (err.explanation) {
          Log.error({ indent: false, logLevel }, err.explanation);
        }
        const frames = RenderInternals5.parseStack(err.stack.split(`
`));
        const errorWithStackFrame = new RenderInternals5.SymbolicateableError({
          message: err.message,
          frame: err.frame,
          name: err.name,
          stack: err.stack,
          stackFrame: frames,
          chunk: err.chunk
        });
        await CliInternals14.printError(errorWithStackFrame, logLevel);
      }
      Log.info({ indent: false, logLevel });
      Log.info({ indent: false, logLevel }, `Accrued costs until error was thrown: ${newStatus.costs.displayCost}.`);
      Log.info({ indent: false, logLevel }, "This is an estimate and continuing Lambda functions may incur additional costs.");
      quit(1);
    }
  }
};

// src/cli/commands/sites/index.ts
import { CliInternals as CliInternals20 } from "@remotion/cli";
import { BINARY_NAME as BINARY_NAME11 } from "@remotion/lambda-client/constants";

// src/cli/commands/sites/create.ts
import { CliInternals as CliInternals16 } from "@remotion/cli";
import { ConfigInternals as ConfigInternals2 } from "@remotion/cli/config";
import { BrowserSafeApis as BrowserSafeApis4 } from "@remotion/renderer/client";
import { BINARY_NAME as BINARY_NAME10 } from "@remotion/lambda-client/constants";
import { internalGetOrCreateBucket as internalGetOrCreateBucket2 } from "@remotion/serverless";
import { NoReactInternals as NoReactInternals4 } from "remotion/no-react";

// src/cli/helpers/progress-bar.ts
import { CliInternals as CliInternals15 } from "@remotion/cli";
import { NoReactInternals as NoReactInternals3 } from "remotion/no-react";
var makeBundleProgress = ({ progress, doneIn }) => {
  return [
    `${doneIn === null ? "Bundling" : "Bundled"} site`.padEnd(CliInternals15.LABEL_WIDTH, " "),
    CliInternals15.makeProgressBar(progress / 100, false),
    doneIn === null ? `${Math.round(progress)}%` : CliInternals15.chalk.gray(`${doneIn}ms`)
  ].join(" ");
};
var makeBucketProgress = ({ doneIn }) => {
  const progress = doneIn === null ? 0 : 1;
  return [
    `${doneIn === null ? "Creating" : "Created"} bucket`.padEnd(CliInternals15.LABEL_WIDTH, " "),
    CliInternals15.makeProgressBar(progress, false),
    doneIn === null ? `0/1` : CliInternals15.chalk.gray(`${doneIn}ms`)
  ].join(" ");
};
var makeUploadDiff = ({ stats }) => {
  if (!stats) {
    return null;
  }
  if (stats.addedFiles === 0 && stats.removedFiles === 0) {
    return CliInternals15.chalk.gray(`(Unchanged)`);
  }
  const total = stats.addedFiles + stats.removedFiles;
  return CliInternals15.chalk.gray(`(${[
    stats.addedFiles ? `+${stats.addedFiles}` : null,
    stats.removedFiles ? `-${stats.removedFiles}` : null
  ].filter(NoReactInternals3.truthy).join(",")} ${total === 1 ? "file" : "files"})`);
};
var makeDiffingProgressBar = ({
  bytesProcessed,
  doneIn
}) => {
  const progress = doneIn === null ? 0 : 1;
  if (bytesProcessed === 0) {
    return null;
  }
  return [
    `${doneIn === null ? "Calculating changes" : "Calculated changes"}`.padEnd(CliInternals15.LABEL_WIDTH, " "),
    CliInternals15.makeProgressBar(progress, false),
    doneIn === null ? bytesProcessed === 0 ? null : `${CliInternals15.formatBytes(bytesProcessed)}` : CliInternals15.chalk.gray(`${doneIn}ms`)
  ].filter(NoReactInternals3.truthy).join(" ");
};
var makeDeployProgressBar = ({
  sizeUploaded,
  totalSize,
  doneIn,
  stats
}) => {
  const progress = totalSize === null ? 0 : sizeUploaded / totalSize;
  return [
    `${doneIn === null ? "Uploading" : "Uploaded"} to S3`.padEnd(CliInternals15.LABEL_WIDTH, " "),
    CliInternals15.makeProgressBar(progress, false),
    doneIn === null ? typeof totalSize === "number" ? `${CliInternals15.formatBytes(sizeUploaded)}/${CliInternals15.formatBytes(totalSize)}` : "" : CliInternals15.chalk.gray(`${doneIn}ms`),
    makeUploadDiff({ stats })
  ].filter(NoReactInternals3.truthy).join(" ");
};

// src/cli/commands/sites/create.ts
var SITES_CREATE_SUBCOMMAND = "create";
var {
  folderExpiryOption,
  publicDirOption,
  throwIfSiteExistsOption,
  disableGitSourceOption
} = BrowserSafeApis4.options;
var sitesCreateSubcommand = async (args, remotionRoot, logLevel, implementation) => {
  const { file, reason } = CliInternals16.findEntryPoint({
    args,
    remotionRoot,
    logLevel,
    allowDirectory: false
  });
  if (!file) {
    Log.error({ indent: false, logLevel }, "No entry file passed.");
    Log.info({ indent: false, logLevel }, "Pass an additional argument specifying the entry file of your Remotion project:");
    Log.info({ indent: false, logLevel });
    Log.info({ indent: false, logLevel }, `${BINARY_NAME10} lambda sites create <entry-file.ts>`);
    quit(1);
    return;
  }
  Log.verbose({ indent: false, logLevel }, "Entry point:", file, "Reason:", reason);
  const desiredSiteName = parsedLambdaCli["site-name"] ?? undefined;
  if (desiredSiteName !== undefined) {
    validateSiteName(desiredSiteName);
  }
  const progressBar = CliInternals16.createOverwriteableCliOutput({
    quiet: CliInternals16.quietFlagProvided(),
    cancelSignal: null,
    updatesDontOverwrite: false,
    indent: false
  });
  const multiProgress = {
    bundleProgress: {
      doneIn: null,
      progress: 0
    },
    bucketProgress: {
      doneIn: null
    },
    deployProgress: {
      doneIn: null,
      totalSize: null,
      sizeUploaded: 0,
      stats: null
    },
    diffingProgress: {
      doneIn: null,
      bytesProcessed: 0
    }
  };
  const updateProgress = (newLine) => {
    progressBar.update([
      makeBundleProgress(multiProgress.bundleProgress),
      makeBucketProgress(multiProgress.bucketProgress),
      makeDiffingProgressBar(multiProgress.diffingProgress),
      makeDeployProgressBar(multiProgress.deployProgress)
    ].filter(NoReactInternals4.truthy).join(`
`), newLine);
  };
  const bucketStart = Date.now();
  const enableFolderExpiry = folderExpiryOption.getValue({
    commandLine: CliInternals16.parsedCli
  }).value;
  const cliBucketName = parsedLambdaCli["force-bucket-name"] ?? null;
  const bucketName = cliBucketName ?? (await internalGetOrCreateBucket2({
    region: getAwsRegion(),
    enableFolderExpiry,
    customCredentials: null,
    providerSpecifics: implementation,
    forcePathStyle: false,
    skipPutAcl: parsedLambdaCli.privacy === "no-acl",
    requestHandler: null
  })).bucketName;
  multiProgress.bucketProgress.doneIn = Date.now() - bucketStart;
  updateProgress(false);
  const bundleStart = Date.now();
  let uploadStart = Date.now();
  const publicDir = publicDirOption.getValue({
    commandLine: CliInternals16.parsedCli
  }).value;
  const throwIfSiteExists = throwIfSiteExistsOption.getValue({
    commandLine: CliInternals16.parsedCli
  }).value;
  const disableGitSource = disableGitSourceOption.getValue({
    commandLine: CliInternals16.parsedCli
  }).value;
  const gitSource = CliInternals16.getGitSource({
    remotionRoot,
    disableGitSource,
    logLevel
  });
  const { serveUrl, siteName, stats } = await LambdaInternals.internalDeploySite({
    entryPoint: file,
    siteName: desiredSiteName ?? implementation.randomHash(),
    bucketName,
    options: {
      publicDir,
      rootDir: remotionRoot,
      onBundleProgress: (progress) => {
        multiProgress.bundleProgress = {
          progress,
          doneIn: progress === 100 ? Date.now() - bundleStart : null
        };
        if (progress === 100) {
          uploadStart = Date.now();
        }
        updateProgress(false);
      },
      onDiffingProgress(bytes, done) {
        const previous = multiProgress.diffingProgress.bytesProcessed;
        const newBytes = bytes - previous;
        if (newBytes > 1e8 || done) {
          multiProgress.diffingProgress = {
            bytesProcessed: bytes,
            doneIn: done ? Date.now() - bundleStart : null
          };
          updateProgress(false);
        }
      },
      onUploadProgress: (p) => {
        multiProgress.deployProgress = {
          sizeUploaded: p.sizeUploaded,
          totalSize: p.totalSize,
          doneIn: null,
          stats: null
        };
        updateProgress(false);
      },
      enableCaching: ConfigInternals2.getWebpackCaching(),
      webpackOverride: ConfigInternals2.getWebpackOverrideFn() ?? ((f) => f),
      bypassBucketNameValidation: Boolean(parsedLambdaCli["force-bucket-name"])
    },
    region: getAwsRegion(),
    privacy: parsedLambdaCli.privacy ?? "public",
    gitSource,
    indent: false,
    logLevel,
    throwIfSiteExists,
    providerSpecifics: implementation,
    forcePathStyle: parsedLambdaCli["force-path-style"] ?? false,
    fullClientSpecifics: awsFullClientSpecifics,
    requestHandler: null
  });
  const uploadDuration = Date.now() - uploadStart;
  multiProgress.deployProgress = {
    sizeUploaded: 1,
    totalSize: 1,
    doneIn: uploadDuration,
    stats: {
      addedFiles: stats.uploadedFiles,
      removedFiles: stats.deletedFiles,
      untouchedFiles: stats.untouchedFiles
    }
  };
  updateProgress(true);
  CliInternals16.printFact("info")({
    indent: false,
    left: "Serve URL",
    logLevel,
    right: serveUrl,
    color: "blueBright"
  });
  CliInternals16.printFact("info")({
    indent: false,
    left: "Site name",
    logLevel,
    right: siteName,
    color: "blueBright"
  });
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, CliInternals16.chalk.blueBright("ℹ️   Redeploy your site everytime you make changes to it. You can overwrite the existing site by running:"));
  Log.info({ indent: false, logLevel }, CliInternals16.chalk.blueBright(["npx remotion lambda sites create", args[0], `--site-name=${siteName}`].filter(NoReactInternals4.truthy).join(" ")));
};

// src/cli/commands/sites/ls.ts
import { CliInternals as CliInternals17 } from "@remotion/cli";
import { getSites } from "@remotion/lambda-client";

// src/cli/helpers/date-string.ts
var dateString = (date) => date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0");

// src/cli/commands/sites/ls.ts
var SITES_LS_SUBCOMMAND = "ls";
var COLS = [20, 30, 10, 15];
var logRow = (data) => {
  return [
    data[0].padEnd(COLS[0], " "),
    data[1].padEnd(COLS[1], " "),
    data[2].padEnd(COLS[2], " "),
    String(data[3]).padEnd(COLS[3], " ")
  ].join("");
};
var sitesLsSubcommand = async (logLevel) => {
  const region = getAwsRegion();
  const { sites, buckets } = await getSites({ region });
  if (buckets.length > 1 && !CliInternals17.quietFlagProvided()) {
    CliInternals17.Log.warn({ indent: false, logLevel }, "Warning: You have more than one Remotion S3 bucket, but only one is needed. This can lead to conflicts. Remove all but one of them.");
  }
  const sitesPluralized = sites.length === 1 ? "site" : "sites";
  if (!CliInternals17.quietFlagProvided()) {
    CliInternals17.Log.info({ indent: false, logLevel }, `${sites.length} ${sitesPluralized} in the ${region} region.`);
  }
  if (CliInternals17.quietFlagProvided()) {
    if (sites.length === 0) {
      CliInternals17.Log.info({ indent: false, logLevel }, "()");
      return;
    }
    return CliInternals17.Log.info({ indent: false, logLevel }, sites.map((s) => s.id).join(" "));
  }
  CliInternals17.Log.info({ indent: false, logLevel });
  CliInternals17.Log.info({ indent: false, logLevel }, CliInternals17.chalk.gray(logRow(["Site Name", "Bucket", "Size", "Last updated"])));
  for (const site of sites) {
    CliInternals17.Log.info({ indent: false, logLevel }, logRow([
      site.id,
      site.bucketName,
      CliInternals17.formatBytes(site.sizeInBytes),
      site.lastModified ? dateString(new Date(site.lastModified)) : "n/a"
    ]));
    CliInternals17.Log.info({ indent: false, logLevel }, site.serveUrl);
    CliInternals17.Log.info({ indent: false, logLevel });
  }
};

// src/cli/commands/sites/rm.ts
import { CliInternals as CliInternals18 } from "@remotion/cli";
import { getSites as getSites2 } from "@remotion/lambda-client";
import { internalGetOrCreateBucket as internalGetOrCreateBucket3 } from "@remotion/serverless";
var SITES_RM_COMMAND = "rm";
var sitesRmSubcommand = async (args, logLevel, implementation) => {
  if (args.length === 0) {
    Log.error({ indent: false, logLevel }, "No site name was passed. Run the command again and pass another argument <site-name>.");
    quit(1);
  }
  if (args[0] === "()") {
    Log.info({ indent: false, logLevel }, "No sites to remove.");
    return;
  }
  const region = getAwsRegion();
  const deployedSites = await getSites2({
    region,
    forceBucketName: parsedLambdaCli["force-bucket-name"]
  });
  const bucketName = parsedLambdaCli["force-bucket-name"] ?? (await internalGetOrCreateBucket3({
    region,
    enableFolderExpiry: false,
    customCredentials: null,
    providerSpecifics: implementation,
    forcePathStyle: false,
    skipPutAcl: false,
    requestHandler: null
  })).bucketName;
  for (const siteName of args) {
    const site = deployedSites.sites.find((s) => s.id === siteName.trim());
    if (!site) {
      Log.error({ indent: false, logLevel }, `No site ${siteName.trim()} was found in your bucket ${bucketName}.`);
      return quit(1);
    }
    if (!await confirmCli({
      delMessage: `Site ${site.id} in bucket ${site.bucketName} (${CliInternals18.formatBytes(site.sizeInBytes)}): Delete? (Y/n)`,
      allowForceFlag: true
    })) {
      quit(1);
    }
    const { totalSizeInBytes: totalSize } = await deleteSite({
      bucketName,
      siteName,
      region,
      onAfterItemDeleted: ({ itemName }) => {
        Log.info({ indent: false, logLevel }, CliInternals18.chalk.gray(`Deleted ${itemName}`));
      }
    });
    Log.info({ indent: false, logLevel }, `Deleted site ${siteName} and freed up ${CliInternals18.formatBytes(totalSize)}.`);
  }
};

// src/cli/commands/sites/rmall.ts
import { CliInternals as CliInternals19 } from "@remotion/cli";
import { getSites as getSites3 } from "@remotion/lambda-client";
import { internalGetOrCreateBucket as internalGetOrCreateBucket4 } from "@remotion/serverless";
var SITES_RMALL_COMMAND = "rmall";
var sitesRmallSubcommand = async (logLevel, implementation) => {
  const region = getAwsRegion();
  const deployedSites = await getSites3({
    region
  });
  const bucketName = parsedLambdaCli["force-bucket-name"] ?? (await internalGetOrCreateBucket4({
    region,
    enableFolderExpiry: false,
    customCredentials: null,
    providerSpecifics: implementation,
    forcePathStyle: false,
    skipPutAcl: false,
    requestHandler: null
  })).bucketName;
  for (const site of deployedSites.sites) {
    if (!await confirmCli({
      delMessage: `Site ${site.id} in bucket ${site.bucketName} (${CliInternals19.formatBytes(site.sizeInBytes)}): Delete? (Y/n)`,
      allowForceFlag: true
    })) {
      continue;
    }
    const { totalSizeInBytes: totalSize } = await deleteSite({
      bucketName,
      siteName: site.id,
      region,
      onAfterItemDeleted: ({ itemName }) => {
        Log.info({ indent: false, logLevel }, CliInternals19.chalk.gray(`Deleted ${itemName}`));
      }
    });
    Log.info({ indent: false, logLevel }, `Deleted site ${site.id} and freed up ${CliInternals19.formatBytes(totalSize)}.`);
  }
};

// src/cli/commands/sites/index.ts
var SITES_COMMAND = "sites";
var printSitesHelp = (logLevel) => {
  CliInternals20.Log.info({ indent: false, logLevel }, `${BINARY_NAME11} ${SITES_COMMAND} <subcommand>`);
  CliInternals20.Log.info({ indent: false, logLevel });
  CliInternals20.Log.info({ indent: false, logLevel }, "Available subcommands:");
  CliInternals20.Log.info({ indent: false, logLevel });
  CliInternals20.Log.info({ indent: false, logLevel }, `${BINARY_NAME11} ${SITES_COMMAND} ${SITES_CREATE_SUBCOMMAND} <entry-point>`);
  CliInternals20.Log.info({ indent: false, logLevel }, CliInternals20.chalk.gray("Creates a new site based on a Remotion project"));
  CliInternals20.Log.info({ indent: false, logLevel });
  CliInternals20.Log.info({ indent: false, logLevel }, `${BINARY_NAME11} ${SITES_COMMAND} ${SITES_LS_SUBCOMMAND}`);
  CliInternals20.Log.info({ indent: false, logLevel }, CliInternals20.chalk.gray("Lists the sites currently deployed"));
  CliInternals20.Log.info({ indent: false, logLevel });
  CliInternals20.Log.info({ indent: false, logLevel }, `${BINARY_NAME11} ${SITES_COMMAND} ${SITES_RM_COMMAND} <site-id>`);
  CliInternals20.Log.info({ indent: false, logLevel }, CliInternals20.chalk.gray("Remove a site from the S3 bucket."));
  CliInternals20.Log.info({ indent: false, logLevel });
  CliInternals20.Log.info({ indent: false, logLevel }, `${BINARY_NAME11} ${SITES_COMMAND} ${SITES_RMALL_COMMAND}`);
  CliInternals20.Log.info({ indent: false, logLevel }, CliInternals20.chalk.gray("Remove all sites from the S3 bucket."));
};
var sitesCommand = (args, remotionRoot, logLevel, providerSpecifics) => {
  if (args[0] === SITES_LS_SUBCOMMAND) {
    return sitesLsSubcommand(logLevel);
  }
  if (args[0] === SITES_RM_COMMAND) {
    return sitesRmSubcommand(args.slice(1), logLevel, providerSpecifics);
  }
  if (args[0] === SITES_RMALL_COMMAND) {
    return sitesRmallSubcommand(logLevel, providerSpecifics);
  }
  if (args[0] === SITES_CREATE_SUBCOMMAND) {
    return sitesCreateSubcommand(args.slice(1), remotionRoot, logLevel, providerSpecifics);
  }
  if (args[0]) {
    CliInternals20.Log.error({ indent: false, logLevel }, `Subcommand ${args[0]} not found.`);
    printSitesHelp(logLevel);
    quit(1);
  }
  printSitesHelp(logLevel);
};

// src/cli/commands/still.ts
import { CliInternals as CliInternals21 } from "@remotion/cli";
import { ConfigInternals as ConfigInternals3 } from "@remotion/cli/config";
import { LambdaClientInternals as LambdaClientInternals20 } from "@remotion/lambda-client";
import {
  BINARY_NAME as BINARY_NAME12,
  DEFAULT_MAX_RETRIES as DEFAULT_MAX_RETRIES2,
  DEFAULT_OUTPUT_PRIVACY as DEFAULT_OUTPUT_PRIVACY2
} from "@remotion/lambda-client/constants";
import { RenderInternals as RenderInternals6 } from "@remotion/renderer";
import { BrowserSafeApis as BrowserSafeApis5 } from "@remotion/renderer/client";
import { validatePrivacy as validatePrivacy3 } from "@remotion/serverless";
import path8 from "path";
import { NoReactInternals as NoReactInternals5 } from "remotion/no-react";
var {
  offthreadVideoCacheSizeInBytesOption: offthreadVideoCacheSizeInBytesOption2,
  offthreadVideoThreadsOption: offthreadVideoThreadsOption2,
  scaleOption: scaleOption2,
  deleteAfterOption: deleteAfterOption2,
  jpegQualityOption: jpegQualityOption2,
  enableMultiprocessOnLinuxOption: enableMultiprocessOnLinuxOption3,
  glOption: glOption3,
  headlessOption: headlessOption3,
  delayRenderTimeoutInMillisecondsOption: delayRenderTimeoutInMillisecondsOption3,
  binariesDirectoryOption: binariesDirectoryOption2,
  mediaCacheSizeInBytesOption: mediaCacheSizeInBytesOption2
} = BrowserSafeApis5.options;
var {
  parsedCli,
  determineFinalStillImageFormat,
  chalk,
  getCliOptions,
  formatBytes,
  getCompositionWithDimensionOverride
} = CliInternals21;
var STILL_COMMAND = "still";
var stillCommand = async ({
  args,
  remotionRoot,
  logLevel,
  providerSpecifics
}) => {
  const serveUrl = args[0];
  if (!serveUrl) {
    Log.error({ indent: false, logLevel }, "No serve URL passed.");
    Log.info({ indent: false, logLevel }, "Pass an additional argument specifying a URL where your Remotion project is hosted.");
    Log.info({ indent: false, logLevel });
    Log.info({ indent: false, logLevel }, `${BINARY_NAME12} ${STILL_COMMAND} <serve-url> <composition-id>  [output-location]`);
    quit(1);
  }
  const {
    envVariables,
    inputProps,
    stillFrame,
    height,
    width,
    browserExecutable,
    userAgent,
    disableWebSecurity,
    ignoreCertificateErrors
  } = getCliOptions({
    isStill: true,
    logLevel,
    indent: false
  });
  const region = getAwsRegion();
  let composition = args[1];
  const enableMultiProcessOnLinux = enableMultiprocessOnLinuxOption3.getValue({
    commandLine: parsedCli
  }).value;
  const gl = glOption3.getValue({ commandLine: parsedCli }).value;
  const headless = headlessOption3.getValue({
    commandLine: parsedCli
  }).value;
  const chromiumOptions = {
    disableWebSecurity,
    enableMultiProcessOnLinux,
    gl,
    headless,
    ignoreCertificateErrors,
    userAgent
  };
  const timeoutInMilliseconds = delayRenderTimeoutInMillisecondsOption3.getValue({
    commandLine: parsedCli
  }).value;
  const offthreadVideoCacheSizeInBytes = offthreadVideoCacheSizeInBytesOption2.getValue({
    commandLine: parsedCli
  }).value;
  const offthreadVideoThreads = offthreadVideoThreadsOption2.getValue({
    commandLine: parsedCli
  }).value;
  const binariesDirectory = binariesDirectoryOption2.getValue({
    commandLine: parsedCli
  }).value;
  const mediaCacheSizeInBytes = mediaCacheSizeInBytesOption2.getValue({
    commandLine: parsedCli
  }).value;
  if (!composition) {
    Log.info({ indent: false, logLevel }, "No compositions passed. Fetching compositions...");
    LambdaClientInternals20.validateServeUrl(serveUrl);
    if (!serveUrl.startsWith("https://") && !serveUrl.startsWith("http://")) {
      throw Error(`Passing the shorthand serve URL without composition name is currently not supported.
 Make sure to pass a composition name after the shorthand serve URL or pass the complete serveURL without composition name to get to choose between all compositions.`);
    }
    const server = await RenderInternals6.prepareServer({
      offthreadVideoThreads: 1,
      indent: false,
      port: ConfigInternals3.getRendererPortFromConfigFileAndCliFlag(),
      remotionRoot,
      logLevel,
      webpackConfigOrServeUrl: serveUrl,
      offthreadVideoCacheSizeInBytes,
      binariesDirectory,
      forceIPv4: false
    });
    const indent = false;
    const { compositionId } = await getCompositionWithDimensionOverride({
      args: args.slice(1),
      compositionIdFromUi: null,
      indent,
      serveUrlOrWebpackUrl: serveUrl,
      logLevel,
      browserExecutable,
      chromiumOptions,
      envVariables,
      serializedInputPropsWithCustomSchema: NoReactInternals5.serializeJSONWithSpecialTypes({
        indent: undefined,
        staticBase: null,
        data: inputProps
      }).serializedString,
      port: ConfigInternals3.getRendererPortFromConfigFileAndCliFlag(),
      puppeteerInstance: undefined,
      timeoutInMilliseconds,
      height,
      width,
      server,
      offthreadVideoCacheSizeInBytes,
      offthreadVideoThreads,
      binariesDirectory,
      onBrowserDownload: CliInternals21.defaultBrowserDownloadProgress({
        indent,
        logLevel,
        quiet: CliInternals21.quietFlagProvided()
      }),
      chromeMode: "headless-shell",
      mediaCacheSizeInBytes
    });
    composition = compositionId;
  }
  const downloadName = args[2] ?? null;
  const outName = parsedLambdaCli["out-name"];
  const functionName = await findFunctionName({ logLevel, providerSpecifics });
  const maxRetries = parsedLambdaCli["max-retries"] ?? DEFAULT_MAX_RETRIES2;
  validateMaxRetries(maxRetries);
  const privacy = parsedLambdaCli.privacy ?? DEFAULT_OUTPUT_PRIVACY2;
  validatePrivacy3(privacy, true);
  const { format: imageFormat, source: imageFormatReason } = determineFinalStillImageFormat({
    downloadName,
    outName: outName ?? null,
    cliFlag: parsedCli["image-format"] ?? null,
    isLambda: true,
    fromUi: null,
    configImageFormat: ConfigInternals3.getUserPreferredStillImageFormat() ?? null
  });
  Log.info({ indent: false, logLevel }, CliInternals21.chalk.gray(`Function: ${CliInternals21.makeHyperlink({ text: functionName, fallback: functionName, url: `https://${getAwsRegion()}.console.aws.amazon.com/lambda/home#/functions/${functionName}?tab=code` })}`));
  Log.info({ indent: false, logLevel }, CliInternals21.chalk.gray(`Image Format = ${imageFormat} (${imageFormatReason})`));
  const deleteAfter = parsedLambdaCli[deleteAfterOption2.cliFlag];
  const scale = scaleOption2.getValue({
    commandLine: parsedCli
  }).value;
  const jpegQuality = jpegQualityOption2.getValue({
    commandLine: parsedCli
  }).value;
  const res = await LambdaClientInternals20.internalRenderStillOnLambda({
    functionName,
    serveUrl,
    inputProps,
    imageFormat,
    composition,
    privacy,
    region,
    maxRetries,
    envVariables,
    frame: stillFrame,
    jpegQuality,
    logLevel,
    outName: outName ?? null,
    chromiumOptions,
    timeoutInMilliseconds,
    scale,
    forceHeight: height,
    forceWidth: width,
    onInit: ({ cloudWatchLogs, lambdaInsightsUrl }) => {
      Log.verbose({ indent: false, logLevel }, `${CliInternals21.makeHyperlink({
        text: "CloudWatch Logs",
        url: cloudWatchLogs,
        fallback: `CloudWatch Logs: ${cloudWatchLogs}`
      })} (if enabled)`);
      Log.verbose({ indent: false, logLevel }, `${CliInternals21.makeHyperlink({
        text: "Lambda Insights",
        url: lambdaInsightsUrl,
        fallback: `Lambda Insights: ${lambdaInsightsUrl}`
      })} (if enabled)`);
    },
    deleteAfter: deleteAfter ?? null,
    storageClass: parsedLambdaCli["storage-class"] ?? null,
    apiKey: parsedLambdaCli[BrowserSafeApis5.options.apiKeyOption.cliFlag] ?? null,
    downloadBehavior: { type: "play-in-browser" },
    forceBucketName: parsedLambdaCli["force-bucket-name"] ?? null,
    forcePathStyle: parsedLambdaCli["force-path-style"] ?? false,
    indent: false,
    offthreadVideoCacheSizeInBytes,
    offthreadVideoThreads: null,
    requestHandler: null,
    mediaCacheSizeInBytes
  });
  Log.info({ indent: false, logLevel }, CliInternals21.chalk.gray(`Render ID: ${CliInternals21.makeHyperlink({ text: res.renderId, fallback: res.renderId, url: LambdaClientInternals20.getS3RenderUrl({ bucketName: res.bucketName, renderId: res.renderId, region: getAwsRegion() }) })}`));
  Log.info({ indent: false, logLevel }, CliInternals21.chalk.gray(`Bucket: ${CliInternals21.makeHyperlink({ text: res.bucketName, fallback: res.bucketName, url: `https://${getAwsRegion()}.console.aws.amazon.com/s3/buckets/${res.bucketName}/?region=${getAwsRegion()}` })}`));
  const artifactProgress = makeArtifactProgress(res.artifacts);
  if (artifactProgress) {
    Log.info({
      indent: false,
      logLevel
    }, makeArtifactProgress(res.artifacts));
  }
  Log.info({ indent: false, logLevel }, chalk.blue("+ S3".padEnd(CliInternals21.LABEL_WIDTH)), chalk.blue(CliInternals21.makeHyperlink({
    fallback: res.url,
    url: res.url,
    text: res.outKey
  })), chalk.gray(formatBytes(res.sizeInBytes)));
  if (downloadName) {
    const { outputPath, sizeInBytes } = await internalDownloadMedia({
      bucketName: res.bucketName,
      outPath: downloadName,
      region,
      renderId: res.renderId,
      logLevel,
      providerSpecifics,
      forcePathStyle: parsedLambdaCli["force-path-style"]
    });
    const relativePath = path8.relative(process.cwd(), outputPath);
    Log.info({ indent: false, logLevel }, chalk.blue("↓".padEnd(CliInternals21.LABEL_WIDTH)), chalk.blue(CliInternals21.makeHyperlink({
      url: "file://" + outputPath,
      text: relativePath,
      fallback: outputPath
    })), chalk.gray(formatBytes(sizeInBytes)));
  }
};

// src/cli/help.ts
import { CliInternals as CliInternals22 } from "@remotion/cli";
import { BINARY_NAME as BINARY_NAME13 } from "@remotion/lambda-client/constants";
var packagejson = require_package();
var printHelp2 = (logLevel) => {
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${packagejson.version} © ${new Date().getFullYear()} The Remotion developers`);
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, "Available commands:");
  Log.info({ indent: false, logLevel }, "");
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${RENDER_COMMAND} <s3-url> <composition-id>`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Render a video in the cloud."));
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${STILL_COMMAND} <s3-url> <composition-id>`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Render a still image in the cloud."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${FUNCTIONS_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Deploy and manage AWS Lambda functions."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${SITES_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Deploy and manage Remotion projects."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${COMPOSITIONS_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Print list of composition IDs from a serve URL."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${POLICIES_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("View and validate AWS policy files."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${REGIONS_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Show the list of AWS regions supported."));
  Log.info({ indent: false, logLevel });
  Log.info({ indent: false, logLevel }, `${BINARY_NAME13} ${QUOTAS_COMMAND}`);
  Log.info({ indent: false, logLevel }, CliInternals22.chalk.gray("Shows AWS quotas and allows to increase them."));
};

// src/cli/index.ts
var requiresCredentials = (args) => {
  if (args[0] === POLICIES_COMMAND) {
    if (args[1] === USER_SUBCOMMAND) {
      return false;
    }
    if (args[1] === ROLE_SUBCOMMAND) {
      return false;
    }
  }
  if (args[0] === REGIONS_COMMAND) {
    return false;
  }
  return true;
};
var matchCommand = ({
  args,
  remotionRoot,
  logLevel,
  providerSpecifics,
  fullClientSpecifics
}) => {
  if (parsedLambdaCli.help || args.length === 0) {
    printHelp2(logLevel);
    quit(0);
  }
  if (requiresCredentials(args)) {
    providerSpecifics.checkCredentials();
  }
  if (args[0] === RENDER_COMMAND) {
    return renderCommand({
      args: args.slice(1),
      remotionRoot,
      logLevel,
      providerSpecifics
    });
  }
  if (args[0] === STILL_COMMAND) {
    return stillCommand({
      args: args.slice(1),
      remotionRoot,
      logLevel,
      providerSpecifics
    });
  }
  if (args[0] === COMPOSITIONS_COMMAND) {
    return compositionsCommand({
      args: args.slice(1),
      logLevel,
      providerSpecifics
    });
  }
  if (args[0] === FUNCTIONS_COMMAND) {
    return functionsCommand({
      args: args.slice(1),
      logLevel,
      fullClientSpecifics,
      providerSpecifics
    });
  }
  if (args[0] === QUOTAS_COMMAND) {
    return quotasCommand(args.slice(1), logLevel);
  }
  if (args[0] === POLICIES_COMMAND) {
    return policiesCommand(args.slice(1), logLevel);
  }
  if (args[0] === REGIONS_COMMAND) {
    return regionsCommand(logLevel);
  }
  if (args[0] === SITES_COMMAND) {
    return sitesCommand(args.slice(1), remotionRoot, logLevel, providerSpecifics);
  }
  if (args[0] === "upload") {
    Log.info({ indent: false, logLevel }, "The command has been renamed.");
    Log.info({ indent: false, logLevel }, "Before: remotion-lambda upload <entry-point>");
    Log.info({ indent: false, logLevel }, "After: remotion lambda sites create <entry-point>");
    quit(1);
  }
  if (args[0] === "deploy") {
    Log.info({ indent: false, logLevel }, "The command has been renamed.");
    Log.info({ indent: false, logLevel }, "Before: remotion-lambda deploy");
    Log.info({ indent: false, logLevel }, "After: remotion lambda functions deploy");
    quit(1);
  }
  if (args[0] === "ls") {
    Log.info({ indent: false, logLevel }, `The "ls" command does not exist.`);
    Log.info({ indent: false, logLevel }, `Did you mean "functions ls" or "sites ls"?`);
  }
  if (args[0] === "rm") {
    Log.info({ indent: false, logLevel }, `The "rm" command does not exist.`);
    Log.info({ indent: false, logLevel }, `Did you mean "functions rm" or "sites rm"?`);
  }
  if (args[0] === "deploy") {
    Log.info({ indent: false, logLevel }, `The "deploy" command does not exist.`);
    Log.info({ indent: false, logLevel }, `Did you mean "functions deploy"?`);
  }
  Log.error({ indent: false, logLevel }, `Command ${args[0]} not found.`);
  printHelp2(logLevel);
  quit(1);
};
var executeCommand = async (args, remotionRoot, logLevel, _providerSpecifics, fullClientSpecifics) => {
  try {
    const providerSpecifics = _providerSpecifics ?? LambdaClientInternals21.awsImplementation;
    await matchCommand({
      args,
      remotionRoot,
      logLevel,
      providerSpecifics,
      fullClientSpecifics: fullClientSpecifics ?? awsFullClientSpecifics
    });
  } catch (err) {
    const error = err;
    if (error.message.includes("The role defined for the function cannot be assumed by Lambda")) {
      if (parsedLambdaCli["custom-role-arn"]) {
        Log.error({ indent: false, logLevel }, `
	The role "${parsedLambdaCli["custom-role-arn"]}" does not exist or has the wrong policy assigned to it. Do either:
	- Remove the "--custom-role-arn" parameter and set up Remotion Lambda according to the setup guide
	- Make sure the role has the same policy assigned as the one returned by "npx ${BINARY_NAME14} ${POLICIES_COMMAND} ${ROLE_SUBCOMMAND}"
	
	Revisit ${DOCS_URL}/docs/lambda/setup and make sure you set up the role and role policy correctly. Also see the troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/permissions. The original error message is:
	`.trim());
      }
      Log.error({ indent: false, logLevel }, `
The role "${ROLE_NAME}" does not exist in your AWS account or has the wrong policy assigned to it. Common reasons:
- The name of the role is not "${ROLE_NAME}"
- The policy is not exactly as specified in the setup guide

Revisit ${DOCS_URL}/docs/lambda/setup and make sure you set up the role and role policy correctly. Also see the troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/permissions. The original error message is:
`.trim());
    }
    if (error.stack?.includes("AccessDenied")) {
      Log.error({ indent: false, logLevel }, `
AWS returned an "AccessDenied" error message meaning a permission is missing. Read the permissions troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/permissions. The original error message is:
`.trim());
    }
    if (error.stack?.includes("TooManyRequestsException")) {
      Log.error({ indent: false, logLevel }, `
AWS returned an "TooManyRequestsException" error message which could mean you reached the concurrency limit of AWS Lambda. You can increase the limit - read this troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/rate-limit. The original error message is:
`.trim());
    }
    if (error.stack?.includes("ConcurrentInvocationLimitExceeded")) {
      Log.error({ indent: false, logLevel }, `
AWS returned an "ConcurrentInvocationLimitExceeded" error message which could mean you reached the concurrency limit of AWS Lambda. You can increase the limit - read this troubleshooting page: ${DOCS_URL}/docs/lambda/troubleshooting/rate-limit. The original error message is:
`.trim());
    }
    if (error.stack?.includes("The security token included in the request is invalid")) {
      const keyButDoesntStartWithAki = LambdaClientInternals21.getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID") && !LambdaClientInternals21.getEnvVariable("REMOTION_AWS_ACCESS_KEY_ID").startsWith("AKI");
      const pureKeyButDoesntStartWithAki = LambdaClientInternals21.getEnvVariable("AWS_ACCESS_KEY_ID") && !LambdaClientInternals21.getEnvVariable("AWS_ACCESS_KEY_ID").startsWith("AKI");
      if (keyButDoesntStartWithAki || pureKeyButDoesntStartWithAki) {
        Log.error({ indent: false, logLevel }, `
	AWS returned an error message "The security token included in the request is invalid". A possible reason is that your AWS Access key ID is set but doesn't start with "AKI", which it usually should. The original message is: 
	`);
      } else {
        Log.error({ indent: false, logLevel }, `
AWS returned an error message "The security token included in the request is invalid". A possible reason for this is that you did not enable the region in your AWS account under "Account". The original message is: 
`);
      }
    }
    if (error instanceof RenderInternals7.SymbolicateableError) {
      await CliInternals23.printError(error, logLevel);
    } else {
      const frames = RenderInternals7.parseStack(error.stack?.split(`
`) ?? []);
      const errorWithStackFrame = new RenderInternals7.SymbolicateableError({
        message: error.message,
        frame: null,
        name: error.name,
        stack: error.stack,
        stackFrame: frames,
        chunk: null
      });
      await CliInternals23.printError(errorWithStackFrame, logLevel);
    }
    quit(1);
  }
};

// src/internals.ts
var LambdaInternals = {
  executeCommand,
  internalDeploySite,
  getLayers
};

// src/index.ts
var renderMediaOnLambda = NoReactInternals6.ENABLE_V5_BREAKING_CHANGES ? () => {
  throw new Error("renderMediaOnLambda() has moved to `@remotion/lambda-client`. Please import it from there.");
} : deprecatedRenderMediaOnLambda;
var getRenderProgress2 = NoReactInternals6.ENABLE_V5_BREAKING_CHANGES ? () => {
  throw new Error("getRenderProgress() has moved to `@remotion/lambda-client`. Please import it from there.");
} : deprecatedGetRenderProgress;
var renderStillOnLambda = NoReactInternals6.ENABLE_V5_BREAKING_CHANGES ? () => {
  throw new Error("renderStillOnLambda() has moved to `@remotion/lambda-client`. Please import it from there.");
} : deprecatedRenderStillOnLambda;
var presignUrl = NoReactInternals6.ENABLE_V5_BREAKING_CHANGES ? () => {
  throw new Error("presignUrl() has moved to `@remotion/lambda-client`. Please import it from there.");
} : deprecatedPresignUrl;
var getSites4 = NoReactInternals6.ENABLE_V5_BREAKING_CHANGES ? () => {
  throw new Error("getSites() has moved to `@remotion/lambda-client`. Please import it from there.");
} : deprecatedGetSites;
export {
  validateWebhookSignature,
  simulatePermissions,
  renderVideoOnLambda,
  renderStillOnLambda,
  renderMediaOnLambda,
  presignUrl,
  getUserPolicy,
  getSites4 as getSites,
  getRolePolicy,
  getRenderProgress2 as getRenderProgress,
  getRegions,
  getOrCreateBucket,
  getFunctions,
  getFunctionInfo,
  getCompositionsOnLambda2 as getCompositionsOnLambda,
  getAwsClient,
  estimatePrice,
  downloadMedia,
  deploySite,
  deployFunction,
  deleteSite,
  deleteRender,
  deleteFunction3 as deleteFunction,
  LambdaInternals
};
