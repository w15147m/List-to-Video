// src/api/iam-validation/role-permissions.ts
import {
  LAMBDA_INSIGHTS_PREFIX,
  LOG_GROUP_PREFIX,
  REMOTION_BUCKET_PREFIX,
  RENDER_FN_PREFIX
} from "@remotion/lambda-client/constants";
var rolePermissions = [
  {
    actions: ["s3:ListAllMyBuckets"],
    resource: ["*"]
  },
  {
    actions: [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:PutBucketAcl",
      "s3:GetObject",
      "s3:DeleteObject",
      "s3:PutObjectAcl",
      "s3:PutObject",
      "s3:GetBucketLocation"
    ],
    resource: [`arn:aws:s3:::${REMOTION_BUCKET_PREFIX}*`]
  },
  {
    actions: ["lambda:InvokeFunction"],
    resource: [`arn:aws:lambda:*:*:function:${RENDER_FN_PREFIX}*`]
  },
  {
    actions: ["logs:CreateLogGroup"],
    resource: [`arn:aws:logs:*:*:log-group:${LAMBDA_INSIGHTS_PREFIX}`]
  },
  {
    actions: ["logs:CreateLogStream", "logs:PutLogEvents"],
    resource: [
      `arn:aws:logs:*:*:log-group:${LOG_GROUP_PREFIX}${RENDER_FN_PREFIX}*`,
      `arn:aws:logs:*:*:log-group:${LAMBDA_INSIGHTS_PREFIX}:*`
    ]
  }
];

// src/api/iam-validation/user-permissions.ts
import {
  LOG_GROUP_PREFIX as LOG_GROUP_PREFIX2,
  REMOTION_BUCKET_PREFIX as REMOTION_BUCKET_PREFIX2,
  RENDER_FN_PREFIX as RENDER_FN_PREFIX2
} from "@remotion/lambda-client/constants";

// src/shared/hosted-layers.ts
var REMOTION_HOSTED_LAYER_ARN = `arn:aws:lambda:*:678892195805:layer:remotion-binaries-*`;

// src/api/iam-validation/user-permissions.ts
var requiredPermissions = [
  {
    id: "HandleQuotas",
    actions: [
      "servicequotas:GetServiceQuota",
      "servicequotas:GetAWSDefaultServiceQuota",
      "servicequotas:RequestServiceQuotaIncrease",
      "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota"
    ],
    resource: ["*"]
  },
  {
    id: "PermissionValidation",
    actions: ["iam:SimulatePrincipalPolicy"],
    resource: ["*"]
  },
  {
    id: "LambdaInvokation",
    actions: ["iam:PassRole"],
    resource: ["arn:aws:iam::*:role/remotion-lambda-role"]
  },
  {
    id: "Storage",
    actions: [
      "s3:GetObject",
      "s3:DeleteObject",
      "s3:PutObjectAcl",
      "s3:PutObject",
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:PutBucketAcl",
      "s3:DeleteBucket",
      "s3:PutBucketOwnershipControls",
      "s3:PutBucketPublicAccessBlock",
      "s3:PutLifecycleConfiguration"
    ],
    resource: [`arn:aws:s3:::${REMOTION_BUCKET_PREFIX2}*`]
  },
  {
    id: "BucketListing",
    actions: ["s3:ListAllMyBuckets"],
    resource: ["*"]
  },
  {
    id: "FunctionListing",
    actions: ["lambda:ListFunctions", "lambda:GetFunction"],
    resource: ["*"]
  },
  {
    id: "FunctionManagement",
    actions: [
      "lambda:InvokeAsync",
      "lambda:InvokeFunction",
      "lambda:CreateFunction",
      "lambda:DeleteFunction",
      "lambda:PutFunctionEventInvokeConfig",
      "lambda:PutRuntimeManagementConfig",
      "lambda:TagResource"
    ],
    resource: [`arn:aws:lambda:*:*:function:${RENDER_FN_PREFIX2}*`]
  },
  {
    id: "LogsRetention",
    actions: ["logs:CreateLogGroup", "logs:PutRetentionPolicy"],
    resource: [
      `arn:aws:logs:*:*:log-group:${LOG_GROUP_PREFIX2}${RENDER_FN_PREFIX2}*`
    ]
  },
  {
    id: "FetchBinaries",
    actions: ["lambda:GetLayerVersion"],
    resource: [
      REMOTION_HOSTED_LAYER_ARN,
      "arn:aws:lambda:*:580247275435:layer:LambdaInsightsExtension*"
    ]
  }
];

// src/api/iam-validation/suggested-policy.ts
var suggestedPolicy = {
  Version: "2012-10-17",
  Statement: [
    ...requiredPermissions.map((per) => {
      return {
        Sid: per.id,
        Effect: "Allow",
        Action: per.actions,
        Resource: per.resource
      };
    })
  ]
};
var suggestedRolePolicy = {
  Version: "2012-10-17",
  Statement: [
    ...rolePermissions.map((per, i) => {
      return {
        Sid: String(i),
        Effect: "Allow",
        Action: per.actions,
        Resource: per.resource
      };
    })
  ]
};
var getUserPolicy = () => JSON.stringify(suggestedPolicy, null, 2);
var ROLE_NAME = "remotion-lambda-role";
var getRolePolicy = () => JSON.stringify(suggestedRolePolicy, null, 2);
export {
  getUserPolicy,
  getRolePolicy,
  ROLE_NAME
};
