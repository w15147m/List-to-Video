import type { RequestHandler, RuntimePreference } from '@remotion/lambda-client';
import { type AwsRegion } from '@remotion/lambda-client';
import type { LogLevel } from '@remotion/renderer';
import type { CloudProvider, FullClientSpecifics, ProviderSpecifics } from '@remotion/serverless';
type MandatoryParameters = {
    createCloudWatchLogGroup: boolean;
    cloudWatchLogRetentionPeriodInDays?: number;
    region: AwsRegion;
    timeoutInSeconds: number;
    memorySizeInMb: number;
};
type OptionalParameters = {
    diskSizeInMb: number;
    customRoleArn: string | undefined;
    enableLambdaInsights: boolean;
    indent: boolean;
    logLevel: LogLevel;
    vpcSubnetIds: string | undefined;
    vpcSecurityGroupIds: string | undefined;
    runtimePreference: RuntimePreference;
    requestHandler: RequestHandler | null;
};
export type DeployFunctionInput = MandatoryParameters & Partial<OptionalParameters>;
export type DeployFunctionOutput = {
    functionName: string;
    alreadyExisted: boolean;
};
export declare const internalDeployFunction: <Provider extends CloudProvider>(params: MandatoryParameters & OptionalParameters & {
    providerSpecifics: ProviderSpecifics<Provider>;
    fullClientSpecifics: FullClientSpecifics<Provider>;
}) => Promise<DeployFunctionOutput>;
export declare const deployFunction: ({ createCloudWatchLogGroup, memorySizeInMb, region, timeoutInSeconds, cloudWatchLogRetentionPeriodInDays, customRoleArn, enableLambdaInsights, indent, logLevel, enableV5Runtime, vpcSubnetIds, vpcSecurityGroupIds, runtimePreference, diskSizeInMb, requestHandler, }: DeployFunctionInput & {
    enableV5Runtime?: boolean;
}) => Promise<DeployFunctionOutput>;
export {};
