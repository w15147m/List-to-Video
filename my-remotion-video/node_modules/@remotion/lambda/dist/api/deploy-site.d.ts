import { type GitSource, type WebpackOverrideFn } from '@remotion/bundler';
import type { AwsRegion, RequestHandler } from '@remotion/lambda-client';
import { type AwsProvider } from '@remotion/lambda-client';
import type { ToOptions } from '@remotion/renderer';
import type { BrowserSafeApis } from '@remotion/renderer/client';
import type { FullClientSpecifics, ProviderSpecifics, UploadDirProgress } from '@remotion/serverless';
type MandatoryParameters = {
    entryPoint: string;
    bucketName: string;
    region: AwsRegion;
};
type OptionalParameters = {
    siteName: string;
    options: {
        onBundleProgress?: (progress: number) => void;
        onUploadProgress?: (upload: UploadDirProgress) => void;
        onDiffingProgress?: (bytes: number, done: boolean) => void;
        webpackOverride?: WebpackOverrideFn;
        ignoreRegisterRootWarning?: boolean;
        enableCaching?: boolean;
        publicDir?: string | null;
        rootDir?: string;
        bypassBucketNameValidation?: boolean;
    };
    privacy: 'public' | 'no-acl';
    gitSource: GitSource | null;
    indent: boolean;
    forcePathStyle: boolean;
    requestHandler: RequestHandler | null;
} & ToOptions<typeof BrowserSafeApis.optionsMap.deploySiteLambda>;
export type DeploySiteInput = MandatoryParameters & Partial<OptionalParameters>;
export type DeploySiteOutput = Promise<{
    serveUrl: string;
    siteName: string;
    stats: {
        uploadedFiles: number;
        deletedFiles: number;
        untouchedFiles: number;
    };
}>;
export declare const internalDeploySite: (args_0: MandatoryParameters & {
    siteName: string;
    options: {
        onBundleProgress?: (progress: number) => void;
        onUploadProgress?: (upload: UploadDirProgress) => void;
        onDiffingProgress?: (bytes: number, done: boolean) => void;
        webpackOverride?: WebpackOverrideFn;
        ignoreRegisterRootWarning?: boolean;
        enableCaching?: boolean;
        publicDir?: string | null;
        rootDir?: string;
        bypassBucketNameValidation?: boolean;
    };
    privacy: "public" | "no-acl";
    gitSource: GitSource | null;
    indent: boolean;
    forcePathStyle: boolean;
    requestHandler: RequestHandler | null;
} & ToOptions<{
    readonly logLevel: {
        cliFlag: "log";
        name: string;
        ssrName: string;
        description: () => import("react/jsx-runtime").JSX.Element;
        docLink: string;
        getValue: ({ commandLine }: {
            commandLine: Record<string, unknown>;
        }) => {
            value: import("@remotion/renderer").LogLevel;
            source: string;
        };
        setConfig: (newLogLevel: import("@remotion/renderer").LogLevel) => void;
        type: import("@remotion/renderer").LogLevel;
    };
    readonly throwIfSiteExists: {
        cliFlag: string;
        description: () => string;
        docLink: string;
        getValue: ({ commandLine }: {
            commandLine: Record<string, unknown>;
        }) => {
            source: string;
            value: boolean;
        };
        name: string;
        setConfig: () => never;
        ssrName: string;
        type: boolean;
    };
}> & {
    providerSpecifics: ProviderSpecifics<AwsProvider>;
    fullClientSpecifics: FullClientSpecifics<AwsProvider>;
}) => Promise<{
    serveUrl: string;
    siteName: string;
    stats: {
        uploadedFiles: number;
        deletedFiles: number;
        untouchedFiles: number;
    };
}>;
export declare const deploySite: (args: DeploySiteInput) => Promise<{
    serveUrl: string;
    siteName: string;
    stats: {
        uploadedFiles: number;
        deletedFiles: number;
        untouchedFiles: number;
    };
}>;
export {};
