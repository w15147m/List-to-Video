"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteSite = exports.internalDeleteSite = void 0;
const lambda_client_1 = require("@remotion/lambda-client");
const constants_1 = require("@remotion/lambda-client/constants");
const internalDeleteSite = async ({ bucketName, siteName, region, onAfterItemDeleted, providerSpecifics, forcePathStyle, requestHandler, }) => {
    const accountId = await providerSpecifics.getAccountId({ region });
    let files = await providerSpecifics.listObjects({
        bucketName,
        // The `/` is important to not accidentially delete sites with the same name but containing a suffix.
        prefix: `${(0, constants_1.getSitesKey)(siteName)}/`,
        region,
        expectedBucketOwner: accountId,
        forcePathStyle,
        requestHandler: null,
    });
    let totalSize = 0;
    while (files.length > 0) {
        totalSize += files.reduce((a, b) => {
            var _a;
            return a + ((_a = b.Size) !== null && _a !== void 0 ? _a : 0);
        }, 0);
        await lambda_client_1.LambdaClientInternals.cleanItems({
            list: files.map((f) => f.Key),
            bucket: bucketName,
            onAfterItemDeleted: onAfterItemDeleted !== null && onAfterItemDeleted !== void 0 ? onAfterItemDeleted : (() => undefined),
            onBeforeItemDeleted: () => undefined,
            region,
            providerSpecifics,
            forcePathStyle,
            requestHandler,
        });
        files = await providerSpecifics.listObjects({
            bucketName,
            // The `/` is important to not accidentially delete sites with the same name but containing a suffix.
            prefix: `${(0, constants_1.getSitesKey)(siteName)}/`,
            region,
            expectedBucketOwner: accountId,
            forcePathStyle,
            requestHandler,
        });
    }
    return {
        totalSizeInBytes: totalSize,
    };
};
exports.internalDeleteSite = internalDeleteSite;
/*
 * @description Removes a Remotion project from your Cloud Storage bucket.
 * @see [Documentation](https://remotion.dev/docs/cloudrun/deletesite)
 */
const deleteSite = (props) => {
    var _a, _b, _c;
    return (0, exports.internalDeleteSite)({
        ...props,
        onAfterItemDeleted: (_a = props.onAfterItemDeleted) !== null && _a !== void 0 ? _a : null,
        forcePathStyle: (_b = props.forcePathStyle) !== null && _b !== void 0 ? _b : false,
        providerSpecifics: lambda_client_1.LambdaClientInternals.awsImplementation,
        requestHandler: (_c = props.requestHandler) !== null && _c !== void 0 ? _c : null,
    });
};
exports.deleteSite = deleteSite;
