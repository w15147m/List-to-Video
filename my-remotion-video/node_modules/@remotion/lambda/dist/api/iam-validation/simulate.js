"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simulatePermissions = exports.logPermissionOutput = void 0;
const client_sts_1 = require("@aws-sdk/client-sts");
const lambda_client_1 = require("@remotion/lambda-client");
const simulate_rule_1 = require("./simulate-rule");
const user_permissions_1 = require("./user-permissions");
const getEmojiForStatus = (decision) => {
    switch (decision) {
        case 'allowed':
            return '✅';
        default:
            return '❌';
    }
};
const logPermissionOutput = (output) => {
    return [getEmojiForStatus(output.decision), output.name].join(' ');
};
exports.logPermissionOutput = logPermissionOutput;
/*
 * @description Simulates calls using the AWS Simulator to validate the correct permissions.
 * @see [Documentation](https://remotion.dev/docs/lambda/simulatepermissions)
 */
const simulatePermissions = async (options) => {
    var _a;
    const callerIdentity = await lambda_client_1.LambdaClientInternals.getStsClient(options.region, options.requestHandler).send(new client_sts_1.GetCallerIdentityCommand({}));
    if (!(callerIdentity === null || callerIdentity === void 0 ? void 0 : callerIdentity.Arn)) {
        throw new Error('No valid AWS Caller Identity detected');
    }
    const callerIdentityArnComponents = callerIdentity.Arn.match(/arn:aws:([^:]+)::(\d+):([^/]+)(.*)/);
    if (!callerIdentityArnComponents) {
        throw new Error('Unknown AWS Caller Identity ARN detected');
    }
    const callerIdentityArnType = callerIdentityArnComponents[1];
    let callerArn;
    if (callerIdentityArnType === 'iam' &&
        callerIdentityArnComponents[3] === 'user') {
        callerArn = callerIdentity.Arn;
    }
    else if (callerIdentityArnType === 'sts' &&
        callerIdentityArnComponents[3] === 'assumed-role') {
        const assumedRoleComponents = callerIdentityArnComponents[4].match(/\/([^/]+)\/(.*)/);
        if (!assumedRoleComponents) {
            throw new Error('Unsupported AWS Caller Identity as Assumed-Role ARN detected');
        }
        callerArn = `arn:aws:iam::${callerIdentityArnComponents[2]}:role/${assumedRoleComponents[1]}`;
    }
    else {
        throw new Error('Unsupported AWS Caller Identity ARN detected');
    }
    const results = [];
    for (const per of user_permissions_1.requiredPermissions) {
        const result = await (0, simulate_rule_1.simulateRule)({
            actionNames: per.actions,
            arn: callerArn,
            region: options.region,
            resource: per.resource,
            retries: 2,
            requestHandler: options.requestHandler,
        });
        for (const res of result) {
            results.push(res);
            (_a = options.onSimulation) === null || _a === void 0 ? void 0 : _a.call(options, res);
        }
    }
    return { results };
};
exports.simulatePermissions = simulatePermissions;
