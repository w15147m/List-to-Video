"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployFunction = exports.internalDeployFunction = void 0;
const lambda_client_1 = require("@remotion/lambda-client");
const constants_1 = require("@remotion/lambda-client/constants");
const error_handling_1 = require("@remotion/renderer/error-handling");
const version_1 = require("remotion/version");
const full_client_implementation_1 = require("../functions/full-client-implementation");
const function_zip_path_1 = require("../shared/function-zip-path");
const get_layers_1 = require("../shared/get-layers");
const validate_custom_role_arn_1 = require("../shared/validate-custom-role-arn");
const validate_retention_period_1 = require("../shared/validate-retention-period");
const validate_timeout_1 = require("../shared/validate-timeout");
const internalDeployFunction = async (params) => {
    var _a, _b;
    lambda_client_1.LambdaClientInternals.validateMemorySize(params.memorySizeInMb);
    (0, validate_timeout_1.validateTimeout)(params.timeoutInSeconds);
    lambda_client_1.LambdaClientInternals.validateAwsRegion(params.region);
    (0, validate_retention_period_1.validateCloudWatchRetentionPeriod)(params.cloudWatchLogRetentionPeriodInDays);
    lambda_client_1.LambdaClientInternals.validateDiskSizeInMb(params.diskSizeInMb);
    (0, validate_custom_role_arn_1.validateCustomRoleArn)(params.customRoleArn);
    (0, get_layers_1.validateRuntimePreference)(params.runtimePreference);
    const functionName = (0, lambda_client_1.speculateFunctionName)({
        diskSizeInMb: params.diskSizeInMb,
        memorySizeInMb: params.memorySizeInMb,
        timeoutInSeconds: params.timeoutInSeconds,
    });
    const accountId = await params.providerSpecifics.getAccountId({
        region: params.region,
    });
    const fns = await params.providerSpecifics.getFunctions({
        compatibleOnly: true,
        region: params.region,
    });
    const alreadyDeployed = fns.find((f) => f.version === version_1.VERSION &&
        f.memorySizeInMb === params.memorySizeInMb &&
        f.timeoutInSeconds === params.timeoutInSeconds &&
        f.diskSizeInMb === params.diskSizeInMb);
    const created = await params.fullClientSpecifics.createFunction({
        createCloudWatchLogGroup: params.createCloudWatchLogGroup,
        region: params.region,
        zipFile: function_zip_path_1.FUNCTION_ZIP_ARM64,
        functionName,
        accountId,
        memorySizeInMb: params.memorySizeInMb,
        timeoutInSeconds: params.timeoutInSeconds,
        retentionInDays: (_a = params.cloudWatchLogRetentionPeriodInDays) !== null && _a !== void 0 ? _a : lambda_client_1.LambdaClientInternals.DEFAULT_CLOUDWATCH_RETENTION_PERIOD,
        alreadyCreated: Boolean(alreadyDeployed),
        ephemerealStorageInMb: params.diskSizeInMb,
        customRoleArn: params.customRoleArn,
        enableLambdaInsights: (_b = params.enableLambdaInsights) !== null && _b !== void 0 ? _b : false,
        logLevel: params.logLevel,
        vpcSubnetIds: params.vpcSubnetIds,
        vpcSecurityGroupIds: params.vpcSecurityGroupIds,
        runtimePreference: params.runtimePreference,
        requestHandler: null,
    });
    if (!created.FunctionName) {
        throw new Error('Lambda was created but has no name');
    }
    return {
        functionName: created.FunctionName,
        alreadyExisted: Boolean(alreadyDeployed),
    };
};
exports.internalDeployFunction = internalDeployFunction;
const errorHandled = (0, error_handling_1.wrapWithErrorHandling)(exports.internalDeployFunction);
/*
 * @description Creates an AWS Lambda function in your account that will be able to render a video in the cloud.
 * @see [Documentation](https://remotion.dev/docs/lambda/deployfunction)
 */
const deployFunction = ({ createCloudWatchLogGroup, memorySizeInMb, region, timeoutInSeconds, cloudWatchLogRetentionPeriodInDays, customRoleArn, enableLambdaInsights, indent, logLevel, enableV5Runtime, vpcSubnetIds, vpcSecurityGroupIds, runtimePreference, diskSizeInMb, requestHandler, }) => {
    if (enableV5Runtime) {
        console.warn('The `enableV5Runtime` option is now on by default. No need to specify it anymore.');
    }
    return errorHandled({
        indent: indent !== null && indent !== void 0 ? indent : false,
        logLevel: logLevel !== null && logLevel !== void 0 ? logLevel : 'info',
        createCloudWatchLogGroup,
        customRoleArn: customRoleArn !== null && customRoleArn !== void 0 ? customRoleArn : undefined,
        diskSizeInMb: diskSizeInMb !== null && diskSizeInMb !== void 0 ? diskSizeInMb : constants_1.DEFAULT_EPHEMERAL_STORAGE_IN_MB,
        enableLambdaInsights: enableLambdaInsights !== null && enableLambdaInsights !== void 0 ? enableLambdaInsights : false,
        memorySizeInMb,
        region,
        timeoutInSeconds,
        cloudWatchLogRetentionPeriodInDays,
        vpcSubnetIds,
        vpcSecurityGroupIds,
        runtimePreference: runtimePreference !== null && runtimePreference !== void 0 ? runtimePreference : 'default',
        providerSpecifics: lambda_client_1.LambdaClientInternals.awsImplementation,
        fullClientSpecifics: full_client_implementation_1.awsFullClientSpecifics,
        requestHandler,
    });
};
exports.deployFunction = deployFunction;
