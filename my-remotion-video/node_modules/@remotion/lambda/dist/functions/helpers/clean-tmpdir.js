"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteTmpDir = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = require("node:path");
const deleteAllFilesInAFolderRecursively = (path) => {
    const files = node_fs_1.default.readdirSync(path);
    files.forEach((file) => {
        const filePath = (0, node_path_1.join)(path, file);
        try {
            const stat = node_fs_1.default.statSync(filePath);
            if (stat.isDirectory()) {
                deleteAllFilesInAFolderRecursively(filePath);
            }
            else {
                node_fs_1.default.unlinkSync(filePath);
            }
        }
        catch (_a) {
            // Can fail if file was already deleted by cleanup. In that case
            // let's ignore it
        }
    });
    if (path !== '/tmp') {
        node_fs_1.default.rmSync(path, { recursive: true, force: true });
    }
};
const deleteTmpDir = () => {
    deleteAllFilesInAFolderRecursively('/tmp');
};
exports.deleteTmpDir = deleteTmpDir;
