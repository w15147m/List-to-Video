"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDirectory = void 0;
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const get_etag_1 = require("./get-etag");
// Function to recursively read a directory and return a list of files
// with their etags and file names
const readDirectory = ({ dir, etags, originalDir, onProgress, }) => {
    const files = fs.readdirSync(dir);
    for (const file of files) {
        if (file.startsWith('.DS_Store'))
            continue;
        const filePath = path.join(dir, file);
        if (fs.lstatSync(filePath).isDirectory()) {
            etags = {
                ...etags,
                ...(0, exports.readDirectory)({
                    dir: filePath,
                    etags,
                    originalDir,
                    onProgress,
                }),
            };
            continue;
        }
        if (fs.lstatSync(filePath).isSymbolicLink()) {
            const realPath = fs.realpathSync(filePath);
            etags[path.relative(originalDir, filePath)] = (0, get_etag_1.getEtagOfFile)(realPath, onProgress);
        }
        else {
            etags[path.relative(originalDir, filePath)] = (0, get_etag_1.getEtagOfFile)(filePath, onProgress);
        }
    }
    // Return the list of files with their etags and file names
    return etags;
};
exports.readDirectory = readDirectory;
