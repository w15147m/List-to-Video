"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEtagOfFile = void 0;
const node_crypto_1 = __importDefault(require("node:crypto"));
const node_fs_1 = __importDefault(require("node:fs"));
const chunk = 1024 * 1024 * 5; // 5MB
const md5 = (data) => node_crypto_1.default
    .createHash('md5')
    .update(data)
    .digest('hex');
const getEtagOfFile = (filePath, onProgress) => {
    const calc = async () => {
        const size = await node_fs_1.default.promises.stat(filePath).then((s) => s.size);
        if (size <= chunk) {
            const buffer = await node_fs_1.default.promises.readFile(filePath);
            return `"${md5(buffer)}"`;
        }
        const stream = node_fs_1.default.createReadStream(filePath, {
            highWaterMark: chunk,
        });
        const md5Chunks = [];
        const chunksNumber = Math.ceil(size / chunk);
        return new Promise((resolve, reject) => {
            stream.on('data', (c) => {
                md5Chunks.push(md5(c));
                onProgress(c.length);
            });
            stream.on('end', () => {
                resolve(`"${md5(Buffer.from(md5Chunks.join(''), 'hex'))}-${chunksNumber}"`);
            });
            stream.on('error', (err) => {
                reject(err);
            });
        });
    };
    let tag = null;
    return async () => {
        if (tag !== null) {
            return tag;
        }
        tag = await calc();
        return tag;
    };
};
exports.getEtagOfFile = getEtagOfFile;
