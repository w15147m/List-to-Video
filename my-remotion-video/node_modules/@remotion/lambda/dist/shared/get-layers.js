"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLayers = exports.validateRuntimePreference = void 0;
const lambda_client_1 = require("@remotion/lambda-client");
const hosted_layers_1 = require("./hosted-layers");
const validateRuntimePreference = (option) => {
    if (!option) {
        return;
    }
    if (!lambda_client_1.LambdaClientInternals.runtimePreferenceOptions.includes(option)) {
        throw new Error(`Invalid runtime preference ${option}. Must be one of ${lambda_client_1.LambdaClientInternals.runtimePreferenceOptions.join(', ')}`);
    }
};
exports.validateRuntimePreference = validateRuntimePreference;
const getLayers = ({ option, region, }) => {
    const layers = hosted_layers_1.hostedLayers[region];
    return layers.filter((layer) => {
        if (layer.layerArn.includes('emoji-apple')) {
            return option === 'apple-emojis';
        }
        if (layer.layerArn.includes('emoji-google')) {
            return option !== 'apple-emojis';
        }
        if (layer.layerArn.includes('cjk')) {
            return option !== 'apple-emojis';
        }
        if (layer.layerArn.includes('chromium')) {
            return true;
        }
        if (layer.layerArn.includes('fonts')) {
            return true;
        }
        throw new Error('Unhandled layer type ');
    });
};
exports.getLayers = getLayers;
