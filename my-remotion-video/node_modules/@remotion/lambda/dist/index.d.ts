import type { AwsRegion, CustomCredentials, DeleteFunctionInput, DeleteRenderInput, EnhancedErrorInfo, EstimatePriceInput, GetAwsClientInput, GetAwsClientOutput, GetCompositionsOnLambdaInput, GetCompositionsOnLambdaOutput, GetFunctionsInput, GetOrCreateBucketInput, GetOrCreateBucketOutput, GetRenderProgressInput, GetSitesInput, GetSitesOutput, RenderMediaOnLambdaInput, RenderMediaOnLambdaOutput, RenderProgress, RenderStillOnLambdaInput, RenderStillOnLambdaOutput } from '@remotion/lambda-client';
import { deleteFunction, deleteRender, estimatePrice, getAwsClient, getCompositionsOnLambda, getFunctions, renderVideoOnLambda, validateWebhookSignature } from '@remotion/lambda-client';
import type { FunctionInfo } from '@remotion/serverless';
import type { DeleteSiteInput, DeleteSiteOutput } from './api/delete-site';
import { deleteSite } from './api/delete-site';
import type { DeployFunctionInput, DeployFunctionOutput } from './api/deploy-function';
import { deployFunction } from './api/deploy-function';
import type { DeploySiteInput, DeploySiteOutput } from './api/deploy-site';
import { deploySite } from './api/deploy-site';
import type { DownloadMediaInput, DownloadMediaOutput } from './api/download-media';
import { downloadMedia } from './api/download-media';
import type { GetFunctionInfoInput } from './api/get-function-info';
import { getFunctionInfo } from './api/get-function-info';
import { getOrCreateBucket } from './api/get-or-create-bucket';
import { getRegions } from './api/get-regions';
import type { SimulatePermissionsInput, SimulatePermissionsOutput } from './api/iam-validation/simulate';
import { simulatePermissions } from './api/iam-validation/simulate';
import { getRolePolicy, getUserPolicy } from './api/iam-validation/suggested-policy';
import { LambdaInternals, type _InternalOverallRenderProgress } from './internals';
export type { WebhookPayload } from '@remotion/lambda-client';
/**
 * @deprecated Import this from `@remotion/lambda-client` instead
 */
declare const renderMediaOnLambda: (options: RenderMediaOnLambdaInput) => Promise<RenderMediaOnLambdaOutput>;
/**
 * @deprecated Import this from `@remotion/lambda-client` instead
 */
declare const getRenderProgress: (input: GetRenderProgressInput) => Promise<RenderProgress>;
/**
 * @deprecated Import this from `@remotion/lambda-client` instead
 */
declare const renderStillOnLambda: (input: RenderStillOnLambdaInput & {
    quality?: never;
    dumpBrowserLogs?: boolean;
}) => Promise<RenderStillOnLambdaOutput>;
/**
 * @deprecated Import this from `@remotion/lambda-client` instead
 */
declare const presignUrl: <CheckIfObjectExists extends boolean = false>({ region, bucketName, objectKey, checkIfObjectExists, expiresInSeconds, forcePathStyle, requestHandler, }: import("@remotion/lambda-client").PresignUrlInput<CheckIfObjectExists>) => Promise<CheckIfObjectExists extends true ? string | null : string>;
/**
 * @deprecated Import this from `@remotion/lambda-client` instead
 */
declare const getSites: ({ region, forceBucketName, forcePathStyle, requestHandler, }: GetSitesInput) => Promise<GetSitesOutput>;
export { deleteFunction, deleteRender, deleteSite, deployFunction, deploySite, downloadMedia, estimatePrice, getAwsClient, getCompositionsOnLambda, getFunctionInfo, getFunctions, getOrCreateBucket, getRegions, getRenderProgress, getRolePolicy, getSites, getUserPolicy, LambdaInternals, presignUrl, renderMediaOnLambda, renderStillOnLambda, renderVideoOnLambda, simulatePermissions, validateWebhookSignature, };
export type { AwsRegion, CustomCredentials, DeleteFunctionInput, DeleteRenderInput, DeleteSiteInput, DeleteSiteOutput, DeployFunctionInput, DeployFunctionOutput, DeploySiteInput, DeploySiteOutput, DownloadMediaInput, DownloadMediaOutput, EnhancedErrorInfo, EstimatePriceInput, FunctionInfo, GetAwsClientInput, GetAwsClientOutput, GetCompositionsOnLambdaInput, GetCompositionsOnLambdaOutput, GetFunctionInfoInput, GetFunctionsInput, GetOrCreateBucketInput, GetOrCreateBucketOutput, GetRenderProgressInput, GetSitesInput, GetSitesOutput, RenderMediaOnLambdaInput, RenderMediaOnLambdaOutput, RenderProgress, RenderStillOnLambdaInput, RenderStillOnLambdaOutput, SimulatePermissionsInput, SimulatePermissionsOutput, };
export { _InternalOverallRenderProgress };
