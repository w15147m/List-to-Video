"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDeployProgressBar = exports.makeDiffingProgressBar = exports.makeBucketProgress = exports.makeBundleProgress = void 0;
const cli_1 = require("@remotion/cli");
const no_react_1 = require("remotion/no-react");
const makeBundleProgress = ({ progress, doneIn }) => {
    return [
        `${doneIn === null ? 'Bundling' : 'Bundled'} site`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(progress / 100, false),
        doneIn === null
            ? `${Math.round(progress)}%`
            : cli_1.CliInternals.chalk.gray(`${doneIn}ms`),
    ].join(' ');
};
exports.makeBundleProgress = makeBundleProgress;
const makeBucketProgress = ({ doneIn }) => {
    const progress = doneIn === null ? 0 : 1;
    return [
        `${doneIn === null ? 'Creating' : 'Created'} bucket`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(progress, false),
        doneIn === null ? `0/1` : cli_1.CliInternals.chalk.gray(`${doneIn}ms`),
    ].join(' ');
};
exports.makeBucketProgress = makeBucketProgress;
const makeUploadDiff = ({ stats }) => {
    if (!stats) {
        return null;
    }
    if (stats.addedFiles === 0 && stats.removedFiles === 0) {
        return cli_1.CliInternals.chalk.gray(`(Unchanged)`);
    }
    const total = stats.addedFiles + stats.removedFiles;
    return cli_1.CliInternals.chalk.gray(`(${[
        stats.addedFiles ? `+${stats.addedFiles}` : null,
        stats.removedFiles ? `-${stats.removedFiles}` : null,
    ]
        .filter(no_react_1.NoReactInternals.truthy)
        .join(',')} ${total === 1 ? 'file' : 'files'})`);
};
const makeDiffingProgressBar = ({ bytesProcessed, doneIn, }) => {
    const progress = doneIn === null ? 0 : 1;
    if (bytesProcessed === 0) {
        return null;
    }
    return [
        `${doneIn === null ? 'Calculating changes' : 'Calculated changes'}`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(progress, false),
        doneIn === null
            ? bytesProcessed === 0
                ? null
                : `${cli_1.CliInternals.formatBytes(bytesProcessed)}`
            : cli_1.CliInternals.chalk.gray(`${doneIn}ms`),
    ]
        .filter(no_react_1.NoReactInternals.truthy)
        .join(' ');
};
exports.makeDiffingProgressBar = makeDiffingProgressBar;
const makeDeployProgressBar = ({ sizeUploaded, totalSize, doneIn, stats, }) => {
    const progress = totalSize === null ? 0 : sizeUploaded / totalSize;
    return [
        `${doneIn === null ? 'Uploading' : 'Uploaded'} to S3`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(progress, false),
        doneIn === null
            ? typeof totalSize === 'number'
                ? `${cli_1.CliInternals.formatBytes(sizeUploaded)}/${cli_1.CliInternals.formatBytes(totalSize)}`
                : ''
            : cli_1.CliInternals.chalk.gray(`${doneIn}ms`),
        makeUploadDiff({ stats }),
    ]
        .filter(no_react_1.NoReactInternals.truthy)
        .join(' ');
};
exports.makeDeployProgressBar = makeDeployProgressBar;
