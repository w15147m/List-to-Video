"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebhookCustomData = void 0;
const client_1 = require("@remotion/renderer/client");
const node_fs_1 = __importDefault(require("node:fs"));
const node_os_1 = __importDefault(require("node:os"));
const node_path_1 = __importDefault(require("node:path"));
const args_1 = require("../args");
const log_1 = require("../log");
const getWebhookCustomData = (logLevel) => {
    const flagName = client_1.BrowserSafeApis.options.webhookCustomDataOption.cliFlag;
    const webhookFlag = args_1.parsedLambdaCli[flagName];
    if (!webhookFlag) {
        return null;
    }
    const jsonFile = node_path_1.default.resolve(process.cwd(), webhookFlag);
    try {
        if (node_fs_1.default.existsSync(jsonFile)) {
            const rawJsonData = node_fs_1.default.readFileSync(jsonFile, 'utf-8');
            return JSON.parse(rawJsonData);
        }
        return JSON.parse(webhookFlag);
    }
    catch (err) {
        log_1.Log.error({ indent: false, logLevel }, `You passed --${flagName} but it was neither valid JSON nor a file path to a valid JSON file. Provided value: ${webhookFlag}`);
        log_1.Log.info({ indent: false, logLevel }, 'Got the following value:', webhookFlag);
        log_1.Log.error({ indent: false, logLevel }, 'Check that your input is parseable using `JSON.parse` and try again.');
        if (node_os_1.default.platform() === 'win32') {
            const logOptions = {
                indent: false,
                logLevel,
            };
            log_1.Log.warn(logOptions, 'Note: Windows handles escaping of quotes very weirdly in the command line.');
            log_1.Log.warn(logOptions, 'This might have led to you having this problem.');
            log_1.Log.warn(logOptions, 'Consider using the alternative API for --props which is to pass');
            log_1.Log.warn(logOptions, 'a path to a JSON file:');
            log_1.Log.warn(logOptions, `  --${flagName}=path/to/props.json`);
        }
        process.exit(1);
    }
};
exports.getWebhookCustomData = getWebhookCustomData;
