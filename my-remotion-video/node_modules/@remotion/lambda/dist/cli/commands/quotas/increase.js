"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.quotasIncreaseCommand = exports.INCREASE_SUBCOMMAND = void 0;
const client_service_quotas_1 = require("@aws-sdk/client-service-quotas");
const lambda_client_1 = require("@remotion/lambda-client");
const constants_1 = require("@remotion/lambda-client/constants");
const node_process_1 = require("node:process");
const _1 = require(".");
const args_1 = require("../../args");
const get_aws_region_1 = require("../../get-aws-region");
const confirm_1 = require("../../helpers/confirm");
const quit_1 = require("../../helpers/quit");
const log_1 = require("../../log");
exports.INCREASE_SUBCOMMAND = 'increase';
const makeQuotaUrl = ({ region, quotaId, }) => {
    return `https://${region}.console.aws.amazon.com/servicequotas/home/services/lambda/quotas/${quotaId}`;
};
const quotasIncreaseCommand = async (logLevel, requestHandler) => {
    var _a, _b, _c;
    const region = (0, get_aws_region_1.getAwsRegion)();
    const [concurrencyLimit, defaultConcurrencyLimit, changes] = await Promise.all([
        lambda_client_1.LambdaClientInternals.getServiceQuotasClient(region, requestHandler).send(new client_service_quotas_1.GetServiceQuotaCommand({
            QuotaCode: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA,
            ServiceCode: 'lambda',
        })),
        lambda_client_1.LambdaClientInternals.getServiceQuotasClient(region, requestHandler).send(new client_service_quotas_1.GetAWSDefaultServiceQuotaCommand({
            QuotaCode: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA,
            ServiceCode: 'lambda',
        })),
        lambda_client_1.LambdaClientInternals.getServiceQuotasClient(region, requestHandler).send(new client_service_quotas_1.ListRequestedServiceQuotaChangeHistoryByQuotaCommand({
            QuotaCode: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA,
            ServiceCode: 'lambda',
        })),
    ]);
    const openCase = (_a = changes.RequestedQuotas) === null || _a === void 0 ? void 0 : _a.find((r) => r.Status === 'CASE_OPENED');
    if (openCase) {
        const logOptions = {
            indent: false,
            logLevel,
        };
        log_1.Log.warn(logOptions, `A request to increase it to ${openCase.DesiredValue} is already pending:`);
        log_1.Log.warn(logOptions, `https://${region}.console.aws.amazon.com/support/home#/case/?displayId=${openCase.CaseId}`);
        (0, node_process_1.exit)(1);
    }
    const concurrencyCurrent = (_b = concurrencyLimit.Quota) === null || _b === void 0 ? void 0 : _b.Value;
    const defaultConcurrency = (_c = defaultConcurrencyLimit.Quota) === null || _c === void 0 ? void 0 : _c.Value;
    const increaseRecommended = concurrencyCurrent <= defaultConcurrency;
    if (!increaseRecommended && !args_1.forceFlagProvided) {
        log_1.Log.error({ indent: false, logLevel }, `Current limit of ${concurrencyCurrent} is already increased over the default (${defaultConcurrency}).`);
        log_1.Log.info({ indent: false, logLevel }, 'You can force the increase with the --force flag.');
        log_1.Log.info({ indent: false, logLevel }, 'You are more likely to get an increase if you attach a reason. Go so by going to the AWS console:');
        log_1.Log.info({ indent: false, logLevel }, makeQuotaUrl({ quotaId: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA, region }));
        (0, quit_1.quit)(1);
    }
    const newLimit = Math.floor(concurrencyCurrent / 5000) * 5000 + 5000;
    log_1.Log.info({ indent: false, logLevel }, `Sending request to AWS to increase concurrency limit from ${concurrencyCurrent} to ${newLimit}.`);
    if (!(await (0, confirm_1.confirmCli)({
        allowForceFlag: true,
        delMessage: 'Send? (Y/n)',
    }))) {
        (0, quit_1.quit)(1);
    }
    try {
        await lambda_client_1.LambdaClientInternals.getServiceQuotasClient(region, requestHandler).send(new client_service_quotas_1.RequestServiceQuotaIncreaseCommand({
            QuotaCode: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA,
            DesiredValue: newLimit,
            ServiceCode: 'lambda',
        }));
    }
    catch (err) {
        if (err.name === 'DependencyAccessDeniedException') {
            log_1.Log.error({ indent: false, logLevel }, 'Could not request increase because this is a sub-account of another AWS account.');
            log_1.Log.error({ indent: false, logLevel }, `Please go to ${makeQuotaUrl({
                quotaId: constants_1.LAMBDA_CONCURRENCY_LIMIT_QUOTA,
                region,
            })} to request the increase via the AWS console.`);
            return;
        }
        throw err;
    }
    log_1.Log.info({ indent: false, logLevel }, `Requested increase successfully. Run "${constants_1.BINARY_NAME} ${_1.QUOTAS_COMMAND}" to check whether your request was approved.`);
};
exports.quotasIncreaseCommand = quotasIncreaseCommand;
