"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionsCommand = exports.FUNCTIONS_COMMAND = void 0;
const cli_1 = require("@remotion/cli");
const constants_1 = require("@remotion/lambda-client/constants");
const quit_1 = require("../../helpers/quit");
const deploy_1 = require("./deploy");
const ls_1 = require("./ls");
const rm_1 = require("./rm");
const rmall_1 = require("./rmall");
exports.FUNCTIONS_COMMAND = 'functions';
const printFunctionsHelp = (logLevel) => {
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.FUNCTIONS_COMMAND} <subcommand>`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, 'Available subcommands:');
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, '');
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.FUNCTIONS_COMMAND} ${ls_1.FUNCTIONS_LS_SUBCOMMAND}`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Lists the functions currently deployed'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, '');
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.FUNCTIONS_COMMAND} ${deploy_1.FUNCTIONS_DEPLOY_SUBCOMMAND}`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Deploy a new Lambda function'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, '');
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.FUNCTIONS_COMMAND} ${rm_1.FUNCTIONS_RM_SUBCOMMAND} <function-name>`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Delete a Lambda function'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, '');
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.FUNCTIONS_COMMAND} ${rmall_1.FUNCTIONS_RMALL_SUBCOMMAND}`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Delete all functions in selected region'));
};
const functionsCommand = ({ args, logLevel, fullClientSpecifics, providerSpecifics, }) => {
    if (args[0] === ls_1.FUNCTIONS_LS_SUBCOMMAND) {
        return (0, ls_1.functionsLsCommand)({ logLevel, providerSpecifics });
    }
    if (args[0] === rm_1.FUNCTIONS_RM_SUBCOMMAND) {
        return (0, rm_1.functionsRmCommand)(args.slice(1), logLevel);
    }
    if (args[0] === rmall_1.FUNCTIONS_RMALL_SUBCOMMAND) {
        return (0, rmall_1.functionsRmallCommand)({ logLevel, providerSpecifics });
    }
    if (args[0] === deploy_1.FUNCTIONS_DEPLOY_SUBCOMMAND) {
        return (0, deploy_1.functionsDeploySubcommand)({
            logLevel,
            fullClientSpecifics,
            providerSpecifics,
        });
    }
    if (args[0]) {
        cli_1.CliInternals.Log.error({ indent: false, logLevel }, `Subcommand ${args[0]} not found.`);
        printFunctionsHelp(logLevel);
        (0, quit_1.quit)(1);
    }
    printFunctionsHelp(logLevel);
};
exports.functionsCommand = functionsCommand;
