"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sitesRmSubcommand = exports.SITES_RM_COMMAND = void 0;
const cli_1 = require("@remotion/cli");
const lambda_client_1 = require("@remotion/lambda-client");
const serverless_1 = require("@remotion/serverless");
const delete_site_1 = require("../../../api/delete-site");
const args_1 = require("../../args");
const get_aws_region_1 = require("../../get-aws-region");
const confirm_1 = require("../../helpers/confirm");
const quit_1 = require("../../helpers/quit");
const log_1 = require("../../log");
exports.SITES_RM_COMMAND = 'rm';
const sitesRmSubcommand = async (args, logLevel, implementation) => {
    var _a;
    if (args.length === 0) {
        log_1.Log.error({ indent: false, logLevel }, 'No site name was passed. Run the command again and pass another argument <site-name>.');
        (0, quit_1.quit)(1);
    }
    if (args[0] === '()') {
        log_1.Log.info({ indent: false, logLevel }, 'No sites to remove.');
        return;
    }
    const region = (0, get_aws_region_1.getAwsRegion)();
    const deployedSites = await (0, lambda_client_1.getSites)({
        region,
        forceBucketName: args_1.parsedLambdaCli['force-bucket-name'],
    });
    const bucketName = (_a = args_1.parsedLambdaCli['force-bucket-name']) !== null && _a !== void 0 ? _a : (await (0, serverless_1.internalGetOrCreateBucket)({
        region,
        enableFolderExpiry: false,
        customCredentials: null,
        providerSpecifics: implementation,
        forcePathStyle: false,
        skipPutAcl: false,
        requestHandler: null,
    })).bucketName;
    for (const siteName of args) {
        const site = deployedSites.sites.find((s) => s.id === siteName.trim());
        if (!site) {
            log_1.Log.error({ indent: false, logLevel }, `No site ${siteName.trim()} was found in your bucket ${bucketName}.`);
            return (0, quit_1.quit)(1);
        }
        if (!(await (0, confirm_1.confirmCli)({
            delMessage: `Site ${site.id} in bucket ${site.bucketName} (${cli_1.CliInternals.formatBytes(site.sizeInBytes)}): Delete? (Y/n)`,
            allowForceFlag: true,
        }))) {
            (0, quit_1.quit)(1);
        }
        const { totalSizeInBytes: totalSize } = await (0, delete_site_1.deleteSite)({
            bucketName,
            siteName,
            region,
            onAfterItemDeleted: ({ itemName }) => {
                log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray(`Deleted ${itemName}`));
            },
        });
        log_1.Log.info({ indent: false, logLevel }, `Deleted site ${siteName} and freed up ${cli_1.CliInternals.formatBytes(totalSize)}.`);
    }
};
exports.sitesRmSubcommand = sitesRmSubcommand;
