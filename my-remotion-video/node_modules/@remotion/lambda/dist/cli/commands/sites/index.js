"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sitesCommand = exports.SITES_COMMAND = void 0;
const cli_1 = require("@remotion/cli");
const constants_1 = require("@remotion/lambda-client/constants");
const quit_1 = require("../../helpers/quit");
const create_1 = require("./create");
const ls_1 = require("./ls");
const rm_1 = require("./rm");
const rmall_1 = require("./rmall");
exports.SITES_COMMAND = 'sites';
const printSitesHelp = (logLevel) => {
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.SITES_COMMAND} <subcommand>`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, 'Available subcommands:');
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.SITES_COMMAND} ${create_1.SITES_CREATE_SUBCOMMAND} <entry-point>`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Creates a new site based on a Remotion project'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.SITES_COMMAND} ${ls_1.SITES_LS_SUBCOMMAND}`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Lists the sites currently deployed'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.SITES_COMMAND} ${rm_1.SITES_RM_COMMAND} <site-id>`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Remove a site from the S3 bucket.'));
    cli_1.CliInternals.Log.info({ indent: false, logLevel });
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${exports.SITES_COMMAND} ${rmall_1.SITES_RMALL_COMMAND}`);
    cli_1.CliInternals.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Remove all sites from the S3 bucket.'));
};
const sitesCommand = (args, remotionRoot, logLevel, providerSpecifics) => {
    if (args[0] === ls_1.SITES_LS_SUBCOMMAND) {
        return (0, ls_1.sitesLsSubcommand)(logLevel);
    }
    if (args[0] === rm_1.SITES_RM_COMMAND) {
        return (0, rm_1.sitesRmSubcommand)(args.slice(1), logLevel, providerSpecifics);
    }
    if (args[0] === rmall_1.SITES_RMALL_COMMAND) {
        return (0, rmall_1.sitesRmallSubcommand)(logLevel, providerSpecifics);
    }
    if (args[0] === create_1.SITES_CREATE_SUBCOMMAND) {
        return (0, create_1.sitesCreateSubcommand)(args.slice(1), remotionRoot, logLevel, providerSpecifics);
    }
    if (args[0]) {
        cli_1.CliInternals.Log.error({ indent: false, logLevel }, `Subcommand ${args[0]} not found.`);
        printSitesHelp(logLevel);
        (0, quit_1.quit)(1);
    }
    printSitesHelp(logLevel);
};
exports.sitesCommand = sitesCommand;
