"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProgressString = exports.makeArtifactProgress = void 0;
const cli_1 = require("@remotion/cli");
const renderer_1 = require("@remotion/renderer");
const serverless_1 = require("@remotion/serverless");
const no_react_1 = require("remotion/no-react");
const makeEvaluationProgress = (overall) => {
    const timeToLaunch = overall.compositionValidated
        ? overall.compositionValidated - overall.functionLaunched
        : null;
    if (timeToLaunch) {
        return [
            `Got composition`.padEnd(cli_1.CliInternals.LABEL_WIDTH),
            cli_1.CliInternals.makeProgressBar(1, false),
            cli_1.CliInternals.chalk.gray(`${timeToLaunch}ms`),
        ].join(' ');
    }
    if (overall.serveUrlOpened) {
        return [
            `Calculating metadata`.padEnd(cli_1.CliInternals.LABEL_WIDTH),
            cli_1.CliInternals.makeProgressBar(0.5, false),
            `${overall.currentTime - overall.serveUrlOpened}ms`,
        ].join(' ');
    }
    return [
        `Visiting Site`.padEnd(cli_1.CliInternals.LABEL_WIDTH),
        cli_1.CliInternals.makeProgressBar(0, false),
        `${overall.currentTime - overall.functionLaunched}ms`,
    ].join(' ');
};
const makeInvokeProgress = (overall) => {
    var _a, _b;
    const invokeProgress = {
        lambdasInvoked: overall.lambdasInvoked,
        totalLambdas: (_b = (_a = overall.renderMetadata) === null || _a === void 0 ? void 0 : _a.estimatedRenderLambdaInvokations) !== null && _b !== void 0 ? _b : null,
    };
    const { lambdasInvoked, totalLambdas } = invokeProgress;
    const progress = totalLambdas === null ? 0 : lambdasInvoked / totalLambdas;
    const topLine = [
        `${progress === 0 ? 'Invoked' : 'Invoking'} lambdas`.padEnd(cli_1.CliInternals.LABEL_WIDTH),
        cli_1.CliInternals.makeProgressBar(progress, false),
        progress === 1
            ? cli_1.CliInternals.chalk.gray(`${lambdasInvoked}/${totalLambdas}`)
            : totalLambdas === null
                ? null
                : `${lambdasInvoked}/${totalLambdas}`,
    ].join(' ');
    return [
        topLine,
        overall.retriesInfo.length > 0
            ? `! Retrying chunk${overall.retriesInfo.length === 1 ? '' : 's'} ${overall.retriesInfo.map((r) => r.chunk).join(', ')}`
            : null,
    ].filter(no_react_1.NoReactInternals.truthy);
};
const makeRenderProgress = (progress) => {
    var _a, _b;
    const framesEncoded = (_b = (_a = progress.encodingStatus) === null || _a === void 0 ? void 0 : _a.framesEncoded) !== null && _b !== void 0 ? _b : 0;
    const totalFrames = progress.renderMetadata && progress.renderMetadata.type === 'video'
        ? renderer_1.RenderInternals.getFramesToRender(progress.renderMetadata.frameRange, progress.renderMetadata.everyNthFrame).length
        : null;
    const renderProgress = totalFrames === null ? 0 : progress.framesRendered / totalFrames;
    const encodingProgress = totalFrames === null ? 0 : framesEncoded / totalFrames;
    const frames = totalFrames === null ? null : `${progress.framesRendered}/${totalFrames}`;
    const first = [
        (progress.timeToRenderFrames === null
            ? 'Rendering frames'
            : 'Rendered frames').padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(renderProgress, false),
        progress.timeToRenderFrames === null
            ? frames
            : cli_1.CliInternals.chalk.gray(`${progress.timeToRenderFrames}ms`),
    ]
        .filter(serverless_1.truthy)
        .join(' ');
    const second = [
        `${progress.timeToEncode === null ? 'Encoding' : 'Encoded'} frames`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(encodingProgress, false),
        progress.timeToEncode === null
            ? totalFrames === null
                ? null
                : `${framesEncoded}/${totalFrames}`
            : cli_1.CliInternals.chalk.gray(`${progress.timeToEncode}ms`),
    ]
        .filter(serverless_1.truthy)
        .join(' ');
    return [first, second];
};
function getTotalFrames(status) {
    return status.renderMetadata && status.renderMetadata.type === 'video'
        ? renderer_1.RenderInternals.getFramesToRender(status.renderMetadata.frameRange, status.renderMetadata.everyNthFrame).length
        : null;
}
const makeCombinationProgress = (prog) => {
    var _a, _b;
    const encodingProgress = {
        framesEncoded: (_b = (_a = prog.encodingStatus) === null || _a === void 0 ? void 0 : _a.framesEncoded) !== null && _b !== void 0 ? _b : 0,
        combinedFrames: prog.combinedFrames,
        timeToCombine: prog.timeToCombine,
    };
    const totalFrames = getTotalFrames(prog);
    const { combinedFrames, timeToCombine } = encodingProgress;
    const progress = totalFrames === null ? 0 : combinedFrames / totalFrames;
    return [
        `${timeToCombine === null ? 'Combining' : 'Combined'} chunks`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        cli_1.CliInternals.makeProgressBar(progress, false),
        timeToCombine === null
            ? `${Math.round(progress * 100)}%`
            : cli_1.CliInternals.chalk.gray(`${timeToCombine}ms`),
    ].join(' ');
};
const makeDownloadProgress = (downloadInfo) => {
    return [
        `${downloadInfo.doneIn === null ? 'Downloading' : 'Downloaded'} video`.padEnd(cli_1.CliInternals.LABEL_WIDTH, ' '),
        downloadInfo.totalSize === null
            ? cli_1.CliInternals.getFileSizeDownloadBar(downloadInfo.downloaded)
            : cli_1.CliInternals.makeProgressBar(downloadInfo.downloaded / downloadInfo.totalSize, false),
        downloadInfo.doneIn === null
            ? [
                `${cli_1.CliInternals.formatBytes(downloadInfo.downloaded)}`,
                downloadInfo.totalSize === null
                    ? null
                    : `${cli_1.CliInternals.formatBytes(downloadInfo.totalSize)}`,
            ]
                .filter(no_react_1.NoReactInternals.truthy)
                .join('/')
            : cli_1.CliInternals.chalk.gray(`${downloadInfo.doneIn}ms`),
    ].join(' ');
};
const makeTopRow = (overall) => {
    const timeoutInSeconds = Math.round((overall.timeoutTimestamp - Date.now()) / 1000);
    if (overall.done) {
        return null;
    }
    const str = [
        `${Math.round(overall.overallProgress * 100)}%`,
        overall.renderMetadata
            ? `${overall.renderMetadata.estimatedTotalLambdaInvokations} λ`
            : null,
        `${overall.costs.displayCost}`,
        timeoutInSeconds < 0
            ? `${cli_1.CliInternals.chalk.red('Timeout reached')} - Expecting crash shortly`
            : `Timeout ${timeoutInSeconds}s`,
    ]
        .filter(no_react_1.NoReactInternals.truthy)
        .join(' • ');
    return cli_1.CliInternals.chalk.gray(str);
};
const ARTIFACTS_SHOWN = 5;
const makeArtifactProgress = (artifactProgress) => {
    if (artifactProgress.length === 0) {
        return null;
    }
    const artifacts = artifactProgress
        .slice(0, ARTIFACTS_SHOWN)
        .map((artifact) => {
        return [
            // TODO: Whitelabel S3
            cli_1.CliInternals.chalk.blue(`+ S3`.padEnd(cli_1.CliInternals.LABEL_WIDTH)),
            cli_1.CliInternals.chalk.blue(cli_1.CliInternals.makeHyperlink({
                url: artifact.s3Url,
                fallback: artifact.s3Key,
                text: artifact.s3Key,
            })),
            cli_1.CliInternals.chalk.gray(`${cli_1.CliInternals.formatBytes(artifact.sizeInBytes)}`),
        ].join(' ');
    })
        .filter(serverless_1.truthy)
        .join('\n');
    const moreSizeCombined = artifactProgress
        .slice(ARTIFACTS_SHOWN)
        .reduce((acc, artifact) => acc + artifact.sizeInBytes, 0);
    const more = artifactProgress.length > ARTIFACTS_SHOWN
        ? cli_1.CliInternals.chalk.gray(`${' '.repeat(cli_1.CliInternals.LABEL_WIDTH)} ${artifactProgress.length - ARTIFACTS_SHOWN} more artifact${artifactProgress.length - ARTIFACTS_SHOWN === 1 ? '' : 's'} ${cli_1.CliInternals.formatBytes(moreSizeCombined)}`)
        : null;
    return [artifacts, more].filter(serverless_1.truthy).join('\n');
};
exports.makeArtifactProgress = makeArtifactProgress;
const makeProgressString = ({ downloadInfo, overall, }) => {
    return [
        makeTopRow(overall),
        makeEvaluationProgress(overall),
        ...makeInvokeProgress(overall),
        ...makeRenderProgress(overall),
        makeCombinationProgress(overall),
        downloadInfo ? makeDownloadProgress(downloadInfo) : null,
        (0, exports.makeArtifactProgress)(overall.artifacts),
    ]
        .filter(no_react_1.NoReactInternals.truthy)
        .join('\n');
};
exports.makeProgressString = makeProgressString;
