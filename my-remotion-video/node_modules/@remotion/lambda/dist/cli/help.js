"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printHelp = void 0;
const cli_1 = require("@remotion/cli");
const constants_1 = require("@remotion/lambda-client/constants");
const compositions_1 = require("./commands/compositions");
const functions_1 = require("./commands/functions");
const policies_1 = require("./commands/policies/policies");
const quotas_1 = require("./commands/quotas");
const regions_1 = require("./commands/regions");
const render_1 = require("./commands/render/render");
const sites_1 = require("./commands/sites");
const still_1 = require("./commands/still");
const log_1 = require("./log");
const packagejson = require('../../package.json');
const printHelp = (logLevel) => {
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${packagejson.version} Â© ${new Date().getFullYear()} The Remotion developers`);
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, 'Available commands:');
    log_1.Log.info({ indent: false, logLevel }, '');
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${render_1.RENDER_COMMAND} <s3-url> <composition-id>`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Render a video in the cloud.'));
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${still_1.STILL_COMMAND} <s3-url> <composition-id>`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Render a still image in the cloud.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${functions_1.FUNCTIONS_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Deploy and manage AWS Lambda functions.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${sites_1.SITES_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Deploy and manage Remotion projects.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${compositions_1.COMPOSITIONS_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Print list of composition IDs from a serve URL.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${policies_1.POLICIES_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('View and validate AWS policy files.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${regions_1.REGIONS_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Show the list of AWS regions supported.'));
    log_1.Log.info({ indent: false, logLevel });
    log_1.Log.info({ indent: false, logLevel }, `${constants_1.BINARY_NAME} ${quotas_1.QUOTAS_COMMAND}`);
    log_1.Log.info({ indent: false, logLevel }, cli_1.CliInternals.chalk.gray('Shows AWS quotas and allows to increase them.'));
};
exports.printHelp = printHelp;
