"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositionManagerProvider = exports.compositionsRef = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const CompositionManagerContext_js_1 = require("./CompositionManagerContext.js");
const RenderAssetManager_js_1 = require("./RenderAssetManager.js");
const ResolveCompositionConfig_js_1 = require("./ResolveCompositionConfig.js");
const SequenceManager_js_1 = require("./SequenceManager.js");
const shared_audio_tags_js_1 = require("./audio/shared-audio-tags.js");
exports.compositionsRef = react_1.default.createRef();
const CompositionManagerProvider = ({ children, numberOfAudioTags, onlyRenderComposition, currentCompositionMetadata, audioLatencyHint, }) => {
    var _a;
    // Wontfix, expected to have
    const [compositions, setCompositions] = (0, react_1.useState)([]);
    const currentcompositionsRef = (0, react_1.useRef)(compositions);
    const [folders, setFolders] = (0, react_1.useState)([]);
    const [canvasContent, setCanvasContent] = (0, react_1.useState)(null);
    const updateCompositions = (0, react_1.useCallback)((updateComps) => {
        setCompositions((comps) => {
            const updated = updateComps(comps);
            currentcompositionsRef.current = updated;
            return updated;
        });
    }, []);
    const registerComposition = (0, react_1.useCallback)((comp) => {
        updateCompositions((comps) => {
            if (comps.find((c) => c.id === comp.id)) {
                throw new Error(`Multiple composition with id ${comp.id} are registered.`);
            }
            const value = [...comps, comp]
                .slice()
                .sort((a, b) => a.nonce - b.nonce);
            return value;
        });
    }, [updateCompositions]);
    const unregisterComposition = (0, react_1.useCallback)((id) => {
        setCompositions((comps) => {
            return comps.filter((c) => c.id !== id);
        });
    }, []);
    const registerFolder = (0, react_1.useCallback)((name, parent) => {
        setFolders((prevFolders) => {
            return [
                ...prevFolders,
                {
                    name,
                    parent,
                },
            ];
        });
    }, []);
    const unregisterFolder = (0, react_1.useCallback)((name, parent) => {
        setFolders((prevFolders) => {
            return prevFolders.filter((p) => !(p.name === name && p.parent === parent));
        });
    }, []);
    (0, react_1.useImperativeHandle)(exports.compositionsRef, () => {
        return {
            getCompositions: () => currentcompositionsRef.current,
        };
    }, []);
    const composition = compositions.find((c) => (canvasContent === null || canvasContent === void 0 ? void 0 : canvasContent.type) === 'composition'
        ? c.id === canvasContent.compositionId
        : null);
    const updateCompositionDefaultProps = (0, react_1.useCallback)((id, newDefaultProps) => {
        setCompositions((comps) => {
            const updated = comps.map((c) => {
                if (c.id === id) {
                    return {
                        ...c,
                        defaultProps: newDefaultProps,
                    };
                }
                return c;
            });
            return updated;
        });
    }, []);
    const contextValue = (0, react_1.useMemo)(() => {
        return {
            compositions,
            folders,
            currentCompositionMetadata,
            canvasContent,
        };
    }, [compositions, folders, currentCompositionMetadata, canvasContent]);
    const setters = (0, react_1.useMemo)(() => {
        return {
            registerComposition,
            unregisterComposition,
            registerFolder,
            unregisterFolder,
            setCanvasContent,
            updateCompositionDefaultProps,
            onlyRenderComposition,
        };
    }, [
        registerComposition,
        registerFolder,
        unregisterComposition,
        unregisterFolder,
        updateCompositionDefaultProps,
        onlyRenderComposition,
    ]);
    return ((0, jsx_runtime_1.jsx)(CompositionManagerContext_js_1.CompositionManager.Provider, { value: contextValue, children: (0, jsx_runtime_1.jsx)(CompositionManagerContext_js_1.CompositionSetters.Provider, { value: setters, children: (0, jsx_runtime_1.jsx)(SequenceManager_js_1.SequenceManagerProvider, { children: (0, jsx_runtime_1.jsx)(RenderAssetManager_js_1.RenderAssetManagerProvider, { children: (0, jsx_runtime_1.jsx)(ResolveCompositionConfig_js_1.ResolveCompositionConfig, { children: (0, jsx_runtime_1.jsx)(shared_audio_tags_js_1.SharedAudioContextProvider, { numberOfAudioTags: numberOfAudioTags, component: (_a = composition === null || composition === void 0 ? void 0 : composition.component) !== null && _a !== void 0 ? _a : null, audioLatencyHint: audioLatencyHint, children: children }) }) }) }) }) }));
};
exports.CompositionManagerProvider = CompositionManagerProvider;
