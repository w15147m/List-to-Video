import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, AWSServiceAccessNotEnabledException, DependencyAccessDeniedException, IllegalArgumentException, InvalidPaginationTokenException, InvalidResourceStateException, NoAvailableOrganizationException, NoSuchResourceException, OrganizationNotInAllFeaturesModeException, QuotaExceededException, ResourceAlreadyExistsException, ServiceException, ServiceQuotaTemplateNotInUseException, TagPolicyViolationException, TemplatesNotAvailableInRegionException, TooManyRequestsException, TooManyTagsException, } from "../models/models_0";
import { ServiceQuotasServiceException as __BaseException } from "../models/ServiceQuotasServiceException";
export const se_AssociateServiceQuotaTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateServiceQuotaTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceQuotaIncreaseRequestFromTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteServiceQuotaIncreaseRequestFromTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateServiceQuotaTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateServiceQuotaTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAssociationForServiceQuotaTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("GetAssociationForServiceQuotaTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAWSDefaultServiceQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("GetAWSDefaultServiceQuota");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRequestedServiceQuotaChangeCommand = async (input, context) => {
    const headers = sharedHeaders("GetRequestedServiceQuotaChange");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceQuota");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceQuotaIncreaseRequestFromTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceQuotaIncreaseRequestFromTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAWSDefaultServiceQuotasCommand = async (input, context) => {
    const headers = sharedHeaders("ListAWSDefaultServiceQuotas");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRequestedServiceQuotaChangeHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListRequestedServiceQuotaChangeHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRequestedServiceQuotaChangeHistoryByQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("ListRequestedServiceQuotaChangeHistoryByQuota");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceQuotaIncreaseRequestsInTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceQuotaIncreaseRequestsInTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceQuotasCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceQuotas");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutServiceQuotaIncreaseRequestIntoTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("PutServiceQuotaIncreaseRequestIntoTemplate");
    let body;
    body = JSON.stringify(se_PutServiceQuotaIncreaseRequestIntoTemplateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestServiceQuotaIncreaseCommand = async (input, context) => {
    const headers = sharedHeaders("RequestServiceQuotaIncrease");
    let body;
    body = JSON.stringify(se_RequestServiceQuotaIncreaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateServiceQuotaTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceQuotaIncreaseRequestFromTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateServiceQuotaTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAssociationForServiceQuotaTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAWSDefaultServiceQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAWSDefaultServiceQuotaResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRequestedServiceQuotaChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRequestedServiceQuotaChangeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceQuotaResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceQuotaIncreaseRequestFromTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceQuotaIncreaseRequestFromTemplateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAWSDefaultServiceQuotasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAWSDefaultServiceQuotasResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRequestedServiceQuotaChangeHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRequestedServiceQuotaChangeHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRequestedServiceQuotaChangeHistoryByQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRequestedServiceQuotaChangeHistoryByQuotaResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceQuotaIncreaseRequestsInTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServiceQuotaIncreaseRequestsInTemplateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceQuotasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServiceQuotasResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutServiceQuotaIncreaseRequestIntoTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutServiceQuotaIncreaseRequestIntoTemplateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RequestServiceQuotaIncreaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RequestServiceQuotaIncreaseResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AWSServiceAccessNotEnabledException":
        case "com.amazonaws.servicequotas#AWSServiceAccessNotEnabledException":
            throw await de_AWSServiceAccessNotEnabledExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.servicequotas#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "DependencyAccessDeniedException":
        case "com.amazonaws.servicequotas#DependencyAccessDeniedException":
            throw await de_DependencyAccessDeniedExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.servicequotas#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationNotInAllFeaturesModeException":
        case "com.amazonaws.servicequotas#OrganizationNotInAllFeaturesModeException":
            throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.servicequotas#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "TemplatesNotAvailableInRegionException":
        case "com.amazonaws.servicequotas#TemplatesNotAvailableInRegionException":
            throw await de_TemplatesNotAvailableInRegionExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.servicequotas#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "IllegalArgumentException":
        case "com.amazonaws.servicequotas#IllegalArgumentException":
            throw await de_IllegalArgumentExceptionRes(parsedOutput, context);
        case "NoSuchResourceException":
        case "com.amazonaws.servicequotas#NoSuchResourceException":
            throw await de_NoSuchResourceExceptionRes(parsedOutput, context);
        case "ServiceQuotaTemplateNotInUseException":
        case "com.amazonaws.servicequotas#ServiceQuotaTemplateNotInUseException":
            throw await de_ServiceQuotaTemplateNotInUseExceptionRes(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.servicequotas#InvalidPaginationTokenException":
            throw await de_InvalidPaginationTokenExceptionRes(parsedOutput, context);
        case "QuotaExceededException":
        case "com.amazonaws.servicequotas#QuotaExceededException":
            throw await de_QuotaExceededExceptionRes(parsedOutput, context);
        case "InvalidResourceStateException":
        case "com.amazonaws.servicequotas#InvalidResourceStateException":
            throw await de_InvalidResourceStateExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.servicequotas#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "TagPolicyViolationException":
        case "com.amazonaws.servicequotas#TagPolicyViolationException":
            throw await de_TagPolicyViolationExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.servicequotas#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AWSServiceAccessNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AWSServiceAccessNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DependencyAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DependencyAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IllegalArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IllegalArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPaginationTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPaginationTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidResourceStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourceStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoAvailableOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoAvailableOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoSuchResourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoSuchResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OrganizationNotInAllFeaturesModeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OrganizationNotInAllFeaturesModeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_QuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new QuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaTemplateNotInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaTemplateNotInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TagPolicyViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TagPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TemplatesNotAvailableInRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TemplatesNotAvailableInRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_PutServiceQuotaIncreaseRequestIntoTemplateRequest = (input, context) => {
    return take(input, {
        AwsRegion: [],
        DesiredValue: __serializeFloat,
        QuotaCode: [],
        ServiceCode: [],
    });
};
const se_RequestServiceQuotaIncreaseRequest = (input, context) => {
    return take(input, {
        ContextId: [],
        DesiredValue: __serializeFloat,
        QuotaCode: [],
        ServiceCode: [],
    });
};
const de_GetAWSDefaultServiceQuotaResponse = (output, context) => {
    return take(output, {
        Quota: (_) => de_ServiceQuota(_, context),
    });
};
const de_GetRequestedServiceQuotaChangeResponse = (output, context) => {
    return take(output, {
        RequestedQuota: (_) => de_RequestedServiceQuotaChange(_, context),
    });
};
const de_GetServiceQuotaIncreaseRequestFromTemplateResponse = (output, context) => {
    return take(output, {
        ServiceQuotaIncreaseRequestInTemplate: (_) => de_ServiceQuotaIncreaseRequestInTemplate(_, context),
    });
};
const de_GetServiceQuotaResponse = (output, context) => {
    return take(output, {
        Quota: (_) => de_ServiceQuota(_, context),
    });
};
const de_ListAWSDefaultServiceQuotasResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Quotas: (_) => de_ServiceQuotaListDefinition(_, context),
    });
};
const de_ListRequestedServiceQuotaChangeHistoryByQuotaResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RequestedQuotas: (_) => de_RequestedServiceQuotaChangeHistoryListDefinition(_, context),
    });
};
const de_ListRequestedServiceQuotaChangeHistoryResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RequestedQuotas: (_) => de_RequestedServiceQuotaChangeHistoryListDefinition(_, context),
    });
};
const de_ListServiceQuotaIncreaseRequestsInTemplateResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ServiceQuotaIncreaseRequestInTemplateList: (_) => de_ServiceQuotaIncreaseRequestInTemplateList(_, context),
    });
};
const de_ListServiceQuotasResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Quotas: (_) => de_ServiceQuotaListDefinition(_, context),
    });
};
const de_PutServiceQuotaIncreaseRequestIntoTemplateResponse = (output, context) => {
    return take(output, {
        ServiceQuotaIncreaseRequestInTemplate: (_) => de_ServiceQuotaIncreaseRequestInTemplate(_, context),
    });
};
const de_RequestedServiceQuotaChange = (output, context) => {
    return take(output, {
        CaseId: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DesiredValue: __limitedParseDouble,
        GlobalQuota: __expectBoolean,
        Id: __expectString,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        QuotaArn: __expectString,
        QuotaCode: __expectString,
        QuotaContext: _json,
        QuotaName: __expectString,
        QuotaRequestedAtLevel: __expectString,
        Requester: __expectString,
        ServiceCode: __expectString,
        ServiceName: __expectString,
        Status: __expectString,
        Unit: __expectString,
    });
};
const de_RequestedServiceQuotaChangeHistoryListDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RequestedServiceQuotaChange(entry, context);
    });
    return retVal;
};
const de_RequestServiceQuotaIncreaseResponse = (output, context) => {
    return take(output, {
        RequestedQuota: (_) => de_RequestedServiceQuotaChange(_, context),
    });
};
const de_ServiceQuota = (output, context) => {
    return take(output, {
        Adjustable: __expectBoolean,
        ErrorReason: _json,
        GlobalQuota: __expectBoolean,
        Period: _json,
        QuotaAppliedAtLevel: __expectString,
        QuotaArn: __expectString,
        QuotaCode: __expectString,
        QuotaContext: _json,
        QuotaName: __expectString,
        ServiceCode: __expectString,
        ServiceName: __expectString,
        Unit: __expectString,
        UsageMetric: _json,
        Value: __limitedParseDouble,
    });
};
const de_ServiceQuotaIncreaseRequestInTemplate = (output, context) => {
    return take(output, {
        AwsRegion: __expectString,
        DesiredValue: __limitedParseDouble,
        GlobalQuota: __expectBoolean,
        QuotaCode: __expectString,
        QuotaName: __expectString,
        ServiceCode: __expectString,
        ServiceName: __expectString,
        Unit: __expectString,
    });
};
const de_ServiceQuotaIncreaseRequestInTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceQuotaIncreaseRequestInTemplate(entry, context);
    });
    return retVal;
};
const de_ServiceQuotaListDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceQuota(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `ServiceQuotasV20190624.${operation}`,
    };
}
